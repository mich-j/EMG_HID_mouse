
urz_wskazujace.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f5f4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b0  0800f788  0800f788  0001f788  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fc38  0800fc38  0002036c  2**0
                  CONTENTS
  4 .ARM          00000000  0800fc38  0800fc38  0002036c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800fc38  0800fc38  0002036c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fc38  0800fc38  0001fc38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fc3c  0800fc3c  0001fc3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000036c  20000000  0800fc40  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d98  20000370  0800ffac  00020370  2**3
                  ALLOC
 10 ._user_heap_stack 00001400  20001108  0800ffac  00021108  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002036c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002612a  00000000  00000000  0002039c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004a60  00000000  00000000  000464c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019d0  00000000  00000000  0004af28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017a8  00000000  00000000  0004c8f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000274a8  00000000  00000000  0004e0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000203c2  00000000  00000000  00075548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dede4  00000000  00000000  0009590a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001746ee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007d34  00000000  00000000  00174744  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000370 	.word	0x20000370
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f76c 	.word	0x0800f76c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000374 	.word	0x20000374
 80001cc:	0800f76c 	.word	0x0800f76c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b086      	sub	sp, #24
 8000c8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c8e:	463b      	mov	r3, r7
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
 8000c94:	605a      	str	r2, [r3, #4]
 8000c96:	609a      	str	r2, [r3, #8]
 8000c98:	60da      	str	r2, [r3, #12]
 8000c9a:	611a      	str	r2, [r3, #16]
 8000c9c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c9e:	4b2a      	ldr	r3, [pc, #168]	; (8000d48 <MX_ADC1_Init+0xc0>)
 8000ca0:	4a2a      	ldr	r2, [pc, #168]	; (8000d4c <MX_ADC1_Init+0xc4>)
 8000ca2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000ca4:	4b28      	ldr	r3, [pc, #160]	; (8000d48 <MX_ADC1_Init+0xc0>)
 8000ca6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000caa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000cac:	4b26      	ldr	r3, [pc, #152]	; (8000d48 <MX_ADC1_Init+0xc0>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000cb2:	4b25      	ldr	r3, [pc, #148]	; (8000d48 <MX_ADC1_Init+0xc0>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000cb8:	4b23      	ldr	r3, [pc, #140]	; (8000d48 <MX_ADC1_Init+0xc0>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cbe:	4b22      	ldr	r3, [pc, #136]	; (8000d48 <MX_ADC1_Init+0xc0>)
 8000cc0:	2204      	movs	r2, #4
 8000cc2:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000cc4:	4b20      	ldr	r3, [pc, #128]	; (8000d48 <MX_ADC1_Init+0xc0>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000cca:	4b1f      	ldr	r3, [pc, #124]	; (8000d48 <MX_ADC1_Init+0xc0>)
 8000ccc:	2201      	movs	r2, #1
 8000cce:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000cd0:	4b1d      	ldr	r3, [pc, #116]	; (8000d48 <MX_ADC1_Init+0xc0>)
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000cd6:	4b1c      	ldr	r3, [pc, #112]	; (8000d48 <MX_ADC1_Init+0xc0>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8000cde:	4b1a      	ldr	r3, [pc, #104]	; (8000d48 <MX_ADC1_Init+0xc0>)
 8000ce0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8000ce4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000ce6:	4b18      	ldr	r3, [pc, #96]	; (8000d48 <MX_ADC1_Init+0xc0>)
 8000ce8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cec:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000cee:	4b16      	ldr	r3, [pc, #88]	; (8000d48 <MX_ADC1_Init+0xc0>)
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000cf6:	4b14      	ldr	r3, [pc, #80]	; (8000d48 <MX_ADC1_Init+0xc0>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000cfc:	4b12      	ldr	r3, [pc, #72]	; (8000d48 <MX_ADC1_Init+0xc0>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d04:	4810      	ldr	r0, [pc, #64]	; (8000d48 <MX_ADC1_Init+0xc0>)
 8000d06:	f001 fa69 	bl	80021dc <HAL_ADC_Init>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000d10:	f000 fd9a 	bl	8001848 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000d14:	4b0e      	ldr	r3, [pc, #56]	; (8000d50 <MX_ADC1_Init+0xc8>)
 8000d16:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d18:	2306      	movs	r3, #6
 8000d1a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8000d1c:	2305      	movs	r3, #5
 8000d1e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d20:	237f      	movs	r3, #127	; 0x7f
 8000d22:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d24:	2304      	movs	r3, #4
 8000d26:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d2c:	463b      	mov	r3, r7
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4805      	ldr	r0, [pc, #20]	; (8000d48 <MX_ADC1_Init+0xc0>)
 8000d32:	f001 fc33 	bl	800259c <HAL_ADC_ConfigChannel>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 8000d3c:	f000 fd84 	bl	8001848 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d40:	bf00      	nop
 8000d42:	3718      	adds	r7, #24
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	200003dc 	.word	0x200003dc
 8000d4c:	50040000 	.word	0x50040000
 8000d50:	25b00200 	.word	0x25b00200

08000d54 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b08a      	sub	sp, #40	; 0x28
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5c:	f107 0314 	add.w	r3, r7, #20
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	605a      	str	r2, [r3, #4]
 8000d66:	609a      	str	r2, [r3, #8]
 8000d68:	60da      	str	r2, [r3, #12]
 8000d6a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a2b      	ldr	r2, [pc, #172]	; (8000e20 <HAL_ADC_MspInit+0xcc>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d14f      	bne.n	8000e16 <HAL_ADC_MspInit+0xc2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000d76:	4b2b      	ldr	r3, [pc, #172]	; (8000e24 <HAL_ADC_MspInit+0xd0>)
 8000d78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d7a:	4a2a      	ldr	r2, [pc, #168]	; (8000e24 <HAL_ADC_MspInit+0xd0>)
 8000d7c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000d80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d82:	4b28      	ldr	r3, [pc, #160]	; (8000e24 <HAL_ADC_MspInit+0xd0>)
 8000d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d8a:	613b      	str	r3, [r7, #16]
 8000d8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d8e:	4b25      	ldr	r3, [pc, #148]	; (8000e24 <HAL_ADC_MspInit+0xd0>)
 8000d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d92:	4a24      	ldr	r2, [pc, #144]	; (8000e24 <HAL_ADC_MspInit+0xd0>)
 8000d94:	f043 0301 	orr.w	r3, r3, #1
 8000d98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d9a:	4b22      	ldr	r3, [pc, #136]	; (8000e24 <HAL_ADC_MspInit+0xd0>)
 8000d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d9e:	f003 0301 	and.w	r3, r3, #1
 8000da2:	60fb      	str	r3, [r7, #12]
 8000da4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000da6:	2310      	movs	r3, #16
 8000da8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000daa:	230b      	movs	r3, #11
 8000dac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dae:	2300      	movs	r3, #0
 8000db0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db2:	f107 0314 	add.w	r3, r7, #20
 8000db6:	4619      	mov	r1, r3
 8000db8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dbc:	f002 fbfa 	bl	80035b4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000dc0:	4b19      	ldr	r3, [pc, #100]	; (8000e28 <HAL_ADC_MspInit+0xd4>)
 8000dc2:	4a1a      	ldr	r2, [pc, #104]	; (8000e2c <HAL_ADC_MspInit+0xd8>)
 8000dc4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000dc6:	4b18      	ldr	r3, [pc, #96]	; (8000e28 <HAL_ADC_MspInit+0xd4>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000dcc:	4b16      	ldr	r3, [pc, #88]	; (8000e28 <HAL_ADC_MspInit+0xd4>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dd2:	4b15      	ldr	r3, [pc, #84]	; (8000e28 <HAL_ADC_MspInit+0xd4>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000dd8:	4b13      	ldr	r3, [pc, #76]	; (8000e28 <HAL_ADC_MspInit+0xd4>)
 8000dda:	2280      	movs	r2, #128	; 0x80
 8000ddc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000dde:	4b12      	ldr	r3, [pc, #72]	; (8000e28 <HAL_ADC_MspInit+0xd4>)
 8000de0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000de4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000de6:	4b10      	ldr	r3, [pc, #64]	; (8000e28 <HAL_ADC_MspInit+0xd4>)
 8000de8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000dec:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000dee:	4b0e      	ldr	r3, [pc, #56]	; (8000e28 <HAL_ADC_MspInit+0xd4>)
 8000df0:	2220      	movs	r2, #32
 8000df2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000df4:	4b0c      	ldr	r3, [pc, #48]	; (8000e28 <HAL_ADC_MspInit+0xd4>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000dfa:	480b      	ldr	r0, [pc, #44]	; (8000e28 <HAL_ADC_MspInit+0xd4>)
 8000dfc:	f002 f9e2 	bl	80031c4 <HAL_DMA_Init>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 8000e06:	f000 fd1f 	bl	8001848 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	4a06      	ldr	r2, [pc, #24]	; (8000e28 <HAL_ADC_MspInit+0xd4>)
 8000e0e:	64da      	str	r2, [r3, #76]	; 0x4c
 8000e10:	4a05      	ldr	r2, [pc, #20]	; (8000e28 <HAL_ADC_MspInit+0xd4>)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000e16:	bf00      	nop
 8000e18:	3728      	adds	r7, #40	; 0x28
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	50040000 	.word	0x50040000
 8000e24:	40021000 	.word	0x40021000
 8000e28:	20000440 	.word	0x20000440
 8000e2c:	40020008 	.word	0x40020008

08000e30 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e36:	4b0c      	ldr	r3, [pc, #48]	; (8000e68 <MX_DMA_Init+0x38>)
 8000e38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e3a:	4a0b      	ldr	r2, [pc, #44]	; (8000e68 <MX_DMA_Init+0x38>)
 8000e3c:	f043 0301 	orr.w	r3, r3, #1
 8000e40:	6493      	str	r3, [r2, #72]	; 0x48
 8000e42:	4b09      	ldr	r3, [pc, #36]	; (8000e68 <MX_DMA_Init+0x38>)
 8000e44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e46:	f003 0301 	and.w	r3, r3, #1
 8000e4a:	607b      	str	r3, [r7, #4]
 8000e4c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8000e4e:	2200      	movs	r2, #0
 8000e50:	2101      	movs	r1, #1
 8000e52:	200b      	movs	r0, #11
 8000e54:	f002 f971 	bl	800313a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000e58:	200b      	movs	r0, #11
 8000e5a:	f002 f98a 	bl	8003172 <HAL_NVIC_EnableIRQ>

}
 8000e5e:	bf00      	nop
 8000e60:	3708      	adds	r7, #8
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	40021000 	.word	0x40021000

08000e6c <MX_GPIO_Init>:
        * EXTI
     PA2   ------> USART2_TX
     PA15 (JTDI)   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b088      	sub	sp, #32
 8000e70:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e72:	f107 030c 	add.w	r3, r7, #12
 8000e76:	2200      	movs	r2, #0
 8000e78:	601a      	str	r2, [r3, #0]
 8000e7a:	605a      	str	r2, [r3, #4]
 8000e7c:	609a      	str	r2, [r3, #8]
 8000e7e:	60da      	str	r2, [r3, #12]
 8000e80:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e82:	4b44      	ldr	r3, [pc, #272]	; (8000f94 <MX_GPIO_Init+0x128>)
 8000e84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e86:	4a43      	ldr	r2, [pc, #268]	; (8000f94 <MX_GPIO_Init+0x128>)
 8000e88:	f043 0304 	orr.w	r3, r3, #4
 8000e8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e8e:	4b41      	ldr	r3, [pc, #260]	; (8000f94 <MX_GPIO_Init+0x128>)
 8000e90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e92:	f003 0304 	and.w	r3, r3, #4
 8000e96:	60bb      	str	r3, [r7, #8]
 8000e98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e9a:	4b3e      	ldr	r3, [pc, #248]	; (8000f94 <MX_GPIO_Init+0x128>)
 8000e9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e9e:	4a3d      	ldr	r2, [pc, #244]	; (8000f94 <MX_GPIO_Init+0x128>)
 8000ea0:	f043 0301 	orr.w	r3, r3, #1
 8000ea4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ea6:	4b3b      	ldr	r3, [pc, #236]	; (8000f94 <MX_GPIO_Init+0x128>)
 8000ea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eaa:	f003 0301 	and.w	r3, r3, #1
 8000eae:	607b      	str	r3, [r7, #4]
 8000eb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eb2:	4b38      	ldr	r3, [pc, #224]	; (8000f94 <MX_GPIO_Init+0x128>)
 8000eb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eb6:	4a37      	ldr	r2, [pc, #220]	; (8000f94 <MX_GPIO_Init+0x128>)
 8000eb8:	f043 0302 	orr.w	r3, r3, #2
 8000ebc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ebe:	4b35      	ldr	r3, [pc, #212]	; (8000f94 <MX_GPIO_Init+0x128>)
 8000ec0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ec2:	f003 0302 	and.w	r3, r3, #2
 8000ec6:	603b      	str	r3, [r7, #0]
 8000ec8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_5, GPIO_PIN_RESET);
 8000eca:	2200      	movs	r2, #0
 8000ecc:	2122      	movs	r1, #34	; 0x22
 8000ece:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ed2:	f002 fcd9 	bl	8003888 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, INFO_LED_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	210a      	movs	r1, #10
 8000eda:	482f      	ldr	r0, [pc, #188]	; (8000f98 <MX_GPIO_Init+0x12c>)
 8000edc:	f002 fcd4 	bl	8003888 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 8000ee0:	2322      	movs	r3, #34	; 0x22
 8000ee2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eec:	2300      	movs	r3, #0
 8000eee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef0:	f107 030c 	add.w	r3, r7, #12
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000efa:	f002 fb5b 	bl	80035b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000efe:	2304      	movs	r3, #4
 8000f00:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f02:	2302      	movs	r3, #2
 8000f04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f06:	2300      	movs	r3, #0
 8000f08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f0a:	2303      	movs	r3, #3
 8000f0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f0e:	2307      	movs	r3, #7
 8000f10:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000f12:	f107 030c 	add.w	r3, r7, #12
 8000f16:	4619      	mov	r1, r3
 8000f18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f1c:	f002 fb4a 	bl	80035b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CONFIGMODE_Pin;
 8000f20:	2340      	movs	r3, #64	; 0x40
 8000f22:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f24:	4b1d      	ldr	r3, [pc, #116]	; (8000f9c <MX_GPIO_Init+0x130>)
 8000f26:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(CONFIGMODE_GPIO_Port, &GPIO_InitStruct);
 8000f2c:	f107 030c 	add.w	r3, r7, #12
 8000f30:	4619      	mov	r1, r3
 8000f32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f36:	f002 fb3d 	bl	80035b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = INFO_LED_Pin|LD3_Pin;
 8000f3a:	230a      	movs	r3, #10
 8000f3c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f42:	2300      	movs	r3, #0
 8000f44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f46:	2300      	movs	r3, #0
 8000f48:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f4a:	f107 030c 	add.w	r3, r7, #12
 8000f4e:	4619      	mov	r1, r3
 8000f50:	4811      	ldr	r0, [pc, #68]	; (8000f98 <MX_GPIO_Init+0x12c>)
 8000f52:	f002 fb2f 	bl	80035b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000f56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f5a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f60:	2300      	movs	r3, #0
 8000f62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f64:	2303      	movs	r3, #3
 8000f66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000f68:	2303      	movs	r3, #3
 8000f6a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000f6c:	f107 030c 	add.w	r3, r7, #12
 8000f70:	4619      	mov	r1, r3
 8000f72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f76:	f002 fb1d 	bl	80035b4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	2017      	movs	r0, #23
 8000f80:	f002 f8db 	bl	800313a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000f84:	2017      	movs	r0, #23
 8000f86:	f002 f8f4 	bl	8003172 <HAL_NVIC_EnableIRQ>

}
 8000f8a:	bf00      	nop
 8000f8c:	3720      	adds	r7, #32
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	40021000 	.word	0x40021000
 8000f98:	48000400 	.word	0x48000400
 8000f9c:	10110000 	.word	0x10110000

08000fa0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fa4:	4b1b      	ldr	r3, [pc, #108]	; (8001014 <MX_I2C1_Init+0x74>)
 8000fa6:	4a1c      	ldr	r2, [pc, #112]	; (8001018 <MX_I2C1_Init+0x78>)
 8000fa8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00300F38;
 8000faa:	4b1a      	ldr	r3, [pc, #104]	; (8001014 <MX_I2C1_Init+0x74>)
 8000fac:	4a1b      	ldr	r2, [pc, #108]	; (800101c <MX_I2C1_Init+0x7c>)
 8000fae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000fb0:	4b18      	ldr	r3, [pc, #96]	; (8001014 <MX_I2C1_Init+0x74>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fb6:	4b17      	ldr	r3, [pc, #92]	; (8001014 <MX_I2C1_Init+0x74>)
 8000fb8:	2201      	movs	r2, #1
 8000fba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fbc:	4b15      	ldr	r3, [pc, #84]	; (8001014 <MX_I2C1_Init+0x74>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000fc2:	4b14      	ldr	r3, [pc, #80]	; (8001014 <MX_I2C1_Init+0x74>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000fc8:	4b12      	ldr	r3, [pc, #72]	; (8001014 <MX_I2C1_Init+0x74>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fce:	4b11      	ldr	r3, [pc, #68]	; (8001014 <MX_I2C1_Init+0x74>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fd4:	4b0f      	ldr	r3, [pc, #60]	; (8001014 <MX_I2C1_Init+0x74>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fda:	480e      	ldr	r0, [pc, #56]	; (8001014 <MX_I2C1_Init+0x74>)
 8000fdc:	f002 fc9e 	bl	800391c <HAL_I2C_Init>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000fe6:	f000 fc2f 	bl	8001848 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000fea:	2100      	movs	r1, #0
 8000fec:	4809      	ldr	r0, [pc, #36]	; (8001014 <MX_I2C1_Init+0x74>)
 8000fee:	f003 f96f 	bl	80042d0 <HAL_I2CEx_ConfigAnalogFilter>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ff8:	f000 fc26 	bl	8001848 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	4805      	ldr	r0, [pc, #20]	; (8001014 <MX_I2C1_Init+0x74>)
 8001000:	f003 f9b1 	bl	8004366 <HAL_I2CEx_ConfigDigitalFilter>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800100a:	f000 fc1d 	bl	8001848 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800100e:	bf00      	nop
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	20000488 	.word	0x20000488
 8001018:	40005400 	.word	0x40005400
 800101c:	00300f38 	.word	0x00300f38

08001020 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b09e      	sub	sp, #120	; 0x78
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001028:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	609a      	str	r2, [r3, #8]
 8001034:	60da      	str	r2, [r3, #12]
 8001036:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001038:	f107 0310 	add.w	r3, r7, #16
 800103c:	2254      	movs	r2, #84	; 0x54
 800103e:	2100      	movs	r1, #0
 8001040:	4618      	mov	r0, r3
 8001042:	f00a fed3 	bl	800bdec <memset>
  if(i2cHandle->Instance==I2C1)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a1f      	ldr	r2, [pc, #124]	; (80010c8 <HAL_I2C_MspInit+0xa8>)
 800104c:	4293      	cmp	r3, r2
 800104e:	d137      	bne.n	80010c0 <HAL_I2C_MspInit+0xa0>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001050:	2340      	movs	r3, #64	; 0x40
 8001052:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001054:	2300      	movs	r3, #0
 8001056:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001058:	f107 0310 	add.w	r3, r7, #16
 800105c:	4618      	mov	r0, r3
 800105e:	f005 fcf7 	bl	8006a50 <HAL_RCCEx_PeriphCLKConfig>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001068:	f000 fbee 	bl	8001848 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800106c:	4b17      	ldr	r3, [pc, #92]	; (80010cc <HAL_I2C_MspInit+0xac>)
 800106e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001070:	4a16      	ldr	r2, [pc, #88]	; (80010cc <HAL_I2C_MspInit+0xac>)
 8001072:	f043 0301 	orr.w	r3, r3, #1
 8001076:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001078:	4b14      	ldr	r3, [pc, #80]	; (80010cc <HAL_I2C_MspInit+0xac>)
 800107a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800107c:	f003 0301 	and.w	r3, r3, #1
 8001080:	60fb      	str	r3, [r7, #12]
 8001082:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001084:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001088:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800108a:	2312      	movs	r3, #18
 800108c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108e:	2300      	movs	r3, #0
 8001090:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001092:	2303      	movs	r3, #3
 8001094:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001096:	2304      	movs	r3, #4
 8001098:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800109a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800109e:	4619      	mov	r1, r3
 80010a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010a4:	f002 fa86 	bl	80035b4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010a8:	4b08      	ldr	r3, [pc, #32]	; (80010cc <HAL_I2C_MspInit+0xac>)
 80010aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ac:	4a07      	ldr	r2, [pc, #28]	; (80010cc <HAL_I2C_MspInit+0xac>)
 80010ae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010b2:	6593      	str	r3, [r2, #88]	; 0x58
 80010b4:	4b05      	ldr	r3, [pc, #20]	; (80010cc <HAL_I2C_MspInit+0xac>)
 80010b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010bc:	60bb      	str	r3, [r7, #8]
 80010be:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80010c0:	bf00      	nop
 80010c2:	3778      	adds	r7, #120	; 0x78
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	40005400 	.word	0x40005400
 80010cc:	40021000 	.word	0x40021000

080010d0 <BNO_I2C_Write>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
void PeriphCommonClock_Config(void);
/* USER CODE BEGIN PFP */

void BNO_I2C_Write(uint16_t address, uint8_t data) {
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b088      	sub	sp, #32
 80010d4:	af04      	add	r7, sp, #16
 80010d6:	4603      	mov	r3, r0
 80010d8:	460a      	mov	r2, r1
 80010da:	80fb      	strh	r3, [r7, #6]
 80010dc:	4613      	mov	r3, r2
 80010de:	717b      	strb	r3, [r7, #5]
	uint8_t buf = data;
 80010e0:	797b      	ldrb	r3, [r7, #5]
 80010e2:	73bb      	strb	r3, [r7, #14]
	uint8_t err;

	do {
		err = HAL_I2C_Mem_Write(&hi2c1, BNO_ADDRESS, address, 1, &buf,
 80010e4:	88fa      	ldrh	r2, [r7, #6]
 80010e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ea:	9302      	str	r3, [sp, #8]
 80010ec:	2301      	movs	r3, #1
 80010ee:	9301      	str	r3, [sp, #4]
 80010f0:	f107 030e 	add.w	r3, r7, #14
 80010f4:	9300      	str	r3, [sp, #0]
 80010f6:	2301      	movs	r3, #1
 80010f8:	2152      	movs	r1, #82	; 0x52
 80010fa:	4806      	ldr	r0, [pc, #24]	; (8001114 <BNO_I2C_Write+0x44>)
 80010fc:	f002 fc9e 	bl	8003a3c <HAL_I2C_Mem_Write>
 8001100:	4603      	mov	r3, r0
 8001102:	73fb      	strb	r3, [r7, #15]
				sizeof(buf),
				I2C_TIMEOUT);
	} while (err != HAL_OK);
 8001104:	7bfb      	ldrb	r3, [r7, #15]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d1ec      	bne.n	80010e4 <BNO_I2C_Write+0x14>

}
 800110a:	bf00      	nop
 800110c:	bf00      	nop
 800110e:	3710      	adds	r7, #16
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	20000488 	.word	0x20000488

08001118 <BNO_I2C_Read>:

uint8_t BNO_I2C_Read(uint16_t address) {
 8001118:	b580      	push	{r7, lr}
 800111a:	b088      	sub	sp, #32
 800111c:	af04      	add	r7, sp, #16
 800111e:	4603      	mov	r3, r0
 8001120:	80fb      	strh	r3, [r7, #6]
	uint8_t read;
	if (hi2c1.State == HAL_I2C_STATE_READY) {
 8001122:	4b0c      	ldr	r3, [pc, #48]	; (8001154 <BNO_I2C_Read+0x3c>)
 8001124:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001128:	b2db      	uxtb	r3, r3
 800112a:	2b20      	cmp	r3, #32
 800112c:	d10d      	bne.n	800114a <BNO_I2C_Read+0x32>
		HAL_I2C_Mem_Read(&hi2c1, BNO_ADDRESS, address, 1, &read, 1,
 800112e:	88fa      	ldrh	r2, [r7, #6]
 8001130:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001134:	9302      	str	r3, [sp, #8]
 8001136:	2301      	movs	r3, #1
 8001138:	9301      	str	r3, [sp, #4]
 800113a:	f107 030f 	add.w	r3, r7, #15
 800113e:	9300      	str	r3, [sp, #0]
 8001140:	2301      	movs	r3, #1
 8001142:	2152      	movs	r1, #82	; 0x52
 8001144:	4803      	ldr	r0, [pc, #12]	; (8001154 <BNO_I2C_Read+0x3c>)
 8001146:	f002 fd8d 	bl	8003c64 <HAL_I2C_Mem_Read>
		I2C_TIMEOUT); //funkcja HAL_I2C_Mem_Read wysyła do urządzenia podrzędnego adres rejestru do odczytania, a następnie odbiera wysłane dane i przekazuje do zmiennej read
	}

	return read;
 800114a:	7bfb      	ldrb	r3, [r7, #15]
}
 800114c:	4618      	mov	r0, r3
 800114e:	3710      	adds	r7, #16
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	20000488 	.word	0x20000488

08001158 <BNO_Init>:

uint8_t BNO_Init(void) {
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(INFO_LED_GPIO_Port, INFO_LED_Pin, GPIO_PIN_SET);
 800115e:	2201      	movs	r2, #1
 8001160:	2102      	movs	r1, #2
 8001162:	4814      	ldr	r0, [pc, #80]	; (80011b4 <BNO_Init+0x5c>)
 8001164:	f002 fb90 	bl	8003888 <HAL_GPIO_WritePin>
	uint8_t check = 0;
 8001168:	2300      	movs	r3, #0
 800116a:	71fb      	strb	r3, [r7, #7]

	check = BNO_I2C_Read(CHIP_ID); //odczytanie identyfikatora
 800116c:	2000      	movs	r0, #0
 800116e:	f7ff ffd3 	bl	8001118 <BNO_I2C_Read>
 8001172:	4603      	mov	r3, r0
 8001174:	71fb      	strb	r3, [r7, #7]

	BNO_I2C_Write(BNO_OPR_MODE, CONFIGMODE); //przejście do trybu konfiguracji
 8001176:	2100      	movs	r1, #0
 8001178:	203d      	movs	r0, #61	; 0x3d
 800117a:	f7ff ffa9 	bl	80010d0 <BNO_I2C_Write>
	BNO_I2C_Write(BNO_SYS_TRIGGER, EXT_CLK_SEL); //wybór zewnętrznego oscylatora
 800117e:	2180      	movs	r1, #128	; 0x80
 8001180:	203f      	movs	r0, #63	; 0x3f
 8001182:	f7ff ffa5 	bl	80010d0 <BNO_I2C_Write>
	BNO_I2C_Write(BNO_OPR_MODE, IMUMODE); //przejście do trybu NDOF (Nine Degrees Of Freedom) - jednoczesna praca akcelerometru, żyroskopu, magnetometru.
 8001186:	2108      	movs	r1, #8
 8001188:	203d      	movs	r0, #61	; 0x3d
 800118a:	f7ff ffa1 	bl	80010d0 <BNO_I2C_Write>

	if (BNO_I2C_Read(BNO_OPR_MODE) != IMUMODE) {
 800118e:	203d      	movs	r0, #61	; 0x3d
 8001190:	f7ff ffc2 	bl	8001118 <BNO_I2C_Read>
 8001194:	4603      	mov	r3, r0
 8001196:	2b08      	cmp	r3, #8
 8001198:	d001      	beq.n	800119e <BNO_Init+0x46>
		Error_Handler();
 800119a:	f000 fb55 	bl	8001848 <Error_Handler>
	}

	HAL_GPIO_WritePin(INFO_LED_GPIO_Port, INFO_LED_Pin, GPIO_PIN_RESET);
 800119e:	2200      	movs	r2, #0
 80011a0:	2102      	movs	r1, #2
 80011a2:	4804      	ldr	r0, [pc, #16]	; (80011b4 <BNO_Init+0x5c>)
 80011a4:	f002 fb70 	bl	8003888 <HAL_GPIO_WritePin>

	return check;
 80011a8:	79fb      	ldrb	r3, [r7, #7]
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	48000400 	.word	0x48000400

080011b8 <BNO_GetEuler>:

Angles BNO_GetEuler(void) {
 80011b8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80011bc:	b0a2      	sub	sp, #136	; 0x88
 80011be:	af04      	add	r7, sp, #16
	uint8_t data[6];

	HAL_I2C_Mem_Read(&hi2c1, BNO_ADDRESS, EUL_DATA_X_LSB, 1, (uint8_t*) &data,
 80011c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011c4:	9302      	str	r3, [sp, #8]
 80011c6:	2306      	movs	r3, #6
 80011c8:	9301      	str	r3, [sp, #4]
 80011ca:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80011ce:	9300      	str	r3, [sp, #0]
 80011d0:	2301      	movs	r3, #1
 80011d2:	221a      	movs	r2, #26
 80011d4:	2152      	movs	r1, #82	; 0x52
 80011d6:	4849      	ldr	r0, [pc, #292]	; (80012fc <BNO_GetEuler+0x144>)
 80011d8:	f002 fd44 	bl	8003c64 <HAL_I2C_Mem_Read>
			6,
			I2C_TIMEOUT);
	Angles Eul;
	int16_t X, Y, Z;

	X = ((data[1] << 8) | data[0]);
 80011dc:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 80011e0:	021b      	lsls	r3, r3, #8
 80011e2:	b21a      	sxth	r2, r3
 80011e4:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80011e8:	b21b      	sxth	r3, r3
 80011ea:	4313      	orrs	r3, r2
 80011ec:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
	Y = ((data[3] << 8) | data[2]);
 80011f0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80011f4:	021b      	lsls	r3, r3, #8
 80011f6:	b21a      	sxth	r2, r3
 80011f8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 80011fc:	b21b      	sxth	r3, r3
 80011fe:	4313      	orrs	r3, r2
 8001200:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
	Z = ((data[5] << 8) | data[4]);
 8001204:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8001208:	021b      	lsls	r3, r3, #8
 800120a:	b21a      	sxth	r2, r3
 800120c:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001210:	b21b      	sxth	r3, r3
 8001212:	4313      	orrs	r3, r2
 8001214:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72

	double X_temp = X / EUL_LSB;
 8001218:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff f981 	bl	8000524 <__aeabi_i2d>
 8001222:	f04f 0200 	mov.w	r2, #0
 8001226:	4b36      	ldr	r3, [pc, #216]	; (8001300 <BNO_GetEuler+0x148>)
 8001228:	f7ff fb10 	bl	800084c <__aeabi_ddiv>
 800122c:	4602      	mov	r2, r0
 800122e:	460b      	mov	r3, r1
 8001230:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68

	if (X_temp >= 180.0) {
 8001234:	f04f 0200 	mov.w	r2, #0
 8001238:	4b32      	ldr	r3, [pc, #200]	; (8001304 <BNO_GetEuler+0x14c>)
 800123a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800123e:	f7ff fc61 	bl	8000b04 <__aeabi_dcmpge>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d00b      	beq.n	8001260 <BNO_GetEuler+0xa8>
		Eul.X = X_temp - 360.0; // przejście z systemu (0, 360) na (-180, 180)
 8001248:	f04f 0200 	mov.w	r2, #0
 800124c:	4b2e      	ldr	r3, [pc, #184]	; (8001308 <BNO_GetEuler+0x150>)
 800124e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001252:	f7ff f819 	bl	8000288 <__aeabi_dsub>
 8001256:	4602      	mov	r2, r0
 8001258:	460b      	mov	r3, r1
 800125a:	e9c7 2308 	strd	r2, r3, [r7, #32]
 800125e:	e003      	b.n	8001268 <BNO_GetEuler+0xb0>
	} else {
		Eul.X = X_temp;
 8001260:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001264:	e9c7 2308 	strd	r2, r3, [r7, #32]
	}

	Eul.Y = Y / EUL_LSB;
 8001268:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff f959 	bl	8000524 <__aeabi_i2d>
 8001272:	f04f 0200 	mov.w	r2, #0
 8001276:	4b22      	ldr	r3, [pc, #136]	; (8001300 <BNO_GetEuler+0x148>)
 8001278:	f7ff fae8 	bl	800084c <__aeabi_ddiv>
 800127c:	4602      	mov	r2, r0
 800127e:	460b      	mov	r3, r1
 8001280:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	Eul.Z = Z / EUL_LSB;
 8001284:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff f94b 	bl	8000524 <__aeabi_i2d>
 800128e:	f04f 0200 	mov.w	r2, #0
 8001292:	4b1b      	ldr	r3, [pc, #108]	; (8001300 <BNO_GetEuler+0x148>)
 8001294:	f7ff fada 	bl	800084c <__aeabi_ddiv>
 8001298:	4602      	mov	r2, r0
 800129a:	460b      	mov	r3, r1
 800129c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

	return Eul;
 80012a0:	f107 0448 	add.w	r4, r7, #72	; 0x48
 80012a4:	f107 0520 	add.w	r5, r7, #32
 80012a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012ac:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80012b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80012b4:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 80012b8:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 80012bc:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80012c0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80012c4:	ec49 8b14 	vmov	d4, r8, r9
 80012c8:	ec45 4b15 	vmov	d5, r4, r5
 80012cc:	ec41 0b16 	vmov	d6, r0, r1
 80012d0:	ec43 2b17 	vmov	d7, r2, r3
}
 80012d4:	eeb0 0a44 	vmov.f32	s0, s8
 80012d8:	eef0 0a64 	vmov.f32	s1, s9
 80012dc:	eeb0 1a45 	vmov.f32	s2, s10
 80012e0:	eef0 1a65 	vmov.f32	s3, s11
 80012e4:	eeb0 2a46 	vmov.f32	s4, s12
 80012e8:	eef0 2a66 	vmov.f32	s5, s13
 80012ec:	eeb0 3a47 	vmov.f32	s6, s14
 80012f0:	eef0 3a67 	vmov.f32	s7, s15
 80012f4:	3778      	adds	r7, #120	; 0x78
 80012f6:	46bd      	mov	sp, r7
 80012f8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80012fc:	20000488 	.word	0x20000488
 8001300:	40300000 	.word	0x40300000
 8001304:	40668000 	.word	0x40668000
 8001308:	40768000 	.word	0x40768000

0800130c <BNO_CheckCalibration>:
	Qua.Y = Y / QUA_LSB;
	Qua.Z = Z / QUA_LSB;

	return Qua;
}
void BNO_CheckCalibration(uint8_t calib_thres) {
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	4603      	mov	r3, r0
 8001314:	71fb      	strb	r3, [r7, #7]
	/* Funkcja sprawdzająca status kalibracji akcelerometru, żyroskopu i magnetometru
	 * Liczba 3 (binarnie 11) oznacza pełną kalibrację komponentu, 0 - konieczność dokonania kalibracji
	 * Funkcja wstrzymuje działanie programu, jeżeli komponenty nie są skalibrowane zgodnie z progiem przekazanym w argumencie funkcji
	 */
//	__disable_irq(); //globalne wyłączenie przerwań
	uint8_t status = 0;
 8001316:	2300      	movs	r3, #0
 8001318:	73fb      	strb	r3, [r7, #15]

	do {
		CalibrationData calib;
		uint8_t data = BNO_I2C_Read(CALIB_STAT);
 800131a:	2035      	movs	r0, #53	; 0x35
 800131c:	f7ff fefc 	bl	8001118 <BNO_I2C_Read>
 8001320:	4603      	mov	r3, r0
 8001322:	73bb      	strb	r3, [r7, #14]
		calib.sys = (data >> 6) & 0b11;
 8001324:	7bbb      	ldrb	r3, [r7, #14]
 8001326:	099b      	lsrs	r3, r3, #6
 8001328:	b2db      	uxtb	r3, r3
 800132a:	723b      	strb	r3, [r7, #8]
		calib.gyr = (data >> 4) & 0b11;
 800132c:	7bbb      	ldrb	r3, [r7, #14]
 800132e:	091b      	lsrs	r3, r3, #4
 8001330:	b2db      	uxtb	r3, r3
 8001332:	f003 0303 	and.w	r3, r3, #3
 8001336:	b2db      	uxtb	r3, r3
 8001338:	727b      	strb	r3, [r7, #9]
		calib.acc = (data >> 2) & 0b11;
 800133a:	7bbb      	ldrb	r3, [r7, #14]
 800133c:	089b      	lsrs	r3, r3, #2
 800133e:	b2db      	uxtb	r3, r3
 8001340:	f003 0303 	and.w	r3, r3, #3
 8001344:	b2db      	uxtb	r3, r3
 8001346:	72bb      	strb	r3, [r7, #10]
		calib.mag = data & 0b11;
 8001348:	7bbb      	ldrb	r3, [r7, #14]
 800134a:	f003 0303 	and.w	r3, r3, #3
 800134e:	b2db      	uxtb	r3, r3
 8001350:	72fb      	strb	r3, [r7, #11]

		if ((calib.gyr >= calib_thres) && (calib.acc >= calib_thres)) {
 8001352:	7a7b      	ldrb	r3, [r7, #9]
 8001354:	79fa      	ldrb	r2, [r7, #7]
 8001356:	429a      	cmp	r2, r3
 8001358:	d80b      	bhi.n	8001372 <BNO_CheckCalibration+0x66>
 800135a:	7abb      	ldrb	r3, [r7, #10]
 800135c:	79fa      	ldrb	r2, [r7, #7]
 800135e:	429a      	cmp	r2, r3
 8001360:	d807      	bhi.n	8001372 <BNO_CheckCalibration+0x66>
			status = 1;
 8001362:	2301      	movs	r3, #1
 8001364:	73fb      	strb	r3, [r7, #15]
			HAL_GPIO_WritePin(INFO_LED_GPIO_Port, INFO_LED_Pin, GPIO_PIN_RESET);
 8001366:	2200      	movs	r2, #0
 8001368:	2102      	movs	r1, #2
 800136a:	480c      	ldr	r0, [pc, #48]	; (800139c <BNO_CheckCalibration+0x90>)
 800136c:	f002 fa8c 	bl	8003888 <HAL_GPIO_WritePin>
 8001370:	e006      	b.n	8001380 <BNO_CheckCalibration+0x74>
		} else {
			status = 0;
 8001372:	2300      	movs	r3, #0
 8001374:	73fb      	strb	r3, [r7, #15]
			HAL_GPIO_WritePin(INFO_LED_GPIO_Port, INFO_LED_Pin, GPIO_PIN_SET); //jeśli komponenty nie są skalibrowane, zaświeć diodą
 8001376:	2201      	movs	r2, #1
 8001378:	2102      	movs	r1, #2
 800137a:	4808      	ldr	r0, [pc, #32]	; (800139c <BNO_CheckCalibration+0x90>)
 800137c:	f002 fa84 	bl	8003888 <HAL_GPIO_WritePin>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8001380:	b662      	cpsie	i
}
 8001382:	bf00      	nop
		}
		__enable_irq();

		HAL_Delay(10);
 8001384:	200a      	movs	r0, #10
 8001386:	f000 fd3d 	bl	8001e04 <HAL_Delay>
//		__disable_irq();
	} while (status == 0);
 800138a:	7bfb      	ldrb	r3, [r7, #15]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d0c4      	beq.n	800131a <BNO_CheckCalibration+0xe>
  __ASM volatile ("cpsie i" : : : "memory");
 8001390:	b662      	cpsie	i
}
 8001392:	bf00      	nop
	__enable_irq(); //globalne włączenie przerwań
}
 8001394:	bf00      	nop
 8001396:	3710      	adds	r7, #16
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	48000400 	.word	0x48000400

080013a0 <HID_SendReport>:
//void BNO_RestoreOffsets(void)
//{
// READ_FROM_EEPROM;
//}

void HID_SendReport(USBmouse device) {
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
	USBD_HID_SendReport(&mouseDevice, (uint8_t*) &device, sizeof(device));
 80013a8:	1d3b      	adds	r3, r7, #4
 80013aa:	2204      	movs	r2, #4
 80013ac:	4619      	mov	r1, r3
 80013ae:	4803      	ldr	r0, [pc, #12]	; (80013bc <HID_SendReport+0x1c>)
 80013b0:	f008 fed4 	bl	800a15c <USBD_HID_SendReport>
}
 80013b4:	bf00      	nop
 80013b6:	3708      	adds	r7, #8
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	20000558 	.word	0x20000558

080013c0 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { //zasadnicza pętla programu wywoływana w przerwaniu timera
 80013c0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80013c4:	b082      	sub	sp, #8
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM6) {
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a59      	ldr	r2, [pc, #356]	; (8001534 <HAL_TIM_PeriodElapsedCallback+0x174>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	f040 80aa 	bne.w	800152a <HAL_TIM_PeriodElapsedCallback+0x16a>
		Euler = BNO_GetEuler();
 80013d6:	f7ff feef 	bl	80011b8 <BNO_GetEuler>
 80013da:	eeb0 4a40 	vmov.f32	s8, s0
 80013de:	eef0 4a60 	vmov.f32	s9, s1
 80013e2:	eeb0 5a41 	vmov.f32	s10, s2
 80013e6:	eef0 5a61 	vmov.f32	s11, s3
 80013ea:	eeb0 6a42 	vmov.f32	s12, s4
 80013ee:	eef0 6a62 	vmov.f32	s13, s5
 80013f2:	eeb0 7a43 	vmov.f32	s14, s6
 80013f6:	eef0 7a63 	vmov.f32	s15, s7
 80013fa:	4b4f      	ldr	r3, [pc, #316]	; (8001538 <HAL_TIM_PeriodElapsedCallback+0x178>)
 80013fc:	ed83 4b00 	vstr	d4, [r3]
 8001400:	ed83 5b02 	vstr	d5, [r3, #8]
 8001404:	ed83 6b04 	vstr	d6, [r3, #16]
 8001408:	ed83 7b06 	vstr	d7, [r3, #24]

		if (Euler.X == 0 && Euler.Y == 0 && Euler.Z == 0) //jeśli wszystkie zwracane kąty są równe zero, istnieje prawdopodobieństwo że czujnik uległ rozkalibrowaniu
 800140c:	4b4a      	ldr	r3, [pc, #296]	; (8001538 <HAL_TIM_PeriodElapsedCallback+0x178>)
 800140e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001412:	f04f 0200 	mov.w	r2, #0
 8001416:	f04f 0300 	mov.w	r3, #0
 800141a:	f7ff fb55 	bl	8000ac8 <__aeabi_dcmpeq>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d01a      	beq.n	800145a <HAL_TIM_PeriodElapsedCallback+0x9a>
 8001424:	4b44      	ldr	r3, [pc, #272]	; (8001538 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8001426:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800142a:	f04f 0200 	mov.w	r2, #0
 800142e:	f04f 0300 	mov.w	r3, #0
 8001432:	f7ff fb49 	bl	8000ac8 <__aeabi_dcmpeq>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d00e      	beq.n	800145a <HAL_TIM_PeriodElapsedCallback+0x9a>
 800143c:	4b3e      	ldr	r3, [pc, #248]	; (8001538 <HAL_TIM_PeriodElapsedCallback+0x178>)
 800143e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001442:	f04f 0200 	mov.w	r2, #0
 8001446:	f04f 0300 	mov.w	r3, #0
 800144a:	f7ff fb3d 	bl	8000ac8 <__aeabi_dcmpeq>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d002      	beq.n	800145a <HAL_TIM_PeriodElapsedCallback+0x9a>
				{
			BNO_CheckCalibration(1);
 8001454:	2001      	movs	r0, #1
 8001456:	f7ff ff59 	bl	800130c <BNO_CheckCalibration>
		}

		if (Euler.Y >= bound_max.Y + 15) {
 800145a:	4b37      	ldr	r3, [pc, #220]	; (8001538 <HAL_TIM_PeriodElapsedCallback+0x178>)
 800145c:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 8001460:	4b36      	ldr	r3, [pc, #216]	; (800153c <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8001462:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001466:	f04f 0200 	mov.w	r2, #0
 800146a:	4b35      	ldr	r3, [pc, #212]	; (8001540 <HAL_TIM_PeriodElapsedCallback+0x180>)
 800146c:	f7fe ff0e 	bl	800028c <__adddf3>
 8001470:	4602      	mov	r2, r0
 8001472:	460b      	mov	r3, r1
 8001474:	4640      	mov	r0, r8
 8001476:	4649      	mov	r1, r9
 8001478:	f7ff fb44 	bl	8000b04 <__aeabi_dcmpge>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d002      	beq.n	8001488 <HAL_TIM_PeriodElapsedCallback+0xc8>
			HAL_NVIC_SetPendingIRQ(EXTI9_5_IRQn);
 8001482:	2017      	movs	r0, #23
 8001484:	f001 fe8f 	bl	80031a6 <HAL_NVIC_SetPendingIRQ>
		}

		mouse.cursor_X = (Euler.X - Euler_prev.X) * px_per_deg.X;
 8001488:	4b2b      	ldr	r3, [pc, #172]	; (8001538 <HAL_TIM_PeriodElapsedCallback+0x178>)
 800148a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800148e:	4b2d      	ldr	r3, [pc, #180]	; (8001544 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8001490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001494:	f7fe fef8 	bl	8000288 <__aeabi_dsub>
 8001498:	4602      	mov	r2, r0
 800149a:	460b      	mov	r3, r1
 800149c:	4690      	mov	r8, r2
 800149e:	4699      	mov	r9, r3
 80014a0:	4b29      	ldr	r3, [pc, #164]	; (8001548 <HAL_TIM_PeriodElapsedCallback+0x188>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff f83d 	bl	8000524 <__aeabi_i2d>
 80014aa:	4602      	mov	r2, r0
 80014ac:	460b      	mov	r3, r1
 80014ae:	4640      	mov	r0, r8
 80014b0:	4649      	mov	r1, r9
 80014b2:	f7ff f8a1 	bl	80005f8 <__aeabi_dmul>
 80014b6:	4602      	mov	r2, r0
 80014b8:	460b      	mov	r3, r1
 80014ba:	4610      	mov	r0, r2
 80014bc:	4619      	mov	r1, r3
 80014be:	f7ff fb4b 	bl	8000b58 <__aeabi_d2iz>
 80014c2:	4603      	mov	r3, r0
 80014c4:	b25a      	sxtb	r2, r3
 80014c6:	4b21      	ldr	r3, [pc, #132]	; (800154c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 80014c8:	705a      	strb	r2, [r3, #1]
		mouse.cursor_Y = (-1) * (Euler.Y - Euler_prev.Y) * px_per_deg.Y; //(-1) odwraca oś Y
 80014ca:	4b1b      	ldr	r3, [pc, #108]	; (8001538 <HAL_TIM_PeriodElapsedCallback+0x178>)
 80014cc:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80014d0:	4b1c      	ldr	r3, [pc, #112]	; (8001544 <HAL_TIM_PeriodElapsedCallback+0x184>)
 80014d2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80014d6:	f7fe fed7 	bl	8000288 <__aeabi_dsub>
 80014da:	4602      	mov	r2, r0
 80014dc:	460b      	mov	r3, r1
 80014de:	4614      	mov	r4, r2
 80014e0:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80014e4:	4b18      	ldr	r3, [pc, #96]	; (8001548 <HAL_TIM_PeriodElapsedCallback+0x188>)
 80014e6:	785b      	ldrb	r3, [r3, #1]
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff f81b 	bl	8000524 <__aeabi_i2d>
 80014ee:	4602      	mov	r2, r0
 80014f0:	460b      	mov	r3, r1
 80014f2:	4620      	mov	r0, r4
 80014f4:	4629      	mov	r1, r5
 80014f6:	f7ff f87f 	bl	80005f8 <__aeabi_dmul>
 80014fa:	4602      	mov	r2, r0
 80014fc:	460b      	mov	r3, r1
 80014fe:	4610      	mov	r0, r2
 8001500:	4619      	mov	r1, r3
 8001502:	f7ff fb29 	bl	8000b58 <__aeabi_d2iz>
 8001506:	4603      	mov	r3, r0
 8001508:	b25a      	sxtb	r2, r3
 800150a:	4b10      	ldr	r3, [pc, #64]	; (800154c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 800150c:	709a      	strb	r2, [r3, #2]
//		mouse.button = Mouse_Click(data_rms);

		HID_SendReport(mouse);
 800150e:	4b0f      	ldr	r3, [pc, #60]	; (800154c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001510:	6818      	ldr	r0, [r3, #0]
 8001512:	f7ff ff45 	bl	80013a0 <HID_SendReport>
		Euler_prev = Euler;
 8001516:	4a0b      	ldr	r2, [pc, #44]	; (8001544 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8001518:	4b07      	ldr	r3, [pc, #28]	; (8001538 <HAL_TIM_PeriodElapsedCallback+0x178>)
 800151a:	4614      	mov	r4, r2
 800151c:	461d      	mov	r5, r3
 800151e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001520:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001522:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001526:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}
}
 800152a:	bf00      	nop
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001534:	40001000 	.word	0x40001000
 8001538:	20000830 	.word	0x20000830
 800153c:	20000000 	.word	0x20000000
 8001540:	402e0000 	.word	0x402e0000
 8001544:	20000398 	.word	0x20000398
 8001548:	20000020 	.word	0x20000020
 800154c:	2000038c 	.word	0x2000038c

08001550 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001550:	b5b0      	push	{r4, r5, r7, lr}
 8001552:	b088      	sub	sp, #32
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
	// przesuwanie wierszy w tabeli o 1
	for (uint8_t i = 0; i < RMS_FRAME_LEN - 1; i++){
 8001558:	2300      	movs	r3, #0
 800155a:	77fb      	strb	r3, [r7, #31]
 800155c:	e00b      	b.n	8001576 <HAL_ADC_ConvCpltCallback+0x26>
		data_raw[i] = data_raw[i+1];
 800155e:	7ffb      	ldrb	r3, [r7, #31]
 8001560:	1c5a      	adds	r2, r3, #1
 8001562:	7ffb      	ldrb	r3, [r7, #31]
 8001564:	4938      	ldr	r1, [pc, #224]	; (8001648 <HAL_ADC_ConvCpltCallback+0xf8>)
 8001566:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 800156a:	4a37      	ldr	r2, [pc, #220]	; (8001648 <HAL_ADC_ConvCpltCallback+0xf8>)
 800156c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (uint8_t i = 0; i < RMS_FRAME_LEN - 1; i++){
 8001570:	7ffb      	ldrb	r3, [r7, #31]
 8001572:	3301      	adds	r3, #1
 8001574:	77fb      	strb	r3, [r7, #31]
 8001576:	7ffb      	ldrb	r3, [r7, #31]
 8001578:	2b3a      	cmp	r3, #58	; 0x3a
 800157a:	d9f0      	bls.n	800155e <HAL_ADC_ConvCpltCallback+0xe>
	}
	data_raw[RMS_FRAME_LEN - 1] = emg[0] - 1800;
 800157c:	4b33      	ldr	r3, [pc, #204]	; (800164c <HAL_ADC_ConvCpltCallback+0xfc>)
 800157e:	881b      	ldrh	r3, [r3, #0]
 8001580:	b29b      	uxth	r3, r3
 8001582:	f5a3 63e1 	sub.w	r3, r3, #1800	; 0x708
 8001586:	b29b      	uxth	r3, r3
 8001588:	b21a      	sxth	r2, r3
 800158a:	4b2f      	ldr	r3, [pc, #188]	; (8001648 <HAL_ADC_ConvCpltCallback+0xf8>)
 800158c:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76

	uint32_t square = 0;
 8001590:	2300      	movs	r3, #0
 8001592:	61bb      	str	r3, [r7, #24]
	float mean = 0.0;
 8001594:	f04f 0300 	mov.w	r3, #0
 8001598:	613b      	str	r3, [r7, #16]
	float square_root = 0.0;
 800159a:	f04f 0300 	mov.w	r3, #0
 800159e:	60fb      	str	r3, [r7, #12]

	for(uint8_t i = 0; i < RMS_FRAME_LEN; i++)
 80015a0:	2300      	movs	r3, #0
 80015a2:	75fb      	strb	r3, [r7, #23]
 80015a4:	e024      	b.n	80015f0 <HAL_ADC_ConvCpltCallback+0xa0>
	{
		square += pow(data_raw[i], 2);
 80015a6:	7dfb      	ldrb	r3, [r7, #23]
 80015a8:	4a27      	ldr	r2, [pc, #156]	; (8001648 <HAL_ADC_ConvCpltCallback+0xf8>)
 80015aa:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7fe ffb8 	bl	8000524 <__aeabi_i2d>
 80015b4:	4602      	mov	r2, r0
 80015b6:	460b      	mov	r3, r1
 80015b8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8001640 <HAL_ADC_ConvCpltCallback+0xf0>
 80015bc:	ec43 2b10 	vmov	d0, r2, r3
 80015c0:	f00d f8ec 	bl	800e79c <pow>
 80015c4:	ec55 4b10 	vmov	r4, r5, d0
 80015c8:	69b8      	ldr	r0, [r7, #24]
 80015ca:	f7fe ff9b 	bl	8000504 <__aeabi_ui2d>
 80015ce:	4602      	mov	r2, r0
 80015d0:	460b      	mov	r3, r1
 80015d2:	4620      	mov	r0, r4
 80015d4:	4629      	mov	r1, r5
 80015d6:	f7fe fe59 	bl	800028c <__adddf3>
 80015da:	4602      	mov	r2, r0
 80015dc:	460b      	mov	r3, r1
 80015de:	4610      	mov	r0, r2
 80015e0:	4619      	mov	r1, r3
 80015e2:	f7ff fae1 	bl	8000ba8 <__aeabi_d2uiz>
 80015e6:	4603      	mov	r3, r0
 80015e8:	61bb      	str	r3, [r7, #24]
	for(uint8_t i = 0; i < RMS_FRAME_LEN; i++)
 80015ea:	7dfb      	ldrb	r3, [r7, #23]
 80015ec:	3301      	adds	r3, #1
 80015ee:	75fb      	strb	r3, [r7, #23]
 80015f0:	7dfb      	ldrb	r3, [r7, #23]
 80015f2:	2b3b      	cmp	r3, #59	; 0x3b
 80015f4:	d9d7      	bls.n	80015a6 <HAL_ADC_ConvCpltCallback+0x56>
	}
	mean = (square / (float) RMS_FRAME_LEN);
 80015f6:	69bb      	ldr	r3, [r7, #24]
 80015f8:	ee07 3a90 	vmov	s15, r3
 80015fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001600:	eddf 6a13 	vldr	s13, [pc, #76]	; 8001650 <HAL_ADC_ConvCpltCallback+0x100>
 8001604:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001608:	edc7 7a04 	vstr	s15, [r7, #16]
	square_root = sqrt(mean);
 800160c:	6938      	ldr	r0, [r7, #16]
 800160e:	f7fe ff9b 	bl	8000548 <__aeabi_f2d>
 8001612:	4602      	mov	r2, r0
 8001614:	460b      	mov	r3, r1
 8001616:	ec43 2b10 	vmov	d0, r2, r3
 800161a:	f00d f96d 	bl	800e8f8 <sqrt>
 800161e:	ec53 2b10 	vmov	r2, r3, d0
 8001622:	4610      	mov	r0, r2
 8001624:	4619      	mov	r1, r3
 8001626:	f7ff fadf 	bl	8000be8 <__aeabi_d2f>
 800162a:	4603      	mov	r3, r0
 800162c:	60fb      	str	r3, [r7, #12]
	data_rms = square_root;
 800162e:	4a09      	ldr	r2, [pc, #36]	; (8001654 <HAL_ADC_ConvCpltCallback+0x104>)
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	6013      	str	r3, [r2, #0]
}
 8001634:	bf00      	nop
 8001636:	3720      	adds	r7, #32
 8001638:	46bd      	mov	sp, r7
 800163a:	bdb0      	pop	{r4, r5, r7, pc}
 800163c:	f3af 8000 	nop.w
 8001640:	00000000 	.word	0x00000000
 8001644:	40000000 	.word	0x40000000
 8001648:	200004dc 	.word	0x200004dc
 800164c:	20000554 	.word	0x20000554
 8001650:	42700000 	.word	0x42700000
 8001654:	20000390 	.word	0x20000390

08001658 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	4603      	mov	r3, r0
 8001660:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8001662:	2201      	movs	r2, #1
 8001664:	2108      	movs	r1, #8
 8001666:	4803      	ldr	r0, [pc, #12]	; (8001674 <HAL_GPIO_EXTI_Callback+0x1c>)
 8001668:	f002 f90e 	bl	8003888 <HAL_GPIO_WritePin>
}
 800166c:	bf00      	nop
 800166e:	3708      	adds	r7, #8
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	48000400 	.word	0x48000400

08001678 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800167e:	f000 fb4c 	bl	8001d1a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001682:	f000 f851 	bl	8001728 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001686:	f000 f8b1 	bl	80017ec <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800168a:	f7ff fbef 	bl	8000e6c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800168e:	f009 fee1 	bl	800b454 <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 8001692:	f7ff fc85 	bl	8000fa0 <MX_I2C1_Init>
  MX_TIM6_Init();
 8001696:	f000 faa7 	bl	8001be8 <MX_TIM6_Init>
  MX_DMA_Init();
 800169a:	f7ff fbc9 	bl	8000e30 <MX_DMA_Init>
  MX_ADC1_Init();
 800169e:	f7ff faf3 	bl	8000c88 <MX_ADC1_Init>
  MX_TIM1_Init();
 80016a2:	f000 fa4d 	bl	8001b40 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

	if (BNO_Init() != 0xA0) { //sprawdzenie, czy identyfikator urządzenia jest zgodny - weryfikacja poprawności komunikacji między urządzeniami
 80016a6:	f7ff fd57 	bl	8001158 <BNO_Init>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2ba0      	cmp	r3, #160	; 0xa0
 80016ae:	d001      	beq.n	80016b4 <main+0x3c>
		Error_Handler();
 80016b0:	f000 f8ca 	bl	8001848 <Error_Handler>
	}

	//inicjalizacja tablicy z pomiarami ADC zerami
	for(uint8_t i = 0; i < RMS_FRAME_LEN; i++){
 80016b4:	2300      	movs	r3, #0
 80016b6:	71fb      	strb	r3, [r7, #7]
 80016b8:	e007      	b.n	80016ca <main+0x52>
		data_raw[i] = 0;
 80016ba:	79fb      	ldrb	r3, [r7, #7]
 80016bc:	4a12      	ldr	r2, [pc, #72]	; (8001708 <main+0x90>)
 80016be:	2100      	movs	r1, #0
 80016c0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint8_t i = 0; i < RMS_FRAME_LEN; i++){
 80016c4:	79fb      	ldrb	r3, [r7, #7]
 80016c6:	3301      	adds	r3, #1
 80016c8:	71fb      	strb	r3, [r7, #7]
 80016ca:	79fb      	ldrb	r3, [r7, #7]
 80016cc:	2b3b      	cmp	r3, #59	; 0x3b
 80016ce:	d9f4      	bls.n	80016ba <main+0x42>
	}

	BNO_CheckCalibration(1);
 80016d0:	2001      	movs	r0, #1
 80016d2:	f7ff fe1b 	bl	800130c <BNO_CheckCalibration>
//	Mouse_SetBoundaries();

	HAL_TIM_Base_Start_IT(&htim6); // rozpoczęcie pracy timera odpowiedzialnego za przerwania
 80016d6:	480d      	ldr	r0, [pc, #52]	; (800170c <main+0x94>)
 80016d8:	f005 fd54 	bl	8007184 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim1);
 80016dc:	480c      	ldr	r0, [pc, #48]	; (8001710 <main+0x98>)
 80016de:	f005 fd05 	bl	80070ec <HAL_TIM_Base_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &emg, 1); //rozpoczęcie pracy przetwornika ADC w trybie DMA (bezpośredniego dostępu do pamięci z pominięciem CPU)
 80016e2:	2201      	movs	r2, #1
 80016e4:	490b      	ldr	r1, [pc, #44]	; (8001714 <main+0x9c>)
 80016e6:	480c      	ldr	r0, [pc, #48]	; (8001718 <main+0xa0>)
 80016e8:	f000 fec0 	bl	800246c <HAL_ADC_Start_DMA>
	USBD_Init(&mouseDevice, &FS_Desc, 0);
 80016ec:	2200      	movs	r2, #0
 80016ee:	490b      	ldr	r1, [pc, #44]	; (800171c <main+0xa4>)
 80016f0:	480b      	ldr	r0, [pc, #44]	; (8001720 <main+0xa8>)
 80016f2:	f008 fdad 	bl	800a250 <USBD_Init>
	USBD_RegisterClass(&mouseDevice, &USBD_HID);
 80016f6:	490b      	ldr	r1, [pc, #44]	; (8001724 <main+0xac>)
 80016f8:	4809      	ldr	r0, [pc, #36]	; (8001720 <main+0xa8>)
 80016fa:	f008 fdd9 	bl	800a2b0 <USBD_RegisterClass>
	USBD_Start(&mouseDevice);
 80016fe:	4808      	ldr	r0, [pc, #32]	; (8001720 <main+0xa8>)
 8001700:	f008 fdfd 	bl	800a2fe <USBD_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8001704:	e7fe      	b.n	8001704 <main+0x8c>
 8001706:	bf00      	nop
 8001708:	200004dc 	.word	0x200004dc
 800170c:	20000854 	.word	0x20000854
 8001710:	200008a0 	.word	0x200008a0
 8001714:	20000554 	.word	0x20000554
 8001718:	200003dc 	.word	0x200003dc
 800171c:	20000138 	.word	0x20000138
 8001720:	20000558 	.word	0x20000558
 8001724:	20000030 	.word	0x20000030

08001728 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b096      	sub	sp, #88	; 0x58
 800172c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800172e:	f107 0314 	add.w	r3, r7, #20
 8001732:	2244      	movs	r2, #68	; 0x44
 8001734:	2100      	movs	r1, #0
 8001736:	4618      	mov	r0, r3
 8001738:	f00a fb58 	bl	800bdec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800173c:	463b      	mov	r3, r7
 800173e:	2200      	movs	r2, #0
 8001740:	601a      	str	r2, [r3, #0]
 8001742:	605a      	str	r2, [r3, #4]
 8001744:	609a      	str	r2, [r3, #8]
 8001746:	60da      	str	r2, [r3, #12]
 8001748:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800174a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800174e:	f004 fb2b 	bl	8005da8 <HAL_PWREx_ControlVoltageScaling>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d001      	beq.n	800175c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001758:	f000 f876 	bl	8001848 <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800175c:	f004 fb06 	bl	8005d6c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001760:	4b21      	ldr	r3, [pc, #132]	; (80017e8 <SystemClock_Config+0xc0>)
 8001762:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001766:	4a20      	ldr	r2, [pc, #128]	; (80017e8 <SystemClock_Config+0xc0>)
 8001768:	f023 0318 	bic.w	r3, r3, #24
 800176c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001770:	2314      	movs	r3, #20
 8001772:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001774:	2301      	movs	r3, #1
 8001776:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001778:	2301      	movs	r3, #1
 800177a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800177c:	2300      	movs	r3, #0
 800177e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001780:	2360      	movs	r3, #96	; 0x60
 8001782:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001784:	2302      	movs	r3, #2
 8001786:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001788:	2301      	movs	r3, #1
 800178a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800178c:	2301      	movs	r3, #1
 800178e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8001790:	2310      	movs	r3, #16
 8001792:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001794:	2307      	movs	r3, #7
 8001796:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001798:	2302      	movs	r3, #2
 800179a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800179c:	2302      	movs	r3, #2
 800179e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017a0:	f107 0314 	add.w	r3, r7, #20
 80017a4:	4618      	mov	r0, r3
 80017a6:	f004 fb65 	bl	8005e74 <HAL_RCC_OscConfig>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80017b0:	f000 f84a 	bl	8001848 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017b4:	230f      	movs	r3, #15
 80017b6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017b8:	2303      	movs	r3, #3
 80017ba:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017bc:	2300      	movs	r3, #0
 80017be:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017c0:	2300      	movs	r3, #0
 80017c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017c4:	2300      	movs	r3, #0
 80017c6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80017c8:	463b      	mov	r3, r7
 80017ca:	2101      	movs	r1, #1
 80017cc:	4618      	mov	r0, r3
 80017ce:	f004 ff71 	bl	80066b4 <HAL_RCC_ClockConfig>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80017d8:	f000 f836 	bl	8001848 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80017dc:	f005 fb2c 	bl	8006e38 <HAL_RCCEx_EnableMSIPLLMode>
}
 80017e0:	bf00      	nop
 80017e2:	3758      	adds	r7, #88	; 0x58
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	40021000 	.word	0x40021000

080017ec <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b096      	sub	sp, #88	; 0x58
 80017f0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017f2:	1d3b      	adds	r3, r7, #4
 80017f4:	2254      	movs	r2, #84	; 0x54
 80017f6:	2100      	movs	r1, #0
 80017f8:	4618      	mov	r0, r3
 80017fa:	f00a faf7 	bl	800bdec <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
 80017fe:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001802:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001804:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001808:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800180a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800180e:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001810:	2301      	movs	r3, #1
 8001812:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001814:	2301      	movs	r3, #1
 8001816:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001818:	2318      	movs	r3, #24
 800181a:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800181c:	2307      	movs	r3, #7
 800181e:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001820:	2302      	movs	r3, #2
 8001822:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001824:	2302      	movs	r3, #2
 8001826:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 8001828:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 800182c:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800182e:	1d3b      	adds	r3, r7, #4
 8001830:	4618      	mov	r0, r3
 8001832:	f005 f90d 	bl	8006a50 <HAL_RCCEx_PeriphCLKConfig>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <PeriphCommonClock_Config+0x54>
  {
    Error_Handler();
 800183c:	f000 f804 	bl	8001848 <Error_Handler>
  }
}
 8001840:	bf00      	nop
 8001842:	3758      	adds	r7, #88	; 0x58
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}

08001848 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800184c:	b672      	cpsid	i
}
 800184e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin); //w razie wystąpienia błędu mruga dioda LD3 na płytce Nucleo
 8001850:	2108      	movs	r1, #8
 8001852:	4804      	ldr	r0, [pc, #16]	; (8001864 <Error_Handler+0x1c>)
 8001854:	f002 f830 	bl	80038b8 <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 8001858:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800185c:	f000 fad2 	bl	8001e04 <HAL_Delay>
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin); //w razie wystąpienia błędu mruga dioda LD3 na płytce Nucleo
 8001860:	e7f6      	b.n	8001850 <Error_Handler+0x8>
 8001862:	bf00      	nop
 8001864:	48000400 	.word	0x48000400

08001868 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800186e:	4b0f      	ldr	r3, [pc, #60]	; (80018ac <HAL_MspInit+0x44>)
 8001870:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001872:	4a0e      	ldr	r2, [pc, #56]	; (80018ac <HAL_MspInit+0x44>)
 8001874:	f043 0301 	orr.w	r3, r3, #1
 8001878:	6613      	str	r3, [r2, #96]	; 0x60
 800187a:	4b0c      	ldr	r3, [pc, #48]	; (80018ac <HAL_MspInit+0x44>)
 800187c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800187e:	f003 0301 	and.w	r3, r3, #1
 8001882:	607b      	str	r3, [r7, #4]
 8001884:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001886:	4b09      	ldr	r3, [pc, #36]	; (80018ac <HAL_MspInit+0x44>)
 8001888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800188a:	4a08      	ldr	r2, [pc, #32]	; (80018ac <HAL_MspInit+0x44>)
 800188c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001890:	6593      	str	r3, [r2, #88]	; 0x58
 8001892:	4b06      	ldr	r3, [pc, #24]	; (80018ac <HAL_MspInit+0x44>)
 8001894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800189a:	603b      	str	r3, [r7, #0]
 800189c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800189e:	bf00      	nop
 80018a0:	370c      	adds	r7, #12
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	40021000 	.word	0x40021000

080018b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018b4:	e7fe      	b.n	80018b4 <NMI_Handler+0x4>

080018b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018b6:	b480      	push	{r7}
 80018b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018ba:	e7fe      	b.n	80018ba <HardFault_Handler+0x4>

080018bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018c0:	e7fe      	b.n	80018c0 <MemManage_Handler+0x4>

080018c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018c2:	b480      	push	{r7}
 80018c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018c6:	e7fe      	b.n	80018c6 <BusFault_Handler+0x4>

080018c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018cc:	e7fe      	b.n	80018cc <UsageFault_Handler+0x4>

080018ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018ce:	b480      	push	{r7}
 80018d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018d2:	bf00      	nop
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr

080018dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018e0:	bf00      	nop
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr

080018ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018ea:	b480      	push	{r7}
 80018ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018ee:	bf00      	nop
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr

080018f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018fc:	f000 fa62 	bl	8001dc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001900:	bf00      	nop
 8001902:	bd80      	pop	{r7, pc}

08001904 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001908:	4802      	ldr	r0, [pc, #8]	; (8001914 <DMA1_Channel1_IRQHandler+0x10>)
 800190a:	f001 fd73 	bl	80033f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800190e:	bf00      	nop
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	20000440 	.word	0x20000440

08001918 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800191c:	2040      	movs	r0, #64	; 0x40
 800191e:	f001 ffe5 	bl	80038ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001922:	bf00      	nop
 8001924:	bd80      	pop	{r7, pc}
	...

08001928 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800192c:	4802      	ldr	r0, [pc, #8]	; (8001938 <TIM6_DAC_IRQHandler+0x10>)
 800192e:	f005 fc7d 	bl	800722c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001932:	bf00      	nop
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	20000854 	.word	0x20000854

0800193c <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001940:	4802      	ldr	r0, [pc, #8]	; (800194c <USB_IRQHandler+0x10>)
 8001942:	f002 fe90 	bl	8004666 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8001946:	bf00      	nop
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	20000e04 	.word	0x20000e04

08001950 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
	return 1;
 8001954:	2301      	movs	r3, #1
}
 8001956:	4618      	mov	r0, r3
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr

08001960 <_kill>:

int _kill(int pid, int sig)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
 8001968:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800196a:	f00a fa15 	bl	800bd98 <__errno>
 800196e:	4603      	mov	r3, r0
 8001970:	2216      	movs	r2, #22
 8001972:	601a      	str	r2, [r3, #0]
	return -1;
 8001974:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001978:	4618      	mov	r0, r3
 800197a:	3708      	adds	r7, #8
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}

08001980 <_exit>:

void _exit (int status)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001988:	f04f 31ff 	mov.w	r1, #4294967295
 800198c:	6878      	ldr	r0, [r7, #4]
 800198e:	f7ff ffe7 	bl	8001960 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001992:	e7fe      	b.n	8001992 <_exit+0x12>

08001994 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b086      	sub	sp, #24
 8001998:	af00      	add	r7, sp, #0
 800199a:	60f8      	str	r0, [r7, #12]
 800199c:	60b9      	str	r1, [r7, #8]
 800199e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019a0:	2300      	movs	r3, #0
 80019a2:	617b      	str	r3, [r7, #20]
 80019a4:	e00a      	b.n	80019bc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80019a6:	f3af 8000 	nop.w
 80019aa:	4601      	mov	r1, r0
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	1c5a      	adds	r2, r3, #1
 80019b0:	60ba      	str	r2, [r7, #8]
 80019b2:	b2ca      	uxtb	r2, r1
 80019b4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	3301      	adds	r3, #1
 80019ba:	617b      	str	r3, [r7, #20]
 80019bc:	697a      	ldr	r2, [r7, #20]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	429a      	cmp	r2, r3
 80019c2:	dbf0      	blt.n	80019a6 <_read+0x12>
	}

return len;
 80019c4:	687b      	ldr	r3, [r7, #4]
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3718      	adds	r7, #24
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}

080019ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019ce:	b580      	push	{r7, lr}
 80019d0:	b086      	sub	sp, #24
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	60f8      	str	r0, [r7, #12]
 80019d6:	60b9      	str	r1, [r7, #8]
 80019d8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019da:	2300      	movs	r3, #0
 80019dc:	617b      	str	r3, [r7, #20]
 80019de:	e009      	b.n	80019f4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	1c5a      	adds	r2, r3, #1
 80019e4:	60ba      	str	r2, [r7, #8]
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	4618      	mov	r0, r3
 80019ea:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	3301      	adds	r3, #1
 80019f2:	617b      	str	r3, [r7, #20]
 80019f4:	697a      	ldr	r2, [r7, #20]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	dbf1      	blt.n	80019e0 <_write+0x12>
	}
	return len;
 80019fc:	687b      	ldr	r3, [r7, #4]
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3718      	adds	r7, #24
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <_close>:

int _close(int file)
{
 8001a06:	b480      	push	{r7}
 8001a08:	b083      	sub	sp, #12
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	6078      	str	r0, [r7, #4]
	return -1;
 8001a0e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	370c      	adds	r7, #12
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr

08001a1e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	b083      	sub	sp, #12
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
 8001a26:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a2e:	605a      	str	r2, [r3, #4]
	return 0;
 8001a30:	2300      	movs	r3, #0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	370c      	adds	r7, #12
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr

08001a3e <_isatty>:

int _isatty(int file)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	b083      	sub	sp, #12
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]
	return 1;
 8001a46:	2301      	movs	r3, #1
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr

08001a54 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b085      	sub	sp, #20
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	60f8      	str	r0, [r7, #12]
 8001a5c:	60b9      	str	r1, [r7, #8]
 8001a5e:	607a      	str	r2, [r7, #4]
	return 0;
 8001a60:	2300      	movs	r3, #0
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3714      	adds	r7, #20
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
	...

08001a70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b086      	sub	sp, #24
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a78:	4a14      	ldr	r2, [pc, #80]	; (8001acc <_sbrk+0x5c>)
 8001a7a:	4b15      	ldr	r3, [pc, #84]	; (8001ad0 <_sbrk+0x60>)
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a84:	4b13      	ldr	r3, [pc, #76]	; (8001ad4 <_sbrk+0x64>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d102      	bne.n	8001a92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a8c:	4b11      	ldr	r3, [pc, #68]	; (8001ad4 <_sbrk+0x64>)
 8001a8e:	4a12      	ldr	r2, [pc, #72]	; (8001ad8 <_sbrk+0x68>)
 8001a90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a92:	4b10      	ldr	r3, [pc, #64]	; (8001ad4 <_sbrk+0x64>)
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4413      	add	r3, r2
 8001a9a:	693a      	ldr	r2, [r7, #16]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d207      	bcs.n	8001ab0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001aa0:	f00a f97a 	bl	800bd98 <__errno>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	220c      	movs	r2, #12
 8001aa8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001aaa:	f04f 33ff 	mov.w	r3, #4294967295
 8001aae:	e009      	b.n	8001ac4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ab0:	4b08      	ldr	r3, [pc, #32]	; (8001ad4 <_sbrk+0x64>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ab6:	4b07      	ldr	r3, [pc, #28]	; (8001ad4 <_sbrk+0x64>)
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4413      	add	r3, r2
 8001abe:	4a05      	ldr	r2, [pc, #20]	; (8001ad4 <_sbrk+0x64>)
 8001ac0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3718      	adds	r7, #24
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	2000c000 	.word	0x2000c000
 8001ad0:	00000400 	.word	0x00000400
 8001ad4:	200003b8 	.word	0x200003b8
 8001ad8:	20001108 	.word	0x20001108

08001adc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001ae0:	4b15      	ldr	r3, [pc, #84]	; (8001b38 <SystemInit+0x5c>)
 8001ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ae6:	4a14      	ldr	r2, [pc, #80]	; (8001b38 <SystemInit+0x5c>)
 8001ae8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001aec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001af0:	4b12      	ldr	r3, [pc, #72]	; (8001b3c <SystemInit+0x60>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a11      	ldr	r2, [pc, #68]	; (8001b3c <SystemInit+0x60>)
 8001af6:	f043 0301 	orr.w	r3, r3, #1
 8001afa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001afc:	4b0f      	ldr	r3, [pc, #60]	; (8001b3c <SystemInit+0x60>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001b02:	4b0e      	ldr	r3, [pc, #56]	; (8001b3c <SystemInit+0x60>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a0d      	ldr	r2, [pc, #52]	; (8001b3c <SystemInit+0x60>)
 8001b08:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001b0c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001b10:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001b12:	4b0a      	ldr	r3, [pc, #40]	; (8001b3c <SystemInit+0x60>)
 8001b14:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b18:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001b1a:	4b08      	ldr	r3, [pc, #32]	; (8001b3c <SystemInit+0x60>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a07      	ldr	r2, [pc, #28]	; (8001b3c <SystemInit+0x60>)
 8001b20:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b24:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001b26:	4b05      	ldr	r3, [pc, #20]	; (8001b3c <SystemInit+0x60>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	619a      	str	r2, [r3, #24]
}
 8001b2c:	bf00      	nop
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	e000ed00 	.word	0xe000ed00
 8001b3c:	40021000 	.word	0x40021000

08001b40 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b088      	sub	sp, #32
 8001b44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b46:	f107 0310 	add.w	r3, r7, #16
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	601a      	str	r2, [r3, #0]
 8001b4e:	605a      	str	r2, [r3, #4]
 8001b50:	609a      	str	r2, [r3, #8]
 8001b52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b54:	1d3b      	adds	r3, r7, #4
 8001b56:	2200      	movs	r2, #0
 8001b58:	601a      	str	r2, [r3, #0]
 8001b5a:	605a      	str	r2, [r3, #4]
 8001b5c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b5e:	4b20      	ldr	r3, [pc, #128]	; (8001be0 <MX_TIM1_Init+0xa0>)
 8001b60:	4a20      	ldr	r2, [pc, #128]	; (8001be4 <MX_TIM1_Init+0xa4>)
 8001b62:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 99-1;
 8001b64:	4b1e      	ldr	r3, [pc, #120]	; (8001be0 <MX_TIM1_Init+0xa0>)
 8001b66:	2262      	movs	r2, #98	; 0x62
 8001b68:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b6a:	4b1d      	ldr	r3, [pc, #116]	; (8001be0 <MX_TIM1_Init+0xa0>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 319-1;
 8001b70:	4b1b      	ldr	r3, [pc, #108]	; (8001be0 <MX_TIM1_Init+0xa0>)
 8001b72:	f44f 729f 	mov.w	r2, #318	; 0x13e
 8001b76:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b78:	4b19      	ldr	r3, [pc, #100]	; (8001be0 <MX_TIM1_Init+0xa0>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b7e:	4b18      	ldr	r3, [pc, #96]	; (8001be0 <MX_TIM1_Init+0xa0>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b84:	4b16      	ldr	r3, [pc, #88]	; (8001be0 <MX_TIM1_Init+0xa0>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001b8a:	4815      	ldr	r0, [pc, #84]	; (8001be0 <MX_TIM1_Init+0xa0>)
 8001b8c:	f005 fa56 	bl	800703c <HAL_TIM_Base_Init>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001b96:	f7ff fe57 	bl	8001848 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b9e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001ba0:	f107 0310 	add.w	r3, r7, #16
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	480e      	ldr	r0, [pc, #56]	; (8001be0 <MX_TIM1_Init+0xa0>)
 8001ba8:	f005 fc5f 	bl	800746a <HAL_TIM_ConfigClockSource>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001bb2:	f7ff fe49 	bl	8001848 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001bb6:	2320      	movs	r3, #32
 8001bb8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 8001bba:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001bbe:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001bc4:	1d3b      	adds	r3, r7, #4
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	4805      	ldr	r0, [pc, #20]	; (8001be0 <MX_TIM1_Init+0xa0>)
 8001bca:	f005 fe3b 	bl	8007844 <HAL_TIMEx_MasterConfigSynchronization>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d001      	beq.n	8001bd8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001bd4:	f7ff fe38 	bl	8001848 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001bd8:	bf00      	nop
 8001bda:	3720      	adds	r7, #32
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	200008a0 	.word	0x200008a0
 8001be4:	40012c00 	.word	0x40012c00

08001be8 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b084      	sub	sp, #16
 8001bec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bee:	1d3b      	adds	r3, r7, #4
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]
 8001bf4:	605a      	str	r2, [r3, #4]
 8001bf6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001bf8:	4b14      	ldr	r3, [pc, #80]	; (8001c4c <MX_TIM6_Init+0x64>)
 8001bfa:	4a15      	ldr	r2, [pc, #84]	; (8001c50 <MX_TIM6_Init+0x68>)
 8001bfc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1249;
 8001bfe:	4b13      	ldr	r3, [pc, #76]	; (8001c4c <MX_TIM6_Init+0x64>)
 8001c00:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8001c04:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c06:	4b11      	ldr	r3, [pc, #68]	; (8001c4c <MX_TIM6_Init+0x64>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 255;
 8001c0c:	4b0f      	ldr	r3, [pc, #60]	; (8001c4c <MX_TIM6_Init+0x64>)
 8001c0e:	22ff      	movs	r2, #255	; 0xff
 8001c10:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c12:	4b0e      	ldr	r3, [pc, #56]	; (8001c4c <MX_TIM6_Init+0x64>)
 8001c14:	2280      	movs	r2, #128	; 0x80
 8001c16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001c18:	480c      	ldr	r0, [pc, #48]	; (8001c4c <MX_TIM6_Init+0x64>)
 8001c1a:	f005 fa0f 	bl	800703c <HAL_TIM_Base_Init>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001c24:	f7ff fe10 	bl	8001848 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001c30:	1d3b      	adds	r3, r7, #4
 8001c32:	4619      	mov	r1, r3
 8001c34:	4805      	ldr	r0, [pc, #20]	; (8001c4c <MX_TIM6_Init+0x64>)
 8001c36:	f005 fe05 	bl	8007844 <HAL_TIMEx_MasterConfigSynchronization>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001c40:	f7ff fe02 	bl	8001848 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001c44:	bf00      	nop
 8001c46:	3710      	adds	r7, #16
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	20000854 	.word	0x20000854
 8001c50:	40001000 	.word	0x40001000

08001c54 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a16      	ldr	r2, [pc, #88]	; (8001cbc <HAL_TIM_Base_MspInit+0x68>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d10c      	bne.n	8001c80 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c66:	4b16      	ldr	r3, [pc, #88]	; (8001cc0 <HAL_TIM_Base_MspInit+0x6c>)
 8001c68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c6a:	4a15      	ldr	r2, [pc, #84]	; (8001cc0 <HAL_TIM_Base_MspInit+0x6c>)
 8001c6c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c70:	6613      	str	r3, [r2, #96]	; 0x60
 8001c72:	4b13      	ldr	r3, [pc, #76]	; (8001cc0 <HAL_TIM_Base_MspInit+0x6c>)
 8001c74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c7a:	60fb      	str	r3, [r7, #12]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001c7e:	e018      	b.n	8001cb2 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM6)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a0f      	ldr	r2, [pc, #60]	; (8001cc4 <HAL_TIM_Base_MspInit+0x70>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d113      	bne.n	8001cb2 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001c8a:	4b0d      	ldr	r3, [pc, #52]	; (8001cc0 <HAL_TIM_Base_MspInit+0x6c>)
 8001c8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c8e:	4a0c      	ldr	r2, [pc, #48]	; (8001cc0 <HAL_TIM_Base_MspInit+0x6c>)
 8001c90:	f043 0310 	orr.w	r3, r3, #16
 8001c94:	6593      	str	r3, [r2, #88]	; 0x58
 8001c96:	4b0a      	ldr	r3, [pc, #40]	; (8001cc0 <HAL_TIM_Base_MspInit+0x6c>)
 8001c98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c9a:	f003 0310 	and.w	r3, r3, #16
 8001c9e:	60bb      	str	r3, [r7, #8]
 8001ca0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	2100      	movs	r1, #0
 8001ca6:	2036      	movs	r0, #54	; 0x36
 8001ca8:	f001 fa47 	bl	800313a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001cac:	2036      	movs	r0, #54	; 0x36
 8001cae:	f001 fa60 	bl	8003172 <HAL_NVIC_EnableIRQ>
}
 8001cb2:	bf00      	nop
 8001cb4:	3710      	adds	r7, #16
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	40012c00 	.word	0x40012c00
 8001cc0:	40021000 	.word	0x40021000
 8001cc4:	40001000 	.word	0x40001000

08001cc8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001cc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d00 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ccc:	f7ff ff06 	bl	8001adc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001cd0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001cd2:	e003      	b.n	8001cdc <LoopCopyDataInit>

08001cd4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001cd4:	4b0b      	ldr	r3, [pc, #44]	; (8001d04 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001cd6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001cd8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001cda:	3104      	adds	r1, #4

08001cdc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001cdc:	480a      	ldr	r0, [pc, #40]	; (8001d08 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001cde:	4b0b      	ldr	r3, [pc, #44]	; (8001d0c <LoopForever+0xe>)
	adds	r2, r0, r1
 8001ce0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001ce2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001ce4:	d3f6      	bcc.n	8001cd4 <CopyDataInit>
	ldr	r2, =_sbss
 8001ce6:	4a0a      	ldr	r2, [pc, #40]	; (8001d10 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001ce8:	e002      	b.n	8001cf0 <LoopFillZerobss>

08001cea <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001cea:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001cec:	f842 3b04 	str.w	r3, [r2], #4

08001cf0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001cf0:	4b08      	ldr	r3, [pc, #32]	; (8001d14 <LoopForever+0x16>)
	cmp	r2, r3
 8001cf2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001cf4:	d3f9      	bcc.n	8001cea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cf6:	f00a f855 	bl	800bda4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001cfa:	f7ff fcbd 	bl	8001678 <main>

08001cfe <LoopForever>:

LoopForever:
    b LoopForever
 8001cfe:	e7fe      	b.n	8001cfe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001d00:	2000c000 	.word	0x2000c000
	ldr	r3, =_sidata
 8001d04:	0800fc40 	.word	0x0800fc40
	ldr	r0, =_sdata
 8001d08:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001d0c:	2000036c 	.word	0x2000036c
	ldr	r2, =_sbss
 8001d10:	20000370 	.word	0x20000370
	ldr	r3, = _ebss
 8001d14:	20001108 	.word	0x20001108

08001d18 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d18:	e7fe      	b.n	8001d18 <ADC1_IRQHandler>

08001d1a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d1a:	b580      	push	{r7, lr}
 8001d1c:	b082      	sub	sp, #8
 8001d1e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d20:	2300      	movs	r3, #0
 8001d22:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d24:	2003      	movs	r0, #3
 8001d26:	f001 f9fd 	bl	8003124 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d2a:	2000      	movs	r0, #0
 8001d2c:	f000 f80e 	bl	8001d4c <HAL_InitTick>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d002      	beq.n	8001d3c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	71fb      	strb	r3, [r7, #7]
 8001d3a:	e001      	b.n	8001d40 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d3c:	f7ff fd94 	bl	8001868 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d40:	79fb      	ldrb	r3, [r7, #7]
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3708      	adds	r7, #8
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
	...

08001d4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b084      	sub	sp, #16
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d54:	2300      	movs	r3, #0
 8001d56:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001d58:	4b17      	ldr	r3, [pc, #92]	; (8001db8 <HAL_InitTick+0x6c>)
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d023      	beq.n	8001da8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001d60:	4b16      	ldr	r3, [pc, #88]	; (8001dbc <HAL_InitTick+0x70>)
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	4b14      	ldr	r3, [pc, #80]	; (8001db8 <HAL_InitTick+0x6c>)
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	4619      	mov	r1, r3
 8001d6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d76:	4618      	mov	r0, r3
 8001d78:	f001 fa09 	bl	800318e <HAL_SYSTICK_Config>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d10f      	bne.n	8001da2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2b0f      	cmp	r3, #15
 8001d86:	d809      	bhi.n	8001d9c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d88:	2200      	movs	r2, #0
 8001d8a:	6879      	ldr	r1, [r7, #4]
 8001d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d90:	f001 f9d3 	bl	800313a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d94:	4a0a      	ldr	r2, [pc, #40]	; (8001dc0 <HAL_InitTick+0x74>)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6013      	str	r3, [r2, #0]
 8001d9a:	e007      	b.n	8001dac <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	73fb      	strb	r3, [r7, #15]
 8001da0:	e004      	b.n	8001dac <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	73fb      	strb	r3, [r7, #15]
 8001da6:	e001      	b.n	8001dac <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3710      	adds	r7, #16
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	2000002c 	.word	0x2000002c
 8001dbc:	20000024 	.word	0x20000024
 8001dc0:	20000028 	.word	0x20000028

08001dc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001dc8:	4b06      	ldr	r3, [pc, #24]	; (8001de4 <HAL_IncTick+0x20>)
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	461a      	mov	r2, r3
 8001dce:	4b06      	ldr	r3, [pc, #24]	; (8001de8 <HAL_IncTick+0x24>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4413      	add	r3, r2
 8001dd4:	4a04      	ldr	r2, [pc, #16]	; (8001de8 <HAL_IncTick+0x24>)
 8001dd6:	6013      	str	r3, [r2, #0]
}
 8001dd8:	bf00      	nop
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	2000002c 	.word	0x2000002c
 8001de8:	20000930 	.word	0x20000930

08001dec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
  return uwTick;
 8001df0:	4b03      	ldr	r3, [pc, #12]	; (8001e00 <HAL_GetTick+0x14>)
 8001df2:	681b      	ldr	r3, [r3, #0]
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	20000930 	.word	0x20000930

08001e04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b084      	sub	sp, #16
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e0c:	f7ff ffee 	bl	8001dec <HAL_GetTick>
 8001e10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e1c:	d005      	beq.n	8001e2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001e1e:	4b0a      	ldr	r3, [pc, #40]	; (8001e48 <HAL_Delay+0x44>)
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	461a      	mov	r2, r3
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	4413      	add	r3, r2
 8001e28:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e2a:	bf00      	nop
 8001e2c:	f7ff ffde 	bl	8001dec <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	68fa      	ldr	r2, [r7, #12]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d8f7      	bhi.n	8001e2c <HAL_Delay+0x28>
  {
  }
}
 8001e3c:	bf00      	nop
 8001e3e:	bf00      	nop
 8001e40:	3710      	adds	r7, #16
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	2000002c 	.word	0x2000002c

08001e4c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	431a      	orrs	r2, r3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	609a      	str	r2, [r3, #8]
}
 8001e66:	bf00      	nop
 8001e68:	370c      	adds	r7, #12
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr

08001e72 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001e72:	b480      	push	{r7}
 8001e74:	b083      	sub	sp, #12
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
 8001e7a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	431a      	orrs	r2, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	609a      	str	r2, [r3, #8]
}
 8001e8c:	bf00      	nop
 8001e8e:	370c      	adds	r7, #12
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr

08001e98 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	370c      	adds	r7, #12
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr

08001eb4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b087      	sub	sp, #28
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	60f8      	str	r0, [r7, #12]
 8001ebc:	60b9      	str	r1, [r7, #8]
 8001ebe:	607a      	str	r2, [r7, #4]
 8001ec0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	3360      	adds	r3, #96	; 0x60
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	4413      	add	r3, r2
 8001ece:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	4b08      	ldr	r3, [pc, #32]	; (8001ef8 <LL_ADC_SetOffset+0x44>)
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001ede:	683a      	ldr	r2, [r7, #0]
 8001ee0:	430a      	orrs	r2, r1
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001eec:	bf00      	nop
 8001eee:	371c      	adds	r7, #28
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr
 8001ef8:	03fff000 	.word	0x03fff000

08001efc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b085      	sub	sp, #20
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
 8001f04:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	3360      	adds	r3, #96	; 0x60
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	4413      	add	r3, r2
 8001f12:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3714      	adds	r7, #20
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b087      	sub	sp, #28
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	60f8      	str	r0, [r7, #12]
 8001f30:	60b9      	str	r1, [r7, #8]
 8001f32:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	3360      	adds	r3, #96	; 0x60
 8001f38:	461a      	mov	r2, r3
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	4413      	add	r3, r2
 8001f40:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	431a      	orrs	r2, r3
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001f52:	bf00      	nop
 8001f54:	371c      	adds	r7, #28
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr

08001f5e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001f5e:	b480      	push	{r7}
 8001f60:	b083      	sub	sp, #12
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	68db      	ldr	r3, [r3, #12]
 8001f6a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d101      	bne.n	8001f76 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001f72:	2301      	movs	r3, #1
 8001f74:	e000      	b.n	8001f78 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001f76:	2300      	movs	r3, #0
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	370c      	adds	r7, #12
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr

08001f84 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b087      	sub	sp, #28
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	60f8      	str	r0, [r7, #12]
 8001f8c:	60b9      	str	r1, [r7, #8]
 8001f8e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	3330      	adds	r3, #48	; 0x30
 8001f94:	461a      	mov	r2, r3
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	0a1b      	lsrs	r3, r3, #8
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	f003 030c 	and.w	r3, r3, #12
 8001fa0:	4413      	add	r3, r2
 8001fa2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	f003 031f 	and.w	r3, r3, #31
 8001fae:	211f      	movs	r1, #31
 8001fb0:	fa01 f303 	lsl.w	r3, r1, r3
 8001fb4:	43db      	mvns	r3, r3
 8001fb6:	401a      	ands	r2, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	0e9b      	lsrs	r3, r3, #26
 8001fbc:	f003 011f 	and.w	r1, r3, #31
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	f003 031f 	and.w	r3, r3, #31
 8001fc6:	fa01 f303 	lsl.w	r3, r1, r3
 8001fca:	431a      	orrs	r2, r3
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001fd0:	bf00      	nop
 8001fd2:	371c      	adds	r7, #28
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b087      	sub	sp, #28
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	60f8      	str	r0, [r7, #12]
 8001fe4:	60b9      	str	r1, [r7, #8]
 8001fe6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	3314      	adds	r3, #20
 8001fec:	461a      	mov	r2, r3
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	0e5b      	lsrs	r3, r3, #25
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	f003 0304 	and.w	r3, r3, #4
 8001ff8:	4413      	add	r3, r2
 8001ffa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	0d1b      	lsrs	r3, r3, #20
 8002004:	f003 031f 	and.w	r3, r3, #31
 8002008:	2107      	movs	r1, #7
 800200a:	fa01 f303 	lsl.w	r3, r1, r3
 800200e:	43db      	mvns	r3, r3
 8002010:	401a      	ands	r2, r3
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	0d1b      	lsrs	r3, r3, #20
 8002016:	f003 031f 	and.w	r3, r3, #31
 800201a:	6879      	ldr	r1, [r7, #4]
 800201c:	fa01 f303 	lsl.w	r3, r1, r3
 8002020:	431a      	orrs	r2, r3
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002026:	bf00      	nop
 8002028:	371c      	adds	r7, #28
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
	...

08002034 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002034:	b480      	push	{r7}
 8002036:	b085      	sub	sp, #20
 8002038:	af00      	add	r7, sp, #0
 800203a:	60f8      	str	r0, [r7, #12]
 800203c:	60b9      	str	r1, [r7, #8]
 800203e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800204c:	43db      	mvns	r3, r3
 800204e:	401a      	ands	r2, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f003 0318 	and.w	r3, r3, #24
 8002056:	4908      	ldr	r1, [pc, #32]	; (8002078 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002058:	40d9      	lsrs	r1, r3
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	400b      	ands	r3, r1
 800205e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002062:	431a      	orrs	r2, r3
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800206a:	bf00      	nop
 800206c:	3714      	adds	r7, #20
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	0007ffff 	.word	0x0007ffff

0800207c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800208c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002090:	687a      	ldr	r2, [r7, #4]
 8002092:	6093      	str	r3, [r2, #8]
}
 8002094:	bf00      	nop
 8002096:	370c      	adds	r7, #12
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80020b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80020b4:	d101      	bne.n	80020ba <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80020b6:	2301      	movs	r3, #1
 80020b8:	e000      	b.n	80020bc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80020ba:	2300      	movs	r3, #0
}
 80020bc:	4618      	mov	r0, r3
 80020be:	370c      	adds	r7, #12
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr

080020c8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80020d8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80020dc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80020e4:	bf00      	nop
 80020e6:	370c      	adds	r7, #12
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr

080020f0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002100:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002104:	d101      	bne.n	800210a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002106:	2301      	movs	r3, #1
 8002108:	e000      	b.n	800210c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800210a:	2300      	movs	r3, #0
}
 800210c:	4618      	mov	r0, r3
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr

08002118 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002128:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800212c:	f043 0201 	orr.w	r2, r3, #1
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002134:	bf00      	nop
 8002136:	370c      	adds	r7, #12
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	f003 0301 	and.w	r3, r3, #1
 8002150:	2b01      	cmp	r3, #1
 8002152:	d101      	bne.n	8002158 <LL_ADC_IsEnabled+0x18>
 8002154:	2301      	movs	r3, #1
 8002156:	e000      	b.n	800215a <LL_ADC_IsEnabled+0x1a>
 8002158:	2300      	movs	r3, #0
}
 800215a:	4618      	mov	r0, r3
 800215c:	370c      	adds	r7, #12
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr

08002166 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002166:	b480      	push	{r7}
 8002168:	b083      	sub	sp, #12
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002176:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800217a:	f043 0204 	orr.w	r2, r3, #4
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002182:	bf00      	nop
 8002184:	370c      	adds	r7, #12
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr

0800218e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800218e:	b480      	push	{r7}
 8002190:	b083      	sub	sp, #12
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	f003 0304 	and.w	r3, r3, #4
 800219e:	2b04      	cmp	r3, #4
 80021a0:	d101      	bne.n	80021a6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80021a2:	2301      	movs	r3, #1
 80021a4:	e000      	b.n	80021a8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80021a6:	2300      	movs	r3, #0
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	370c      	adds	r7, #12
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr

080021b4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	f003 0308 	and.w	r3, r3, #8
 80021c4:	2b08      	cmp	r3, #8
 80021c6:	d101      	bne.n	80021cc <LL_ADC_INJ_IsConversionOngoing+0x18>
 80021c8:	2301      	movs	r3, #1
 80021ca:	e000      	b.n	80021ce <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80021cc:	2300      	movs	r3, #0
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	370c      	adds	r7, #12
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
	...

080021dc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b088      	sub	sp, #32
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021e4:	2300      	movs	r3, #0
 80021e6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80021e8:	2300      	movs	r3, #0
 80021ea:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d101      	bne.n	80021f6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e12c      	b.n	8002450 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	691b      	ldr	r3, [r3, #16]
 80021fa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002200:	2b00      	cmp	r3, #0
 8002202:	d109      	bne.n	8002218 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	f7fe fda5 	bl	8000d54 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2200      	movs	r2, #0
 800220e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2200      	movs	r2, #0
 8002214:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4618      	mov	r0, r3
 800221e:	f7ff ff3f 	bl	80020a0 <LL_ADC_IsDeepPowerDownEnabled>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d004      	beq.n	8002232 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4618      	mov	r0, r3
 800222e:	f7ff ff25 	bl	800207c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4618      	mov	r0, r3
 8002238:	f7ff ff5a 	bl	80020f0 <LL_ADC_IsInternalRegulatorEnabled>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d115      	bne.n	800226e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4618      	mov	r0, r3
 8002248:	f7ff ff3e 	bl	80020c8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800224c:	4b82      	ldr	r3, [pc, #520]	; (8002458 <HAL_ADC_Init+0x27c>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	099b      	lsrs	r3, r3, #6
 8002252:	4a82      	ldr	r2, [pc, #520]	; (800245c <HAL_ADC_Init+0x280>)
 8002254:	fba2 2303 	umull	r2, r3, r2, r3
 8002258:	099b      	lsrs	r3, r3, #6
 800225a:	3301      	adds	r3, #1
 800225c:	005b      	lsls	r3, r3, #1
 800225e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002260:	e002      	b.n	8002268 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	3b01      	subs	r3, #1
 8002266:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d1f9      	bne.n	8002262 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4618      	mov	r0, r3
 8002274:	f7ff ff3c 	bl	80020f0 <LL_ADC_IsInternalRegulatorEnabled>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d10d      	bne.n	800229a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002282:	f043 0210 	orr.w	r2, r3, #16
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800228e:	f043 0201 	orr.w	r2, r3, #1
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4618      	mov	r0, r3
 80022a0:	f7ff ff75 	bl	800218e <LL_ADC_REG_IsConversionOngoing>
 80022a4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022aa:	f003 0310 	and.w	r3, r3, #16
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	f040 80c5 	bne.w	800243e <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	f040 80c1 	bne.w	800243e <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022c0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80022c4:	f043 0202 	orr.w	r2, r3, #2
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4618      	mov	r0, r3
 80022d2:	f7ff ff35 	bl	8002140 <LL_ADC_IsEnabled>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d10b      	bne.n	80022f4 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80022dc:	4860      	ldr	r0, [pc, #384]	; (8002460 <HAL_ADC_Init+0x284>)
 80022de:	f7ff ff2f 	bl	8002140 <LL_ADC_IsEnabled>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d105      	bne.n	80022f4 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	4619      	mov	r1, r3
 80022ee:	485d      	ldr	r0, [pc, #372]	; (8002464 <HAL_ADC_Init+0x288>)
 80022f0:	f7ff fdac 	bl	8001e4c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	7e5b      	ldrb	r3, [r3, #25]
 80022f8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80022fe:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002304:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800230a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002312:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002314:	4313      	orrs	r3, r2
 8002316:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800231e:	2b01      	cmp	r3, #1
 8002320:	d106      	bne.n	8002330 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002326:	3b01      	subs	r3, #1
 8002328:	045b      	lsls	r3, r3, #17
 800232a:	69ba      	ldr	r2, [r7, #24]
 800232c:	4313      	orrs	r3, r2
 800232e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002334:	2b00      	cmp	r3, #0
 8002336:	d009      	beq.n	800234c <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800233c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002344:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002346:	69ba      	ldr	r2, [r7, #24]
 8002348:	4313      	orrs	r3, r2
 800234a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	68da      	ldr	r2, [r3, #12]
 8002352:	4b45      	ldr	r3, [pc, #276]	; (8002468 <HAL_ADC_Init+0x28c>)
 8002354:	4013      	ands	r3, r2
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	6812      	ldr	r2, [r2, #0]
 800235a:	69b9      	ldr	r1, [r7, #24]
 800235c:	430b      	orrs	r3, r1
 800235e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4618      	mov	r0, r3
 8002366:	f7ff ff12 	bl	800218e <LL_ADC_REG_IsConversionOngoing>
 800236a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4618      	mov	r0, r3
 8002372:	f7ff ff1f 	bl	80021b4 <LL_ADC_INJ_IsConversionOngoing>
 8002376:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d13d      	bne.n	80023fa <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d13a      	bne.n	80023fa <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002388:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002390:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002392:	4313      	orrs	r3, r2
 8002394:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80023a0:	f023 0302 	bic.w	r3, r3, #2
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	6812      	ldr	r2, [r2, #0]
 80023a8:	69b9      	ldr	r1, [r7, #24]
 80023aa:	430b      	orrs	r3, r1
 80023ac:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d118      	bne.n	80023ea <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	691b      	ldr	r3, [r3, #16]
 80023be:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80023c2:	f023 0304 	bic.w	r3, r3, #4
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80023ce:	4311      	orrs	r1, r2
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80023d4:	4311      	orrs	r1, r2
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80023da:	430a      	orrs	r2, r1
 80023dc:	431a      	orrs	r2, r3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f042 0201 	orr.w	r2, r2, #1
 80023e6:	611a      	str	r2, [r3, #16]
 80023e8:	e007      	b.n	80023fa <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	691a      	ldr	r2, [r3, #16]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f022 0201 	bic.w	r2, r2, #1
 80023f8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	691b      	ldr	r3, [r3, #16]
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d10c      	bne.n	800241c <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002408:	f023 010f 	bic.w	r1, r3, #15
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	69db      	ldr	r3, [r3, #28]
 8002410:	1e5a      	subs	r2, r3, #1
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	430a      	orrs	r2, r1
 8002418:	631a      	str	r2, [r3, #48]	; 0x30
 800241a:	e007      	b.n	800242c <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f022 020f 	bic.w	r2, r2, #15
 800242a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002430:	f023 0303 	bic.w	r3, r3, #3
 8002434:	f043 0201 	orr.w	r2, r3, #1
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	655a      	str	r2, [r3, #84]	; 0x54
 800243c:	e007      	b.n	800244e <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002442:	f043 0210 	orr.w	r2, r3, #16
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800244e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002450:	4618      	mov	r0, r3
 8002452:	3720      	adds	r7, #32
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	20000024 	.word	0x20000024
 800245c:	053e2d63 	.word	0x053e2d63
 8002460:	50040000 	.word	0x50040000
 8002464:	50040300 	.word	0x50040300
 8002468:	fff0c007 	.word	0xfff0c007

0800246c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b086      	sub	sp, #24
 8002470:	af00      	add	r7, sp, #0
 8002472:	60f8      	str	r0, [r7, #12]
 8002474:	60b9      	str	r1, [r7, #8]
 8002476:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4618      	mov	r0, r3
 800247e:	f7ff fe86 	bl	800218e <LL_ADC_REG_IsConversionOngoing>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d167      	bne.n	8002558 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800248e:	2b01      	cmp	r3, #1
 8002490:	d101      	bne.n	8002496 <HAL_ADC_Start_DMA+0x2a>
 8002492:	2302      	movs	r3, #2
 8002494:	e063      	b.n	800255e <HAL_ADC_Start_DMA+0xf2>
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2201      	movs	r2, #1
 800249a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800249e:	68f8      	ldr	r0, [r7, #12]
 80024a0:	f000 fc5c 	bl	8002d5c <ADC_Enable>
 80024a4:	4603      	mov	r3, r0
 80024a6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80024a8:	7dfb      	ldrb	r3, [r7, #23]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d14f      	bne.n	800254e <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024b2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80024b6:	f023 0301 	bic.w	r3, r3, #1
 80024ba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d006      	beq.n	80024dc <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024d2:	f023 0206 	bic.w	r2, r3, #6
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	659a      	str	r2, [r3, #88]	; 0x58
 80024da:	e002      	b.n	80024e2 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2200      	movs	r2, #0
 80024e0:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024e6:	4a20      	ldr	r2, [pc, #128]	; (8002568 <HAL_ADC_Start_DMA+0xfc>)
 80024e8:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ee:	4a1f      	ldr	r2, [pc, #124]	; (800256c <HAL_ADC_Start_DMA+0x100>)
 80024f0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024f6:	4a1e      	ldr	r2, [pc, #120]	; (8002570 <HAL_ADC_Start_DMA+0x104>)
 80024f8:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	221c      	movs	r2, #28
 8002500:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2200      	movs	r2, #0
 8002506:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	685a      	ldr	r2, [r3, #4]
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f042 0210 	orr.w	r2, r2, #16
 8002518:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	68da      	ldr	r2, [r3, #12]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f042 0201 	orr.w	r2, r2, #1
 8002528:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	3340      	adds	r3, #64	; 0x40
 8002534:	4619      	mov	r1, r3
 8002536:	68ba      	ldr	r2, [r7, #8]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f000 fefb 	bl	8003334 <HAL_DMA_Start_IT>
 800253e:	4603      	mov	r3, r0
 8002540:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4618      	mov	r0, r3
 8002548:	f7ff fe0d 	bl	8002166 <LL_ADC_REG_StartConversion>
 800254c:	e006      	b.n	800255c <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2200      	movs	r2, #0
 8002552:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002556:	e001      	b.n	800255c <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002558:	2302      	movs	r3, #2
 800255a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800255c:	7dfb      	ldrb	r3, [r7, #23]
}
 800255e:	4618      	mov	r0, r3
 8002560:	3718      	adds	r7, #24
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	08002e21 	.word	0x08002e21
 800256c:	08002ef9 	.word	0x08002ef9
 8002570:	08002f15 	.word	0x08002f15

08002574 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800257c:	bf00      	nop
 800257e:	370c      	adds	r7, #12
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr

08002588 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002590:	bf00      	nop
 8002592:	370c      	adds	r7, #12
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr

0800259c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b0b6      	sub	sp, #216	; 0xd8
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025a6:	2300      	movs	r3, #0
 80025a8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80025ac:	2300      	movs	r3, #0
 80025ae:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d101      	bne.n	80025be <HAL_ADC_ConfigChannel+0x22>
 80025ba:	2302      	movs	r3, #2
 80025bc:	e3b9      	b.n	8002d32 <HAL_ADC_ConfigChannel+0x796>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2201      	movs	r2, #1
 80025c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4618      	mov	r0, r3
 80025cc:	f7ff fddf 	bl	800218e <LL_ADC_REG_IsConversionOngoing>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	f040 839e 	bne.w	8002d14 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	2b05      	cmp	r3, #5
 80025de:	d824      	bhi.n	800262a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	3b02      	subs	r3, #2
 80025e6:	2b03      	cmp	r3, #3
 80025e8:	d81b      	bhi.n	8002622 <HAL_ADC_ConfigChannel+0x86>
 80025ea:	a201      	add	r2, pc, #4	; (adr r2, 80025f0 <HAL_ADC_ConfigChannel+0x54>)
 80025ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025f0:	08002601 	.word	0x08002601
 80025f4:	08002609 	.word	0x08002609
 80025f8:	08002611 	.word	0x08002611
 80025fc:	08002619 	.word	0x08002619
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	220c      	movs	r2, #12
 8002604:	605a      	str	r2, [r3, #4]
          break;
 8002606:	e011      	b.n	800262c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	2212      	movs	r2, #18
 800260c:	605a      	str	r2, [r3, #4]
          break;
 800260e:	e00d      	b.n	800262c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	2218      	movs	r2, #24
 8002614:	605a      	str	r2, [r3, #4]
          break;
 8002616:	e009      	b.n	800262c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800261e:	605a      	str	r2, [r3, #4]
          break;
 8002620:	e004      	b.n	800262c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	2206      	movs	r2, #6
 8002626:	605a      	str	r2, [r3, #4]
          break;
 8002628:	e000      	b.n	800262c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800262a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6818      	ldr	r0, [r3, #0]
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	6859      	ldr	r1, [r3, #4]
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	461a      	mov	r2, r3
 800263a:	f7ff fca3 	bl	8001f84 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4618      	mov	r0, r3
 8002644:	f7ff fda3 	bl	800218e <LL_ADC_REG_IsConversionOngoing>
 8002648:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4618      	mov	r0, r3
 8002652:	f7ff fdaf 	bl	80021b4 <LL_ADC_INJ_IsConversionOngoing>
 8002656:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800265a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800265e:	2b00      	cmp	r3, #0
 8002660:	f040 81a6 	bne.w	80029b0 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002664:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002668:	2b00      	cmp	r3, #0
 800266a:	f040 81a1 	bne.w	80029b0 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6818      	ldr	r0, [r3, #0]
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	6819      	ldr	r1, [r3, #0]
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	461a      	mov	r2, r3
 800267c:	f7ff fcae 	bl	8001fdc <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	695a      	ldr	r2, [r3, #20]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	08db      	lsrs	r3, r3, #3
 800268c:	f003 0303 	and.w	r3, r3, #3
 8002690:	005b      	lsls	r3, r3, #1
 8002692:	fa02 f303 	lsl.w	r3, r2, r3
 8002696:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	691b      	ldr	r3, [r3, #16]
 800269e:	2b04      	cmp	r3, #4
 80026a0:	d00a      	beq.n	80026b8 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6818      	ldr	r0, [r3, #0]
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	6919      	ldr	r1, [r3, #16]
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80026b2:	f7ff fbff 	bl	8001eb4 <LL_ADC_SetOffset>
 80026b6:	e17b      	b.n	80029b0 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2100      	movs	r1, #0
 80026be:	4618      	mov	r0, r3
 80026c0:	f7ff fc1c 	bl	8001efc <LL_ADC_GetOffsetChannel>
 80026c4:	4603      	mov	r3, r0
 80026c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d10a      	bne.n	80026e4 <HAL_ADC_ConfigChannel+0x148>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	2100      	movs	r1, #0
 80026d4:	4618      	mov	r0, r3
 80026d6:	f7ff fc11 	bl	8001efc <LL_ADC_GetOffsetChannel>
 80026da:	4603      	mov	r3, r0
 80026dc:	0e9b      	lsrs	r3, r3, #26
 80026de:	f003 021f 	and.w	r2, r3, #31
 80026e2:	e01e      	b.n	8002722 <HAL_ADC_ConfigChannel+0x186>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	2100      	movs	r1, #0
 80026ea:	4618      	mov	r0, r3
 80026ec:	f7ff fc06 	bl	8001efc <LL_ADC_GetOffsetChannel>
 80026f0:	4603      	mov	r3, r0
 80026f2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80026fa:	fa93 f3a3 	rbit	r3, r3
 80026fe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002702:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002706:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800270a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d101      	bne.n	8002716 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8002712:	2320      	movs	r3, #32
 8002714:	e004      	b.n	8002720 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8002716:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800271a:	fab3 f383 	clz	r3, r3
 800271e:	b2db      	uxtb	r3, r3
 8002720:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800272a:	2b00      	cmp	r3, #0
 800272c:	d105      	bne.n	800273a <HAL_ADC_ConfigChannel+0x19e>
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	0e9b      	lsrs	r3, r3, #26
 8002734:	f003 031f 	and.w	r3, r3, #31
 8002738:	e018      	b.n	800276c <HAL_ADC_ConfigChannel+0x1d0>
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002742:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002746:	fa93 f3a3 	rbit	r3, r3
 800274a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800274e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002752:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002756:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800275a:	2b00      	cmp	r3, #0
 800275c:	d101      	bne.n	8002762 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 800275e:	2320      	movs	r3, #32
 8002760:	e004      	b.n	800276c <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8002762:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002766:	fab3 f383 	clz	r3, r3
 800276a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800276c:	429a      	cmp	r2, r3
 800276e:	d106      	bne.n	800277e <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	2200      	movs	r2, #0
 8002776:	2100      	movs	r1, #0
 8002778:	4618      	mov	r0, r3
 800277a:	f7ff fbd5 	bl	8001f28 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	2101      	movs	r1, #1
 8002784:	4618      	mov	r0, r3
 8002786:	f7ff fbb9 	bl	8001efc <LL_ADC_GetOffsetChannel>
 800278a:	4603      	mov	r3, r0
 800278c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002790:	2b00      	cmp	r3, #0
 8002792:	d10a      	bne.n	80027aa <HAL_ADC_ConfigChannel+0x20e>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	2101      	movs	r1, #1
 800279a:	4618      	mov	r0, r3
 800279c:	f7ff fbae 	bl	8001efc <LL_ADC_GetOffsetChannel>
 80027a0:	4603      	mov	r3, r0
 80027a2:	0e9b      	lsrs	r3, r3, #26
 80027a4:	f003 021f 	and.w	r2, r3, #31
 80027a8:	e01e      	b.n	80027e8 <HAL_ADC_ConfigChannel+0x24c>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	2101      	movs	r1, #1
 80027b0:	4618      	mov	r0, r3
 80027b2:	f7ff fba3 	bl	8001efc <LL_ADC_GetOffsetChannel>
 80027b6:	4603      	mov	r3, r0
 80027b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027bc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80027c0:	fa93 f3a3 	rbit	r3, r3
 80027c4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80027c8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80027cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80027d0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d101      	bne.n	80027dc <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 80027d8:	2320      	movs	r3, #32
 80027da:	e004      	b.n	80027e6 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 80027dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80027e0:	fab3 f383 	clz	r3, r3
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d105      	bne.n	8002800 <HAL_ADC_ConfigChannel+0x264>
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	0e9b      	lsrs	r3, r3, #26
 80027fa:	f003 031f 	and.w	r3, r3, #31
 80027fe:	e018      	b.n	8002832 <HAL_ADC_ConfigChannel+0x296>
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002808:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800280c:	fa93 f3a3 	rbit	r3, r3
 8002810:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002814:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002818:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800281c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002820:	2b00      	cmp	r3, #0
 8002822:	d101      	bne.n	8002828 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8002824:	2320      	movs	r3, #32
 8002826:	e004      	b.n	8002832 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8002828:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800282c:	fab3 f383 	clz	r3, r3
 8002830:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002832:	429a      	cmp	r2, r3
 8002834:	d106      	bne.n	8002844 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	2200      	movs	r2, #0
 800283c:	2101      	movs	r1, #1
 800283e:	4618      	mov	r0, r3
 8002840:	f7ff fb72 	bl	8001f28 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	2102      	movs	r1, #2
 800284a:	4618      	mov	r0, r3
 800284c:	f7ff fb56 	bl	8001efc <LL_ADC_GetOffsetChannel>
 8002850:	4603      	mov	r3, r0
 8002852:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002856:	2b00      	cmp	r3, #0
 8002858:	d10a      	bne.n	8002870 <HAL_ADC_ConfigChannel+0x2d4>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	2102      	movs	r1, #2
 8002860:	4618      	mov	r0, r3
 8002862:	f7ff fb4b 	bl	8001efc <LL_ADC_GetOffsetChannel>
 8002866:	4603      	mov	r3, r0
 8002868:	0e9b      	lsrs	r3, r3, #26
 800286a:	f003 021f 	and.w	r2, r3, #31
 800286e:	e01e      	b.n	80028ae <HAL_ADC_ConfigChannel+0x312>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2102      	movs	r1, #2
 8002876:	4618      	mov	r0, r3
 8002878:	f7ff fb40 	bl	8001efc <LL_ADC_GetOffsetChannel>
 800287c:	4603      	mov	r3, r0
 800287e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002882:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002886:	fa93 f3a3 	rbit	r3, r3
 800288a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800288e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002892:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002896:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800289a:	2b00      	cmp	r3, #0
 800289c:	d101      	bne.n	80028a2 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 800289e:	2320      	movs	r3, #32
 80028a0:	e004      	b.n	80028ac <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80028a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80028a6:	fab3 f383 	clz	r3, r3
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d105      	bne.n	80028c6 <HAL_ADC_ConfigChannel+0x32a>
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	0e9b      	lsrs	r3, r3, #26
 80028c0:	f003 031f 	and.w	r3, r3, #31
 80028c4:	e016      	b.n	80028f4 <HAL_ADC_ConfigChannel+0x358>
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ce:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80028d2:	fa93 f3a3 	rbit	r3, r3
 80028d6:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80028d8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80028da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80028de:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d101      	bne.n	80028ea <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 80028e6:	2320      	movs	r3, #32
 80028e8:	e004      	b.n	80028f4 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80028ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80028ee:	fab3 f383 	clz	r3, r3
 80028f2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d106      	bne.n	8002906 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	2200      	movs	r2, #0
 80028fe:	2102      	movs	r1, #2
 8002900:	4618      	mov	r0, r3
 8002902:	f7ff fb11 	bl	8001f28 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	2103      	movs	r1, #3
 800290c:	4618      	mov	r0, r3
 800290e:	f7ff faf5 	bl	8001efc <LL_ADC_GetOffsetChannel>
 8002912:	4603      	mov	r3, r0
 8002914:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002918:	2b00      	cmp	r3, #0
 800291a:	d10a      	bne.n	8002932 <HAL_ADC_ConfigChannel+0x396>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2103      	movs	r1, #3
 8002922:	4618      	mov	r0, r3
 8002924:	f7ff faea 	bl	8001efc <LL_ADC_GetOffsetChannel>
 8002928:	4603      	mov	r3, r0
 800292a:	0e9b      	lsrs	r3, r3, #26
 800292c:	f003 021f 	and.w	r2, r3, #31
 8002930:	e017      	b.n	8002962 <HAL_ADC_ConfigChannel+0x3c6>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	2103      	movs	r1, #3
 8002938:	4618      	mov	r0, r3
 800293a:	f7ff fadf 	bl	8001efc <LL_ADC_GetOffsetChannel>
 800293e:	4603      	mov	r3, r0
 8002940:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002942:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002944:	fa93 f3a3 	rbit	r3, r3
 8002948:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800294a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800294c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800294e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002950:	2b00      	cmp	r3, #0
 8002952:	d101      	bne.n	8002958 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002954:	2320      	movs	r3, #32
 8002956:	e003      	b.n	8002960 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002958:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800295a:	fab3 f383 	clz	r3, r3
 800295e:	b2db      	uxtb	r3, r3
 8002960:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800296a:	2b00      	cmp	r3, #0
 800296c:	d105      	bne.n	800297a <HAL_ADC_ConfigChannel+0x3de>
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	0e9b      	lsrs	r3, r3, #26
 8002974:	f003 031f 	and.w	r3, r3, #31
 8002978:	e011      	b.n	800299e <HAL_ADC_ConfigChannel+0x402>
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002980:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002982:	fa93 f3a3 	rbit	r3, r3
 8002986:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002988:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800298a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800298c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800298e:	2b00      	cmp	r3, #0
 8002990:	d101      	bne.n	8002996 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8002992:	2320      	movs	r3, #32
 8002994:	e003      	b.n	800299e <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8002996:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002998:	fab3 f383 	clz	r3, r3
 800299c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800299e:	429a      	cmp	r2, r3
 80029a0:	d106      	bne.n	80029b0 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	2200      	movs	r2, #0
 80029a8:	2103      	movs	r1, #3
 80029aa:	4618      	mov	r0, r3
 80029ac:	f7ff fabc 	bl	8001f28 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4618      	mov	r0, r3
 80029b6:	f7ff fbc3 	bl	8002140 <LL_ADC_IsEnabled>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	f040 813f 	bne.w	8002c40 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6818      	ldr	r0, [r3, #0]
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	6819      	ldr	r1, [r3, #0]
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	461a      	mov	r2, r3
 80029d0:	f7ff fb30 	bl	8002034 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	4a8e      	ldr	r2, [pc, #568]	; (8002c14 <HAL_ADC_ConfigChannel+0x678>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	f040 8130 	bne.w	8002c40 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d10b      	bne.n	8002a08 <HAL_ADC_ConfigChannel+0x46c>
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	0e9b      	lsrs	r3, r3, #26
 80029f6:	3301      	adds	r3, #1
 80029f8:	f003 031f 	and.w	r3, r3, #31
 80029fc:	2b09      	cmp	r3, #9
 80029fe:	bf94      	ite	ls
 8002a00:	2301      	movls	r3, #1
 8002a02:	2300      	movhi	r3, #0
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	e019      	b.n	8002a3c <HAL_ADC_ConfigChannel+0x4a0>
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a10:	fa93 f3a3 	rbit	r3, r3
 8002a14:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002a16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a18:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002a1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d101      	bne.n	8002a24 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002a20:	2320      	movs	r3, #32
 8002a22:	e003      	b.n	8002a2c <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002a24:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a26:	fab3 f383 	clz	r3, r3
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	3301      	adds	r3, #1
 8002a2e:	f003 031f 	and.w	r3, r3, #31
 8002a32:	2b09      	cmp	r3, #9
 8002a34:	bf94      	ite	ls
 8002a36:	2301      	movls	r3, #1
 8002a38:	2300      	movhi	r3, #0
 8002a3a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d079      	beq.n	8002b34 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d107      	bne.n	8002a5c <HAL_ADC_ConfigChannel+0x4c0>
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	0e9b      	lsrs	r3, r3, #26
 8002a52:	3301      	adds	r3, #1
 8002a54:	069b      	lsls	r3, r3, #26
 8002a56:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a5a:	e015      	b.n	8002a88 <HAL_ADC_ConfigChannel+0x4ec>
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a64:	fa93 f3a3 	rbit	r3, r3
 8002a68:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002a6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a6c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002a6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d101      	bne.n	8002a78 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002a74:	2320      	movs	r3, #32
 8002a76:	e003      	b.n	8002a80 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002a78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a7a:	fab3 f383 	clz	r3, r3
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	3301      	adds	r3, #1
 8002a82:	069b      	lsls	r3, r3, #26
 8002a84:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d109      	bne.n	8002aa8 <HAL_ADC_ConfigChannel+0x50c>
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	0e9b      	lsrs	r3, r3, #26
 8002a9a:	3301      	adds	r3, #1
 8002a9c:	f003 031f 	and.w	r3, r3, #31
 8002aa0:	2101      	movs	r1, #1
 8002aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8002aa6:	e017      	b.n	8002ad8 <HAL_ADC_ConfigChannel+0x53c>
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ab0:	fa93 f3a3 	rbit	r3, r3
 8002ab4:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002ab6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ab8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002aba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d101      	bne.n	8002ac4 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002ac0:	2320      	movs	r3, #32
 8002ac2:	e003      	b.n	8002acc <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002ac4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ac6:	fab3 f383 	clz	r3, r3
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	3301      	adds	r3, #1
 8002ace:	f003 031f 	and.w	r3, r3, #31
 8002ad2:	2101      	movs	r1, #1
 8002ad4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ad8:	ea42 0103 	orr.w	r1, r2, r3
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d10a      	bne.n	8002afe <HAL_ADC_ConfigChannel+0x562>
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	0e9b      	lsrs	r3, r3, #26
 8002aee:	3301      	adds	r3, #1
 8002af0:	f003 021f 	and.w	r2, r3, #31
 8002af4:	4613      	mov	r3, r2
 8002af6:	005b      	lsls	r3, r3, #1
 8002af8:	4413      	add	r3, r2
 8002afa:	051b      	lsls	r3, r3, #20
 8002afc:	e018      	b.n	8002b30 <HAL_ADC_ConfigChannel+0x594>
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b06:	fa93 f3a3 	rbit	r3, r3
 8002b0a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002b0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002b10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d101      	bne.n	8002b1a <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8002b16:	2320      	movs	r3, #32
 8002b18:	e003      	b.n	8002b22 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8002b1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b1c:	fab3 f383 	clz	r3, r3
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	3301      	adds	r3, #1
 8002b24:	f003 021f 	and.w	r2, r3, #31
 8002b28:	4613      	mov	r3, r2
 8002b2a:	005b      	lsls	r3, r3, #1
 8002b2c:	4413      	add	r3, r2
 8002b2e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b30:	430b      	orrs	r3, r1
 8002b32:	e080      	b.n	8002c36 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d107      	bne.n	8002b50 <HAL_ADC_ConfigChannel+0x5b4>
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	0e9b      	lsrs	r3, r3, #26
 8002b46:	3301      	adds	r3, #1
 8002b48:	069b      	lsls	r3, r3, #26
 8002b4a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b4e:	e015      	b.n	8002b7c <HAL_ADC_ConfigChannel+0x5e0>
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b58:	fa93 f3a3 	rbit	r3, r3
 8002b5c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b60:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d101      	bne.n	8002b6c <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002b68:	2320      	movs	r3, #32
 8002b6a:	e003      	b.n	8002b74 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b6e:	fab3 f383 	clz	r3, r3
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	3301      	adds	r3, #1
 8002b76:	069b      	lsls	r3, r3, #26
 8002b78:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d109      	bne.n	8002b9c <HAL_ADC_ConfigChannel+0x600>
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	0e9b      	lsrs	r3, r3, #26
 8002b8e:	3301      	adds	r3, #1
 8002b90:	f003 031f 	and.w	r3, r3, #31
 8002b94:	2101      	movs	r1, #1
 8002b96:	fa01 f303 	lsl.w	r3, r1, r3
 8002b9a:	e017      	b.n	8002bcc <HAL_ADC_ConfigChannel+0x630>
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba2:	6a3b      	ldr	r3, [r7, #32]
 8002ba4:	fa93 f3a3 	rbit	r3, r3
 8002ba8:	61fb      	str	r3, [r7, #28]
  return result;
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d101      	bne.n	8002bb8 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002bb4:	2320      	movs	r3, #32
 8002bb6:	e003      	b.n	8002bc0 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bba:	fab3 f383 	clz	r3, r3
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	3301      	adds	r3, #1
 8002bc2:	f003 031f 	and.w	r3, r3, #31
 8002bc6:	2101      	movs	r1, #1
 8002bc8:	fa01 f303 	lsl.w	r3, r1, r3
 8002bcc:	ea42 0103 	orr.w	r1, r2, r3
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d10d      	bne.n	8002bf8 <HAL_ADC_ConfigChannel+0x65c>
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	0e9b      	lsrs	r3, r3, #26
 8002be2:	3301      	adds	r3, #1
 8002be4:	f003 021f 	and.w	r2, r3, #31
 8002be8:	4613      	mov	r3, r2
 8002bea:	005b      	lsls	r3, r3, #1
 8002bec:	4413      	add	r3, r2
 8002bee:	3b1e      	subs	r3, #30
 8002bf0:	051b      	lsls	r3, r3, #20
 8002bf2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002bf6:	e01d      	b.n	8002c34 <HAL_ADC_ConfigChannel+0x698>
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	fa93 f3a3 	rbit	r3, r3
 8002c04:	613b      	str	r3, [r7, #16]
  return result;
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002c0a:	69bb      	ldr	r3, [r7, #24]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d103      	bne.n	8002c18 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002c10:	2320      	movs	r3, #32
 8002c12:	e005      	b.n	8002c20 <HAL_ADC_ConfigChannel+0x684>
 8002c14:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002c18:	69bb      	ldr	r3, [r7, #24]
 8002c1a:	fab3 f383 	clz	r3, r3
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	3301      	adds	r3, #1
 8002c22:	f003 021f 	and.w	r2, r3, #31
 8002c26:	4613      	mov	r3, r2
 8002c28:	005b      	lsls	r3, r3, #1
 8002c2a:	4413      	add	r3, r2
 8002c2c:	3b1e      	subs	r3, #30
 8002c2e:	051b      	lsls	r3, r3, #20
 8002c30:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c34:	430b      	orrs	r3, r1
 8002c36:	683a      	ldr	r2, [r7, #0]
 8002c38:	6892      	ldr	r2, [r2, #8]
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	f7ff f9ce 	bl	8001fdc <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	4b3d      	ldr	r3, [pc, #244]	; (8002d3c <HAL_ADC_ConfigChannel+0x7a0>)
 8002c46:	4013      	ands	r3, r2
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d06c      	beq.n	8002d26 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c4c:	483c      	ldr	r0, [pc, #240]	; (8002d40 <HAL_ADC_ConfigChannel+0x7a4>)
 8002c4e:	f7ff f923 	bl	8001e98 <LL_ADC_GetCommonPathInternalCh>
 8002c52:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a3a      	ldr	r2, [pc, #232]	; (8002d44 <HAL_ADC_ConfigChannel+0x7a8>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d127      	bne.n	8002cb0 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002c60:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c64:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d121      	bne.n	8002cb0 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a35      	ldr	r2, [pc, #212]	; (8002d48 <HAL_ADC_ConfigChannel+0x7ac>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d157      	bne.n	8002d26 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c76:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c7a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002c7e:	4619      	mov	r1, r3
 8002c80:	482f      	ldr	r0, [pc, #188]	; (8002d40 <HAL_ADC_ConfigChannel+0x7a4>)
 8002c82:	f7ff f8f6 	bl	8001e72 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c86:	4b31      	ldr	r3, [pc, #196]	; (8002d4c <HAL_ADC_ConfigChannel+0x7b0>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	099b      	lsrs	r3, r3, #6
 8002c8c:	4a30      	ldr	r2, [pc, #192]	; (8002d50 <HAL_ADC_ConfigChannel+0x7b4>)
 8002c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c92:	099b      	lsrs	r3, r3, #6
 8002c94:	1c5a      	adds	r2, r3, #1
 8002c96:	4613      	mov	r3, r2
 8002c98:	005b      	lsls	r3, r3, #1
 8002c9a:	4413      	add	r3, r2
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002ca0:	e002      	b.n	8002ca8 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	3b01      	subs	r3, #1
 8002ca6:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d1f9      	bne.n	8002ca2 <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002cae:	e03a      	b.n	8002d26 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a27      	ldr	r2, [pc, #156]	; (8002d54 <HAL_ADC_ConfigChannel+0x7b8>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d113      	bne.n	8002ce2 <HAL_ADC_ConfigChannel+0x746>
 8002cba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002cbe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d10d      	bne.n	8002ce2 <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a1f      	ldr	r2, [pc, #124]	; (8002d48 <HAL_ADC_ConfigChannel+0x7ac>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d12a      	bne.n	8002d26 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002cd0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002cd4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cd8:	4619      	mov	r1, r3
 8002cda:	4819      	ldr	r0, [pc, #100]	; (8002d40 <HAL_ADC_ConfigChannel+0x7a4>)
 8002cdc:	f7ff f8c9 	bl	8001e72 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ce0:	e021      	b.n	8002d26 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a1c      	ldr	r2, [pc, #112]	; (8002d58 <HAL_ADC_ConfigChannel+0x7bc>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d11c      	bne.n	8002d26 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002cec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002cf0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d116      	bne.n	8002d26 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a12      	ldr	r2, [pc, #72]	; (8002d48 <HAL_ADC_ConfigChannel+0x7ac>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d111      	bne.n	8002d26 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d02:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d06:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	480c      	ldr	r0, [pc, #48]	; (8002d40 <HAL_ADC_ConfigChannel+0x7a4>)
 8002d0e:	f7ff f8b0 	bl	8001e72 <LL_ADC_SetCommonPathInternalCh>
 8002d12:	e008      	b.n	8002d26 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d18:	f043 0220 	orr.w	r2, r3, #32
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002d2e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	37d8      	adds	r7, #216	; 0xd8
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	80080000 	.word	0x80080000
 8002d40:	50040300 	.word	0x50040300
 8002d44:	c7520000 	.word	0xc7520000
 8002d48:	50040000 	.word	0x50040000
 8002d4c:	20000024 	.word	0x20000024
 8002d50:	053e2d63 	.word	0x053e2d63
 8002d54:	cb840000 	.word	0xcb840000
 8002d58:	80000001 	.word	0x80000001

08002d5c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b084      	sub	sp, #16
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f7ff f9e9 	bl	8002140 <LL_ADC_IsEnabled>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d14d      	bne.n	8002e10 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	689a      	ldr	r2, [r3, #8]
 8002d7a:	4b28      	ldr	r3, [pc, #160]	; (8002e1c <ADC_Enable+0xc0>)
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d00d      	beq.n	8002d9e <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d86:	f043 0210 	orr.w	r2, r3, #16
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d92:	f043 0201 	orr.w	r2, r3, #1
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e039      	b.n	8002e12 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4618      	mov	r0, r3
 8002da4:	f7ff f9b8 	bl	8002118 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002da8:	f7ff f820 	bl	8001dec <HAL_GetTick>
 8002dac:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002dae:	e028      	b.n	8002e02 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4618      	mov	r0, r3
 8002db6:	f7ff f9c3 	bl	8002140 <LL_ADC_IsEnabled>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d104      	bne.n	8002dca <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f7ff f9a7 	bl	8002118 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002dca:	f7ff f80f 	bl	8001dec <HAL_GetTick>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	1ad3      	subs	r3, r2, r3
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	d914      	bls.n	8002e02 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0301 	and.w	r3, r3, #1
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d00d      	beq.n	8002e02 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dea:	f043 0210 	orr.w	r2, r3, #16
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002df6:	f043 0201 	orr.w	r2, r3, #1
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e007      	b.n	8002e12 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 0301 	and.w	r3, r3, #1
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d1cf      	bne.n	8002db0 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002e10:	2300      	movs	r3, #0
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3710      	adds	r7, #16
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	8000003f 	.word	0x8000003f

08002e20 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b084      	sub	sp, #16
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e2c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e32:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d14b      	bne.n	8002ed2 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e3e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 0308 	and.w	r3, r3, #8
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d021      	beq.n	8002e98 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f7ff f880 	bl	8001f5e <LL_ADC_REG_IsTriggerSourceSWStart>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d032      	beq.n	8002eca <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	68db      	ldr	r3, [r3, #12]
 8002e6a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d12b      	bne.n	8002eca <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e76:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d11f      	bne.n	8002eca <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e8e:	f043 0201 	orr.w	r2, r3, #1
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	655a      	str	r2, [r3, #84]	; 0x54
 8002e96:	e018      	b.n	8002eca <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	68db      	ldr	r3, [r3, #12]
 8002e9e:	f003 0302 	and.w	r3, r3, #2
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d111      	bne.n	8002eca <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eaa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eb6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d105      	bne.n	8002eca <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ec2:	f043 0201 	orr.w	r2, r3, #1
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002eca:	68f8      	ldr	r0, [r7, #12]
 8002ecc:	f7fe fb40 	bl	8001550 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002ed0:	e00e      	b.n	8002ef0 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ed6:	f003 0310 	and.w	r3, r3, #16
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d003      	beq.n	8002ee6 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002ede:	68f8      	ldr	r0, [r7, #12]
 8002ee0:	f7ff fb52 	bl	8002588 <HAL_ADC_ErrorCallback>
}
 8002ee4:	e004      	b.n	8002ef0 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	4798      	blx	r3
}
 8002ef0:	bf00      	nop
 8002ef2:	3710      	adds	r7, #16
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}

08002ef8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f04:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002f06:	68f8      	ldr	r0, [r7, #12]
 8002f08:	f7ff fb34 	bl	8002574 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002f0c:	bf00      	nop
 8002f0e:	3710      	adds	r7, #16
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b084      	sub	sp, #16
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f20:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f26:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f32:	f043 0204 	orr.w	r2, r3, #4
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002f3a:	68f8      	ldr	r0, [r7, #12]
 8002f3c:	f7ff fb24 	bl	8002588 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002f40:	bf00      	nop
 8002f42:	3710      	adds	r7, #16
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}

08002f48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b085      	sub	sp, #20
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	f003 0307 	and.w	r3, r3, #7
 8002f56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f58:	4b0c      	ldr	r3, [pc, #48]	; (8002f8c <__NVIC_SetPriorityGrouping+0x44>)
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f5e:	68ba      	ldr	r2, [r7, #8]
 8002f60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f64:	4013      	ands	r3, r2
 8002f66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f7a:	4a04      	ldr	r2, [pc, #16]	; (8002f8c <__NVIC_SetPriorityGrouping+0x44>)
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	60d3      	str	r3, [r2, #12]
}
 8002f80:	bf00      	nop
 8002f82:	3714      	adds	r7, #20
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr
 8002f8c:	e000ed00 	.word	0xe000ed00

08002f90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f90:	b480      	push	{r7}
 8002f92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f94:	4b04      	ldr	r3, [pc, #16]	; (8002fa8 <__NVIC_GetPriorityGrouping+0x18>)
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	0a1b      	lsrs	r3, r3, #8
 8002f9a:	f003 0307 	and.w	r3, r3, #7
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr
 8002fa8:	e000ed00 	.word	0xe000ed00

08002fac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b083      	sub	sp, #12
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	db0b      	blt.n	8002fd6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fbe:	79fb      	ldrb	r3, [r7, #7]
 8002fc0:	f003 021f 	and.w	r2, r3, #31
 8002fc4:	4907      	ldr	r1, [pc, #28]	; (8002fe4 <__NVIC_EnableIRQ+0x38>)
 8002fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fca:	095b      	lsrs	r3, r3, #5
 8002fcc:	2001      	movs	r0, #1
 8002fce:	fa00 f202 	lsl.w	r2, r0, r2
 8002fd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002fd6:	bf00      	nop
 8002fd8:	370c      	adds	r7, #12
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr
 8002fe2:	bf00      	nop
 8002fe4:	e000e100 	.word	0xe000e100

08002fe8 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	4603      	mov	r3, r0
 8002ff0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	db0c      	blt.n	8003014 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ffa:	79fb      	ldrb	r3, [r7, #7]
 8002ffc:	f003 021f 	and.w	r2, r3, #31
 8003000:	4907      	ldr	r1, [pc, #28]	; (8003020 <__NVIC_SetPendingIRQ+0x38>)
 8003002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003006:	095b      	lsrs	r3, r3, #5
 8003008:	2001      	movs	r0, #1
 800300a:	fa00 f202 	lsl.w	r2, r0, r2
 800300e:	3340      	adds	r3, #64	; 0x40
 8003010:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003014:	bf00      	nop
 8003016:	370c      	adds	r7, #12
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr
 8003020:	e000e100 	.word	0xe000e100

08003024 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	4603      	mov	r3, r0
 800302c:	6039      	str	r1, [r7, #0]
 800302e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003030:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003034:	2b00      	cmp	r3, #0
 8003036:	db0a      	blt.n	800304e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	b2da      	uxtb	r2, r3
 800303c:	490c      	ldr	r1, [pc, #48]	; (8003070 <__NVIC_SetPriority+0x4c>)
 800303e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003042:	0112      	lsls	r2, r2, #4
 8003044:	b2d2      	uxtb	r2, r2
 8003046:	440b      	add	r3, r1
 8003048:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800304c:	e00a      	b.n	8003064 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	b2da      	uxtb	r2, r3
 8003052:	4908      	ldr	r1, [pc, #32]	; (8003074 <__NVIC_SetPriority+0x50>)
 8003054:	79fb      	ldrb	r3, [r7, #7]
 8003056:	f003 030f 	and.w	r3, r3, #15
 800305a:	3b04      	subs	r3, #4
 800305c:	0112      	lsls	r2, r2, #4
 800305e:	b2d2      	uxtb	r2, r2
 8003060:	440b      	add	r3, r1
 8003062:	761a      	strb	r2, [r3, #24]
}
 8003064:	bf00      	nop
 8003066:	370c      	adds	r7, #12
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr
 8003070:	e000e100 	.word	0xe000e100
 8003074:	e000ed00 	.word	0xe000ed00

08003078 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003078:	b480      	push	{r7}
 800307a:	b089      	sub	sp, #36	; 0x24
 800307c:	af00      	add	r7, sp, #0
 800307e:	60f8      	str	r0, [r7, #12]
 8003080:	60b9      	str	r1, [r7, #8]
 8003082:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f003 0307 	and.w	r3, r3, #7
 800308a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	f1c3 0307 	rsb	r3, r3, #7
 8003092:	2b04      	cmp	r3, #4
 8003094:	bf28      	it	cs
 8003096:	2304      	movcs	r3, #4
 8003098:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	3304      	adds	r3, #4
 800309e:	2b06      	cmp	r3, #6
 80030a0:	d902      	bls.n	80030a8 <NVIC_EncodePriority+0x30>
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	3b03      	subs	r3, #3
 80030a6:	e000      	b.n	80030aa <NVIC_EncodePriority+0x32>
 80030a8:	2300      	movs	r3, #0
 80030aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030ac:	f04f 32ff 	mov.w	r2, #4294967295
 80030b0:	69bb      	ldr	r3, [r7, #24]
 80030b2:	fa02 f303 	lsl.w	r3, r2, r3
 80030b6:	43da      	mvns	r2, r3
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	401a      	ands	r2, r3
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030c0:	f04f 31ff 	mov.w	r1, #4294967295
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	fa01 f303 	lsl.w	r3, r1, r3
 80030ca:	43d9      	mvns	r1, r3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030d0:	4313      	orrs	r3, r2
         );
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3724      	adds	r7, #36	; 0x24
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr
	...

080030e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	3b01      	subs	r3, #1
 80030ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030f0:	d301      	bcc.n	80030f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030f2:	2301      	movs	r3, #1
 80030f4:	e00f      	b.n	8003116 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030f6:	4a0a      	ldr	r2, [pc, #40]	; (8003120 <SysTick_Config+0x40>)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	3b01      	subs	r3, #1
 80030fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030fe:	210f      	movs	r1, #15
 8003100:	f04f 30ff 	mov.w	r0, #4294967295
 8003104:	f7ff ff8e 	bl	8003024 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003108:	4b05      	ldr	r3, [pc, #20]	; (8003120 <SysTick_Config+0x40>)
 800310a:	2200      	movs	r2, #0
 800310c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800310e:	4b04      	ldr	r3, [pc, #16]	; (8003120 <SysTick_Config+0x40>)
 8003110:	2207      	movs	r2, #7
 8003112:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003114:	2300      	movs	r3, #0
}
 8003116:	4618      	mov	r0, r3
 8003118:	3708      	adds	r7, #8
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	e000e010 	.word	0xe000e010

08003124 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b082      	sub	sp, #8
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f7ff ff0b 	bl	8002f48 <__NVIC_SetPriorityGrouping>
}
 8003132:	bf00      	nop
 8003134:	3708      	adds	r7, #8
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}

0800313a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800313a:	b580      	push	{r7, lr}
 800313c:	b086      	sub	sp, #24
 800313e:	af00      	add	r7, sp, #0
 8003140:	4603      	mov	r3, r0
 8003142:	60b9      	str	r1, [r7, #8]
 8003144:	607a      	str	r2, [r7, #4]
 8003146:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003148:	2300      	movs	r3, #0
 800314a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800314c:	f7ff ff20 	bl	8002f90 <__NVIC_GetPriorityGrouping>
 8003150:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	68b9      	ldr	r1, [r7, #8]
 8003156:	6978      	ldr	r0, [r7, #20]
 8003158:	f7ff ff8e 	bl	8003078 <NVIC_EncodePriority>
 800315c:	4602      	mov	r2, r0
 800315e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003162:	4611      	mov	r1, r2
 8003164:	4618      	mov	r0, r3
 8003166:	f7ff ff5d 	bl	8003024 <__NVIC_SetPriority>
}
 800316a:	bf00      	nop
 800316c:	3718      	adds	r7, #24
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}

08003172 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003172:	b580      	push	{r7, lr}
 8003174:	b082      	sub	sp, #8
 8003176:	af00      	add	r7, sp, #0
 8003178:	4603      	mov	r3, r0
 800317a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800317c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003180:	4618      	mov	r0, r3
 8003182:	f7ff ff13 	bl	8002fac <__NVIC_EnableIRQ>
}
 8003186:	bf00      	nop
 8003188:	3708      	adds	r7, #8
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}

0800318e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800318e:	b580      	push	{r7, lr}
 8003190:	b082      	sub	sp, #8
 8003192:	af00      	add	r7, sp, #0
 8003194:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f7ff ffa2 	bl	80030e0 <SysTick_Config>
 800319c:	4603      	mov	r3, r0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3708      	adds	r7, #8
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}

080031a6 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80031a6:	b580      	push	{r7, lr}
 80031a8:	b082      	sub	sp, #8
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	4603      	mov	r3, r0
 80031ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 80031b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031b4:	4618      	mov	r0, r3
 80031b6:	f7ff ff17 	bl	8002fe8 <__NVIC_SetPendingIRQ>
}
 80031ba:	bf00      	nop
 80031bc:	3708      	adds	r7, #8
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
	...

080031c4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b085      	sub	sp, #20
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d101      	bne.n	80031d6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e098      	b.n	8003308 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	461a      	mov	r2, r3
 80031dc:	4b4d      	ldr	r3, [pc, #308]	; (8003314 <HAL_DMA_Init+0x150>)
 80031de:	429a      	cmp	r2, r3
 80031e0:	d80f      	bhi.n	8003202 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	461a      	mov	r2, r3
 80031e8:	4b4b      	ldr	r3, [pc, #300]	; (8003318 <HAL_DMA_Init+0x154>)
 80031ea:	4413      	add	r3, r2
 80031ec:	4a4b      	ldr	r2, [pc, #300]	; (800331c <HAL_DMA_Init+0x158>)
 80031ee:	fba2 2303 	umull	r2, r3, r2, r3
 80031f2:	091b      	lsrs	r3, r3, #4
 80031f4:	009a      	lsls	r2, r3, #2
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4a48      	ldr	r2, [pc, #288]	; (8003320 <HAL_DMA_Init+0x15c>)
 80031fe:	641a      	str	r2, [r3, #64]	; 0x40
 8003200:	e00e      	b.n	8003220 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	461a      	mov	r2, r3
 8003208:	4b46      	ldr	r3, [pc, #280]	; (8003324 <HAL_DMA_Init+0x160>)
 800320a:	4413      	add	r3, r2
 800320c:	4a43      	ldr	r2, [pc, #268]	; (800331c <HAL_DMA_Init+0x158>)
 800320e:	fba2 2303 	umull	r2, r3, r2, r3
 8003212:	091b      	lsrs	r3, r3, #4
 8003214:	009a      	lsls	r2, r3, #2
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a42      	ldr	r2, [pc, #264]	; (8003328 <HAL_DMA_Init+0x164>)
 800321e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2202      	movs	r2, #2
 8003224:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003236:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800323a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003244:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	691b      	ldr	r3, [r3, #16]
 800324a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003250:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	699b      	ldr	r3, [r3, #24]
 8003256:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800325c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6a1b      	ldr	r3, [r3, #32]
 8003262:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003264:	68fa      	ldr	r2, [r7, #12]
 8003266:	4313      	orrs	r3, r2
 8003268:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	68fa      	ldr	r2, [r7, #12]
 8003270:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800327a:	d039      	beq.n	80032f0 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003280:	4a27      	ldr	r2, [pc, #156]	; (8003320 <HAL_DMA_Init+0x15c>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d11a      	bne.n	80032bc <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003286:	4b29      	ldr	r3, [pc, #164]	; (800332c <HAL_DMA_Init+0x168>)
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800328e:	f003 031c 	and.w	r3, r3, #28
 8003292:	210f      	movs	r1, #15
 8003294:	fa01 f303 	lsl.w	r3, r1, r3
 8003298:	43db      	mvns	r3, r3
 800329a:	4924      	ldr	r1, [pc, #144]	; (800332c <HAL_DMA_Init+0x168>)
 800329c:	4013      	ands	r3, r2
 800329e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80032a0:	4b22      	ldr	r3, [pc, #136]	; (800332c <HAL_DMA_Init+0x168>)
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6859      	ldr	r1, [r3, #4]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ac:	f003 031c 	and.w	r3, r3, #28
 80032b0:	fa01 f303 	lsl.w	r3, r1, r3
 80032b4:	491d      	ldr	r1, [pc, #116]	; (800332c <HAL_DMA_Init+0x168>)
 80032b6:	4313      	orrs	r3, r2
 80032b8:	600b      	str	r3, [r1, #0]
 80032ba:	e019      	b.n	80032f0 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80032bc:	4b1c      	ldr	r3, [pc, #112]	; (8003330 <HAL_DMA_Init+0x16c>)
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032c4:	f003 031c 	and.w	r3, r3, #28
 80032c8:	210f      	movs	r1, #15
 80032ca:	fa01 f303 	lsl.w	r3, r1, r3
 80032ce:	43db      	mvns	r3, r3
 80032d0:	4917      	ldr	r1, [pc, #92]	; (8003330 <HAL_DMA_Init+0x16c>)
 80032d2:	4013      	ands	r3, r2
 80032d4:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80032d6:	4b16      	ldr	r3, [pc, #88]	; (8003330 <HAL_DMA_Init+0x16c>)
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6859      	ldr	r1, [r3, #4]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032e2:	f003 031c 	and.w	r3, r3, #28
 80032e6:	fa01 f303 	lsl.w	r3, r1, r3
 80032ea:	4911      	ldr	r1, [pc, #68]	; (8003330 <HAL_DMA_Init+0x16c>)
 80032ec:	4313      	orrs	r3, r2
 80032ee:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2200      	movs	r2, #0
 80032f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2201      	movs	r2, #1
 80032fa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003306:	2300      	movs	r3, #0
}
 8003308:	4618      	mov	r0, r3
 800330a:	3714      	adds	r7, #20
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr
 8003314:	40020407 	.word	0x40020407
 8003318:	bffdfff8 	.word	0xbffdfff8
 800331c:	cccccccd 	.word	0xcccccccd
 8003320:	40020000 	.word	0x40020000
 8003324:	bffdfbf8 	.word	0xbffdfbf8
 8003328:	40020400 	.word	0x40020400
 800332c:	400200a8 	.word	0x400200a8
 8003330:	400204a8 	.word	0x400204a8

08003334 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b086      	sub	sp, #24
 8003338:	af00      	add	r7, sp, #0
 800333a:	60f8      	str	r0, [r7, #12]
 800333c:	60b9      	str	r1, [r7, #8]
 800333e:	607a      	str	r2, [r7, #4]
 8003340:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003342:	2300      	movs	r3, #0
 8003344:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800334c:	2b01      	cmp	r3, #1
 800334e:	d101      	bne.n	8003354 <HAL_DMA_Start_IT+0x20>
 8003350:	2302      	movs	r3, #2
 8003352:	e04b      	b.n	80033ec <HAL_DMA_Start_IT+0xb8>
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2201      	movs	r2, #1
 8003358:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003362:	b2db      	uxtb	r3, r3
 8003364:	2b01      	cmp	r3, #1
 8003366:	d13a      	bne.n	80033de <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2202      	movs	r2, #2
 800336c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2200      	movs	r2, #0
 8003374:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f022 0201 	bic.w	r2, r2, #1
 8003384:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	687a      	ldr	r2, [r7, #4]
 800338a:	68b9      	ldr	r1, [r7, #8]
 800338c:	68f8      	ldr	r0, [r7, #12]
 800338e:	f000 f8e0 	bl	8003552 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003396:	2b00      	cmp	r3, #0
 8003398:	d008      	beq.n	80033ac <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f042 020e 	orr.w	r2, r2, #14
 80033a8:	601a      	str	r2, [r3, #0]
 80033aa:	e00f      	b.n	80033cc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f022 0204 	bic.w	r2, r2, #4
 80033ba:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f042 020a 	orr.w	r2, r2, #10
 80033ca:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f042 0201 	orr.w	r2, r2, #1
 80033da:	601a      	str	r2, [r3, #0]
 80033dc:	e005      	b.n	80033ea <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2200      	movs	r2, #0
 80033e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80033e6:	2302      	movs	r3, #2
 80033e8:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80033ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3718      	adds	r7, #24
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}

080033f4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b084      	sub	sp, #16
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003410:	f003 031c 	and.w	r3, r3, #28
 8003414:	2204      	movs	r2, #4
 8003416:	409a      	lsls	r2, r3
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	4013      	ands	r3, r2
 800341c:	2b00      	cmp	r3, #0
 800341e:	d026      	beq.n	800346e <HAL_DMA_IRQHandler+0x7a>
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	f003 0304 	and.w	r3, r3, #4
 8003426:	2b00      	cmp	r3, #0
 8003428:	d021      	beq.n	800346e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0320 	and.w	r3, r3, #32
 8003434:	2b00      	cmp	r3, #0
 8003436:	d107      	bne.n	8003448 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f022 0204 	bic.w	r2, r2, #4
 8003446:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800344c:	f003 021c 	and.w	r2, r3, #28
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003454:	2104      	movs	r1, #4
 8003456:	fa01 f202 	lsl.w	r2, r1, r2
 800345a:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003460:	2b00      	cmp	r3, #0
 8003462:	d071      	beq.n	8003548 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800346c:	e06c      	b.n	8003548 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003472:	f003 031c 	and.w	r3, r3, #28
 8003476:	2202      	movs	r2, #2
 8003478:	409a      	lsls	r2, r3
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	4013      	ands	r3, r2
 800347e:	2b00      	cmp	r3, #0
 8003480:	d02e      	beq.n	80034e0 <HAL_DMA_IRQHandler+0xec>
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	f003 0302 	and.w	r3, r3, #2
 8003488:	2b00      	cmp	r3, #0
 800348a:	d029      	beq.n	80034e0 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0320 	and.w	r3, r3, #32
 8003496:	2b00      	cmp	r3, #0
 8003498:	d10b      	bne.n	80034b2 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f022 020a 	bic.w	r2, r2, #10
 80034a8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2201      	movs	r2, #1
 80034ae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b6:	f003 021c 	and.w	r2, r3, #28
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034be:	2102      	movs	r1, #2
 80034c0:	fa01 f202 	lsl.w	r2, r1, r2
 80034c4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d038      	beq.n	8003548 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80034de:	e033      	b.n	8003548 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034e4:	f003 031c 	and.w	r3, r3, #28
 80034e8:	2208      	movs	r2, #8
 80034ea:	409a      	lsls	r2, r3
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	4013      	ands	r3, r2
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d02a      	beq.n	800354a <HAL_DMA_IRQHandler+0x156>
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	f003 0308 	and.w	r3, r3, #8
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d025      	beq.n	800354a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f022 020e 	bic.w	r2, r2, #14
 800350c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003512:	f003 021c 	and.w	r2, r3, #28
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351a:	2101      	movs	r1, #1
 800351c:	fa01 f202 	lsl.w	r2, r1, r2
 8003520:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2201      	movs	r2, #1
 8003526:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2201      	movs	r2, #1
 800352c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800353c:	2b00      	cmp	r3, #0
 800353e:	d004      	beq.n	800354a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003548:	bf00      	nop
 800354a:	bf00      	nop
}
 800354c:	3710      	adds	r7, #16
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}

08003552 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003552:	b480      	push	{r7}
 8003554:	b085      	sub	sp, #20
 8003556:	af00      	add	r7, sp, #0
 8003558:	60f8      	str	r0, [r7, #12]
 800355a:	60b9      	str	r1, [r7, #8]
 800355c:	607a      	str	r2, [r7, #4]
 800355e:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003564:	f003 021c 	and.w	r2, r3, #28
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356c:	2101      	movs	r1, #1
 800356e:	fa01 f202 	lsl.w	r2, r1, r2
 8003572:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	683a      	ldr	r2, [r7, #0]
 800357a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	2b10      	cmp	r3, #16
 8003582:	d108      	bne.n	8003596 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	687a      	ldr	r2, [r7, #4]
 800358a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	68ba      	ldr	r2, [r7, #8]
 8003592:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003594:	e007      	b.n	80035a6 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	68ba      	ldr	r2, [r7, #8]
 800359c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	60da      	str	r2, [r3, #12]
}
 80035a6:	bf00      	nop
 80035a8:	3714      	adds	r7, #20
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr
	...

080035b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b087      	sub	sp, #28
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80035be:	2300      	movs	r3, #0
 80035c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035c2:	e148      	b.n	8003856 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	2101      	movs	r1, #1
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	fa01 f303 	lsl.w	r3, r1, r3
 80035d0:	4013      	ands	r3, r2
 80035d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	f000 813a 	beq.w	8003850 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d00b      	beq.n	80035fc <HAL_GPIO_Init+0x48>
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	2b02      	cmp	r3, #2
 80035ea:	d007      	beq.n	80035fc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80035f0:	2b11      	cmp	r3, #17
 80035f2:	d003      	beq.n	80035fc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	2b12      	cmp	r3, #18
 80035fa:	d130      	bne.n	800365e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	005b      	lsls	r3, r3, #1
 8003606:	2203      	movs	r2, #3
 8003608:	fa02 f303 	lsl.w	r3, r2, r3
 800360c:	43db      	mvns	r3, r3
 800360e:	693a      	ldr	r2, [r7, #16]
 8003610:	4013      	ands	r3, r2
 8003612:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	68da      	ldr	r2, [r3, #12]
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	005b      	lsls	r3, r3, #1
 800361c:	fa02 f303 	lsl.w	r3, r2, r3
 8003620:	693a      	ldr	r2, [r7, #16]
 8003622:	4313      	orrs	r3, r2
 8003624:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	693a      	ldr	r2, [r7, #16]
 800362a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003632:	2201      	movs	r2, #1
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	fa02 f303 	lsl.w	r3, r2, r3
 800363a:	43db      	mvns	r3, r3
 800363c:	693a      	ldr	r2, [r7, #16]
 800363e:	4013      	ands	r3, r2
 8003640:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	091b      	lsrs	r3, r3, #4
 8003648:	f003 0201 	and.w	r2, r3, #1
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	fa02 f303 	lsl.w	r3, r2, r3
 8003652:	693a      	ldr	r2, [r7, #16]
 8003654:	4313      	orrs	r3, r2
 8003656:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	693a      	ldr	r2, [r7, #16]
 800365c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	68db      	ldr	r3, [r3, #12]
 8003662:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	005b      	lsls	r3, r3, #1
 8003668:	2203      	movs	r2, #3
 800366a:	fa02 f303 	lsl.w	r3, r2, r3
 800366e:	43db      	mvns	r3, r3
 8003670:	693a      	ldr	r2, [r7, #16]
 8003672:	4013      	ands	r3, r2
 8003674:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	689a      	ldr	r2, [r3, #8]
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	005b      	lsls	r3, r3, #1
 800367e:	fa02 f303 	lsl.w	r3, r2, r3
 8003682:	693a      	ldr	r2, [r7, #16]
 8003684:	4313      	orrs	r3, r2
 8003686:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	693a      	ldr	r2, [r7, #16]
 800368c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	2b02      	cmp	r3, #2
 8003694:	d003      	beq.n	800369e <HAL_GPIO_Init+0xea>
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	2b12      	cmp	r3, #18
 800369c:	d123      	bne.n	80036e6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	08da      	lsrs	r2, r3, #3
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	3208      	adds	r2, #8
 80036a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	f003 0307 	and.w	r3, r3, #7
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	220f      	movs	r2, #15
 80036b6:	fa02 f303 	lsl.w	r3, r2, r3
 80036ba:	43db      	mvns	r3, r3
 80036bc:	693a      	ldr	r2, [r7, #16]
 80036be:	4013      	ands	r3, r2
 80036c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	691a      	ldr	r2, [r3, #16]
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	f003 0307 	and.w	r3, r3, #7
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	fa02 f303 	lsl.w	r3, r2, r3
 80036d2:	693a      	ldr	r2, [r7, #16]
 80036d4:	4313      	orrs	r3, r2
 80036d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	08da      	lsrs	r2, r3, #3
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	3208      	adds	r2, #8
 80036e0:	6939      	ldr	r1, [r7, #16]
 80036e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	005b      	lsls	r3, r3, #1
 80036f0:	2203      	movs	r2, #3
 80036f2:	fa02 f303 	lsl.w	r3, r2, r3
 80036f6:	43db      	mvns	r3, r3
 80036f8:	693a      	ldr	r2, [r7, #16]
 80036fa:	4013      	ands	r3, r2
 80036fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	f003 0203 	and.w	r2, r3, #3
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	005b      	lsls	r3, r3, #1
 800370a:	fa02 f303 	lsl.w	r3, r2, r3
 800370e:	693a      	ldr	r2, [r7, #16]
 8003710:	4313      	orrs	r3, r2
 8003712:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	693a      	ldr	r2, [r7, #16]
 8003718:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003722:	2b00      	cmp	r3, #0
 8003724:	f000 8094 	beq.w	8003850 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003728:	4b52      	ldr	r3, [pc, #328]	; (8003874 <HAL_GPIO_Init+0x2c0>)
 800372a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800372c:	4a51      	ldr	r2, [pc, #324]	; (8003874 <HAL_GPIO_Init+0x2c0>)
 800372e:	f043 0301 	orr.w	r3, r3, #1
 8003732:	6613      	str	r3, [r2, #96]	; 0x60
 8003734:	4b4f      	ldr	r3, [pc, #316]	; (8003874 <HAL_GPIO_Init+0x2c0>)
 8003736:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003738:	f003 0301 	and.w	r3, r3, #1
 800373c:	60bb      	str	r3, [r7, #8]
 800373e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003740:	4a4d      	ldr	r2, [pc, #308]	; (8003878 <HAL_GPIO_Init+0x2c4>)
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	089b      	lsrs	r3, r3, #2
 8003746:	3302      	adds	r3, #2
 8003748:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800374c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	f003 0303 	and.w	r3, r3, #3
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	220f      	movs	r2, #15
 8003758:	fa02 f303 	lsl.w	r3, r2, r3
 800375c:	43db      	mvns	r3, r3
 800375e:	693a      	ldr	r2, [r7, #16]
 8003760:	4013      	ands	r3, r2
 8003762:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800376a:	d00d      	beq.n	8003788 <HAL_GPIO_Init+0x1d4>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	4a43      	ldr	r2, [pc, #268]	; (800387c <HAL_GPIO_Init+0x2c8>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d007      	beq.n	8003784 <HAL_GPIO_Init+0x1d0>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	4a42      	ldr	r2, [pc, #264]	; (8003880 <HAL_GPIO_Init+0x2cc>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d101      	bne.n	8003780 <HAL_GPIO_Init+0x1cc>
 800377c:	2302      	movs	r3, #2
 800377e:	e004      	b.n	800378a <HAL_GPIO_Init+0x1d6>
 8003780:	2307      	movs	r3, #7
 8003782:	e002      	b.n	800378a <HAL_GPIO_Init+0x1d6>
 8003784:	2301      	movs	r3, #1
 8003786:	e000      	b.n	800378a <HAL_GPIO_Init+0x1d6>
 8003788:	2300      	movs	r3, #0
 800378a:	697a      	ldr	r2, [r7, #20]
 800378c:	f002 0203 	and.w	r2, r2, #3
 8003790:	0092      	lsls	r2, r2, #2
 8003792:	4093      	lsls	r3, r2
 8003794:	693a      	ldr	r2, [r7, #16]
 8003796:	4313      	orrs	r3, r2
 8003798:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800379a:	4937      	ldr	r1, [pc, #220]	; (8003878 <HAL_GPIO_Init+0x2c4>)
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	089b      	lsrs	r3, r3, #2
 80037a0:	3302      	adds	r3, #2
 80037a2:	693a      	ldr	r2, [r7, #16]
 80037a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80037a8:	4b36      	ldr	r3, [pc, #216]	; (8003884 <HAL_GPIO_Init+0x2d0>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	43db      	mvns	r3, r3
 80037b2:	693a      	ldr	r2, [r7, #16]
 80037b4:	4013      	ands	r3, r2
 80037b6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d003      	beq.n	80037cc <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80037c4:	693a      	ldr	r2, [r7, #16]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80037cc:	4a2d      	ldr	r2, [pc, #180]	; (8003884 <HAL_GPIO_Init+0x2d0>)
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80037d2:	4b2c      	ldr	r3, [pc, #176]	; (8003884 <HAL_GPIO_Init+0x2d0>)
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	43db      	mvns	r3, r3
 80037dc:	693a      	ldr	r2, [r7, #16]
 80037de:	4013      	ands	r3, r2
 80037e0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d003      	beq.n	80037f6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80037ee:	693a      	ldr	r2, [r7, #16]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80037f6:	4a23      	ldr	r2, [pc, #140]	; (8003884 <HAL_GPIO_Init+0x2d0>)
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80037fc:	4b21      	ldr	r3, [pc, #132]	; (8003884 <HAL_GPIO_Init+0x2d0>)
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	43db      	mvns	r3, r3
 8003806:	693a      	ldr	r2, [r7, #16]
 8003808:	4013      	ands	r3, r2
 800380a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003814:	2b00      	cmp	r3, #0
 8003816:	d003      	beq.n	8003820 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8003818:	693a      	ldr	r2, [r7, #16]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	4313      	orrs	r3, r2
 800381e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003820:	4a18      	ldr	r2, [pc, #96]	; (8003884 <HAL_GPIO_Init+0x2d0>)
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003826:	4b17      	ldr	r3, [pc, #92]	; (8003884 <HAL_GPIO_Init+0x2d0>)
 8003828:	68db      	ldr	r3, [r3, #12]
 800382a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	43db      	mvns	r3, r3
 8003830:	693a      	ldr	r2, [r7, #16]
 8003832:	4013      	ands	r3, r2
 8003834:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800383e:	2b00      	cmp	r3, #0
 8003840:	d003      	beq.n	800384a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8003842:	693a      	ldr	r2, [r7, #16]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	4313      	orrs	r3, r2
 8003848:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800384a:	4a0e      	ldr	r2, [pc, #56]	; (8003884 <HAL_GPIO_Init+0x2d0>)
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	3301      	adds	r3, #1
 8003854:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	fa22 f303 	lsr.w	r3, r2, r3
 8003860:	2b00      	cmp	r3, #0
 8003862:	f47f aeaf 	bne.w	80035c4 <HAL_GPIO_Init+0x10>
  }
}
 8003866:	bf00      	nop
 8003868:	bf00      	nop
 800386a:	371c      	adds	r7, #28
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr
 8003874:	40021000 	.word	0x40021000
 8003878:	40010000 	.word	0x40010000
 800387c:	48000400 	.word	0x48000400
 8003880:	48000800 	.word	0x48000800
 8003884:	40010400 	.word	0x40010400

08003888 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	460b      	mov	r3, r1
 8003892:	807b      	strh	r3, [r7, #2]
 8003894:	4613      	mov	r3, r2
 8003896:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003898:	787b      	ldrb	r3, [r7, #1]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d003      	beq.n	80038a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800389e:	887a      	ldrh	r2, [r7, #2]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80038a4:	e002      	b.n	80038ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80038a6:	887a      	ldrh	r2, [r7, #2]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80038ac:	bf00      	nop
 80038ae:	370c      	adds	r7, #12
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr

080038b8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b085      	sub	sp, #20
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	460b      	mov	r3, r1
 80038c2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	695b      	ldr	r3, [r3, #20]
 80038c8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80038ca:	887a      	ldrh	r2, [r7, #2]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	4013      	ands	r3, r2
 80038d0:	041a      	lsls	r2, r3, #16
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	43d9      	mvns	r1, r3
 80038d6:	887b      	ldrh	r3, [r7, #2]
 80038d8:	400b      	ands	r3, r1
 80038da:	431a      	orrs	r2, r3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	619a      	str	r2, [r3, #24]
}
 80038e0:	bf00      	nop
 80038e2:	3714      	adds	r7, #20
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr

080038ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b082      	sub	sp, #8
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	4603      	mov	r3, r0
 80038f4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80038f6:	4b08      	ldr	r3, [pc, #32]	; (8003918 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80038f8:	695a      	ldr	r2, [r3, #20]
 80038fa:	88fb      	ldrh	r3, [r7, #6]
 80038fc:	4013      	ands	r3, r2
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d006      	beq.n	8003910 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003902:	4a05      	ldr	r2, [pc, #20]	; (8003918 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003904:	88fb      	ldrh	r3, [r7, #6]
 8003906:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003908:	88fb      	ldrh	r3, [r7, #6]
 800390a:	4618      	mov	r0, r3
 800390c:	f7fd fea4 	bl	8001658 <HAL_GPIO_EXTI_Callback>
  }
}
 8003910:	bf00      	nop
 8003912:	3708      	adds	r7, #8
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}
 8003918:	40010400 	.word	0x40010400

0800391c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b082      	sub	sp, #8
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d101      	bne.n	800392e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e081      	b.n	8003a32 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003934:	b2db      	uxtb	r3, r3
 8003936:	2b00      	cmp	r3, #0
 8003938:	d106      	bne.n	8003948 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2200      	movs	r2, #0
 800393e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f7fd fb6c 	bl	8001020 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2224      	movs	r2, #36	; 0x24
 800394c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f022 0201 	bic.w	r2, r2, #1
 800395e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	685a      	ldr	r2, [r3, #4]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800396c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	689a      	ldr	r2, [r3, #8]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800397c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	2b01      	cmp	r3, #1
 8003984:	d107      	bne.n	8003996 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	689a      	ldr	r2, [r3, #8]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003992:	609a      	str	r2, [r3, #8]
 8003994:	e006      	b.n	80039a4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	689a      	ldr	r2, [r3, #8]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80039a2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	2b02      	cmp	r3, #2
 80039aa:	d104      	bne.n	80039b6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80039b4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	6812      	ldr	r2, [r2, #0]
 80039c0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80039c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039c8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	68da      	ldr	r2, [r3, #12]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80039d8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	691a      	ldr	r2, [r3, #16]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	695b      	ldr	r3, [r3, #20]
 80039e2:	ea42 0103 	orr.w	r1, r2, r3
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	699b      	ldr	r3, [r3, #24]
 80039ea:	021a      	lsls	r2, r3, #8
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	430a      	orrs	r2, r1
 80039f2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	69d9      	ldr	r1, [r3, #28]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6a1a      	ldr	r2, [r3, #32]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	430a      	orrs	r2, r1
 8003a02:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f042 0201 	orr.w	r2, r2, #1
 8003a12:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2220      	movs	r2, #32
 8003a1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003a30:	2300      	movs	r3, #0
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3708      	adds	r7, #8
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
	...

08003a3c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b088      	sub	sp, #32
 8003a40:	af02      	add	r7, sp, #8
 8003a42:	60f8      	str	r0, [r7, #12]
 8003a44:	4608      	mov	r0, r1
 8003a46:	4611      	mov	r1, r2
 8003a48:	461a      	mov	r2, r3
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	817b      	strh	r3, [r7, #10]
 8003a4e:	460b      	mov	r3, r1
 8003a50:	813b      	strh	r3, [r7, #8]
 8003a52:	4613      	mov	r3, r2
 8003a54:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	2b20      	cmp	r3, #32
 8003a60:	f040 80f9 	bne.w	8003c56 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a64:	6a3b      	ldr	r3, [r7, #32]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d002      	beq.n	8003a70 <HAL_I2C_Mem_Write+0x34>
 8003a6a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d105      	bne.n	8003a7c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a76:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e0ed      	b.n	8003c58 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d101      	bne.n	8003a8a <HAL_I2C_Mem_Write+0x4e>
 8003a86:	2302      	movs	r3, #2
 8003a88:	e0e6      	b.n	8003c58 <HAL_I2C_Mem_Write+0x21c>
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003a92:	f7fe f9ab 	bl	8001dec <HAL_GetTick>
 8003a96:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	9300      	str	r3, [sp, #0]
 8003a9c:	2319      	movs	r3, #25
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003aa4:	68f8      	ldr	r0, [r7, #12]
 8003aa6:	f000 fac3 	bl	8004030 <I2C_WaitOnFlagUntilTimeout>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d001      	beq.n	8003ab4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e0d1      	b.n	8003c58 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2221      	movs	r2, #33	; 0x21
 8003ab8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2240      	movs	r2, #64	; 0x40
 8003ac0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	6a3a      	ldr	r2, [r7, #32]
 8003ace:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003ad4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003adc:	88f8      	ldrh	r0, [r7, #6]
 8003ade:	893a      	ldrh	r2, [r7, #8]
 8003ae0:	8979      	ldrh	r1, [r7, #10]
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	9301      	str	r3, [sp, #4]
 8003ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ae8:	9300      	str	r3, [sp, #0]
 8003aea:	4603      	mov	r3, r0
 8003aec:	68f8      	ldr	r0, [r7, #12]
 8003aee:	f000 f9d3 	bl	8003e98 <I2C_RequestMemoryWrite>
 8003af2:	4603      	mov	r3, r0
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d005      	beq.n	8003b04 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2200      	movs	r2, #0
 8003afc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e0a9      	b.n	8003c58 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b08:	b29b      	uxth	r3, r3
 8003b0a:	2bff      	cmp	r3, #255	; 0xff
 8003b0c:	d90e      	bls.n	8003b2c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	22ff      	movs	r2, #255	; 0xff
 8003b12:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b18:	b2da      	uxtb	r2, r3
 8003b1a:	8979      	ldrh	r1, [r7, #10]
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	9300      	str	r3, [sp, #0]
 8003b20:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b24:	68f8      	ldr	r0, [r7, #12]
 8003b26:	f000 fba5 	bl	8004274 <I2C_TransferConfig>
 8003b2a:	e00f      	b.n	8003b4c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b30:	b29a      	uxth	r2, r3
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b3a:	b2da      	uxtb	r2, r3
 8003b3c:	8979      	ldrh	r1, [r7, #10]
 8003b3e:	2300      	movs	r3, #0
 8003b40:	9300      	str	r3, [sp, #0]
 8003b42:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b46:	68f8      	ldr	r0, [r7, #12]
 8003b48:	f000 fb94 	bl	8004274 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b4c:	697a      	ldr	r2, [r7, #20]
 8003b4e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b50:	68f8      	ldr	r0, [r7, #12]
 8003b52:	f000 faad 	bl	80040b0 <I2C_WaitOnTXISFlagUntilTimeout>
 8003b56:	4603      	mov	r3, r0
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d001      	beq.n	8003b60 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e07b      	b.n	8003c58 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b64:	781a      	ldrb	r2, [r3, #0]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b70:	1c5a      	adds	r2, r3, #1
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	3b01      	subs	r3, #1
 8003b7e:	b29a      	uxth	r2, r3
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b88:	3b01      	subs	r3, #1
 8003b8a:	b29a      	uxth	r2, r3
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d034      	beq.n	8003c04 <HAL_I2C_Mem_Write+0x1c8>
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d130      	bne.n	8003c04 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	9300      	str	r3, [sp, #0]
 8003ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ba8:	2200      	movs	r2, #0
 8003baa:	2180      	movs	r1, #128	; 0x80
 8003bac:	68f8      	ldr	r0, [r7, #12]
 8003bae:	f000 fa3f 	bl	8004030 <I2C_WaitOnFlagUntilTimeout>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d001      	beq.n	8003bbc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e04d      	b.n	8003c58 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	2bff      	cmp	r3, #255	; 0xff
 8003bc4:	d90e      	bls.n	8003be4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	22ff      	movs	r2, #255	; 0xff
 8003bca:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bd0:	b2da      	uxtb	r2, r3
 8003bd2:	8979      	ldrh	r1, [r7, #10]
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	9300      	str	r3, [sp, #0]
 8003bd8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003bdc:	68f8      	ldr	r0, [r7, #12]
 8003bde:	f000 fb49 	bl	8004274 <I2C_TransferConfig>
 8003be2:	e00f      	b.n	8003c04 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003be8:	b29a      	uxth	r2, r3
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bf2:	b2da      	uxtb	r2, r3
 8003bf4:	8979      	ldrh	r1, [r7, #10]
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	9300      	str	r3, [sp, #0]
 8003bfa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003bfe:	68f8      	ldr	r0, [r7, #12]
 8003c00:	f000 fb38 	bl	8004274 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d19e      	bne.n	8003b4c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c0e:	697a      	ldr	r2, [r7, #20]
 8003c10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c12:	68f8      	ldr	r0, [r7, #12]
 8003c14:	f000 fa8c 	bl	8004130 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d001      	beq.n	8003c22 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e01a      	b.n	8003c58 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	2220      	movs	r2, #32
 8003c28:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	6859      	ldr	r1, [r3, #4]
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	4b0a      	ldr	r3, [pc, #40]	; (8003c60 <HAL_I2C_Mem_Write+0x224>)
 8003c36:	400b      	ands	r3, r1
 8003c38:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2220      	movs	r2, #32
 8003c3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2200      	movs	r2, #0
 8003c46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003c52:	2300      	movs	r3, #0
 8003c54:	e000      	b.n	8003c58 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003c56:	2302      	movs	r3, #2
  }
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3718      	adds	r7, #24
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}
 8003c60:	fe00e800 	.word	0xfe00e800

08003c64 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b088      	sub	sp, #32
 8003c68:	af02      	add	r7, sp, #8
 8003c6a:	60f8      	str	r0, [r7, #12]
 8003c6c:	4608      	mov	r0, r1
 8003c6e:	4611      	mov	r1, r2
 8003c70:	461a      	mov	r2, r3
 8003c72:	4603      	mov	r3, r0
 8003c74:	817b      	strh	r3, [r7, #10]
 8003c76:	460b      	mov	r3, r1
 8003c78:	813b      	strh	r3, [r7, #8]
 8003c7a:	4613      	mov	r3, r2
 8003c7c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	2b20      	cmp	r3, #32
 8003c88:	f040 80fd 	bne.w	8003e86 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c8c:	6a3b      	ldr	r3, [r7, #32]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d002      	beq.n	8003c98 <HAL_I2C_Mem_Read+0x34>
 8003c92:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d105      	bne.n	8003ca4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c9e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e0f1      	b.n	8003e88 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d101      	bne.n	8003cb2 <HAL_I2C_Mem_Read+0x4e>
 8003cae:	2302      	movs	r3, #2
 8003cb0:	e0ea      	b.n	8003e88 <HAL_I2C_Mem_Read+0x224>
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003cba:	f7fe f897 	bl	8001dec <HAL_GetTick>
 8003cbe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	9300      	str	r3, [sp, #0]
 8003cc4:	2319      	movs	r3, #25
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003ccc:	68f8      	ldr	r0, [r7, #12]
 8003cce:	f000 f9af 	bl	8004030 <I2C_WaitOnFlagUntilTimeout>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d001      	beq.n	8003cdc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e0d5      	b.n	8003e88 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2222      	movs	r2, #34	; 0x22
 8003ce0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2240      	movs	r2, #64	; 0x40
 8003ce8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	6a3a      	ldr	r2, [r7, #32]
 8003cf6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003cfc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2200      	movs	r2, #0
 8003d02:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003d04:	88f8      	ldrh	r0, [r7, #6]
 8003d06:	893a      	ldrh	r2, [r7, #8]
 8003d08:	8979      	ldrh	r1, [r7, #10]
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	9301      	str	r3, [sp, #4]
 8003d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d10:	9300      	str	r3, [sp, #0]
 8003d12:	4603      	mov	r3, r0
 8003d14:	68f8      	ldr	r0, [r7, #12]
 8003d16:	f000 f913 	bl	8003f40 <I2C_RequestMemoryRead>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d005      	beq.n	8003d2c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2200      	movs	r2, #0
 8003d24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e0ad      	b.n	8003e88 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	2bff      	cmp	r3, #255	; 0xff
 8003d34:	d90e      	bls.n	8003d54 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	22ff      	movs	r2, #255	; 0xff
 8003d3a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d40:	b2da      	uxtb	r2, r3
 8003d42:	8979      	ldrh	r1, [r7, #10]
 8003d44:	4b52      	ldr	r3, [pc, #328]	; (8003e90 <HAL_I2C_Mem_Read+0x22c>)
 8003d46:	9300      	str	r3, [sp, #0]
 8003d48:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003d4c:	68f8      	ldr	r0, [r7, #12]
 8003d4e:	f000 fa91 	bl	8004274 <I2C_TransferConfig>
 8003d52:	e00f      	b.n	8003d74 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d58:	b29a      	uxth	r2, r3
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d62:	b2da      	uxtb	r2, r3
 8003d64:	8979      	ldrh	r1, [r7, #10]
 8003d66:	4b4a      	ldr	r3, [pc, #296]	; (8003e90 <HAL_I2C_Mem_Read+0x22c>)
 8003d68:	9300      	str	r3, [sp, #0]
 8003d6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d6e:	68f8      	ldr	r0, [r7, #12]
 8003d70:	f000 fa80 	bl	8004274 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	9300      	str	r3, [sp, #0]
 8003d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	2104      	movs	r1, #4
 8003d7e:	68f8      	ldr	r0, [r7, #12]
 8003d80:	f000 f956 	bl	8004030 <I2C_WaitOnFlagUntilTimeout>
 8003d84:	4603      	mov	r3, r0
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d001      	beq.n	8003d8e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e07c      	b.n	8003e88 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d98:	b2d2      	uxtb	r2, r2
 8003d9a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da0:	1c5a      	adds	r2, r3, #1
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003daa:	3b01      	subs	r3, #1
 8003dac:	b29a      	uxth	r2, r3
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	3b01      	subs	r3, #1
 8003dba:	b29a      	uxth	r2, r3
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dc4:	b29b      	uxth	r3, r3
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d034      	beq.n	8003e34 <HAL_I2C_Mem_Read+0x1d0>
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d130      	bne.n	8003e34 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	9300      	str	r3, [sp, #0]
 8003dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dd8:	2200      	movs	r2, #0
 8003dda:	2180      	movs	r1, #128	; 0x80
 8003ddc:	68f8      	ldr	r0, [r7, #12]
 8003dde:	f000 f927 	bl	8004030 <I2C_WaitOnFlagUntilTimeout>
 8003de2:	4603      	mov	r3, r0
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d001      	beq.n	8003dec <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	e04d      	b.n	8003e88 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003df0:	b29b      	uxth	r3, r3
 8003df2:	2bff      	cmp	r3, #255	; 0xff
 8003df4:	d90e      	bls.n	8003e14 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	22ff      	movs	r2, #255	; 0xff
 8003dfa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e00:	b2da      	uxtb	r2, r3
 8003e02:	8979      	ldrh	r1, [r7, #10]
 8003e04:	2300      	movs	r3, #0
 8003e06:	9300      	str	r3, [sp, #0]
 8003e08:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003e0c:	68f8      	ldr	r0, [r7, #12]
 8003e0e:	f000 fa31 	bl	8004274 <I2C_TransferConfig>
 8003e12:	e00f      	b.n	8003e34 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e18:	b29a      	uxth	r2, r3
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e22:	b2da      	uxtb	r2, r3
 8003e24:	8979      	ldrh	r1, [r7, #10]
 8003e26:	2300      	movs	r3, #0
 8003e28:	9300      	str	r3, [sp, #0]
 8003e2a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e2e:	68f8      	ldr	r0, [r7, #12]
 8003e30:	f000 fa20 	bl	8004274 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d19a      	bne.n	8003d74 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e3e:	697a      	ldr	r2, [r7, #20]
 8003e40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e42:	68f8      	ldr	r0, [r7, #12]
 8003e44:	f000 f974 	bl	8004130 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d001      	beq.n	8003e52 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e01a      	b.n	8003e88 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	2220      	movs	r2, #32
 8003e58:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	6859      	ldr	r1, [r3, #4]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	4b0b      	ldr	r3, [pc, #44]	; (8003e94 <HAL_I2C_Mem_Read+0x230>)
 8003e66:	400b      	ands	r3, r1
 8003e68:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2220      	movs	r2, #32
 8003e6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2200      	movs	r2, #0
 8003e76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003e82:	2300      	movs	r3, #0
 8003e84:	e000      	b.n	8003e88 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003e86:	2302      	movs	r3, #2
  }
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3718      	adds	r7, #24
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}
 8003e90:	80002400 	.word	0x80002400
 8003e94:	fe00e800 	.word	0xfe00e800

08003e98 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b086      	sub	sp, #24
 8003e9c:	af02      	add	r7, sp, #8
 8003e9e:	60f8      	str	r0, [r7, #12]
 8003ea0:	4608      	mov	r0, r1
 8003ea2:	4611      	mov	r1, r2
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	817b      	strh	r3, [r7, #10]
 8003eaa:	460b      	mov	r3, r1
 8003eac:	813b      	strh	r3, [r7, #8]
 8003eae:	4613      	mov	r3, r2
 8003eb0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003eb2:	88fb      	ldrh	r3, [r7, #6]
 8003eb4:	b2da      	uxtb	r2, r3
 8003eb6:	8979      	ldrh	r1, [r7, #10]
 8003eb8:	4b20      	ldr	r3, [pc, #128]	; (8003f3c <I2C_RequestMemoryWrite+0xa4>)
 8003eba:	9300      	str	r3, [sp, #0]
 8003ebc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003ec0:	68f8      	ldr	r0, [r7, #12]
 8003ec2:	f000 f9d7 	bl	8004274 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ec6:	69fa      	ldr	r2, [r7, #28]
 8003ec8:	69b9      	ldr	r1, [r7, #24]
 8003eca:	68f8      	ldr	r0, [r7, #12]
 8003ecc:	f000 f8f0 	bl	80040b0 <I2C_WaitOnTXISFlagUntilTimeout>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d001      	beq.n	8003eda <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e02c      	b.n	8003f34 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003eda:	88fb      	ldrh	r3, [r7, #6]
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d105      	bne.n	8003eec <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003ee0:	893b      	ldrh	r3, [r7, #8]
 8003ee2:	b2da      	uxtb	r2, r3
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	629a      	str	r2, [r3, #40]	; 0x28
 8003eea:	e015      	b.n	8003f18 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003eec:	893b      	ldrh	r3, [r7, #8]
 8003eee:	0a1b      	lsrs	r3, r3, #8
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	b2da      	uxtb	r2, r3
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003efa:	69fa      	ldr	r2, [r7, #28]
 8003efc:	69b9      	ldr	r1, [r7, #24]
 8003efe:	68f8      	ldr	r0, [r7, #12]
 8003f00:	f000 f8d6 	bl	80040b0 <I2C_WaitOnTXISFlagUntilTimeout>
 8003f04:	4603      	mov	r3, r0
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d001      	beq.n	8003f0e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e012      	b.n	8003f34 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003f0e:	893b      	ldrh	r3, [r7, #8]
 8003f10:	b2da      	uxtb	r2, r3
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003f18:	69fb      	ldr	r3, [r7, #28]
 8003f1a:	9300      	str	r3, [sp, #0]
 8003f1c:	69bb      	ldr	r3, [r7, #24]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	2180      	movs	r1, #128	; 0x80
 8003f22:	68f8      	ldr	r0, [r7, #12]
 8003f24:	f000 f884 	bl	8004030 <I2C_WaitOnFlagUntilTimeout>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d001      	beq.n	8003f32 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e000      	b.n	8003f34 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003f32:	2300      	movs	r3, #0
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3710      	adds	r7, #16
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}
 8003f3c:	80002000 	.word	0x80002000

08003f40 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b086      	sub	sp, #24
 8003f44:	af02      	add	r7, sp, #8
 8003f46:	60f8      	str	r0, [r7, #12]
 8003f48:	4608      	mov	r0, r1
 8003f4a:	4611      	mov	r1, r2
 8003f4c:	461a      	mov	r2, r3
 8003f4e:	4603      	mov	r3, r0
 8003f50:	817b      	strh	r3, [r7, #10]
 8003f52:	460b      	mov	r3, r1
 8003f54:	813b      	strh	r3, [r7, #8]
 8003f56:	4613      	mov	r3, r2
 8003f58:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003f5a:	88fb      	ldrh	r3, [r7, #6]
 8003f5c:	b2da      	uxtb	r2, r3
 8003f5e:	8979      	ldrh	r1, [r7, #10]
 8003f60:	4b20      	ldr	r3, [pc, #128]	; (8003fe4 <I2C_RequestMemoryRead+0xa4>)
 8003f62:	9300      	str	r3, [sp, #0]
 8003f64:	2300      	movs	r3, #0
 8003f66:	68f8      	ldr	r0, [r7, #12]
 8003f68:	f000 f984 	bl	8004274 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f6c:	69fa      	ldr	r2, [r7, #28]
 8003f6e:	69b9      	ldr	r1, [r7, #24]
 8003f70:	68f8      	ldr	r0, [r7, #12]
 8003f72:	f000 f89d 	bl	80040b0 <I2C_WaitOnTXISFlagUntilTimeout>
 8003f76:	4603      	mov	r3, r0
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d001      	beq.n	8003f80 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e02c      	b.n	8003fda <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003f80:	88fb      	ldrh	r3, [r7, #6]
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d105      	bne.n	8003f92 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003f86:	893b      	ldrh	r3, [r7, #8]
 8003f88:	b2da      	uxtb	r2, r3
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	629a      	str	r2, [r3, #40]	; 0x28
 8003f90:	e015      	b.n	8003fbe <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003f92:	893b      	ldrh	r3, [r7, #8]
 8003f94:	0a1b      	lsrs	r3, r3, #8
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	b2da      	uxtb	r2, r3
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fa0:	69fa      	ldr	r2, [r7, #28]
 8003fa2:	69b9      	ldr	r1, [r7, #24]
 8003fa4:	68f8      	ldr	r0, [r7, #12]
 8003fa6:	f000 f883 	bl	80040b0 <I2C_WaitOnTXISFlagUntilTimeout>
 8003faa:	4603      	mov	r3, r0
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d001      	beq.n	8003fb4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	e012      	b.n	8003fda <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003fb4:	893b      	ldrh	r3, [r7, #8]
 8003fb6:	b2da      	uxtb	r2, r3
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003fbe:	69fb      	ldr	r3, [r7, #28]
 8003fc0:	9300      	str	r3, [sp, #0]
 8003fc2:	69bb      	ldr	r3, [r7, #24]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	2140      	movs	r1, #64	; 0x40
 8003fc8:	68f8      	ldr	r0, [r7, #12]
 8003fca:	f000 f831 	bl	8004030 <I2C_WaitOnFlagUntilTimeout>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d001      	beq.n	8003fd8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e000      	b.n	8003fda <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003fd8:	2300      	movs	r3, #0
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3710      	adds	r7, #16
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}
 8003fe2:	bf00      	nop
 8003fe4:	80002000 	.word	0x80002000

08003fe8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b083      	sub	sp, #12
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	699b      	ldr	r3, [r3, #24]
 8003ff6:	f003 0302 	and.w	r3, r3, #2
 8003ffa:	2b02      	cmp	r3, #2
 8003ffc:	d103      	bne.n	8004006 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	2200      	movs	r2, #0
 8004004:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	699b      	ldr	r3, [r3, #24]
 800400c:	f003 0301 	and.w	r3, r3, #1
 8004010:	2b01      	cmp	r3, #1
 8004012:	d007      	beq.n	8004024 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	699a      	ldr	r2, [r3, #24]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f042 0201 	orr.w	r2, r2, #1
 8004022:	619a      	str	r2, [r3, #24]
  }
}
 8004024:	bf00      	nop
 8004026:	370c      	adds	r7, #12
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr

08004030 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b084      	sub	sp, #16
 8004034:	af00      	add	r7, sp, #0
 8004036:	60f8      	str	r0, [r7, #12]
 8004038:	60b9      	str	r1, [r7, #8]
 800403a:	603b      	str	r3, [r7, #0]
 800403c:	4613      	mov	r3, r2
 800403e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004040:	e022      	b.n	8004088 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004048:	d01e      	beq.n	8004088 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800404a:	f7fd fecf 	bl	8001dec <HAL_GetTick>
 800404e:	4602      	mov	r2, r0
 8004050:	69bb      	ldr	r3, [r7, #24]
 8004052:	1ad3      	subs	r3, r2, r3
 8004054:	683a      	ldr	r2, [r7, #0]
 8004056:	429a      	cmp	r2, r3
 8004058:	d302      	bcc.n	8004060 <I2C_WaitOnFlagUntilTimeout+0x30>
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d113      	bne.n	8004088 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004064:	f043 0220 	orr.w	r2, r3, #32
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2220      	movs	r2, #32
 8004070:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2200      	movs	r2, #0
 8004078:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2200      	movs	r2, #0
 8004080:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	e00f      	b.n	80040a8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	699a      	ldr	r2, [r3, #24]
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	4013      	ands	r3, r2
 8004092:	68ba      	ldr	r2, [r7, #8]
 8004094:	429a      	cmp	r2, r3
 8004096:	bf0c      	ite	eq
 8004098:	2301      	moveq	r3, #1
 800409a:	2300      	movne	r3, #0
 800409c:	b2db      	uxtb	r3, r3
 800409e:	461a      	mov	r2, r3
 80040a0:	79fb      	ldrb	r3, [r7, #7]
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d0cd      	beq.n	8004042 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80040a6:	2300      	movs	r3, #0
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3710      	adds	r7, #16
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}

080040b0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b084      	sub	sp, #16
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	60f8      	str	r0, [r7, #12]
 80040b8:	60b9      	str	r1, [r7, #8]
 80040ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80040bc:	e02c      	b.n	8004118 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	68b9      	ldr	r1, [r7, #8]
 80040c2:	68f8      	ldr	r0, [r7, #12]
 80040c4:	f000 f870 	bl	80041a8 <I2C_IsAcknowledgeFailed>
 80040c8:	4603      	mov	r3, r0
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d001      	beq.n	80040d2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e02a      	b.n	8004128 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040d8:	d01e      	beq.n	8004118 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040da:	f7fd fe87 	bl	8001dec <HAL_GetTick>
 80040de:	4602      	mov	r2, r0
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	1ad3      	subs	r3, r2, r3
 80040e4:	68ba      	ldr	r2, [r7, #8]
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d302      	bcc.n	80040f0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d113      	bne.n	8004118 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040f4:	f043 0220 	orr.w	r2, r3, #32
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2220      	movs	r2, #32
 8004100:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2200      	movs	r2, #0
 8004108:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2200      	movs	r2, #0
 8004110:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	e007      	b.n	8004128 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	699b      	ldr	r3, [r3, #24]
 800411e:	f003 0302 	and.w	r3, r3, #2
 8004122:	2b02      	cmp	r3, #2
 8004124:	d1cb      	bne.n	80040be <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004126:	2300      	movs	r3, #0
}
 8004128:	4618      	mov	r0, r3
 800412a:	3710      	adds	r7, #16
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}

08004130 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b084      	sub	sp, #16
 8004134:	af00      	add	r7, sp, #0
 8004136:	60f8      	str	r0, [r7, #12]
 8004138:	60b9      	str	r1, [r7, #8]
 800413a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800413c:	e028      	b.n	8004190 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800413e:	687a      	ldr	r2, [r7, #4]
 8004140:	68b9      	ldr	r1, [r7, #8]
 8004142:	68f8      	ldr	r0, [r7, #12]
 8004144:	f000 f830 	bl	80041a8 <I2C_IsAcknowledgeFailed>
 8004148:	4603      	mov	r3, r0
 800414a:	2b00      	cmp	r3, #0
 800414c:	d001      	beq.n	8004152 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e026      	b.n	80041a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004152:	f7fd fe4b 	bl	8001dec <HAL_GetTick>
 8004156:	4602      	mov	r2, r0
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	1ad3      	subs	r3, r2, r3
 800415c:	68ba      	ldr	r2, [r7, #8]
 800415e:	429a      	cmp	r2, r3
 8004160:	d302      	bcc.n	8004168 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d113      	bne.n	8004190 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800416c:	f043 0220 	orr.w	r2, r3, #32
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2220      	movs	r2, #32
 8004178:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2200      	movs	r2, #0
 8004180:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2200      	movs	r2, #0
 8004188:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	e007      	b.n	80041a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	699b      	ldr	r3, [r3, #24]
 8004196:	f003 0320 	and.w	r3, r3, #32
 800419a:	2b20      	cmp	r3, #32
 800419c:	d1cf      	bne.n	800413e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800419e:	2300      	movs	r3, #0
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	3710      	adds	r7, #16
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}

080041a8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b084      	sub	sp, #16
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	60f8      	str	r0, [r7, #12]
 80041b0:	60b9      	str	r1, [r7, #8]
 80041b2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	699b      	ldr	r3, [r3, #24]
 80041ba:	f003 0310 	and.w	r3, r3, #16
 80041be:	2b10      	cmp	r3, #16
 80041c0:	d151      	bne.n	8004266 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80041c2:	e022      	b.n	800420a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ca:	d01e      	beq.n	800420a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041cc:	f7fd fe0e 	bl	8001dec <HAL_GetTick>
 80041d0:	4602      	mov	r2, r0
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	68ba      	ldr	r2, [r7, #8]
 80041d8:	429a      	cmp	r2, r3
 80041da:	d302      	bcc.n	80041e2 <I2C_IsAcknowledgeFailed+0x3a>
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d113      	bne.n	800420a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041e6:	f043 0220 	orr.w	r2, r3, #32
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2220      	movs	r2, #32
 80041f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2200      	movs	r2, #0
 80041fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2200      	movs	r2, #0
 8004202:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e02e      	b.n	8004268 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	699b      	ldr	r3, [r3, #24]
 8004210:	f003 0320 	and.w	r3, r3, #32
 8004214:	2b20      	cmp	r3, #32
 8004216:	d1d5      	bne.n	80041c4 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	2210      	movs	r2, #16
 800421e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	2220      	movs	r2, #32
 8004226:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004228:	68f8      	ldr	r0, [r7, #12]
 800422a:	f7ff fedd 	bl	8003fe8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	6859      	ldr	r1, [r3, #4]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	4b0d      	ldr	r3, [pc, #52]	; (8004270 <I2C_IsAcknowledgeFailed+0xc8>)
 800423a:	400b      	ands	r3, r1
 800423c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004242:	f043 0204 	orr.w	r2, r3, #4
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2220      	movs	r2, #32
 800424e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2200      	movs	r2, #0
 8004256:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2200      	movs	r2, #0
 800425e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e000      	b.n	8004268 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8004266:	2300      	movs	r3, #0
}
 8004268:	4618      	mov	r0, r3
 800426a:	3710      	adds	r7, #16
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}
 8004270:	fe00e800 	.word	0xfe00e800

08004274 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004274:	b480      	push	{r7}
 8004276:	b085      	sub	sp, #20
 8004278:	af00      	add	r7, sp, #0
 800427a:	60f8      	str	r0, [r7, #12]
 800427c:	607b      	str	r3, [r7, #4]
 800427e:	460b      	mov	r3, r1
 8004280:	817b      	strh	r3, [r7, #10]
 8004282:	4613      	mov	r3, r2
 8004284:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	685a      	ldr	r2, [r3, #4]
 800428c:	69bb      	ldr	r3, [r7, #24]
 800428e:	0d5b      	lsrs	r3, r3, #21
 8004290:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004294:	4b0d      	ldr	r3, [pc, #52]	; (80042cc <I2C_TransferConfig+0x58>)
 8004296:	430b      	orrs	r3, r1
 8004298:	43db      	mvns	r3, r3
 800429a:	ea02 0103 	and.w	r1, r2, r3
 800429e:	897b      	ldrh	r3, [r7, #10]
 80042a0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80042a4:	7a7b      	ldrb	r3, [r7, #9]
 80042a6:	041b      	lsls	r3, r3, #16
 80042a8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80042ac:	431a      	orrs	r2, r3
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	431a      	orrs	r2, r3
 80042b2:	69bb      	ldr	r3, [r7, #24]
 80042b4:	431a      	orrs	r2, r3
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	430a      	orrs	r2, r1
 80042bc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80042be:	bf00      	nop
 80042c0:	3714      	adds	r7, #20
 80042c2:	46bd      	mov	sp, r7
 80042c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c8:	4770      	bx	lr
 80042ca:	bf00      	nop
 80042cc:	03ff63ff 	.word	0x03ff63ff

080042d0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b083      	sub	sp, #12
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	2b20      	cmp	r3, #32
 80042e4:	d138      	bne.n	8004358 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d101      	bne.n	80042f4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80042f0:	2302      	movs	r3, #2
 80042f2:	e032      	b.n	800435a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2201      	movs	r2, #1
 80042f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2224      	movs	r2, #36	; 0x24
 8004300:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f022 0201 	bic.w	r2, r2, #1
 8004312:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004322:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	6819      	ldr	r1, [r3, #0]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	683a      	ldr	r2, [r7, #0]
 8004330:	430a      	orrs	r2, r1
 8004332:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f042 0201 	orr.w	r2, r2, #1
 8004342:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2220      	movs	r2, #32
 8004348:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2200      	movs	r2, #0
 8004350:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004354:	2300      	movs	r3, #0
 8004356:	e000      	b.n	800435a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004358:	2302      	movs	r3, #2
  }
}
 800435a:	4618      	mov	r0, r3
 800435c:	370c      	adds	r7, #12
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr

08004366 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004366:	b480      	push	{r7}
 8004368:	b085      	sub	sp, #20
 800436a:	af00      	add	r7, sp, #0
 800436c:	6078      	str	r0, [r7, #4]
 800436e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004376:	b2db      	uxtb	r3, r3
 8004378:	2b20      	cmp	r3, #32
 800437a:	d139      	bne.n	80043f0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004382:	2b01      	cmp	r3, #1
 8004384:	d101      	bne.n	800438a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004386:	2302      	movs	r3, #2
 8004388:	e033      	b.n	80043f2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2201      	movs	r2, #1
 800438e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2224      	movs	r2, #36	; 0x24
 8004396:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f022 0201 	bic.w	r2, r2, #1
 80043a8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80043b8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	021b      	lsls	r3, r3, #8
 80043be:	68fa      	ldr	r2, [r7, #12]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	68fa      	ldr	r2, [r7, #12]
 80043ca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f042 0201 	orr.w	r2, r2, #1
 80043da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2220      	movs	r2, #32
 80043e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2200      	movs	r2, #0
 80043e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80043ec:	2300      	movs	r3, #0
 80043ee:	e000      	b.n	80043f2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80043f0:	2302      	movs	r3, #2
  }
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3714      	adds	r7, #20
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr

080043fe <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80043fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004400:	b08b      	sub	sp, #44	; 0x2c
 8004402:	af06      	add	r7, sp, #24
 8004404:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d101      	bne.n	8004410 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	e104      	b.n	800461a <HAL_PCD_Init+0x21c>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8004416:	b2db      	uxtb	r3, r3
 8004418:	2b00      	cmp	r3, #0
 800441a:	d106      	bne.n	800442a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2200      	movs	r2, #0
 8004420:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	f007 f95d 	bl	800b6e4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2203      	movs	r2, #3
 800442e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4618      	mov	r0, r3
 8004438:	f003 fab0 	bl	800799c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	603b      	str	r3, [r7, #0]
 8004442:	687e      	ldr	r6, [r7, #4]
 8004444:	466d      	mov	r5, sp
 8004446:	f106 0410 	add.w	r4, r6, #16
 800444a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800444c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800444e:	6823      	ldr	r3, [r4, #0]
 8004450:	602b      	str	r3, [r5, #0]
 8004452:	1d33      	adds	r3, r6, #4
 8004454:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004456:	6838      	ldr	r0, [r7, #0]
 8004458:	f003 fa78 	bl	800794c <USB_CoreInit>
 800445c:	4603      	mov	r3, r0
 800445e:	2b00      	cmp	r3, #0
 8004460:	d005      	beq.n	800446e <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2202      	movs	r2, #2
 8004466:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e0d5      	b.n	800461a <HAL_PCD_Init+0x21c>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	2100      	movs	r1, #0
 8004474:	4618      	mov	r0, r3
 8004476:	f003 faac 	bl	80079d2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800447a:	2300      	movs	r3, #0
 800447c:	73fb      	strb	r3, [r7, #15]
 800447e:	e04c      	b.n	800451a <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004480:	7bfb      	ldrb	r3, [r7, #15]
 8004482:	6879      	ldr	r1, [r7, #4]
 8004484:	1c5a      	adds	r2, r3, #1
 8004486:	4613      	mov	r3, r2
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	4413      	add	r3, r2
 800448c:	00db      	lsls	r3, r3, #3
 800448e:	440b      	add	r3, r1
 8004490:	3301      	adds	r3, #1
 8004492:	2201      	movs	r2, #1
 8004494:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004496:	7bfb      	ldrb	r3, [r7, #15]
 8004498:	6879      	ldr	r1, [r7, #4]
 800449a:	1c5a      	adds	r2, r3, #1
 800449c:	4613      	mov	r3, r2
 800449e:	009b      	lsls	r3, r3, #2
 80044a0:	4413      	add	r3, r2
 80044a2:	00db      	lsls	r3, r3, #3
 80044a4:	440b      	add	r3, r1
 80044a6:	7bfa      	ldrb	r2, [r7, #15]
 80044a8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80044aa:	7bfa      	ldrb	r2, [r7, #15]
 80044ac:	7bfb      	ldrb	r3, [r7, #15]
 80044ae:	b298      	uxth	r0, r3
 80044b0:	6879      	ldr	r1, [r7, #4]
 80044b2:	4613      	mov	r3, r2
 80044b4:	009b      	lsls	r3, r3, #2
 80044b6:	4413      	add	r3, r2
 80044b8:	00db      	lsls	r3, r3, #3
 80044ba:	440b      	add	r3, r1
 80044bc:	3336      	adds	r3, #54	; 0x36
 80044be:	4602      	mov	r2, r0
 80044c0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80044c2:	7bfb      	ldrb	r3, [r7, #15]
 80044c4:	6879      	ldr	r1, [r7, #4]
 80044c6:	1c5a      	adds	r2, r3, #1
 80044c8:	4613      	mov	r3, r2
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	4413      	add	r3, r2
 80044ce:	00db      	lsls	r3, r3, #3
 80044d0:	440b      	add	r3, r1
 80044d2:	3303      	adds	r3, #3
 80044d4:	2200      	movs	r2, #0
 80044d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80044d8:	7bfa      	ldrb	r2, [r7, #15]
 80044da:	6879      	ldr	r1, [r7, #4]
 80044dc:	4613      	mov	r3, r2
 80044de:	009b      	lsls	r3, r3, #2
 80044e0:	4413      	add	r3, r2
 80044e2:	00db      	lsls	r3, r3, #3
 80044e4:	440b      	add	r3, r1
 80044e6:	3338      	adds	r3, #56	; 0x38
 80044e8:	2200      	movs	r2, #0
 80044ea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80044ec:	7bfa      	ldrb	r2, [r7, #15]
 80044ee:	6879      	ldr	r1, [r7, #4]
 80044f0:	4613      	mov	r3, r2
 80044f2:	009b      	lsls	r3, r3, #2
 80044f4:	4413      	add	r3, r2
 80044f6:	00db      	lsls	r3, r3, #3
 80044f8:	440b      	add	r3, r1
 80044fa:	333c      	adds	r3, #60	; 0x3c
 80044fc:	2200      	movs	r2, #0
 80044fe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004500:	7bfa      	ldrb	r2, [r7, #15]
 8004502:	6879      	ldr	r1, [r7, #4]
 8004504:	4613      	mov	r3, r2
 8004506:	009b      	lsls	r3, r3, #2
 8004508:	4413      	add	r3, r2
 800450a:	00db      	lsls	r3, r3, #3
 800450c:	440b      	add	r3, r1
 800450e:	3340      	adds	r3, #64	; 0x40
 8004510:	2200      	movs	r2, #0
 8004512:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004514:	7bfb      	ldrb	r3, [r7, #15]
 8004516:	3301      	adds	r3, #1
 8004518:	73fb      	strb	r3, [r7, #15]
 800451a:	7bfa      	ldrb	r2, [r7, #15]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	429a      	cmp	r2, r3
 8004522:	d3ad      	bcc.n	8004480 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004524:	2300      	movs	r3, #0
 8004526:	73fb      	strb	r3, [r7, #15]
 8004528:	e044      	b.n	80045b4 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800452a:	7bfa      	ldrb	r2, [r7, #15]
 800452c:	6879      	ldr	r1, [r7, #4]
 800452e:	4613      	mov	r3, r2
 8004530:	009b      	lsls	r3, r3, #2
 8004532:	4413      	add	r3, r2
 8004534:	00db      	lsls	r3, r3, #3
 8004536:	440b      	add	r3, r1
 8004538:	f203 1369 	addw	r3, r3, #361	; 0x169
 800453c:	2200      	movs	r2, #0
 800453e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004540:	7bfa      	ldrb	r2, [r7, #15]
 8004542:	6879      	ldr	r1, [r7, #4]
 8004544:	4613      	mov	r3, r2
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	4413      	add	r3, r2
 800454a:	00db      	lsls	r3, r3, #3
 800454c:	440b      	add	r3, r1
 800454e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004552:	7bfa      	ldrb	r2, [r7, #15]
 8004554:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004556:	7bfa      	ldrb	r2, [r7, #15]
 8004558:	6879      	ldr	r1, [r7, #4]
 800455a:	4613      	mov	r3, r2
 800455c:	009b      	lsls	r3, r3, #2
 800455e:	4413      	add	r3, r2
 8004560:	00db      	lsls	r3, r3, #3
 8004562:	440b      	add	r3, r1
 8004564:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8004568:	2200      	movs	r2, #0
 800456a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800456c:	7bfa      	ldrb	r2, [r7, #15]
 800456e:	6879      	ldr	r1, [r7, #4]
 8004570:	4613      	mov	r3, r2
 8004572:	009b      	lsls	r3, r3, #2
 8004574:	4413      	add	r3, r2
 8004576:	00db      	lsls	r3, r3, #3
 8004578:	440b      	add	r3, r1
 800457a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800457e:	2200      	movs	r2, #0
 8004580:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004582:	7bfa      	ldrb	r2, [r7, #15]
 8004584:	6879      	ldr	r1, [r7, #4]
 8004586:	4613      	mov	r3, r2
 8004588:	009b      	lsls	r3, r3, #2
 800458a:	4413      	add	r3, r2
 800458c:	00db      	lsls	r3, r3, #3
 800458e:	440b      	add	r3, r1
 8004590:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8004594:	2200      	movs	r2, #0
 8004596:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004598:	7bfa      	ldrb	r2, [r7, #15]
 800459a:	6879      	ldr	r1, [r7, #4]
 800459c:	4613      	mov	r3, r2
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	4413      	add	r3, r2
 80045a2:	00db      	lsls	r3, r3, #3
 80045a4:	440b      	add	r3, r1
 80045a6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80045aa:	2200      	movs	r2, #0
 80045ac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045ae:	7bfb      	ldrb	r3, [r7, #15]
 80045b0:	3301      	adds	r3, #1
 80045b2:	73fb      	strb	r3, [r7, #15]
 80045b4:	7bfa      	ldrb	r2, [r7, #15]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	429a      	cmp	r2, r3
 80045bc:	d3b5      	bcc.n	800452a <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	603b      	str	r3, [r7, #0]
 80045c4:	687e      	ldr	r6, [r7, #4]
 80045c6:	466d      	mov	r5, sp
 80045c8:	f106 0410 	add.w	r4, r6, #16
 80045cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80045ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80045d0:	6823      	ldr	r3, [r4, #0]
 80045d2:	602b      	str	r3, [r5, #0]
 80045d4:	1d33      	adds	r3, r6, #4
 80045d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80045d8:	6838      	ldr	r0, [r7, #0]
 80045da:	f003 fa07 	bl	80079ec <USB_DevInit>
 80045de:	4603      	mov	r3, r0
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d005      	beq.n	80045f0 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2202      	movs	r2, #2
 80045e8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	e014      	b.n	800461a <HAL_PCD_Init+0x21c>
  }

  hpcd->USB_Address = 0U;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2200      	movs	r2, #0
 80045f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	69db      	ldr	r3, [r3, #28]
 8004604:	2b01      	cmp	r3, #1
 8004606:	d102      	bne.n	800460e <HAL_PCD_Init+0x210>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f001 fb85 	bl	8005d18 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4618      	mov	r0, r3
 8004614:	f005 fb88 	bl	8009d28 <USB_DevDisconnect>

  return HAL_OK;
 8004618:	2300      	movs	r3, #0
}
 800461a:	4618      	mov	r0, r3
 800461c:	3714      	adds	r7, #20
 800461e:	46bd      	mov	sp, r7
 8004620:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004622 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004622:	b580      	push	{r7, lr}
 8004624:	b082      	sub	sp, #8
 8004626:	af00      	add	r7, sp, #0
 8004628:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004630:	2b01      	cmp	r3, #1
 8004632:	d101      	bne.n	8004638 <HAL_PCD_Start+0x16>
 8004634:	2302      	movs	r3, #2
 8004636:	e012      	b.n	800465e <HAL_PCD_Start+0x3c>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2201      	movs	r2, #1
 800463c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4618      	mov	r0, r3
 8004646:	f003 f992 	bl	800796e <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4618      	mov	r0, r3
 8004650:	f005 fb53 	bl	8009cfa <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2200      	movs	r2, #0
 8004658:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800465c:	2300      	movs	r3, #0
}
 800465e:	4618      	mov	r0, r3
 8004660:	3708      	adds	r7, #8
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}

08004666 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004666:	b580      	push	{r7, lr}
 8004668:	b082      	sub	sp, #8
 800466a:	af00      	add	r7, sp, #0
 800466c:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4618      	mov	r0, r3
 8004674:	f005 fb6d 	bl	8009d52 <USB_ReadInterrupts>
 8004678:	4603      	mov	r3, r0
 800467a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800467e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004682:	d102      	bne.n	800468a <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	f000 fb43 	bl	8004d10 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4618      	mov	r0, r3
 8004690:	f005 fb5f 	bl	8009d52 <USB_ReadInterrupts>
 8004694:	4603      	mov	r3, r0
 8004696:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800469a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800469e:	d112      	bne.n	80046c6 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80046a8:	b29a      	uxth	r2, r3
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046b2:	b292      	uxth	r2, r2
 80046b4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	f007 f88e 	bl	800b7da <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80046be:	2100      	movs	r1, #0
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	f000 f91e 	bl	8004902 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4618      	mov	r0, r3
 80046cc:	f005 fb41 	bl	8009d52 <USB_ReadInterrupts>
 80046d0:	4603      	mov	r3, r0
 80046d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80046da:	d10b      	bne.n	80046f4 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80046e4:	b29a      	uxth	r2, r3
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80046ee:	b292      	uxth	r2, r2
 80046f0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4618      	mov	r0, r3
 80046fa:	f005 fb2a 	bl	8009d52 <USB_ReadInterrupts>
 80046fe:	4603      	mov	r3, r0
 8004700:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004704:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004708:	d10b      	bne.n	8004722 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004712:	b29a      	uxth	r2, r3
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800471c:	b292      	uxth	r2, r2
 800471e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4618      	mov	r0, r3
 8004728:	f005 fb13 	bl	8009d52 <USB_ReadInterrupts>
 800472c:	4603      	mov	r3, r0
 800472e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004732:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004736:	d133      	bne.n	80047a0 <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004740:	b29a      	uxth	r2, r3
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f022 0204 	bic.w	r2, r2, #4
 800474a:	b292      	uxth	r2, r2
 800474c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004758:	b29a      	uxth	r2, r3
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f022 0208 	bic.w	r2, r2, #8
 8004762:	b292      	uxth	r2, r2
 8004764:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 800476e:	2b01      	cmp	r3, #1
 8004770:	d107      	bne.n	8004782 <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2200      	movs	r2, #0
 8004776:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800477a:	2100      	movs	r1, #0
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f007 fab7 	bl	800bcf0 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f007 f862 	bl	800b84c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004790:	b29a      	uxth	r2, r3
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800479a:	b292      	uxth	r2, r2
 800479c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4618      	mov	r0, r3
 80047a6:	f005 fad4 	bl	8009d52 <USB_ReadInterrupts>
 80047aa:	4603      	mov	r3, r0
 80047ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047b4:	d126      	bne.n	8004804 <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80047be:	b29a      	uxth	r2, r3
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f042 0208 	orr.w	r2, r2, #8
 80047c8:	b292      	uxth	r2, r2
 80047ca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80047d6:	b29a      	uxth	r2, r3
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047e0:	b292      	uxth	r2, r2
 80047e2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80047ee:	b29a      	uxth	r2, r3
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f042 0204 	orr.w	r2, r2, #4
 80047f8:	b292      	uxth	r2, r2
 80047fa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f007 f80a 	bl	800b818 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4618      	mov	r0, r3
 800480a:	f005 faa2 	bl	8009d52 <USB_ReadInterrupts>
 800480e:	4603      	mov	r3, r0
 8004810:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004814:	2b80      	cmp	r3, #128	; 0x80
 8004816:	d13f      	bne.n	8004898 <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004820:	b29a      	uxth	r2, r3
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800482a:	b292      	uxth	r2, r2
 800482c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8004836:	2b00      	cmp	r3, #0
 8004838:	d12b      	bne.n	8004892 <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004842:	b29a      	uxth	r2, r3
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f042 0204 	orr.w	r2, r2, #4
 800484c:	b292      	uxth	r2, r2
 800484e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800485a:	b29a      	uxth	r2, r3
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f042 0208 	orr.w	r2, r2, #8
 8004864:	b292      	uxth	r2, r2
 8004866:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2201      	movs	r2, #1
 800486e:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800487a:	b29b      	uxth	r3, r3
 800487c:	089b      	lsrs	r3, r3, #2
 800487e:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004888:	2101      	movs	r1, #1
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f007 fa30 	bl	800bcf0 <HAL_PCDEx_LPM_Callback>
 8004890:	e002      	b.n	8004898 <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f006 ffc0 	bl	800b818 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4618      	mov	r0, r3
 800489e:	f005 fa58 	bl	8009d52 <USB_ReadInterrupts>
 80048a2:	4603      	mov	r3, r0
 80048a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048ac:	d10e      	bne.n	80048cc <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80048b6:	b29a      	uxth	r2, r3
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80048c0:	b292      	uxth	r2, r2
 80048c2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f006 ff79 	bl	800b7be <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4618      	mov	r0, r3
 80048d2:	f005 fa3e 	bl	8009d52 <USB_ReadInterrupts>
 80048d6:	4603      	mov	r3, r0
 80048d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048e0:	d10b      	bne.n	80048fa <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80048ea:	b29a      	uxth	r2, r3
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80048f4:	b292      	uxth	r2, r2
 80048f6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80048fa:	bf00      	nop
 80048fc:	3708      	adds	r7, #8
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}

08004902 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004902:	b580      	push	{r7, lr}
 8004904:	b082      	sub	sp, #8
 8004906:	af00      	add	r7, sp, #0
 8004908:	6078      	str	r0, [r7, #4]
 800490a:	460b      	mov	r3, r1
 800490c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004914:	2b01      	cmp	r3, #1
 8004916:	d101      	bne.n	800491c <HAL_PCD_SetAddress+0x1a>
 8004918:	2302      	movs	r3, #2
 800491a:	e013      	b.n	8004944 <HAL_PCD_SetAddress+0x42>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2201      	movs	r2, #1
 8004920:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	78fa      	ldrb	r2, [r7, #3]
 8004928:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	78fa      	ldrb	r2, [r7, #3]
 8004932:	4611      	mov	r1, r2
 8004934:	4618      	mov	r0, r3
 8004936:	f005 f9cc 	bl	8009cd2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2200      	movs	r2, #0
 800493e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004942:	2300      	movs	r3, #0
}
 8004944:	4618      	mov	r0, r3
 8004946:	3708      	adds	r7, #8
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}

0800494c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b084      	sub	sp, #16
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	4608      	mov	r0, r1
 8004956:	4611      	mov	r1, r2
 8004958:	461a      	mov	r2, r3
 800495a:	4603      	mov	r3, r0
 800495c:	70fb      	strb	r3, [r7, #3]
 800495e:	460b      	mov	r3, r1
 8004960:	803b      	strh	r3, [r7, #0]
 8004962:	4613      	mov	r3, r2
 8004964:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004966:	2300      	movs	r3, #0
 8004968:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800496a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800496e:	2b00      	cmp	r3, #0
 8004970:	da0e      	bge.n	8004990 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004972:	78fb      	ldrb	r3, [r7, #3]
 8004974:	f003 0307 	and.w	r3, r3, #7
 8004978:	1c5a      	adds	r2, r3, #1
 800497a:	4613      	mov	r3, r2
 800497c:	009b      	lsls	r3, r3, #2
 800497e:	4413      	add	r3, r2
 8004980:	00db      	lsls	r3, r3, #3
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	4413      	add	r3, r2
 8004986:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2201      	movs	r2, #1
 800498c:	705a      	strb	r2, [r3, #1]
 800498e:	e00e      	b.n	80049ae <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004990:	78fb      	ldrb	r3, [r7, #3]
 8004992:	f003 0207 	and.w	r2, r3, #7
 8004996:	4613      	mov	r3, r2
 8004998:	009b      	lsls	r3, r3, #2
 800499a:	4413      	add	r3, r2
 800499c:	00db      	lsls	r3, r3, #3
 800499e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	4413      	add	r3, r2
 80049a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2200      	movs	r2, #0
 80049ac:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80049ae:	78fb      	ldrb	r3, [r7, #3]
 80049b0:	f003 0307 	and.w	r3, r3, #7
 80049b4:	b2da      	uxtb	r2, r3
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80049ba:	883a      	ldrh	r2, [r7, #0]
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	78ba      	ldrb	r2, [r7, #2]
 80049c4:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	785b      	ldrb	r3, [r3, #1]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d004      	beq.n	80049d8 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	781b      	ldrb	r3, [r3, #0]
 80049d2:	b29a      	uxth	r2, r3
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80049d8:	78bb      	ldrb	r3, [r7, #2]
 80049da:	2b02      	cmp	r3, #2
 80049dc:	d102      	bne.n	80049e4 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2200      	movs	r2, #0
 80049e2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80049ea:	2b01      	cmp	r3, #1
 80049ec:	d101      	bne.n	80049f2 <HAL_PCD_EP_Open+0xa6>
 80049ee:	2302      	movs	r3, #2
 80049f0:	e00e      	b.n	8004a10 <HAL_PCD_EP_Open+0xc4>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2201      	movs	r2, #1
 80049f6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	68f9      	ldr	r1, [r7, #12]
 8004a00:	4618      	mov	r0, r3
 8004a02:	f003 f815 	bl	8007a30 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8004a0e:	7afb      	ldrb	r3, [r7, #11]
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3710      	adds	r7, #16
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}

08004a18 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b084      	sub	sp, #16
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	460b      	mov	r3, r1
 8004a22:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004a24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	da0e      	bge.n	8004a4a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a2c:	78fb      	ldrb	r3, [r7, #3]
 8004a2e:	f003 0307 	and.w	r3, r3, #7
 8004a32:	1c5a      	adds	r2, r3, #1
 8004a34:	4613      	mov	r3, r2
 8004a36:	009b      	lsls	r3, r3, #2
 8004a38:	4413      	add	r3, r2
 8004a3a:	00db      	lsls	r3, r3, #3
 8004a3c:	687a      	ldr	r2, [r7, #4]
 8004a3e:	4413      	add	r3, r2
 8004a40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2201      	movs	r2, #1
 8004a46:	705a      	strb	r2, [r3, #1]
 8004a48:	e00e      	b.n	8004a68 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004a4a:	78fb      	ldrb	r3, [r7, #3]
 8004a4c:	f003 0207 	and.w	r2, r3, #7
 8004a50:	4613      	mov	r3, r2
 8004a52:	009b      	lsls	r3, r3, #2
 8004a54:	4413      	add	r3, r2
 8004a56:	00db      	lsls	r3, r3, #3
 8004a58:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004a5c:	687a      	ldr	r2, [r7, #4]
 8004a5e:	4413      	add	r3, r2
 8004a60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2200      	movs	r2, #0
 8004a66:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004a68:	78fb      	ldrb	r3, [r7, #3]
 8004a6a:	f003 0307 	and.w	r3, r3, #7
 8004a6e:	b2da      	uxtb	r2, r3
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d101      	bne.n	8004a82 <HAL_PCD_EP_Close+0x6a>
 8004a7e:	2302      	movs	r3, #2
 8004a80:	e00e      	b.n	8004aa0 <HAL_PCD_EP_Close+0x88>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2201      	movs	r2, #1
 8004a86:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	68f9      	ldr	r1, [r7, #12]
 8004a90:	4618      	mov	r0, r3
 8004a92:	f003 fb3b 	bl	800810c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8004a9e:	2300      	movs	r3, #0
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3710      	adds	r7, #16
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}

08004aa8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b086      	sub	sp, #24
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	60f8      	str	r0, [r7, #12]
 8004ab0:	607a      	str	r2, [r7, #4]
 8004ab2:	603b      	str	r3, [r7, #0]
 8004ab4:	460b      	mov	r3, r1
 8004ab6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004ab8:	7afb      	ldrb	r3, [r7, #11]
 8004aba:	f003 0207 	and.w	r2, r3, #7
 8004abe:	4613      	mov	r3, r2
 8004ac0:	009b      	lsls	r3, r3, #2
 8004ac2:	4413      	add	r3, r2
 8004ac4:	00db      	lsls	r3, r3, #3
 8004ac6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004aca:	68fa      	ldr	r2, [r7, #12]
 8004acc:	4413      	add	r3, r2
 8004ace:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	683a      	ldr	r2, [r7, #0]
 8004ada:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004ae8:	7afb      	ldrb	r3, [r7, #11]
 8004aea:	f003 0307 	and.w	r3, r3, #7
 8004aee:	b2da      	uxtb	r2, r3
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004af4:	7afb      	ldrb	r3, [r7, #11]
 8004af6:	f003 0307 	and.w	r3, r3, #7
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d106      	bne.n	8004b0c <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	6979      	ldr	r1, [r7, #20]
 8004b04:	4618      	mov	r0, r3
 8004b06:	f003 fcee 	bl	80084e6 <USB_EPStartXfer>
 8004b0a:	e005      	b.n	8004b18 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	6979      	ldr	r1, [r7, #20]
 8004b12:	4618      	mov	r0, r3
 8004b14:	f003 fce7 	bl	80084e6 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004b18:	2300      	movs	r3, #0
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3718      	adds	r7, #24
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}

08004b22 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004b22:	b580      	push	{r7, lr}
 8004b24:	b086      	sub	sp, #24
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	60f8      	str	r0, [r7, #12]
 8004b2a:	607a      	str	r2, [r7, #4]
 8004b2c:	603b      	str	r3, [r7, #0]
 8004b2e:	460b      	mov	r3, r1
 8004b30:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b32:	7afb      	ldrb	r3, [r7, #11]
 8004b34:	f003 0307 	and.w	r3, r3, #7
 8004b38:	1c5a      	adds	r2, r3, #1
 8004b3a:	4613      	mov	r3, r2
 8004b3c:	009b      	lsls	r3, r3, #2
 8004b3e:	4413      	add	r3, r2
 8004b40:	00db      	lsls	r3, r3, #3
 8004b42:	68fa      	ldr	r2, [r7, #12]
 8004b44:	4413      	add	r3, r2
 8004b46:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	683a      	ldr	r2, [r7, #0]
 8004b52:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	2201      	movs	r2, #1
 8004b58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	683a      	ldr	r2, [r7, #0]
 8004b60:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	2200      	movs	r2, #0
 8004b66:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004b6e:	7afb      	ldrb	r3, [r7, #11]
 8004b70:	f003 0307 	and.w	r3, r3, #7
 8004b74:	b2da      	uxtb	r2, r3
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004b7a:	7afb      	ldrb	r3, [r7, #11]
 8004b7c:	f003 0307 	and.w	r3, r3, #7
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d106      	bne.n	8004b92 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	6979      	ldr	r1, [r7, #20]
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f003 fcab 	bl	80084e6 <USB_EPStartXfer>
 8004b90:	e005      	b.n	8004b9e <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	6979      	ldr	r1, [r7, #20]
 8004b98:	4618      	mov	r0, r3
 8004b9a:	f003 fca4 	bl	80084e6 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004b9e:	2300      	movs	r3, #0
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3718      	adds	r7, #24
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}

08004ba8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b084      	sub	sp, #16
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
 8004bb0:	460b      	mov	r3, r1
 8004bb2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004bb4:	78fb      	ldrb	r3, [r7, #3]
 8004bb6:	f003 0207 	and.w	r2, r3, #7
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d901      	bls.n	8004bc6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e04c      	b.n	8004c60 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004bc6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	da0e      	bge.n	8004bec <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004bce:	78fb      	ldrb	r3, [r7, #3]
 8004bd0:	f003 0307 	and.w	r3, r3, #7
 8004bd4:	1c5a      	adds	r2, r3, #1
 8004bd6:	4613      	mov	r3, r2
 8004bd8:	009b      	lsls	r3, r3, #2
 8004bda:	4413      	add	r3, r2
 8004bdc:	00db      	lsls	r3, r3, #3
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	4413      	add	r3, r2
 8004be2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2201      	movs	r2, #1
 8004be8:	705a      	strb	r2, [r3, #1]
 8004bea:	e00c      	b.n	8004c06 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004bec:	78fa      	ldrb	r2, [r7, #3]
 8004bee:	4613      	mov	r3, r2
 8004bf0:	009b      	lsls	r3, r3, #2
 8004bf2:	4413      	add	r3, r2
 8004bf4:	00db      	lsls	r3, r3, #3
 8004bf6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004bfa:	687a      	ldr	r2, [r7, #4]
 8004bfc:	4413      	add	r3, r2
 8004bfe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2200      	movs	r2, #0
 8004c04:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2201      	movs	r2, #1
 8004c0a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004c0c:	78fb      	ldrb	r3, [r7, #3]
 8004c0e:	f003 0307 	and.w	r3, r3, #7
 8004c12:	b2da      	uxtb	r2, r3
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d101      	bne.n	8004c26 <HAL_PCD_EP_SetStall+0x7e>
 8004c22:	2302      	movs	r3, #2
 8004c24:	e01c      	b.n	8004c60 <HAL_PCD_EP_SetStall+0xb8>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2201      	movs	r2, #1
 8004c2a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	68f9      	ldr	r1, [r7, #12]
 8004c34:	4618      	mov	r0, r3
 8004c36:	f004 ff4d 	bl	8009ad4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004c3a:	78fb      	ldrb	r3, [r7, #3]
 8004c3c:	f003 0307 	and.w	r3, r3, #7
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d108      	bne.n	8004c56 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8004c4e:	4619      	mov	r1, r3
 8004c50:	4610      	mov	r0, r2
 8004c52:	f005 f88e 	bl	8009d72 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004c5e:	2300      	movs	r3, #0
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	3710      	adds	r7, #16
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}

08004c68 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b084      	sub	sp, #16
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	460b      	mov	r3, r1
 8004c72:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004c74:	78fb      	ldrb	r3, [r7, #3]
 8004c76:	f003 020f 	and.w	r2, r3, #15
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d901      	bls.n	8004c86 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e040      	b.n	8004d08 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004c86:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	da0e      	bge.n	8004cac <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c8e:	78fb      	ldrb	r3, [r7, #3]
 8004c90:	f003 0307 	and.w	r3, r3, #7
 8004c94:	1c5a      	adds	r2, r3, #1
 8004c96:	4613      	mov	r3, r2
 8004c98:	009b      	lsls	r3, r3, #2
 8004c9a:	4413      	add	r3, r2
 8004c9c:	00db      	lsls	r3, r3, #3
 8004c9e:	687a      	ldr	r2, [r7, #4]
 8004ca0:	4413      	add	r3, r2
 8004ca2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	705a      	strb	r2, [r3, #1]
 8004caa:	e00e      	b.n	8004cca <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004cac:	78fb      	ldrb	r3, [r7, #3]
 8004cae:	f003 0207 	and.w	r2, r3, #7
 8004cb2:	4613      	mov	r3, r2
 8004cb4:	009b      	lsls	r3, r3, #2
 8004cb6:	4413      	add	r3, r2
 8004cb8:	00db      	lsls	r3, r3, #3
 8004cba:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004cbe:	687a      	ldr	r2, [r7, #4]
 8004cc0:	4413      	add	r3, r2
 8004cc2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004cd0:	78fb      	ldrb	r3, [r7, #3]
 8004cd2:	f003 0307 	and.w	r3, r3, #7
 8004cd6:	b2da      	uxtb	r2, r3
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004ce2:	2b01      	cmp	r3, #1
 8004ce4:	d101      	bne.n	8004cea <HAL_PCD_EP_ClrStall+0x82>
 8004ce6:	2302      	movs	r3, #2
 8004ce8:	e00e      	b.n	8004d08 <HAL_PCD_EP_ClrStall+0xa0>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2201      	movs	r2, #1
 8004cee:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	68f9      	ldr	r1, [r7, #12]
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f004 ff3c 	bl	8009b76 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2200      	movs	r2, #0
 8004d02:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004d06:	2300      	movs	r3, #0
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	3710      	adds	r7, #16
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}

08004d10 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b08e      	sub	sp, #56	; 0x38
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004d18:	e2d6      	b.n	80052c8 <PCD_EP_ISR_Handler+0x5b8>
  {
    wIstr = hpcd->Instance->ISTR;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004d22:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004d24:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004d26:	b2db      	uxtb	r3, r3
 8004d28:	f003 030f 	and.w	r3, r3, #15
 8004d2c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8004d30:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	f040 815b 	bne.w	8004ff0 <PCD_EP_ISR_Handler+0x2e0>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004d3a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004d3c:	f003 0310 	and.w	r3, r3, #16
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d150      	bne.n	8004de6 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	881b      	ldrh	r3, [r3, #0]
 8004d4a:	b29b      	uxth	r3, r3
 8004d4c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004d50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d54:	81fb      	strh	r3, [r7, #14]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	89fb      	ldrh	r3, [r7, #14]
 8004d5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d64:	b29b      	uxth	r3, r3
 8004d66:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	3328      	adds	r3, #40	; 0x28
 8004d6c:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d76:	b29b      	uxth	r3, r3
 8004d78:	461a      	mov	r2, r3
 8004d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d7c:	781b      	ldrb	r3, [r3, #0]
 8004d7e:	00db      	lsls	r3, r3, #3
 8004d80:	4413      	add	r3, r2
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	6812      	ldr	r2, [r2, #0]
 8004d86:	4413      	add	r3, r2
 8004d88:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004d8c:	881b      	ldrh	r3, [r3, #0]
 8004d8e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d94:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d98:	695a      	ldr	r2, [r3, #20]
 8004d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d9c:	69db      	ldr	r3, [r3, #28]
 8004d9e:	441a      	add	r2, r3
 8004da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da2:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004da4:	2100      	movs	r1, #0
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f006 fcef 	bl	800b78a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004db2:	b2db      	uxtb	r3, r3
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	f000 8287 	beq.w	80052c8 <PCD_EP_ISR_Handler+0x5b8>
 8004dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dbc:	699b      	ldr	r3, [r3, #24]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	f040 8282 	bne.w	80052c8 <PCD_EP_ISR_Handler+0x5b8>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004dca:	b2db      	uxtb	r3, r3
 8004dcc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004dd0:	b2da      	uxtb	r2, r3
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	b292      	uxth	r2, r2
 8004dd8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2200      	movs	r2, #0
 8004de0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004de4:	e270      	b.n	80052c8 <PCD_EP_ISR_Handler+0x5b8>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004dec:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	881b      	ldrh	r3, [r3, #0]
 8004df4:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004df6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004df8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d032      	beq.n	8004e66 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	461a      	mov	r2, r3
 8004e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0e:	781b      	ldrb	r3, [r3, #0]
 8004e10:	00db      	lsls	r3, r3, #3
 8004e12:	4413      	add	r3, r2
 8004e14:	687a      	ldr	r2, [r7, #4]
 8004e16:	6812      	ldr	r2, [r2, #0]
 8004e18:	4413      	add	r3, r2
 8004e1a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004e1e:	881b      	ldrh	r3, [r3, #0]
 8004e20:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e26:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6818      	ldr	r0, [r3, #0]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8004e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e34:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e38:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004e3a:	b29b      	uxth	r3, r3
 8004e3c:	f004 ffe7 	bl	8009e0e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	881b      	ldrh	r3, [r3, #0]
 8004e46:	b29a      	uxth	r2, r3
 8004e48:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004e4c:	4013      	ands	r3, r2
 8004e4e:	823b      	strh	r3, [r7, #16]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	8a3a      	ldrh	r2, [r7, #16]
 8004e56:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004e5a:	b292      	uxth	r2, r2
 8004e5c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f006 fc66 	bl	800b730 <HAL_PCD_SetupStageCallback>
 8004e64:	e230      	b.n	80052c8 <PCD_EP_ISR_Handler+0x5b8>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004e66:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	f280 822c 	bge.w	80052c8 <PCD_EP_ISR_Handler+0x5b8>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	881b      	ldrh	r3, [r3, #0]
 8004e76:	b29a      	uxth	r2, r3
 8004e78:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004e7c:	4013      	ands	r3, r2
 8004e7e:	83bb      	strh	r3, [r7, #28]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	8bba      	ldrh	r2, [r7, #28]
 8004e86:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004e8a:	b292      	uxth	r2, r2
 8004e8c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e96:	b29b      	uxth	r3, r3
 8004e98:	461a      	mov	r2, r3
 8004e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9c:	781b      	ldrb	r3, [r3, #0]
 8004e9e:	00db      	lsls	r3, r3, #3
 8004ea0:	4413      	add	r3, r2
 8004ea2:	687a      	ldr	r2, [r7, #4]
 8004ea4:	6812      	ldr	r2, [r2, #0]
 8004ea6:	4413      	add	r3, r2
 8004ea8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004eac:	881b      	ldrh	r3, [r3, #0]
 8004eae:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb4:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb8:	69db      	ldr	r3, [r3, #28]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d019      	beq.n	8004ef2 <PCD_EP_ISR_Handler+0x1e2>
 8004ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec0:	695b      	ldr	r3, [r3, #20]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d015      	beq.n	8004ef2 <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6818      	ldr	r0, [r3, #0]
 8004eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ecc:	6959      	ldr	r1, [r3, #20]
 8004ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed0:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed4:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004ed6:	b29b      	uxth	r3, r3
 8004ed8:	f004 ff99 	bl	8009e0e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ede:	695a      	ldr	r2, [r3, #20]
 8004ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee2:	69db      	ldr	r3, [r3, #28]
 8004ee4:	441a      	add	r2, r3
 8004ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee8:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004eea:	2100      	movs	r1, #0
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	f006 fc31 	bl	800b754 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	881b      	ldrh	r3, [r3, #0]
 8004ef8:	b29b      	uxth	r3, r3
 8004efa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	f040 81e2 	bne.w	80052c8 <PCD_EP_ISR_Handler+0x5b8>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	61bb      	str	r3, [r7, #24]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f12:	b29b      	uxth	r3, r3
 8004f14:	461a      	mov	r2, r3
 8004f16:	69bb      	ldr	r3, [r7, #24]
 8004f18:	4413      	add	r3, r2
 8004f1a:	61bb      	str	r3, [r7, #24]
 8004f1c:	69bb      	ldr	r3, [r7, #24]
 8004f1e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004f22:	617b      	str	r3, [r7, #20]
 8004f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f26:	691b      	ldr	r3, [r3, #16]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d112      	bne.n	8004f52 <PCD_EP_ISR_Handler+0x242>
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	881b      	ldrh	r3, [r3, #0]
 8004f30:	b29b      	uxth	r3, r3
 8004f32:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004f36:	b29a      	uxth	r2, r3
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	801a      	strh	r2, [r3, #0]
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	881b      	ldrh	r3, [r3, #0]
 8004f40:	b29b      	uxth	r3, r3
 8004f42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f4a:	b29a      	uxth	r2, r3
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	801a      	strh	r2, [r3, #0]
 8004f50:	e02f      	b.n	8004fb2 <PCD_EP_ISR_Handler+0x2a2>
 8004f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f54:	691b      	ldr	r3, [r3, #16]
 8004f56:	2b3e      	cmp	r3, #62	; 0x3e
 8004f58:	d813      	bhi.n	8004f82 <PCD_EP_ISR_Handler+0x272>
 8004f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5c:	691b      	ldr	r3, [r3, #16]
 8004f5e:	085b      	lsrs	r3, r3, #1
 8004f60:	633b      	str	r3, [r7, #48]	; 0x30
 8004f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f64:	691b      	ldr	r3, [r3, #16]
 8004f66:	f003 0301 	and.w	r3, r3, #1
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d002      	beq.n	8004f74 <PCD_EP_ISR_Handler+0x264>
 8004f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f70:	3301      	adds	r3, #1
 8004f72:	633b      	str	r3, [r7, #48]	; 0x30
 8004f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	029b      	lsls	r3, r3, #10
 8004f7a:	b29a      	uxth	r2, r3
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	801a      	strh	r2, [r3, #0]
 8004f80:	e017      	b.n	8004fb2 <PCD_EP_ISR_Handler+0x2a2>
 8004f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f84:	691b      	ldr	r3, [r3, #16]
 8004f86:	095b      	lsrs	r3, r3, #5
 8004f88:	633b      	str	r3, [r7, #48]	; 0x30
 8004f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f8c:	691b      	ldr	r3, [r3, #16]
 8004f8e:	f003 031f 	and.w	r3, r3, #31
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d102      	bne.n	8004f9c <PCD_EP_ISR_Handler+0x28c>
 8004f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f98:	3b01      	subs	r3, #1
 8004f9a:	633b      	str	r3, [r7, #48]	; 0x30
 8004f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f9e:	b29b      	uxth	r3, r3
 8004fa0:	029b      	lsls	r3, r3, #10
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fa8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fac:	b29a      	uxth	r2, r3
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	881b      	ldrh	r3, [r3, #0]
 8004fb8:	b29b      	uxth	r3, r3
 8004fba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004fbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fc2:	827b      	strh	r3, [r7, #18]
 8004fc4:	8a7b      	ldrh	r3, [r7, #18]
 8004fc6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004fca:	827b      	strh	r3, [r7, #18]
 8004fcc:	8a7b      	ldrh	r3, [r7, #18]
 8004fce:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004fd2:	827b      	strh	r3, [r7, #18]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	8a7b      	ldrh	r3, [r7, #18]
 8004fda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fe2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fe6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fea:	b29b      	uxth	r3, r3
 8004fec:	8013      	strh	r3, [r2, #0]
 8004fee:	e16b      	b.n	80052c8 <PCD_EP_ISR_Handler+0x5b8>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	461a      	mov	r2, r3
 8004ff6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004ffa:	009b      	lsls	r3, r3, #2
 8004ffc:	4413      	add	r3, r2
 8004ffe:	881b      	ldrh	r3, [r3, #0]
 8005000:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005002:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8005006:	2b00      	cmp	r3, #0
 8005008:	f280 80e4 	bge.w	80051d4 <PCD_EP_ISR_Handler+0x4c4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	461a      	mov	r2, r3
 8005012:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005016:	009b      	lsls	r3, r3, #2
 8005018:	4413      	add	r3, r2
 800501a:	881b      	ldrh	r3, [r3, #0]
 800501c:	b29a      	uxth	r2, r3
 800501e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005022:	4013      	ands	r3, r2
 8005024:	853b      	strh	r3, [r7, #40]	; 0x28
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	461a      	mov	r2, r3
 800502c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005030:	009b      	lsls	r3, r3, #2
 8005032:	4413      	add	r3, r2
 8005034:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005036:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800503a:	b292      	uxth	r2, r2
 800503c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800503e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8005042:	4613      	mov	r3, r2
 8005044:	009b      	lsls	r3, r3, #2
 8005046:	4413      	add	r3, r2
 8005048:	00db      	lsls	r3, r3, #3
 800504a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800504e:	687a      	ldr	r2, [r7, #4]
 8005050:	4413      	add	r3, r2
 8005052:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8005054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005056:	7b1b      	ldrb	r3, [r3, #12]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d120      	bne.n	800509e <PCD_EP_ISR_Handler+0x38e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005064:	b29b      	uxth	r3, r3
 8005066:	461a      	mov	r2, r3
 8005068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800506a:	781b      	ldrb	r3, [r3, #0]
 800506c:	00db      	lsls	r3, r3, #3
 800506e:	4413      	add	r3, r2
 8005070:	687a      	ldr	r2, [r7, #4]
 8005072:	6812      	ldr	r2, [r2, #0]
 8005074:	4413      	add	r3, r2
 8005076:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800507a:	881b      	ldrh	r3, [r3, #0]
 800507c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005080:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8005082:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005084:	2b00      	cmp	r3, #0
 8005086:	f000 8083 	beq.w	8005190 <PCD_EP_ISR_Handler+0x480>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6818      	ldr	r0, [r3, #0]
 800508e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005090:	6959      	ldr	r1, [r3, #20]
 8005092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005094:	88da      	ldrh	r2, [r3, #6]
 8005096:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005098:	f004 feb9 	bl	8009e0e <USB_ReadPMA>
 800509c:	e078      	b.n	8005190 <PCD_EP_ISR_Handler+0x480>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800509e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a0:	78db      	ldrb	r3, [r3, #3]
 80050a2:	2b02      	cmp	r3, #2
 80050a4:	d108      	bne.n	80050b8 <PCD_EP_ISR_Handler+0x3a8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80050a6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80050a8:	461a      	mov	r2, r3
 80050aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f000 f919 	bl	80052e4 <HAL_PCD_EP_DB_Receive>
 80050b2:	4603      	mov	r3, r0
 80050b4:	86fb      	strh	r3, [r7, #54]	; 0x36
 80050b6:	e06b      	b.n	8005190 <PCD_EP_ISR_Handler+0x480>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	461a      	mov	r2, r3
 80050be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c0:	781b      	ldrb	r3, [r3, #0]
 80050c2:	009b      	lsls	r3, r3, #2
 80050c4:	4413      	add	r3, r2
 80050c6:	881b      	ldrh	r3, [r3, #0]
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050d2:	847b      	strh	r3, [r7, #34]	; 0x22
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	461a      	mov	r2, r3
 80050da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050dc:	781b      	ldrb	r3, [r3, #0]
 80050de:	009b      	lsls	r3, r3, #2
 80050e0:	441a      	add	r2, r3
 80050e2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80050e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050f0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80050f4:	b29b      	uxth	r3, r3
 80050f6:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	461a      	mov	r2, r3
 80050fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005100:	781b      	ldrb	r3, [r3, #0]
 8005102:	009b      	lsls	r3, r3, #2
 8005104:	4413      	add	r3, r2
 8005106:	881b      	ldrh	r3, [r3, #0]
 8005108:	b29b      	uxth	r3, r3
 800510a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800510e:	2b00      	cmp	r3, #0
 8005110:	d01f      	beq.n	8005152 <PCD_EP_ISR_Handler+0x442>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800511a:	b29b      	uxth	r3, r3
 800511c:	461a      	mov	r2, r3
 800511e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005120:	781b      	ldrb	r3, [r3, #0]
 8005122:	00db      	lsls	r3, r3, #3
 8005124:	4413      	add	r3, r2
 8005126:	687a      	ldr	r2, [r7, #4]
 8005128:	6812      	ldr	r2, [r2, #0]
 800512a:	4413      	add	r3, r2
 800512c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005130:	881b      	ldrh	r3, [r3, #0]
 8005132:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005136:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8005138:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800513a:	2b00      	cmp	r3, #0
 800513c:	d028      	beq.n	8005190 <PCD_EP_ISR_Handler+0x480>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6818      	ldr	r0, [r3, #0]
 8005142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005144:	6959      	ldr	r1, [r3, #20]
 8005146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005148:	891a      	ldrh	r2, [r3, #8]
 800514a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800514c:	f004 fe5f 	bl	8009e0e <USB_ReadPMA>
 8005150:	e01e      	b.n	8005190 <PCD_EP_ISR_Handler+0x480>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800515a:	b29b      	uxth	r3, r3
 800515c:	461a      	mov	r2, r3
 800515e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005160:	781b      	ldrb	r3, [r3, #0]
 8005162:	00db      	lsls	r3, r3, #3
 8005164:	4413      	add	r3, r2
 8005166:	687a      	ldr	r2, [r7, #4]
 8005168:	6812      	ldr	r2, [r2, #0]
 800516a:	4413      	add	r3, r2
 800516c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005170:	881b      	ldrh	r3, [r3, #0]
 8005172:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005176:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8005178:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800517a:	2b00      	cmp	r3, #0
 800517c:	d008      	beq.n	8005190 <PCD_EP_ISR_Handler+0x480>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6818      	ldr	r0, [r3, #0]
 8005182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005184:	6959      	ldr	r1, [r3, #20]
 8005186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005188:	895a      	ldrh	r2, [r3, #10]
 800518a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800518c:	f004 fe3f 	bl	8009e0e <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8005190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005192:	69da      	ldr	r2, [r3, #28]
 8005194:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005196:	441a      	add	r2, r3
 8005198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800519a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800519c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800519e:	695a      	ldr	r2, [r3, #20]
 80051a0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80051a2:	441a      	add	r2, r3
 80051a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a6:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80051a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051aa:	699b      	ldr	r3, [r3, #24]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d004      	beq.n	80051ba <PCD_EP_ISR_Handler+0x4aa>
 80051b0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80051b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b4:	691b      	ldr	r3, [r3, #16]
 80051b6:	429a      	cmp	r2, r3
 80051b8:	d206      	bcs.n	80051c8 <PCD_EP_ISR_Handler+0x4b8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80051ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051bc:	781b      	ldrb	r3, [r3, #0]
 80051be:	4619      	mov	r1, r3
 80051c0:	6878      	ldr	r0, [r7, #4]
 80051c2:	f006 fac7 	bl	800b754 <HAL_PCD_DataOutStageCallback>
 80051c6:	e005      	b.n	80051d4 <PCD_EP_ISR_Handler+0x4c4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80051ce:	4618      	mov	r0, r3
 80051d0:	f003 f989 	bl	80084e6 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80051d4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80051d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d074      	beq.n	80052c8 <PCD_EP_ISR_Handler+0x5b8>
      {
        ep = &hpcd->IN_ep[epindex];
 80051de:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80051e2:	1c5a      	adds	r2, r3, #1
 80051e4:	4613      	mov	r3, r2
 80051e6:	009b      	lsls	r3, r3, #2
 80051e8:	4413      	add	r3, r2
 80051ea:	00db      	lsls	r3, r3, #3
 80051ec:	687a      	ldr	r2, [r7, #4]
 80051ee:	4413      	add	r3, r2
 80051f0:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	461a      	mov	r2, r3
 80051f8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80051fc:	009b      	lsls	r3, r3, #2
 80051fe:	4413      	add	r3, r2
 8005200:	881b      	ldrh	r3, [r3, #0]
 8005202:	b29b      	uxth	r3, r3
 8005204:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005208:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800520c:	843b      	strh	r3, [r7, #32]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	461a      	mov	r2, r3
 8005214:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005218:	009b      	lsls	r3, r3, #2
 800521a:	441a      	add	r2, r3
 800521c:	8c3b      	ldrh	r3, [r7, #32]
 800521e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005222:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005226:	b29b      	uxth	r3, r3
 8005228:	8013      	strh	r3, [r2, #0]

        /* Manage Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U))
 800522a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522c:	78db      	ldrb	r3, [r3, #3]
 800522e:	2b02      	cmp	r3, #2
 8005230:	d144      	bne.n	80052bc <PCD_EP_ISR_Handler+0x5ac>
 8005232:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005234:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005238:	2b00      	cmp	r3, #0
 800523a:	d13f      	bne.n	80052bc <PCD_EP_ISR_Handler+0x5ac>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005244:	b29b      	uxth	r3, r3
 8005246:	461a      	mov	r2, r3
 8005248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524a:	781b      	ldrb	r3, [r3, #0]
 800524c:	00db      	lsls	r3, r3, #3
 800524e:	4413      	add	r3, r2
 8005250:	687a      	ldr	r2, [r7, #4]
 8005252:	6812      	ldr	r2, [r2, #0]
 8005254:	4413      	add	r3, r2
 8005256:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800525a:	881b      	ldrh	r3, [r3, #0]
 800525c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005260:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8005262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005264:	699a      	ldr	r2, [r3, #24]
 8005266:	8bfb      	ldrh	r3, [r7, #30]
 8005268:	429a      	cmp	r2, r3
 800526a:	d906      	bls.n	800527a <PCD_EP_ISR_Handler+0x56a>
          {
            ep->xfer_len -= TxByteNbre;
 800526c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800526e:	699a      	ldr	r2, [r3, #24]
 8005270:	8bfb      	ldrh	r3, [r7, #30]
 8005272:	1ad2      	subs	r2, r2, r3
 8005274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005276:	619a      	str	r2, [r3, #24]
 8005278:	e002      	b.n	8005280 <PCD_EP_ISR_Handler+0x570>
          }
          else
          {
            ep->xfer_len = 0U;
 800527a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527c:	2200      	movs	r2, #0
 800527e:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8005280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005282:	699b      	ldr	r3, [r3, #24]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d106      	bne.n	8005296 <PCD_EP_ISR_Handler+0x586>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528a:	781b      	ldrb	r3, [r3, #0]
 800528c:	4619      	mov	r1, r3
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f006 fa7b 	bl	800b78a <HAL_PCD_DataInStageCallback>
 8005294:	e018      	b.n	80052c8 <PCD_EP_ISR_Handler+0x5b8>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8005296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005298:	695a      	ldr	r2, [r3, #20]
 800529a:	8bfb      	ldrh	r3, [r7, #30]
 800529c:	441a      	add	r2, r3
 800529e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a0:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80052a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a4:	69da      	ldr	r2, [r3, #28]
 80052a6:	8bfb      	ldrh	r3, [r7, #30]
 80052a8:	441a      	add	r2, r3
 80052aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ac:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80052b4:	4618      	mov	r0, r3
 80052b6:	f003 f916 	bl	80084e6 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80052ba:	e005      	b.n	80052c8 <PCD_EP_ISR_Handler+0x5b8>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80052bc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80052be:	461a      	mov	r2, r3
 80052c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f000 f917 	bl	80054f6 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80052d0:	b29b      	uxth	r3, r3
 80052d2:	b21b      	sxth	r3, r3
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	f6ff ad20 	blt.w	8004d1a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80052da:	2300      	movs	r3, #0
}
 80052dc:	4618      	mov	r0, r3
 80052de:	3738      	adds	r7, #56	; 0x38
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}

080052e4 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b088      	sub	sp, #32
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	60f8      	str	r0, [r7, #12]
 80052ec:	60b9      	str	r1, [r7, #8]
 80052ee:	4613      	mov	r3, r2
 80052f0:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80052f2:	88fb      	ldrh	r3, [r7, #6]
 80052f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d07c      	beq.n	80053f6 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005304:	b29b      	uxth	r3, r3
 8005306:	461a      	mov	r2, r3
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	781b      	ldrb	r3, [r3, #0]
 800530c:	00db      	lsls	r3, r3, #3
 800530e:	4413      	add	r3, r2
 8005310:	68fa      	ldr	r2, [r7, #12]
 8005312:	6812      	ldr	r2, [r2, #0]
 8005314:	4413      	add	r3, r2
 8005316:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800531a:	881b      	ldrh	r3, [r3, #0]
 800531c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005320:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	699a      	ldr	r2, [r3, #24]
 8005326:	8b7b      	ldrh	r3, [r7, #26]
 8005328:	429a      	cmp	r2, r3
 800532a:	d306      	bcc.n	800533a <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	699a      	ldr	r2, [r3, #24]
 8005330:	8b7b      	ldrh	r3, [r7, #26]
 8005332:	1ad2      	subs	r2, r2, r3
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	619a      	str	r2, [r3, #24]
 8005338:	e002      	b.n	8005340 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	2200      	movs	r2, #0
 800533e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	699b      	ldr	r3, [r3, #24]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d123      	bne.n	8005390 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	461a      	mov	r2, r3
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	781b      	ldrb	r3, [r3, #0]
 8005352:	009b      	lsls	r3, r3, #2
 8005354:	4413      	add	r3, r2
 8005356:	881b      	ldrh	r3, [r3, #0]
 8005358:	b29b      	uxth	r3, r3
 800535a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800535e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005362:	833b      	strh	r3, [r7, #24]
 8005364:	8b3b      	ldrh	r3, [r7, #24]
 8005366:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800536a:	833b      	strh	r3, [r7, #24]
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	461a      	mov	r2, r3
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	781b      	ldrb	r3, [r3, #0]
 8005376:	009b      	lsls	r3, r3, #2
 8005378:	441a      	add	r2, r3
 800537a:	8b3b      	ldrh	r3, [r7, #24]
 800537c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005380:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005384:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005388:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800538c:	b29b      	uxth	r3, r3
 800538e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005390:	88fb      	ldrh	r3, [r7, #6]
 8005392:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005396:	2b00      	cmp	r3, #0
 8005398:	d01f      	beq.n	80053da <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	461a      	mov	r2, r3
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	781b      	ldrb	r3, [r3, #0]
 80053a4:	009b      	lsls	r3, r3, #2
 80053a6:	4413      	add	r3, r2
 80053a8:	881b      	ldrh	r3, [r3, #0]
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053b4:	82fb      	strh	r3, [r7, #22]
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	461a      	mov	r2, r3
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	781b      	ldrb	r3, [r3, #0]
 80053c0:	009b      	lsls	r3, r3, #2
 80053c2:	441a      	add	r2, r3
 80053c4:	8afb      	ldrh	r3, [r7, #22]
 80053c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053d2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80053d6:	b29b      	uxth	r3, r3
 80053d8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80053da:	8b7b      	ldrh	r3, [r7, #26]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	f000 8085 	beq.w	80054ec <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	6818      	ldr	r0, [r3, #0]
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	6959      	ldr	r1, [r3, #20]
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	891a      	ldrh	r2, [r3, #8]
 80053ee:	8b7b      	ldrh	r3, [r7, #26]
 80053f0:	f004 fd0d 	bl	8009e0e <USB_ReadPMA>
 80053f4:	e07a      	b.n	80054ec <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053fe:	b29b      	uxth	r3, r3
 8005400:	461a      	mov	r2, r3
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	781b      	ldrb	r3, [r3, #0]
 8005406:	00db      	lsls	r3, r3, #3
 8005408:	4413      	add	r3, r2
 800540a:	68fa      	ldr	r2, [r7, #12]
 800540c:	6812      	ldr	r2, [r2, #0]
 800540e:	4413      	add	r3, r2
 8005410:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005414:	881b      	ldrh	r3, [r3, #0]
 8005416:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800541a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	699a      	ldr	r2, [r3, #24]
 8005420:	8b7b      	ldrh	r3, [r7, #26]
 8005422:	429a      	cmp	r2, r3
 8005424:	d306      	bcc.n	8005434 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	699a      	ldr	r2, [r3, #24]
 800542a:	8b7b      	ldrh	r3, [r7, #26]
 800542c:	1ad2      	subs	r2, r2, r3
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	619a      	str	r2, [r3, #24]
 8005432:	e002      	b.n	800543a <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	2200      	movs	r2, #0
 8005438:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	699b      	ldr	r3, [r3, #24]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d123      	bne.n	800548a <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	461a      	mov	r2, r3
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	781b      	ldrb	r3, [r3, #0]
 800544c:	009b      	lsls	r3, r3, #2
 800544e:	4413      	add	r3, r2
 8005450:	881b      	ldrh	r3, [r3, #0]
 8005452:	b29b      	uxth	r3, r3
 8005454:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005458:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800545c:	83fb      	strh	r3, [r7, #30]
 800545e:	8bfb      	ldrh	r3, [r7, #30]
 8005460:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005464:	83fb      	strh	r3, [r7, #30]
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	461a      	mov	r2, r3
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	781b      	ldrb	r3, [r3, #0]
 8005470:	009b      	lsls	r3, r3, #2
 8005472:	441a      	add	r2, r3
 8005474:	8bfb      	ldrh	r3, [r7, #30]
 8005476:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800547a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800547e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005482:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005486:	b29b      	uxth	r3, r3
 8005488:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800548a:	88fb      	ldrh	r3, [r7, #6]
 800548c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005490:	2b00      	cmp	r3, #0
 8005492:	d11f      	bne.n	80054d4 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	461a      	mov	r2, r3
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	781b      	ldrb	r3, [r3, #0]
 800549e:	009b      	lsls	r3, r3, #2
 80054a0:	4413      	add	r3, r2
 80054a2:	881b      	ldrh	r3, [r3, #0]
 80054a4:	b29b      	uxth	r3, r3
 80054a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054ae:	83bb      	strh	r3, [r7, #28]
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	461a      	mov	r2, r3
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	781b      	ldrb	r3, [r3, #0]
 80054ba:	009b      	lsls	r3, r3, #2
 80054bc:	441a      	add	r2, r3
 80054be:	8bbb      	ldrh	r3, [r7, #28]
 80054c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054cc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80054d0:	b29b      	uxth	r3, r3
 80054d2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80054d4:	8b7b      	ldrh	r3, [r7, #26]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d008      	beq.n	80054ec <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	6818      	ldr	r0, [r3, #0]
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	6959      	ldr	r1, [r3, #20]
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	895a      	ldrh	r2, [r3, #10]
 80054e6:	8b7b      	ldrh	r3, [r7, #26]
 80054e8:	f004 fc91 	bl	8009e0e <USB_ReadPMA>
    }
  }

  return count;
 80054ec:	8b7b      	ldrh	r3, [r7, #26]
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3720      	adds	r7, #32
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}

080054f6 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80054f6:	b580      	push	{r7, lr}
 80054f8:	b0a2      	sub	sp, #136	; 0x88
 80054fa:	af00      	add	r7, sp, #0
 80054fc:	60f8      	str	r0, [r7, #12]
 80054fe:	60b9      	str	r1, [r7, #8]
 8005500:	4613      	mov	r3, r2
 8005502:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005504:	88fb      	ldrh	r3, [r7, #6]
 8005506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800550a:	2b00      	cmp	r3, #0
 800550c:	f000 81c5 	beq.w	800589a <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005518:	b29b      	uxth	r3, r3
 800551a:	461a      	mov	r2, r3
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	781b      	ldrb	r3, [r3, #0]
 8005520:	00db      	lsls	r3, r3, #3
 8005522:	4413      	add	r3, r2
 8005524:	68fa      	ldr	r2, [r7, #12]
 8005526:	6812      	ldr	r2, [r2, #0]
 8005528:	4413      	add	r3, r2
 800552a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800552e:	881b      	ldrh	r3, [r3, #0]
 8005530:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005534:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	699a      	ldr	r2, [r3, #24]
 800553c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005540:	429a      	cmp	r2, r3
 8005542:	d907      	bls.n	8005554 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxByteNbre;
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	699a      	ldr	r2, [r3, #24]
 8005548:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800554c:	1ad2      	subs	r2, r2, r3
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	619a      	str	r2, [r3, #24]
 8005552:	e002      	b.n	800555a <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	2200      	movs	r2, #0
 8005558:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	699b      	ldr	r3, [r3, #24]
 800555e:	2b00      	cmp	r3, #0
 8005560:	f040 80b9 	bne.w	80056d6 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	785b      	ldrb	r3, [r3, #1]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d126      	bne.n	80055ba <HAL_PCD_EP_DB_Transmit+0xc4>
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	62bb      	str	r3, [r7, #40]	; 0x28
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800557a:	b29b      	uxth	r3, r3
 800557c:	461a      	mov	r2, r3
 800557e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005580:	4413      	add	r3, r2
 8005582:	62bb      	str	r3, [r7, #40]	; 0x28
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	781b      	ldrb	r3, [r3, #0]
 8005588:	00da      	lsls	r2, r3, #3
 800558a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800558c:	4413      	add	r3, r2
 800558e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005592:	627b      	str	r3, [r7, #36]	; 0x24
 8005594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005596:	881b      	ldrh	r3, [r3, #0]
 8005598:	b29b      	uxth	r3, r3
 800559a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800559e:	b29a      	uxth	r2, r3
 80055a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a2:	801a      	strh	r2, [r3, #0]
 80055a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a6:	881b      	ldrh	r3, [r3, #0]
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055b2:	b29a      	uxth	r2, r3
 80055b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b6:	801a      	strh	r2, [r3, #0]
 80055b8:	e01a      	b.n	80055f0 <HAL_PCD_EP_DB_Transmit+0xfa>
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	785b      	ldrb	r3, [r3, #1]
 80055be:	2b01      	cmp	r3, #1
 80055c0:	d116      	bne.n	80055f0 <HAL_PCD_EP_DB_Transmit+0xfa>
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	633b      	str	r3, [r7, #48]	; 0x30
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055d0:	b29b      	uxth	r3, r3
 80055d2:	461a      	mov	r2, r3
 80055d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055d6:	4413      	add	r3, r2
 80055d8:	633b      	str	r3, [r7, #48]	; 0x30
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	781b      	ldrb	r3, [r3, #0]
 80055de:	00da      	lsls	r2, r3, #3
 80055e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e2:	4413      	add	r3, r2
 80055e4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80055e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055ec:	2200      	movs	r2, #0
 80055ee:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	623b      	str	r3, [r7, #32]
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	785b      	ldrb	r3, [r3, #1]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d126      	bne.n	800564c <HAL_PCD_EP_DB_Transmit+0x156>
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	61bb      	str	r3, [r7, #24]
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800560c:	b29b      	uxth	r3, r3
 800560e:	461a      	mov	r2, r3
 8005610:	69bb      	ldr	r3, [r7, #24]
 8005612:	4413      	add	r3, r2
 8005614:	61bb      	str	r3, [r7, #24]
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	781b      	ldrb	r3, [r3, #0]
 800561a:	00da      	lsls	r2, r3, #3
 800561c:	69bb      	ldr	r3, [r7, #24]
 800561e:	4413      	add	r3, r2
 8005620:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005624:	617b      	str	r3, [r7, #20]
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	881b      	ldrh	r3, [r3, #0]
 800562a:	b29b      	uxth	r3, r3
 800562c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005630:	b29a      	uxth	r2, r3
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	801a      	strh	r2, [r3, #0]
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	881b      	ldrh	r3, [r3, #0]
 800563a:	b29b      	uxth	r3, r3
 800563c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005640:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005644:	b29a      	uxth	r2, r3
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	801a      	strh	r2, [r3, #0]
 800564a:	e017      	b.n	800567c <HAL_PCD_EP_DB_Transmit+0x186>
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	785b      	ldrb	r3, [r3, #1]
 8005650:	2b01      	cmp	r3, #1
 8005652:	d113      	bne.n	800567c <HAL_PCD_EP_DB_Transmit+0x186>
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800565c:	b29b      	uxth	r3, r3
 800565e:	461a      	mov	r2, r3
 8005660:	6a3b      	ldr	r3, [r7, #32]
 8005662:	4413      	add	r3, r2
 8005664:	623b      	str	r3, [r7, #32]
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	781b      	ldrb	r3, [r3, #0]
 800566a:	00da      	lsls	r2, r3, #3
 800566c:	6a3b      	ldr	r3, [r7, #32]
 800566e:	4413      	add	r3, r2
 8005670:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005674:	61fb      	str	r3, [r7, #28]
 8005676:	69fb      	ldr	r3, [r7, #28]
 8005678:	2200      	movs	r2, #0
 800567a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	781b      	ldrb	r3, [r3, #0]
 8005680:	4619      	mov	r1, r3
 8005682:	68f8      	ldr	r0, [r7, #12]
 8005684:	f006 f881 	bl	800b78a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005688:	88fb      	ldrh	r3, [r7, #6]
 800568a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800568e:	2b00      	cmp	r3, #0
 8005690:	f000 82d2 	beq.w	8005c38 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	461a      	mov	r2, r3
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	781b      	ldrb	r3, [r3, #0]
 800569e:	009b      	lsls	r3, r3, #2
 80056a0:	4413      	add	r3, r2
 80056a2:	881b      	ldrh	r3, [r3, #0]
 80056a4:	b29b      	uxth	r3, r3
 80056a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056ae:	827b      	strh	r3, [r7, #18]
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	461a      	mov	r2, r3
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	781b      	ldrb	r3, [r3, #0]
 80056ba:	009b      	lsls	r3, r3, #2
 80056bc:	441a      	add	r2, r3
 80056be:	8a7b      	ldrh	r3, [r7, #18]
 80056c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80056cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056d0:	b29b      	uxth	r3, r3
 80056d2:	8013      	strh	r3, [r2, #0]
 80056d4:	e2b0      	b.n	8005c38 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80056d6:	88fb      	ldrh	r3, [r7, #6]
 80056d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d021      	beq.n	8005724 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	461a      	mov	r2, r3
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	781b      	ldrb	r3, [r3, #0]
 80056ea:	009b      	lsls	r3, r3, #2
 80056ec:	4413      	add	r3, r2
 80056ee:	881b      	ldrh	r3, [r3, #0]
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056fa:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	461a      	mov	r2, r3
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	781b      	ldrb	r3, [r3, #0]
 8005708:	009b      	lsls	r3, r3, #2
 800570a:	441a      	add	r2, r3
 800570c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005710:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005714:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005718:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800571c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005720:	b29b      	uxth	r3, r3
 8005722:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800572a:	2b01      	cmp	r3, #1
 800572c:	f040 8284 	bne.w	8005c38 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxByteNbre;
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	695a      	ldr	r2, [r3, #20]
 8005734:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005738:	441a      	add	r2, r3
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	69da      	ldr	r2, [r3, #28]
 8005742:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005746:	441a      	add	r2, r3
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	6a1a      	ldr	r2, [r3, #32]
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	691b      	ldr	r3, [r3, #16]
 8005754:	429a      	cmp	r2, r3
 8005756:	d309      	bcc.n	800576c <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	691b      	ldr	r3, [r3, #16]
 800575c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	6a1a      	ldr	r2, [r3, #32]
 8005762:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005764:	1ad2      	subs	r2, r2, r3
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	621a      	str	r2, [r3, #32]
 800576a:	e015      	b.n	8005798 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	6a1b      	ldr	r3, [r3, #32]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d107      	bne.n	8005784 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxByteNbre;
 8005774:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005778:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	2200      	movs	r2, #0
 800577e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005782:	e009      	b.n	8005798 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	2200      	movs	r2, #0
 8005788:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	6a1b      	ldr	r3, [r3, #32]
 8005790:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	2200      	movs	r2, #0
 8005796:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	785b      	ldrb	r3, [r3, #1]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d155      	bne.n	800584c <HAL_PCD_EP_DB_Transmit+0x356>
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057ae:	b29b      	uxth	r3, r3
 80057b0:	461a      	mov	r2, r3
 80057b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057b4:	4413      	add	r3, r2
 80057b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	781b      	ldrb	r3, [r3, #0]
 80057bc:	00da      	lsls	r2, r3, #3
 80057be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057c0:	4413      	add	r3, r2
 80057c2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80057c6:	637b      	str	r3, [r7, #52]	; 0x34
 80057c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d112      	bne.n	80057f4 <HAL_PCD_EP_DB_Transmit+0x2fe>
 80057ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057d0:	881b      	ldrh	r3, [r3, #0]
 80057d2:	b29b      	uxth	r3, r3
 80057d4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80057d8:	b29a      	uxth	r2, r3
 80057da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057dc:	801a      	strh	r2, [r3, #0]
 80057de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057e0:	881b      	ldrh	r3, [r3, #0]
 80057e2:	b29b      	uxth	r3, r3
 80057e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057ec:	b29a      	uxth	r2, r3
 80057ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057f0:	801a      	strh	r2, [r3, #0]
 80057f2:	e047      	b.n	8005884 <HAL_PCD_EP_DB_Transmit+0x38e>
 80057f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057f6:	2b3e      	cmp	r3, #62	; 0x3e
 80057f8:	d811      	bhi.n	800581e <HAL_PCD_EP_DB_Transmit+0x328>
 80057fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057fc:	085b      	lsrs	r3, r3, #1
 80057fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8005800:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005802:	f003 0301 	and.w	r3, r3, #1
 8005806:	2b00      	cmp	r3, #0
 8005808:	d002      	beq.n	8005810 <HAL_PCD_EP_DB_Transmit+0x31a>
 800580a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800580c:	3301      	adds	r3, #1
 800580e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005810:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005812:	b29b      	uxth	r3, r3
 8005814:	029b      	lsls	r3, r3, #10
 8005816:	b29a      	uxth	r2, r3
 8005818:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800581a:	801a      	strh	r2, [r3, #0]
 800581c:	e032      	b.n	8005884 <HAL_PCD_EP_DB_Transmit+0x38e>
 800581e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005820:	095b      	lsrs	r3, r3, #5
 8005822:	64bb      	str	r3, [r7, #72]	; 0x48
 8005824:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005826:	f003 031f 	and.w	r3, r3, #31
 800582a:	2b00      	cmp	r3, #0
 800582c:	d102      	bne.n	8005834 <HAL_PCD_EP_DB_Transmit+0x33e>
 800582e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005830:	3b01      	subs	r3, #1
 8005832:	64bb      	str	r3, [r7, #72]	; 0x48
 8005834:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005836:	b29b      	uxth	r3, r3
 8005838:	029b      	lsls	r3, r3, #10
 800583a:	b29b      	uxth	r3, r3
 800583c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005840:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005844:	b29a      	uxth	r2, r3
 8005846:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005848:	801a      	strh	r2, [r3, #0]
 800584a:	e01b      	b.n	8005884 <HAL_PCD_EP_DB_Transmit+0x38e>
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	785b      	ldrb	r3, [r3, #1]
 8005850:	2b01      	cmp	r3, #1
 8005852:	d117      	bne.n	8005884 <HAL_PCD_EP_DB_Transmit+0x38e>
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	643b      	str	r3, [r7, #64]	; 0x40
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005862:	b29b      	uxth	r3, r3
 8005864:	461a      	mov	r2, r3
 8005866:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005868:	4413      	add	r3, r2
 800586a:	643b      	str	r3, [r7, #64]	; 0x40
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	781b      	ldrb	r3, [r3, #0]
 8005870:	00da      	lsls	r2, r3, #3
 8005872:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005874:	4413      	add	r3, r2
 8005876:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800587a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800587c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800587e:	b29a      	uxth	r2, r3
 8005880:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005882:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	6818      	ldr	r0, [r3, #0]
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	6959      	ldr	r1, [r3, #20]
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	891a      	ldrh	r2, [r3, #8]
 8005890:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005892:	b29b      	uxth	r3, r3
 8005894:	f004 fa79 	bl	8009d8a <USB_WritePMA>
 8005898:	e1ce      	b.n	8005c38 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058a2:	b29b      	uxth	r3, r3
 80058a4:	461a      	mov	r2, r3
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	781b      	ldrb	r3, [r3, #0]
 80058aa:	00db      	lsls	r3, r3, #3
 80058ac:	4413      	add	r3, r2
 80058ae:	68fa      	ldr	r2, [r7, #12]
 80058b0:	6812      	ldr	r2, [r2, #0]
 80058b2:	4413      	add	r3, r2
 80058b4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80058b8:	881b      	ldrh	r3, [r3, #0]
 80058ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80058be:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	699a      	ldr	r2, [r3, #24]
 80058c6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80058ca:	429a      	cmp	r2, r3
 80058cc:	d307      	bcc.n	80058de <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxByteNbre;
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	699a      	ldr	r2, [r3, #24]
 80058d2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80058d6:	1ad2      	subs	r2, r2, r3
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	619a      	str	r2, [r3, #24]
 80058dc:	e002      	b.n	80058e4 <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	2200      	movs	r2, #0
 80058e2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	699b      	ldr	r3, [r3, #24]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	f040 80c4 	bne.w	8005a76 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	785b      	ldrb	r3, [r3, #1]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d126      	bne.n	8005944 <HAL_PCD_EP_DB_Transmit+0x44e>
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005904:	b29b      	uxth	r3, r3
 8005906:	461a      	mov	r2, r3
 8005908:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800590a:	4413      	add	r3, r2
 800590c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	781b      	ldrb	r3, [r3, #0]
 8005912:	00da      	lsls	r2, r3, #3
 8005914:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005916:	4413      	add	r3, r2
 8005918:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800591c:	66bb      	str	r3, [r7, #104]	; 0x68
 800591e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005920:	881b      	ldrh	r3, [r3, #0]
 8005922:	b29b      	uxth	r3, r3
 8005924:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005928:	b29a      	uxth	r2, r3
 800592a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800592c:	801a      	strh	r2, [r3, #0]
 800592e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005930:	881b      	ldrh	r3, [r3, #0]
 8005932:	b29b      	uxth	r3, r3
 8005934:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005938:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800593c:	b29a      	uxth	r2, r3
 800593e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005940:	801a      	strh	r2, [r3, #0]
 8005942:	e01a      	b.n	800597a <HAL_PCD_EP_DB_Transmit+0x484>
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	785b      	ldrb	r3, [r3, #1]
 8005948:	2b01      	cmp	r3, #1
 800594a:	d116      	bne.n	800597a <HAL_PCD_EP_DB_Transmit+0x484>
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	677b      	str	r3, [r7, #116]	; 0x74
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800595a:	b29b      	uxth	r3, r3
 800595c:	461a      	mov	r2, r3
 800595e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005960:	4413      	add	r3, r2
 8005962:	677b      	str	r3, [r7, #116]	; 0x74
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	781b      	ldrb	r3, [r3, #0]
 8005968:	00da      	lsls	r2, r3, #3
 800596a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800596c:	4413      	add	r3, r2
 800596e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005972:	673b      	str	r3, [r7, #112]	; 0x70
 8005974:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005976:	2200      	movs	r2, #0
 8005978:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	67bb      	str	r3, [r7, #120]	; 0x78
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	785b      	ldrb	r3, [r3, #1]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d12f      	bne.n	80059e8 <HAL_PCD_EP_DB_Transmit+0x4f2>
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005998:	b29b      	uxth	r3, r3
 800599a:	461a      	mov	r2, r3
 800599c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80059a0:	4413      	add	r3, r2
 80059a2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	781b      	ldrb	r3, [r3, #0]
 80059aa:	00da      	lsls	r2, r3, #3
 80059ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80059b0:	4413      	add	r3, r2
 80059b2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80059b6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80059ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80059be:	881b      	ldrh	r3, [r3, #0]
 80059c0:	b29b      	uxth	r3, r3
 80059c2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80059c6:	b29a      	uxth	r2, r3
 80059c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80059cc:	801a      	strh	r2, [r3, #0]
 80059ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80059d2:	881b      	ldrh	r3, [r3, #0]
 80059d4:	b29b      	uxth	r3, r3
 80059d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059de:	b29a      	uxth	r2, r3
 80059e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80059e4:	801a      	strh	r2, [r3, #0]
 80059e6:	e017      	b.n	8005a18 <HAL_PCD_EP_DB_Transmit+0x522>
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	785b      	ldrb	r3, [r3, #1]
 80059ec:	2b01      	cmp	r3, #1
 80059ee:	d113      	bne.n	8005a18 <HAL_PCD_EP_DB_Transmit+0x522>
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	461a      	mov	r2, r3
 80059fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059fe:	4413      	add	r3, r2
 8005a00:	67bb      	str	r3, [r7, #120]	; 0x78
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	781b      	ldrb	r3, [r3, #0]
 8005a06:	00da      	lsls	r2, r3, #3
 8005a08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a0a:	4413      	add	r3, r2
 8005a0c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005a10:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005a12:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005a14:	2200      	movs	r2, #0
 8005a16:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	781b      	ldrb	r3, [r3, #0]
 8005a1c:	4619      	mov	r1, r3
 8005a1e:	68f8      	ldr	r0, [r7, #12]
 8005a20:	f005 feb3 	bl	800b78a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005a24:	88fb      	ldrh	r3, [r7, #6]
 8005a26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	f040 8104 	bne.w	8005c38 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	461a      	mov	r2, r3
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	781b      	ldrb	r3, [r3, #0]
 8005a3a:	009b      	lsls	r3, r3, #2
 8005a3c:	4413      	add	r3, r2
 8005a3e:	881b      	ldrh	r3, [r3, #0]
 8005a40:	b29b      	uxth	r3, r3
 8005a42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a4a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	461a      	mov	r2, r3
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	781b      	ldrb	r3, [r3, #0]
 8005a58:	009b      	lsls	r3, r3, #2
 8005a5a:	441a      	add	r2, r3
 8005a5c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005a60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a68:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005a6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a70:	b29b      	uxth	r3, r3
 8005a72:	8013      	strh	r3, [r2, #0]
 8005a74:	e0e0      	b.n	8005c38 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005a76:	88fb      	ldrh	r3, [r7, #6]
 8005a78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d121      	bne.n	8005ac4 <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	461a      	mov	r2, r3
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	781b      	ldrb	r3, [r3, #0]
 8005a8a:	009b      	lsls	r3, r3, #2
 8005a8c:	4413      	add	r3, r2
 8005a8e:	881b      	ldrh	r3, [r3, #0]
 8005a90:	b29b      	uxth	r3, r3
 8005a92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a9a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	781b      	ldrb	r3, [r3, #0]
 8005aa8:	009b      	lsls	r3, r3, #2
 8005aaa:	441a      	add	r2, r3
 8005aac:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005ab0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ab4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ab8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005abc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005aca:	2b01      	cmp	r3, #1
 8005acc:	f040 80b4 	bne.w	8005c38 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxByteNbre;
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	695a      	ldr	r2, [r3, #20]
 8005ad4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005ad8:	441a      	add	r2, r3
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	69da      	ldr	r2, [r3, #28]
 8005ae2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005ae6:	441a      	add	r2, r3
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	6a1a      	ldr	r2, [r3, #32]
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	691b      	ldr	r3, [r3, #16]
 8005af4:	429a      	cmp	r2, r3
 8005af6:	d309      	bcc.n	8005b0c <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	691b      	ldr	r3, [r3, #16]
 8005afc:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	6a1a      	ldr	r2, [r3, #32]
 8005b02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b04:	1ad2      	subs	r2, r2, r3
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	621a      	str	r2, [r3, #32]
 8005b0a:	e015      	b.n	8005b38 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	6a1b      	ldr	r3, [r3, #32]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d107      	bne.n	8005b24 <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxByteNbre;
 8005b14:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005b18:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005b22:	e009      	b.n	8005b38 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	6a1b      	ldr	r3, [r3, #32]
 8005b28:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	2200      	movs	r2, #0
 8005b34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	667b      	str	r3, [r7, #100]	; 0x64
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	785b      	ldrb	r3, [r3, #1]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d155      	bne.n	8005bf2 <HAL_PCD_EP_DB_Transmit+0x6fc>
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b54:	b29b      	uxth	r3, r3
 8005b56:	461a      	mov	r2, r3
 8005b58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b5a:	4413      	add	r3, r2
 8005b5c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	781b      	ldrb	r3, [r3, #0]
 8005b62:	00da      	lsls	r2, r3, #3
 8005b64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b66:	4413      	add	r3, r2
 8005b68:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005b6c:	65bb      	str	r3, [r7, #88]	; 0x58
 8005b6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d112      	bne.n	8005b9a <HAL_PCD_EP_DB_Transmit+0x6a4>
 8005b74:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b76:	881b      	ldrh	r3, [r3, #0]
 8005b78:	b29b      	uxth	r3, r3
 8005b7a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b7e:	b29a      	uxth	r2, r3
 8005b80:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b82:	801a      	strh	r2, [r3, #0]
 8005b84:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b86:	881b      	ldrh	r3, [r3, #0]
 8005b88:	b29b      	uxth	r3, r3
 8005b8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b92:	b29a      	uxth	r2, r3
 8005b94:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b96:	801a      	strh	r2, [r3, #0]
 8005b98:	e044      	b.n	8005c24 <HAL_PCD_EP_DB_Transmit+0x72e>
 8005b9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b9c:	2b3e      	cmp	r3, #62	; 0x3e
 8005b9e:	d811      	bhi.n	8005bc4 <HAL_PCD_EP_DB_Transmit+0x6ce>
 8005ba0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ba2:	085b      	lsrs	r3, r3, #1
 8005ba4:	657b      	str	r3, [r7, #84]	; 0x54
 8005ba6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ba8:	f003 0301 	and.w	r3, r3, #1
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d002      	beq.n	8005bb6 <HAL_PCD_EP_DB_Transmit+0x6c0>
 8005bb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bb2:	3301      	adds	r3, #1
 8005bb4:	657b      	str	r3, [r7, #84]	; 0x54
 8005bb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bb8:	b29b      	uxth	r3, r3
 8005bba:	029b      	lsls	r3, r3, #10
 8005bbc:	b29a      	uxth	r2, r3
 8005bbe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005bc0:	801a      	strh	r2, [r3, #0]
 8005bc2:	e02f      	b.n	8005c24 <HAL_PCD_EP_DB_Transmit+0x72e>
 8005bc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bc6:	095b      	lsrs	r3, r3, #5
 8005bc8:	657b      	str	r3, [r7, #84]	; 0x54
 8005bca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bcc:	f003 031f 	and.w	r3, r3, #31
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d102      	bne.n	8005bda <HAL_PCD_EP_DB_Transmit+0x6e4>
 8005bd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bd6:	3b01      	subs	r3, #1
 8005bd8:	657b      	str	r3, [r7, #84]	; 0x54
 8005bda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bdc:	b29b      	uxth	r3, r3
 8005bde:	029b      	lsls	r3, r3, #10
 8005be0:	b29b      	uxth	r3, r3
 8005be2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005be6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bea:	b29a      	uxth	r2, r3
 8005bec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005bee:	801a      	strh	r2, [r3, #0]
 8005bf0:	e018      	b.n	8005c24 <HAL_PCD_EP_DB_Transmit+0x72e>
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	785b      	ldrb	r3, [r3, #1]
 8005bf6:	2b01      	cmp	r3, #1
 8005bf8:	d114      	bne.n	8005c24 <HAL_PCD_EP_DB_Transmit+0x72e>
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	461a      	mov	r2, r3
 8005c06:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c08:	4413      	add	r3, r2
 8005c0a:	667b      	str	r3, [r7, #100]	; 0x64
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	781b      	ldrb	r3, [r3, #0]
 8005c10:	00da      	lsls	r2, r3, #3
 8005c12:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c14:	4413      	add	r3, r2
 8005c16:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005c1a:	663b      	str	r3, [r7, #96]	; 0x60
 8005c1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c1e:	b29a      	uxth	r2, r3
 8005c20:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c22:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	6818      	ldr	r0, [r3, #0]
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	6959      	ldr	r1, [r3, #20]
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	895a      	ldrh	r2, [r3, #10]
 8005c30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c32:	b29b      	uxth	r3, r3
 8005c34:	f004 f8a9 	bl	8009d8a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	461a      	mov	r2, r3
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	781b      	ldrb	r3, [r3, #0]
 8005c42:	009b      	lsls	r3, r3, #2
 8005c44:	4413      	add	r3, r2
 8005c46:	881b      	ldrh	r3, [r3, #0]
 8005c48:	b29b      	uxth	r3, r3
 8005c4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c52:	823b      	strh	r3, [r7, #16]
 8005c54:	8a3b      	ldrh	r3, [r7, #16]
 8005c56:	f083 0310 	eor.w	r3, r3, #16
 8005c5a:	823b      	strh	r3, [r7, #16]
 8005c5c:	8a3b      	ldrh	r3, [r7, #16]
 8005c5e:	f083 0320 	eor.w	r3, r3, #32
 8005c62:	823b      	strh	r3, [r7, #16]
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	461a      	mov	r2, r3
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	781b      	ldrb	r3, [r3, #0]
 8005c6e:	009b      	lsls	r3, r3, #2
 8005c70:	441a      	add	r2, r3
 8005c72:	8a3b      	ldrh	r3, [r7, #16]
 8005c74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c84:	b29b      	uxth	r3, r3
 8005c86:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8005c88:	2300      	movs	r3, #0
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	3788      	adds	r7, #136	; 0x88
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}

08005c92 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005c92:	b480      	push	{r7}
 8005c94:	b087      	sub	sp, #28
 8005c96:	af00      	add	r7, sp, #0
 8005c98:	60f8      	str	r0, [r7, #12]
 8005c9a:	607b      	str	r3, [r7, #4]
 8005c9c:	460b      	mov	r3, r1
 8005c9e:	817b      	strh	r3, [r7, #10]
 8005ca0:	4613      	mov	r3, r2
 8005ca2:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005ca4:	897b      	ldrh	r3, [r7, #10]
 8005ca6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d00b      	beq.n	8005cc8 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005cb0:	897b      	ldrh	r3, [r7, #10]
 8005cb2:	f003 0307 	and.w	r3, r3, #7
 8005cb6:	1c5a      	adds	r2, r3, #1
 8005cb8:	4613      	mov	r3, r2
 8005cba:	009b      	lsls	r3, r3, #2
 8005cbc:	4413      	add	r3, r2
 8005cbe:	00db      	lsls	r3, r3, #3
 8005cc0:	68fa      	ldr	r2, [r7, #12]
 8005cc2:	4413      	add	r3, r2
 8005cc4:	617b      	str	r3, [r7, #20]
 8005cc6:	e009      	b.n	8005cdc <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005cc8:	897a      	ldrh	r2, [r7, #10]
 8005cca:	4613      	mov	r3, r2
 8005ccc:	009b      	lsls	r3, r3, #2
 8005cce:	4413      	add	r3, r2
 8005cd0:	00db      	lsls	r3, r3, #3
 8005cd2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005cd6:	68fa      	ldr	r2, [r7, #12]
 8005cd8:	4413      	add	r3, r2
 8005cda:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005cdc:	893b      	ldrh	r3, [r7, #8]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d107      	bne.n	8005cf2 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	b29a      	uxth	r2, r3
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	80da      	strh	r2, [r3, #6]
 8005cf0:	e00b      	b.n	8005d0a <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	2201      	movs	r2, #1
 8005cf6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	b29a      	uxth	r2, r3
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	0c1b      	lsrs	r3, r3, #16
 8005d04:	b29a      	uxth	r2, r3
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8005d0a:	2300      	movs	r3, #0
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	371c      	adds	r7, #28
 8005d10:	46bd      	mov	sp, r7
 8005d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d16:	4770      	bx	lr

08005d18 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b085      	sub	sp, #20
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2201      	movs	r2, #1
 8005d2a:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2200      	movs	r2, #0
 8005d32:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8005d3c:	b29b      	uxth	r3, r3
 8005d3e:	f043 0301 	orr.w	r3, r3, #1
 8005d42:	b29a      	uxth	r2, r3
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8005d50:	b29b      	uxth	r3, r3
 8005d52:	f043 0302 	orr.w	r3, r3, #2
 8005d56:	b29a      	uxth	r2, r3
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8005d5e:	2300      	movs	r3, #0
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	3714      	adds	r7, #20
 8005d64:	46bd      	mov	sp, r7
 8005d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6a:	4770      	bx	lr

08005d6c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005d70:	4b05      	ldr	r3, [pc, #20]	; (8005d88 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a04      	ldr	r2, [pc, #16]	; (8005d88 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005d76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d7a:	6013      	str	r3, [r2, #0]
}
 8005d7c:	bf00      	nop
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d84:	4770      	bx	lr
 8005d86:	bf00      	nop
 8005d88:	40007000 	.word	0x40007000

08005d8c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005d90:	4b04      	ldr	r3, [pc, #16]	; (8005da4 <HAL_PWREx_GetVoltageRange+0x18>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da0:	4770      	bx	lr
 8005da2:	bf00      	nop
 8005da4:	40007000 	.word	0x40007000

08005da8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005da8:	b480      	push	{r7}
 8005daa:	b085      	sub	sp, #20
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005db6:	d130      	bne.n	8005e1a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005db8:	4b23      	ldr	r3, [pc, #140]	; (8005e48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005dc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005dc4:	d038      	beq.n	8005e38 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005dc6:	4b20      	ldr	r3, [pc, #128]	; (8005e48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005dce:	4a1e      	ldr	r2, [pc, #120]	; (8005e48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005dd0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005dd4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005dd6:	4b1d      	ldr	r3, [pc, #116]	; (8005e4c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	2232      	movs	r2, #50	; 0x32
 8005ddc:	fb02 f303 	mul.w	r3, r2, r3
 8005de0:	4a1b      	ldr	r2, [pc, #108]	; (8005e50 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005de2:	fba2 2303 	umull	r2, r3, r2, r3
 8005de6:	0c9b      	lsrs	r3, r3, #18
 8005de8:	3301      	adds	r3, #1
 8005dea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005dec:	e002      	b.n	8005df4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	3b01      	subs	r3, #1
 8005df2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005df4:	4b14      	ldr	r3, [pc, #80]	; (8005e48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005df6:	695b      	ldr	r3, [r3, #20]
 8005df8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005dfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e00:	d102      	bne.n	8005e08 <HAL_PWREx_ControlVoltageScaling+0x60>
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d1f2      	bne.n	8005dee <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005e08:	4b0f      	ldr	r3, [pc, #60]	; (8005e48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005e0a:	695b      	ldr	r3, [r3, #20]
 8005e0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e14:	d110      	bne.n	8005e38 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005e16:	2303      	movs	r3, #3
 8005e18:	e00f      	b.n	8005e3a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005e1a:	4b0b      	ldr	r3, [pc, #44]	; (8005e48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005e22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e26:	d007      	beq.n	8005e38 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005e28:	4b07      	ldr	r3, [pc, #28]	; (8005e48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005e30:	4a05      	ldr	r2, [pc, #20]	; (8005e48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005e32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005e36:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005e38:	2300      	movs	r3, #0
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3714      	adds	r7, #20
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e44:	4770      	bx	lr
 8005e46:	bf00      	nop
 8005e48:	40007000 	.word	0x40007000
 8005e4c:	20000024 	.word	0x20000024
 8005e50:	431bde83 	.word	0x431bde83

08005e54 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8005e54:	b480      	push	{r7}
 8005e56:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8005e58:	4b05      	ldr	r3, [pc, #20]	; (8005e70 <HAL_PWREx_EnableVddUSB+0x1c>)
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	4a04      	ldr	r2, [pc, #16]	; (8005e70 <HAL_PWREx_EnableVddUSB+0x1c>)
 8005e5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005e62:	6053      	str	r3, [r2, #4]
}
 8005e64:	bf00      	nop
 8005e66:	46bd      	mov	sp, r7
 8005e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6c:	4770      	bx	lr
 8005e6e:	bf00      	nop
 8005e70:	40007000 	.word	0x40007000

08005e74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b088      	sub	sp, #32
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d102      	bne.n	8005e88 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005e82:	2301      	movs	r3, #1
 8005e84:	f000 bc11 	b.w	80066aa <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e88:	4ba0      	ldr	r3, [pc, #640]	; (800610c <HAL_RCC_OscConfig+0x298>)
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	f003 030c 	and.w	r3, r3, #12
 8005e90:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005e92:	4b9e      	ldr	r3, [pc, #632]	; (800610c <HAL_RCC_OscConfig+0x298>)
 8005e94:	68db      	ldr	r3, [r3, #12]
 8005e96:	f003 0303 	and.w	r3, r3, #3
 8005e9a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f003 0310 	and.w	r3, r3, #16
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	f000 80e4 	beq.w	8006072 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005eaa:	69bb      	ldr	r3, [r7, #24]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d007      	beq.n	8005ec0 <HAL_RCC_OscConfig+0x4c>
 8005eb0:	69bb      	ldr	r3, [r7, #24]
 8005eb2:	2b0c      	cmp	r3, #12
 8005eb4:	f040 808b 	bne.w	8005fce <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	2b01      	cmp	r3, #1
 8005ebc:	f040 8087 	bne.w	8005fce <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005ec0:	4b92      	ldr	r3, [pc, #584]	; (800610c <HAL_RCC_OscConfig+0x298>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f003 0302 	and.w	r3, r3, #2
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d005      	beq.n	8005ed8 <HAL_RCC_OscConfig+0x64>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	699b      	ldr	r3, [r3, #24]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d101      	bne.n	8005ed8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	e3e8      	b.n	80066aa <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6a1a      	ldr	r2, [r3, #32]
 8005edc:	4b8b      	ldr	r3, [pc, #556]	; (800610c <HAL_RCC_OscConfig+0x298>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f003 0308 	and.w	r3, r3, #8
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d004      	beq.n	8005ef2 <HAL_RCC_OscConfig+0x7e>
 8005ee8:	4b88      	ldr	r3, [pc, #544]	; (800610c <HAL_RCC_OscConfig+0x298>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ef0:	e005      	b.n	8005efe <HAL_RCC_OscConfig+0x8a>
 8005ef2:	4b86      	ldr	r3, [pc, #536]	; (800610c <HAL_RCC_OscConfig+0x298>)
 8005ef4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ef8:	091b      	lsrs	r3, r3, #4
 8005efa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d223      	bcs.n	8005f4a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6a1b      	ldr	r3, [r3, #32]
 8005f06:	4618      	mov	r0, r3
 8005f08:	f000 fd42 	bl	8006990 <RCC_SetFlashLatencyFromMSIRange>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d001      	beq.n	8005f16 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8005f12:	2301      	movs	r3, #1
 8005f14:	e3c9      	b.n	80066aa <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005f16:	4b7d      	ldr	r3, [pc, #500]	; (800610c <HAL_RCC_OscConfig+0x298>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a7c      	ldr	r2, [pc, #496]	; (800610c <HAL_RCC_OscConfig+0x298>)
 8005f1c:	f043 0308 	orr.w	r3, r3, #8
 8005f20:	6013      	str	r3, [r2, #0]
 8005f22:	4b7a      	ldr	r3, [pc, #488]	; (800610c <HAL_RCC_OscConfig+0x298>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6a1b      	ldr	r3, [r3, #32]
 8005f2e:	4977      	ldr	r1, [pc, #476]	; (800610c <HAL_RCC_OscConfig+0x298>)
 8005f30:	4313      	orrs	r3, r2
 8005f32:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005f34:	4b75      	ldr	r3, [pc, #468]	; (800610c <HAL_RCC_OscConfig+0x298>)
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	69db      	ldr	r3, [r3, #28]
 8005f40:	021b      	lsls	r3, r3, #8
 8005f42:	4972      	ldr	r1, [pc, #456]	; (800610c <HAL_RCC_OscConfig+0x298>)
 8005f44:	4313      	orrs	r3, r2
 8005f46:	604b      	str	r3, [r1, #4]
 8005f48:	e025      	b.n	8005f96 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005f4a:	4b70      	ldr	r3, [pc, #448]	; (800610c <HAL_RCC_OscConfig+0x298>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a6f      	ldr	r2, [pc, #444]	; (800610c <HAL_RCC_OscConfig+0x298>)
 8005f50:	f043 0308 	orr.w	r3, r3, #8
 8005f54:	6013      	str	r3, [r2, #0]
 8005f56:	4b6d      	ldr	r3, [pc, #436]	; (800610c <HAL_RCC_OscConfig+0x298>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6a1b      	ldr	r3, [r3, #32]
 8005f62:	496a      	ldr	r1, [pc, #424]	; (800610c <HAL_RCC_OscConfig+0x298>)
 8005f64:	4313      	orrs	r3, r2
 8005f66:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005f68:	4b68      	ldr	r3, [pc, #416]	; (800610c <HAL_RCC_OscConfig+0x298>)
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	69db      	ldr	r3, [r3, #28]
 8005f74:	021b      	lsls	r3, r3, #8
 8005f76:	4965      	ldr	r1, [pc, #404]	; (800610c <HAL_RCC_OscConfig+0x298>)
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005f7c:	69bb      	ldr	r3, [r7, #24]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d109      	bne.n	8005f96 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6a1b      	ldr	r3, [r3, #32]
 8005f86:	4618      	mov	r0, r3
 8005f88:	f000 fd02 	bl	8006990 <RCC_SetFlashLatencyFromMSIRange>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d001      	beq.n	8005f96 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8005f92:	2301      	movs	r3, #1
 8005f94:	e389      	b.n	80066aa <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005f96:	f000 fc6f 	bl	8006878 <HAL_RCC_GetSysClockFreq>
 8005f9a:	4602      	mov	r2, r0
 8005f9c:	4b5b      	ldr	r3, [pc, #364]	; (800610c <HAL_RCC_OscConfig+0x298>)
 8005f9e:	689b      	ldr	r3, [r3, #8]
 8005fa0:	091b      	lsrs	r3, r3, #4
 8005fa2:	f003 030f 	and.w	r3, r3, #15
 8005fa6:	495a      	ldr	r1, [pc, #360]	; (8006110 <HAL_RCC_OscConfig+0x29c>)
 8005fa8:	5ccb      	ldrb	r3, [r1, r3]
 8005faa:	f003 031f 	and.w	r3, r3, #31
 8005fae:	fa22 f303 	lsr.w	r3, r2, r3
 8005fb2:	4a58      	ldr	r2, [pc, #352]	; (8006114 <HAL_RCC_OscConfig+0x2a0>)
 8005fb4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005fb6:	4b58      	ldr	r3, [pc, #352]	; (8006118 <HAL_RCC_OscConfig+0x2a4>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f7fb fec6 	bl	8001d4c <HAL_InitTick>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005fc4:	7bfb      	ldrb	r3, [r7, #15]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d052      	beq.n	8006070 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8005fca:	7bfb      	ldrb	r3, [r7, #15]
 8005fcc:	e36d      	b.n	80066aa <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	699b      	ldr	r3, [r3, #24]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d032      	beq.n	800603c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005fd6:	4b4d      	ldr	r3, [pc, #308]	; (800610c <HAL_RCC_OscConfig+0x298>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a4c      	ldr	r2, [pc, #304]	; (800610c <HAL_RCC_OscConfig+0x298>)
 8005fdc:	f043 0301 	orr.w	r3, r3, #1
 8005fe0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005fe2:	f7fb ff03 	bl	8001dec <HAL_GetTick>
 8005fe6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005fe8:	e008      	b.n	8005ffc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005fea:	f7fb feff 	bl	8001dec <HAL_GetTick>
 8005fee:	4602      	mov	r2, r0
 8005ff0:	693b      	ldr	r3, [r7, #16]
 8005ff2:	1ad3      	subs	r3, r2, r3
 8005ff4:	2b02      	cmp	r3, #2
 8005ff6:	d901      	bls.n	8005ffc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005ff8:	2303      	movs	r3, #3
 8005ffa:	e356      	b.n	80066aa <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005ffc:	4b43      	ldr	r3, [pc, #268]	; (800610c <HAL_RCC_OscConfig+0x298>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f003 0302 	and.w	r3, r3, #2
 8006004:	2b00      	cmp	r3, #0
 8006006:	d0f0      	beq.n	8005fea <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006008:	4b40      	ldr	r3, [pc, #256]	; (800610c <HAL_RCC_OscConfig+0x298>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a3f      	ldr	r2, [pc, #252]	; (800610c <HAL_RCC_OscConfig+0x298>)
 800600e:	f043 0308 	orr.w	r3, r3, #8
 8006012:	6013      	str	r3, [r2, #0]
 8006014:	4b3d      	ldr	r3, [pc, #244]	; (800610c <HAL_RCC_OscConfig+0x298>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6a1b      	ldr	r3, [r3, #32]
 8006020:	493a      	ldr	r1, [pc, #232]	; (800610c <HAL_RCC_OscConfig+0x298>)
 8006022:	4313      	orrs	r3, r2
 8006024:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006026:	4b39      	ldr	r3, [pc, #228]	; (800610c <HAL_RCC_OscConfig+0x298>)
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	69db      	ldr	r3, [r3, #28]
 8006032:	021b      	lsls	r3, r3, #8
 8006034:	4935      	ldr	r1, [pc, #212]	; (800610c <HAL_RCC_OscConfig+0x298>)
 8006036:	4313      	orrs	r3, r2
 8006038:	604b      	str	r3, [r1, #4]
 800603a:	e01a      	b.n	8006072 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800603c:	4b33      	ldr	r3, [pc, #204]	; (800610c <HAL_RCC_OscConfig+0x298>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a32      	ldr	r2, [pc, #200]	; (800610c <HAL_RCC_OscConfig+0x298>)
 8006042:	f023 0301 	bic.w	r3, r3, #1
 8006046:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006048:	f7fb fed0 	bl	8001dec <HAL_GetTick>
 800604c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800604e:	e008      	b.n	8006062 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006050:	f7fb fecc 	bl	8001dec <HAL_GetTick>
 8006054:	4602      	mov	r2, r0
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	1ad3      	subs	r3, r2, r3
 800605a:	2b02      	cmp	r3, #2
 800605c:	d901      	bls.n	8006062 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800605e:	2303      	movs	r3, #3
 8006060:	e323      	b.n	80066aa <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006062:	4b2a      	ldr	r3, [pc, #168]	; (800610c <HAL_RCC_OscConfig+0x298>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f003 0302 	and.w	r3, r3, #2
 800606a:	2b00      	cmp	r3, #0
 800606c:	d1f0      	bne.n	8006050 <HAL_RCC_OscConfig+0x1dc>
 800606e:	e000      	b.n	8006072 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006070:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f003 0301 	and.w	r3, r3, #1
 800607a:	2b00      	cmp	r3, #0
 800607c:	d073      	beq.n	8006166 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800607e:	69bb      	ldr	r3, [r7, #24]
 8006080:	2b08      	cmp	r3, #8
 8006082:	d005      	beq.n	8006090 <HAL_RCC_OscConfig+0x21c>
 8006084:	69bb      	ldr	r3, [r7, #24]
 8006086:	2b0c      	cmp	r3, #12
 8006088:	d10e      	bne.n	80060a8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	2b03      	cmp	r3, #3
 800608e:	d10b      	bne.n	80060a8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006090:	4b1e      	ldr	r3, [pc, #120]	; (800610c <HAL_RCC_OscConfig+0x298>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006098:	2b00      	cmp	r3, #0
 800609a:	d063      	beq.n	8006164 <HAL_RCC_OscConfig+0x2f0>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d15f      	bne.n	8006164 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80060a4:	2301      	movs	r3, #1
 80060a6:	e300      	b.n	80066aa <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060b0:	d106      	bne.n	80060c0 <HAL_RCC_OscConfig+0x24c>
 80060b2:	4b16      	ldr	r3, [pc, #88]	; (800610c <HAL_RCC_OscConfig+0x298>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a15      	ldr	r2, [pc, #84]	; (800610c <HAL_RCC_OscConfig+0x298>)
 80060b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060bc:	6013      	str	r3, [r2, #0]
 80060be:	e01d      	b.n	80060fc <HAL_RCC_OscConfig+0x288>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80060c8:	d10c      	bne.n	80060e4 <HAL_RCC_OscConfig+0x270>
 80060ca:	4b10      	ldr	r3, [pc, #64]	; (800610c <HAL_RCC_OscConfig+0x298>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a0f      	ldr	r2, [pc, #60]	; (800610c <HAL_RCC_OscConfig+0x298>)
 80060d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80060d4:	6013      	str	r3, [r2, #0]
 80060d6:	4b0d      	ldr	r3, [pc, #52]	; (800610c <HAL_RCC_OscConfig+0x298>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a0c      	ldr	r2, [pc, #48]	; (800610c <HAL_RCC_OscConfig+0x298>)
 80060dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060e0:	6013      	str	r3, [r2, #0]
 80060e2:	e00b      	b.n	80060fc <HAL_RCC_OscConfig+0x288>
 80060e4:	4b09      	ldr	r3, [pc, #36]	; (800610c <HAL_RCC_OscConfig+0x298>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a08      	ldr	r2, [pc, #32]	; (800610c <HAL_RCC_OscConfig+0x298>)
 80060ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060ee:	6013      	str	r3, [r2, #0]
 80060f0:	4b06      	ldr	r3, [pc, #24]	; (800610c <HAL_RCC_OscConfig+0x298>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a05      	ldr	r2, [pc, #20]	; (800610c <HAL_RCC_OscConfig+0x298>)
 80060f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80060fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d01b      	beq.n	800613c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006104:	f7fb fe72 	bl	8001dec <HAL_GetTick>
 8006108:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800610a:	e010      	b.n	800612e <HAL_RCC_OscConfig+0x2ba>
 800610c:	40021000 	.word	0x40021000
 8006110:	0800f7d0 	.word	0x0800f7d0
 8006114:	20000024 	.word	0x20000024
 8006118:	20000028 	.word	0x20000028
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800611c:	f7fb fe66 	bl	8001dec <HAL_GetTick>
 8006120:	4602      	mov	r2, r0
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	1ad3      	subs	r3, r2, r3
 8006126:	2b64      	cmp	r3, #100	; 0x64
 8006128:	d901      	bls.n	800612e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800612a:	2303      	movs	r3, #3
 800612c:	e2bd      	b.n	80066aa <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800612e:	4baf      	ldr	r3, [pc, #700]	; (80063ec <HAL_RCC_OscConfig+0x578>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006136:	2b00      	cmp	r3, #0
 8006138:	d0f0      	beq.n	800611c <HAL_RCC_OscConfig+0x2a8>
 800613a:	e014      	b.n	8006166 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800613c:	f7fb fe56 	bl	8001dec <HAL_GetTick>
 8006140:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006142:	e008      	b.n	8006156 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006144:	f7fb fe52 	bl	8001dec <HAL_GetTick>
 8006148:	4602      	mov	r2, r0
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	1ad3      	subs	r3, r2, r3
 800614e:	2b64      	cmp	r3, #100	; 0x64
 8006150:	d901      	bls.n	8006156 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006152:	2303      	movs	r3, #3
 8006154:	e2a9      	b.n	80066aa <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006156:	4ba5      	ldr	r3, [pc, #660]	; (80063ec <HAL_RCC_OscConfig+0x578>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800615e:	2b00      	cmp	r3, #0
 8006160:	d1f0      	bne.n	8006144 <HAL_RCC_OscConfig+0x2d0>
 8006162:	e000      	b.n	8006166 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006164:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f003 0302 	and.w	r3, r3, #2
 800616e:	2b00      	cmp	r3, #0
 8006170:	d060      	beq.n	8006234 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8006172:	69bb      	ldr	r3, [r7, #24]
 8006174:	2b04      	cmp	r3, #4
 8006176:	d005      	beq.n	8006184 <HAL_RCC_OscConfig+0x310>
 8006178:	69bb      	ldr	r3, [r7, #24]
 800617a:	2b0c      	cmp	r3, #12
 800617c:	d119      	bne.n	80061b2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	2b02      	cmp	r3, #2
 8006182:	d116      	bne.n	80061b2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006184:	4b99      	ldr	r3, [pc, #612]	; (80063ec <HAL_RCC_OscConfig+0x578>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800618c:	2b00      	cmp	r3, #0
 800618e:	d005      	beq.n	800619c <HAL_RCC_OscConfig+0x328>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	68db      	ldr	r3, [r3, #12]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d101      	bne.n	800619c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006198:	2301      	movs	r3, #1
 800619a:	e286      	b.n	80066aa <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800619c:	4b93      	ldr	r3, [pc, #588]	; (80063ec <HAL_RCC_OscConfig+0x578>)
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	691b      	ldr	r3, [r3, #16]
 80061a8:	061b      	lsls	r3, r3, #24
 80061aa:	4990      	ldr	r1, [pc, #576]	; (80063ec <HAL_RCC_OscConfig+0x578>)
 80061ac:	4313      	orrs	r3, r2
 80061ae:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80061b0:	e040      	b.n	8006234 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	68db      	ldr	r3, [r3, #12]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d023      	beq.n	8006202 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80061ba:	4b8c      	ldr	r3, [pc, #560]	; (80063ec <HAL_RCC_OscConfig+0x578>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a8b      	ldr	r2, [pc, #556]	; (80063ec <HAL_RCC_OscConfig+0x578>)
 80061c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061c6:	f7fb fe11 	bl	8001dec <HAL_GetTick>
 80061ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80061cc:	e008      	b.n	80061e0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80061ce:	f7fb fe0d 	bl	8001dec <HAL_GetTick>
 80061d2:	4602      	mov	r2, r0
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	1ad3      	subs	r3, r2, r3
 80061d8:	2b02      	cmp	r3, #2
 80061da:	d901      	bls.n	80061e0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80061dc:	2303      	movs	r3, #3
 80061de:	e264      	b.n	80066aa <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80061e0:	4b82      	ldr	r3, [pc, #520]	; (80063ec <HAL_RCC_OscConfig+0x578>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d0f0      	beq.n	80061ce <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061ec:	4b7f      	ldr	r3, [pc, #508]	; (80063ec <HAL_RCC_OscConfig+0x578>)
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	691b      	ldr	r3, [r3, #16]
 80061f8:	061b      	lsls	r3, r3, #24
 80061fa:	497c      	ldr	r1, [pc, #496]	; (80063ec <HAL_RCC_OscConfig+0x578>)
 80061fc:	4313      	orrs	r3, r2
 80061fe:	604b      	str	r3, [r1, #4]
 8006200:	e018      	b.n	8006234 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006202:	4b7a      	ldr	r3, [pc, #488]	; (80063ec <HAL_RCC_OscConfig+0x578>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a79      	ldr	r2, [pc, #484]	; (80063ec <HAL_RCC_OscConfig+0x578>)
 8006208:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800620c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800620e:	f7fb fded 	bl	8001dec <HAL_GetTick>
 8006212:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006214:	e008      	b.n	8006228 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006216:	f7fb fde9 	bl	8001dec <HAL_GetTick>
 800621a:	4602      	mov	r2, r0
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	1ad3      	subs	r3, r2, r3
 8006220:	2b02      	cmp	r3, #2
 8006222:	d901      	bls.n	8006228 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006224:	2303      	movs	r3, #3
 8006226:	e240      	b.n	80066aa <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006228:	4b70      	ldr	r3, [pc, #448]	; (80063ec <HAL_RCC_OscConfig+0x578>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006230:	2b00      	cmp	r3, #0
 8006232:	d1f0      	bne.n	8006216 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f003 0308 	and.w	r3, r3, #8
 800623c:	2b00      	cmp	r3, #0
 800623e:	d03c      	beq.n	80062ba <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	695b      	ldr	r3, [r3, #20]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d01c      	beq.n	8006282 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006248:	4b68      	ldr	r3, [pc, #416]	; (80063ec <HAL_RCC_OscConfig+0x578>)
 800624a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800624e:	4a67      	ldr	r2, [pc, #412]	; (80063ec <HAL_RCC_OscConfig+0x578>)
 8006250:	f043 0301 	orr.w	r3, r3, #1
 8006254:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006258:	f7fb fdc8 	bl	8001dec <HAL_GetTick>
 800625c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800625e:	e008      	b.n	8006272 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006260:	f7fb fdc4 	bl	8001dec <HAL_GetTick>
 8006264:	4602      	mov	r2, r0
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	1ad3      	subs	r3, r2, r3
 800626a:	2b02      	cmp	r3, #2
 800626c:	d901      	bls.n	8006272 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800626e:	2303      	movs	r3, #3
 8006270:	e21b      	b.n	80066aa <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006272:	4b5e      	ldr	r3, [pc, #376]	; (80063ec <HAL_RCC_OscConfig+0x578>)
 8006274:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006278:	f003 0302 	and.w	r3, r3, #2
 800627c:	2b00      	cmp	r3, #0
 800627e:	d0ef      	beq.n	8006260 <HAL_RCC_OscConfig+0x3ec>
 8006280:	e01b      	b.n	80062ba <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006282:	4b5a      	ldr	r3, [pc, #360]	; (80063ec <HAL_RCC_OscConfig+0x578>)
 8006284:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006288:	4a58      	ldr	r2, [pc, #352]	; (80063ec <HAL_RCC_OscConfig+0x578>)
 800628a:	f023 0301 	bic.w	r3, r3, #1
 800628e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006292:	f7fb fdab 	bl	8001dec <HAL_GetTick>
 8006296:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006298:	e008      	b.n	80062ac <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800629a:	f7fb fda7 	bl	8001dec <HAL_GetTick>
 800629e:	4602      	mov	r2, r0
 80062a0:	693b      	ldr	r3, [r7, #16]
 80062a2:	1ad3      	subs	r3, r2, r3
 80062a4:	2b02      	cmp	r3, #2
 80062a6:	d901      	bls.n	80062ac <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80062a8:	2303      	movs	r3, #3
 80062aa:	e1fe      	b.n	80066aa <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80062ac:	4b4f      	ldr	r3, [pc, #316]	; (80063ec <HAL_RCC_OscConfig+0x578>)
 80062ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80062b2:	f003 0302 	and.w	r3, r3, #2
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d1ef      	bne.n	800629a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f003 0304 	and.w	r3, r3, #4
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	f000 80a6 	beq.w	8006414 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80062c8:	2300      	movs	r3, #0
 80062ca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80062cc:	4b47      	ldr	r3, [pc, #284]	; (80063ec <HAL_RCC_OscConfig+0x578>)
 80062ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d10d      	bne.n	80062f4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80062d8:	4b44      	ldr	r3, [pc, #272]	; (80063ec <HAL_RCC_OscConfig+0x578>)
 80062da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062dc:	4a43      	ldr	r2, [pc, #268]	; (80063ec <HAL_RCC_OscConfig+0x578>)
 80062de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062e2:	6593      	str	r3, [r2, #88]	; 0x58
 80062e4:	4b41      	ldr	r3, [pc, #260]	; (80063ec <HAL_RCC_OscConfig+0x578>)
 80062e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062ec:	60bb      	str	r3, [r7, #8]
 80062ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80062f0:	2301      	movs	r3, #1
 80062f2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80062f4:	4b3e      	ldr	r3, [pc, #248]	; (80063f0 <HAL_RCC_OscConfig+0x57c>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d118      	bne.n	8006332 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006300:	4b3b      	ldr	r3, [pc, #236]	; (80063f0 <HAL_RCC_OscConfig+0x57c>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a3a      	ldr	r2, [pc, #232]	; (80063f0 <HAL_RCC_OscConfig+0x57c>)
 8006306:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800630a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800630c:	f7fb fd6e 	bl	8001dec <HAL_GetTick>
 8006310:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006312:	e008      	b.n	8006326 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006314:	f7fb fd6a 	bl	8001dec <HAL_GetTick>
 8006318:	4602      	mov	r2, r0
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	1ad3      	subs	r3, r2, r3
 800631e:	2b02      	cmp	r3, #2
 8006320:	d901      	bls.n	8006326 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8006322:	2303      	movs	r3, #3
 8006324:	e1c1      	b.n	80066aa <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006326:	4b32      	ldr	r3, [pc, #200]	; (80063f0 <HAL_RCC_OscConfig+0x57c>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800632e:	2b00      	cmp	r3, #0
 8006330:	d0f0      	beq.n	8006314 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	2b01      	cmp	r3, #1
 8006338:	d108      	bne.n	800634c <HAL_RCC_OscConfig+0x4d8>
 800633a:	4b2c      	ldr	r3, [pc, #176]	; (80063ec <HAL_RCC_OscConfig+0x578>)
 800633c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006340:	4a2a      	ldr	r2, [pc, #168]	; (80063ec <HAL_RCC_OscConfig+0x578>)
 8006342:	f043 0301 	orr.w	r3, r3, #1
 8006346:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800634a:	e024      	b.n	8006396 <HAL_RCC_OscConfig+0x522>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	689b      	ldr	r3, [r3, #8]
 8006350:	2b05      	cmp	r3, #5
 8006352:	d110      	bne.n	8006376 <HAL_RCC_OscConfig+0x502>
 8006354:	4b25      	ldr	r3, [pc, #148]	; (80063ec <HAL_RCC_OscConfig+0x578>)
 8006356:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800635a:	4a24      	ldr	r2, [pc, #144]	; (80063ec <HAL_RCC_OscConfig+0x578>)
 800635c:	f043 0304 	orr.w	r3, r3, #4
 8006360:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006364:	4b21      	ldr	r3, [pc, #132]	; (80063ec <HAL_RCC_OscConfig+0x578>)
 8006366:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800636a:	4a20      	ldr	r2, [pc, #128]	; (80063ec <HAL_RCC_OscConfig+0x578>)
 800636c:	f043 0301 	orr.w	r3, r3, #1
 8006370:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006374:	e00f      	b.n	8006396 <HAL_RCC_OscConfig+0x522>
 8006376:	4b1d      	ldr	r3, [pc, #116]	; (80063ec <HAL_RCC_OscConfig+0x578>)
 8006378:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800637c:	4a1b      	ldr	r2, [pc, #108]	; (80063ec <HAL_RCC_OscConfig+0x578>)
 800637e:	f023 0301 	bic.w	r3, r3, #1
 8006382:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006386:	4b19      	ldr	r3, [pc, #100]	; (80063ec <HAL_RCC_OscConfig+0x578>)
 8006388:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800638c:	4a17      	ldr	r2, [pc, #92]	; (80063ec <HAL_RCC_OscConfig+0x578>)
 800638e:	f023 0304 	bic.w	r3, r3, #4
 8006392:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	689b      	ldr	r3, [r3, #8]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d016      	beq.n	80063cc <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800639e:	f7fb fd25 	bl	8001dec <HAL_GetTick>
 80063a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80063a4:	e00a      	b.n	80063bc <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063a6:	f7fb fd21 	bl	8001dec <HAL_GetTick>
 80063aa:	4602      	mov	r2, r0
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	1ad3      	subs	r3, r2, r3
 80063b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d901      	bls.n	80063bc <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80063b8:	2303      	movs	r3, #3
 80063ba:	e176      	b.n	80066aa <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80063bc:	4b0b      	ldr	r3, [pc, #44]	; (80063ec <HAL_RCC_OscConfig+0x578>)
 80063be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063c2:	f003 0302 	and.w	r3, r3, #2
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d0ed      	beq.n	80063a6 <HAL_RCC_OscConfig+0x532>
 80063ca:	e01a      	b.n	8006402 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063cc:	f7fb fd0e 	bl	8001dec <HAL_GetTick>
 80063d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80063d2:	e00f      	b.n	80063f4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063d4:	f7fb fd0a 	bl	8001dec <HAL_GetTick>
 80063d8:	4602      	mov	r2, r0
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	1ad3      	subs	r3, r2, r3
 80063de:	f241 3288 	movw	r2, #5000	; 0x1388
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d906      	bls.n	80063f4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80063e6:	2303      	movs	r3, #3
 80063e8:	e15f      	b.n	80066aa <HAL_RCC_OscConfig+0x836>
 80063ea:	bf00      	nop
 80063ec:	40021000 	.word	0x40021000
 80063f0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80063f4:	4baa      	ldr	r3, [pc, #680]	; (80066a0 <HAL_RCC_OscConfig+0x82c>)
 80063f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063fa:	f003 0302 	and.w	r3, r3, #2
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d1e8      	bne.n	80063d4 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006402:	7ffb      	ldrb	r3, [r7, #31]
 8006404:	2b01      	cmp	r3, #1
 8006406:	d105      	bne.n	8006414 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006408:	4ba5      	ldr	r3, [pc, #660]	; (80066a0 <HAL_RCC_OscConfig+0x82c>)
 800640a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800640c:	4aa4      	ldr	r2, [pc, #656]	; (80066a0 <HAL_RCC_OscConfig+0x82c>)
 800640e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006412:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f003 0320 	and.w	r3, r3, #32
 800641c:	2b00      	cmp	r3, #0
 800641e:	d03c      	beq.n	800649a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006424:	2b00      	cmp	r3, #0
 8006426:	d01c      	beq.n	8006462 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006428:	4b9d      	ldr	r3, [pc, #628]	; (80066a0 <HAL_RCC_OscConfig+0x82c>)
 800642a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800642e:	4a9c      	ldr	r2, [pc, #624]	; (80066a0 <HAL_RCC_OscConfig+0x82c>)
 8006430:	f043 0301 	orr.w	r3, r3, #1
 8006434:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006438:	f7fb fcd8 	bl	8001dec <HAL_GetTick>
 800643c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800643e:	e008      	b.n	8006452 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006440:	f7fb fcd4 	bl	8001dec <HAL_GetTick>
 8006444:	4602      	mov	r2, r0
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	1ad3      	subs	r3, r2, r3
 800644a:	2b02      	cmp	r3, #2
 800644c:	d901      	bls.n	8006452 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800644e:	2303      	movs	r3, #3
 8006450:	e12b      	b.n	80066aa <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006452:	4b93      	ldr	r3, [pc, #588]	; (80066a0 <HAL_RCC_OscConfig+0x82c>)
 8006454:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006458:	f003 0302 	and.w	r3, r3, #2
 800645c:	2b00      	cmp	r3, #0
 800645e:	d0ef      	beq.n	8006440 <HAL_RCC_OscConfig+0x5cc>
 8006460:	e01b      	b.n	800649a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006462:	4b8f      	ldr	r3, [pc, #572]	; (80066a0 <HAL_RCC_OscConfig+0x82c>)
 8006464:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006468:	4a8d      	ldr	r2, [pc, #564]	; (80066a0 <HAL_RCC_OscConfig+0x82c>)
 800646a:	f023 0301 	bic.w	r3, r3, #1
 800646e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006472:	f7fb fcbb 	bl	8001dec <HAL_GetTick>
 8006476:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006478:	e008      	b.n	800648c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800647a:	f7fb fcb7 	bl	8001dec <HAL_GetTick>
 800647e:	4602      	mov	r2, r0
 8006480:	693b      	ldr	r3, [r7, #16]
 8006482:	1ad3      	subs	r3, r2, r3
 8006484:	2b02      	cmp	r3, #2
 8006486:	d901      	bls.n	800648c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8006488:	2303      	movs	r3, #3
 800648a:	e10e      	b.n	80066aa <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800648c:	4b84      	ldr	r3, [pc, #528]	; (80066a0 <HAL_RCC_OscConfig+0x82c>)
 800648e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006492:	f003 0302 	and.w	r3, r3, #2
 8006496:	2b00      	cmp	r3, #0
 8006498:	d1ef      	bne.n	800647a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800649e:	2b00      	cmp	r3, #0
 80064a0:	f000 8102 	beq.w	80066a8 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064a8:	2b02      	cmp	r3, #2
 80064aa:	f040 80c5 	bne.w	8006638 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80064ae:	4b7c      	ldr	r3, [pc, #496]	; (80066a0 <HAL_RCC_OscConfig+0x82c>)
 80064b0:	68db      	ldr	r3, [r3, #12]
 80064b2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	f003 0203 	and.w	r2, r3, #3
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064be:	429a      	cmp	r2, r3
 80064c0:	d12c      	bne.n	800651c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064cc:	3b01      	subs	r3, #1
 80064ce:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80064d0:	429a      	cmp	r2, r3
 80064d2:	d123      	bne.n	800651c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80064d4:	697b      	ldr	r3, [r7, #20]
 80064d6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064de:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80064e0:	429a      	cmp	r2, r3
 80064e2:	d11b      	bne.n	800651c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ee:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80064f0:	429a      	cmp	r2, r3
 80064f2:	d113      	bne.n	800651c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064fe:	085b      	lsrs	r3, r3, #1
 8006500:	3b01      	subs	r3, #1
 8006502:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006504:	429a      	cmp	r2, r3
 8006506:	d109      	bne.n	800651c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006512:	085b      	lsrs	r3, r3, #1
 8006514:	3b01      	subs	r3, #1
 8006516:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006518:	429a      	cmp	r2, r3
 800651a:	d067      	beq.n	80065ec <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800651c:	69bb      	ldr	r3, [r7, #24]
 800651e:	2b0c      	cmp	r3, #12
 8006520:	d062      	beq.n	80065e8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006522:	4b5f      	ldr	r3, [pc, #380]	; (80066a0 <HAL_RCC_OscConfig+0x82c>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800652a:	2b00      	cmp	r3, #0
 800652c:	d001      	beq.n	8006532 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800652e:	2301      	movs	r3, #1
 8006530:	e0bb      	b.n	80066aa <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006532:	4b5b      	ldr	r3, [pc, #364]	; (80066a0 <HAL_RCC_OscConfig+0x82c>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a5a      	ldr	r2, [pc, #360]	; (80066a0 <HAL_RCC_OscConfig+0x82c>)
 8006538:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800653c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800653e:	f7fb fc55 	bl	8001dec <HAL_GetTick>
 8006542:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006544:	e008      	b.n	8006558 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006546:	f7fb fc51 	bl	8001dec <HAL_GetTick>
 800654a:	4602      	mov	r2, r0
 800654c:	693b      	ldr	r3, [r7, #16]
 800654e:	1ad3      	subs	r3, r2, r3
 8006550:	2b02      	cmp	r3, #2
 8006552:	d901      	bls.n	8006558 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8006554:	2303      	movs	r3, #3
 8006556:	e0a8      	b.n	80066aa <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006558:	4b51      	ldr	r3, [pc, #324]	; (80066a0 <HAL_RCC_OscConfig+0x82c>)
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006560:	2b00      	cmp	r3, #0
 8006562:	d1f0      	bne.n	8006546 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006564:	4b4e      	ldr	r3, [pc, #312]	; (80066a0 <HAL_RCC_OscConfig+0x82c>)
 8006566:	68da      	ldr	r2, [r3, #12]
 8006568:	4b4e      	ldr	r3, [pc, #312]	; (80066a4 <HAL_RCC_OscConfig+0x830>)
 800656a:	4013      	ands	r3, r2
 800656c:	687a      	ldr	r2, [r7, #4]
 800656e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8006570:	687a      	ldr	r2, [r7, #4]
 8006572:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006574:	3a01      	subs	r2, #1
 8006576:	0112      	lsls	r2, r2, #4
 8006578:	4311      	orrs	r1, r2
 800657a:	687a      	ldr	r2, [r7, #4]
 800657c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800657e:	0212      	lsls	r2, r2, #8
 8006580:	4311      	orrs	r1, r2
 8006582:	687a      	ldr	r2, [r7, #4]
 8006584:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006586:	0852      	lsrs	r2, r2, #1
 8006588:	3a01      	subs	r2, #1
 800658a:	0552      	lsls	r2, r2, #21
 800658c:	4311      	orrs	r1, r2
 800658e:	687a      	ldr	r2, [r7, #4]
 8006590:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006592:	0852      	lsrs	r2, r2, #1
 8006594:	3a01      	subs	r2, #1
 8006596:	0652      	lsls	r2, r2, #25
 8006598:	4311      	orrs	r1, r2
 800659a:	687a      	ldr	r2, [r7, #4]
 800659c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800659e:	06d2      	lsls	r2, r2, #27
 80065a0:	430a      	orrs	r2, r1
 80065a2:	493f      	ldr	r1, [pc, #252]	; (80066a0 <HAL_RCC_OscConfig+0x82c>)
 80065a4:	4313      	orrs	r3, r2
 80065a6:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80065a8:	4b3d      	ldr	r3, [pc, #244]	; (80066a0 <HAL_RCC_OscConfig+0x82c>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a3c      	ldr	r2, [pc, #240]	; (80066a0 <HAL_RCC_OscConfig+0x82c>)
 80065ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80065b2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80065b4:	4b3a      	ldr	r3, [pc, #232]	; (80066a0 <HAL_RCC_OscConfig+0x82c>)
 80065b6:	68db      	ldr	r3, [r3, #12]
 80065b8:	4a39      	ldr	r2, [pc, #228]	; (80066a0 <HAL_RCC_OscConfig+0x82c>)
 80065ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80065be:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80065c0:	f7fb fc14 	bl	8001dec <HAL_GetTick>
 80065c4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80065c6:	e008      	b.n	80065da <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065c8:	f7fb fc10 	bl	8001dec <HAL_GetTick>
 80065cc:	4602      	mov	r2, r0
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	1ad3      	subs	r3, r2, r3
 80065d2:	2b02      	cmp	r3, #2
 80065d4:	d901      	bls.n	80065da <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80065d6:	2303      	movs	r3, #3
 80065d8:	e067      	b.n	80066aa <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80065da:	4b31      	ldr	r3, [pc, #196]	; (80066a0 <HAL_RCC_OscConfig+0x82c>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d0f0      	beq.n	80065c8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80065e6:	e05f      	b.n	80066a8 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80065e8:	2301      	movs	r3, #1
 80065ea:	e05e      	b.n	80066aa <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80065ec:	4b2c      	ldr	r3, [pc, #176]	; (80066a0 <HAL_RCC_OscConfig+0x82c>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d157      	bne.n	80066a8 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80065f8:	4b29      	ldr	r3, [pc, #164]	; (80066a0 <HAL_RCC_OscConfig+0x82c>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a28      	ldr	r2, [pc, #160]	; (80066a0 <HAL_RCC_OscConfig+0x82c>)
 80065fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006602:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006604:	4b26      	ldr	r3, [pc, #152]	; (80066a0 <HAL_RCC_OscConfig+0x82c>)
 8006606:	68db      	ldr	r3, [r3, #12]
 8006608:	4a25      	ldr	r2, [pc, #148]	; (80066a0 <HAL_RCC_OscConfig+0x82c>)
 800660a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800660e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006610:	f7fb fbec 	bl	8001dec <HAL_GetTick>
 8006614:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006616:	e008      	b.n	800662a <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006618:	f7fb fbe8 	bl	8001dec <HAL_GetTick>
 800661c:	4602      	mov	r2, r0
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	1ad3      	subs	r3, r2, r3
 8006622:	2b02      	cmp	r3, #2
 8006624:	d901      	bls.n	800662a <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8006626:	2303      	movs	r3, #3
 8006628:	e03f      	b.n	80066aa <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800662a:	4b1d      	ldr	r3, [pc, #116]	; (80066a0 <HAL_RCC_OscConfig+0x82c>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006632:	2b00      	cmp	r3, #0
 8006634:	d0f0      	beq.n	8006618 <HAL_RCC_OscConfig+0x7a4>
 8006636:	e037      	b.n	80066a8 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006638:	69bb      	ldr	r3, [r7, #24]
 800663a:	2b0c      	cmp	r3, #12
 800663c:	d02d      	beq.n	800669a <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800663e:	4b18      	ldr	r3, [pc, #96]	; (80066a0 <HAL_RCC_OscConfig+0x82c>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a17      	ldr	r2, [pc, #92]	; (80066a0 <HAL_RCC_OscConfig+0x82c>)
 8006644:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006648:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800664a:	4b15      	ldr	r3, [pc, #84]	; (80066a0 <HAL_RCC_OscConfig+0x82c>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006652:	2b00      	cmp	r3, #0
 8006654:	d105      	bne.n	8006662 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8006656:	4b12      	ldr	r3, [pc, #72]	; (80066a0 <HAL_RCC_OscConfig+0x82c>)
 8006658:	68db      	ldr	r3, [r3, #12]
 800665a:	4a11      	ldr	r2, [pc, #68]	; (80066a0 <HAL_RCC_OscConfig+0x82c>)
 800665c:	f023 0303 	bic.w	r3, r3, #3
 8006660:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8006662:	4b0f      	ldr	r3, [pc, #60]	; (80066a0 <HAL_RCC_OscConfig+0x82c>)
 8006664:	68db      	ldr	r3, [r3, #12]
 8006666:	4a0e      	ldr	r2, [pc, #56]	; (80066a0 <HAL_RCC_OscConfig+0x82c>)
 8006668:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800666c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006670:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006672:	f7fb fbbb 	bl	8001dec <HAL_GetTick>
 8006676:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006678:	e008      	b.n	800668c <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800667a:	f7fb fbb7 	bl	8001dec <HAL_GetTick>
 800667e:	4602      	mov	r2, r0
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	1ad3      	subs	r3, r2, r3
 8006684:	2b02      	cmp	r3, #2
 8006686:	d901      	bls.n	800668c <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8006688:	2303      	movs	r3, #3
 800668a:	e00e      	b.n	80066aa <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800668c:	4b04      	ldr	r3, [pc, #16]	; (80066a0 <HAL_RCC_OscConfig+0x82c>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006694:	2b00      	cmp	r3, #0
 8006696:	d1f0      	bne.n	800667a <HAL_RCC_OscConfig+0x806>
 8006698:	e006      	b.n	80066a8 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800669a:	2301      	movs	r3, #1
 800669c:	e005      	b.n	80066aa <HAL_RCC_OscConfig+0x836>
 800669e:	bf00      	nop
 80066a0:	40021000 	.word	0x40021000
 80066a4:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 80066a8:	2300      	movs	r3, #0
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3720      	adds	r7, #32
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}
 80066b2:	bf00      	nop

080066b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b084      	sub	sp, #16
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
 80066bc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d101      	bne.n	80066c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80066c4:	2301      	movs	r3, #1
 80066c6:	e0c8      	b.n	800685a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80066c8:	4b66      	ldr	r3, [pc, #408]	; (8006864 <HAL_RCC_ClockConfig+0x1b0>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f003 0307 	and.w	r3, r3, #7
 80066d0:	683a      	ldr	r2, [r7, #0]
 80066d2:	429a      	cmp	r2, r3
 80066d4:	d910      	bls.n	80066f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066d6:	4b63      	ldr	r3, [pc, #396]	; (8006864 <HAL_RCC_ClockConfig+0x1b0>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f023 0207 	bic.w	r2, r3, #7
 80066de:	4961      	ldr	r1, [pc, #388]	; (8006864 <HAL_RCC_ClockConfig+0x1b0>)
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	4313      	orrs	r3, r2
 80066e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80066e6:	4b5f      	ldr	r3, [pc, #380]	; (8006864 <HAL_RCC_ClockConfig+0x1b0>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f003 0307 	and.w	r3, r3, #7
 80066ee:	683a      	ldr	r2, [r7, #0]
 80066f0:	429a      	cmp	r2, r3
 80066f2:	d001      	beq.n	80066f8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80066f4:	2301      	movs	r3, #1
 80066f6:	e0b0      	b.n	800685a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f003 0301 	and.w	r3, r3, #1
 8006700:	2b00      	cmp	r3, #0
 8006702:	d04c      	beq.n	800679e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	2b03      	cmp	r3, #3
 800670a:	d107      	bne.n	800671c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800670c:	4b56      	ldr	r3, [pc, #344]	; (8006868 <HAL_RCC_ClockConfig+0x1b4>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006714:	2b00      	cmp	r3, #0
 8006716:	d121      	bne.n	800675c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8006718:	2301      	movs	r3, #1
 800671a:	e09e      	b.n	800685a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	2b02      	cmp	r3, #2
 8006722:	d107      	bne.n	8006734 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006724:	4b50      	ldr	r3, [pc, #320]	; (8006868 <HAL_RCC_ClockConfig+0x1b4>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800672c:	2b00      	cmp	r3, #0
 800672e:	d115      	bne.n	800675c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8006730:	2301      	movs	r3, #1
 8006732:	e092      	b.n	800685a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d107      	bne.n	800674c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800673c:	4b4a      	ldr	r3, [pc, #296]	; (8006868 <HAL_RCC_ClockConfig+0x1b4>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f003 0302 	and.w	r3, r3, #2
 8006744:	2b00      	cmp	r3, #0
 8006746:	d109      	bne.n	800675c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8006748:	2301      	movs	r3, #1
 800674a:	e086      	b.n	800685a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800674c:	4b46      	ldr	r3, [pc, #280]	; (8006868 <HAL_RCC_ClockConfig+0x1b4>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006754:	2b00      	cmp	r3, #0
 8006756:	d101      	bne.n	800675c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8006758:	2301      	movs	r3, #1
 800675a:	e07e      	b.n	800685a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800675c:	4b42      	ldr	r3, [pc, #264]	; (8006868 <HAL_RCC_ClockConfig+0x1b4>)
 800675e:	689b      	ldr	r3, [r3, #8]
 8006760:	f023 0203 	bic.w	r2, r3, #3
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	493f      	ldr	r1, [pc, #252]	; (8006868 <HAL_RCC_ClockConfig+0x1b4>)
 800676a:	4313      	orrs	r3, r2
 800676c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800676e:	f7fb fb3d 	bl	8001dec <HAL_GetTick>
 8006772:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006774:	e00a      	b.n	800678c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006776:	f7fb fb39 	bl	8001dec <HAL_GetTick>
 800677a:	4602      	mov	r2, r0
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	1ad3      	subs	r3, r2, r3
 8006780:	f241 3288 	movw	r2, #5000	; 0x1388
 8006784:	4293      	cmp	r3, r2
 8006786:	d901      	bls.n	800678c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8006788:	2303      	movs	r3, #3
 800678a:	e066      	b.n	800685a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800678c:	4b36      	ldr	r3, [pc, #216]	; (8006868 <HAL_RCC_ClockConfig+0x1b4>)
 800678e:	689b      	ldr	r3, [r3, #8]
 8006790:	f003 020c 	and.w	r2, r3, #12
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	685b      	ldr	r3, [r3, #4]
 8006798:	009b      	lsls	r3, r3, #2
 800679a:	429a      	cmp	r2, r3
 800679c:	d1eb      	bne.n	8006776 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f003 0302 	and.w	r3, r3, #2
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d008      	beq.n	80067bc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80067aa:	4b2f      	ldr	r3, [pc, #188]	; (8006868 <HAL_RCC_ClockConfig+0x1b4>)
 80067ac:	689b      	ldr	r3, [r3, #8]
 80067ae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	689b      	ldr	r3, [r3, #8]
 80067b6:	492c      	ldr	r1, [pc, #176]	; (8006868 <HAL_RCC_ClockConfig+0x1b4>)
 80067b8:	4313      	orrs	r3, r2
 80067ba:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80067bc:	4b29      	ldr	r3, [pc, #164]	; (8006864 <HAL_RCC_ClockConfig+0x1b0>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f003 0307 	and.w	r3, r3, #7
 80067c4:	683a      	ldr	r2, [r7, #0]
 80067c6:	429a      	cmp	r2, r3
 80067c8:	d210      	bcs.n	80067ec <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067ca:	4b26      	ldr	r3, [pc, #152]	; (8006864 <HAL_RCC_ClockConfig+0x1b0>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f023 0207 	bic.w	r2, r3, #7
 80067d2:	4924      	ldr	r1, [pc, #144]	; (8006864 <HAL_RCC_ClockConfig+0x1b0>)
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	4313      	orrs	r3, r2
 80067d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80067da:	4b22      	ldr	r3, [pc, #136]	; (8006864 <HAL_RCC_ClockConfig+0x1b0>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f003 0307 	and.w	r3, r3, #7
 80067e2:	683a      	ldr	r2, [r7, #0]
 80067e4:	429a      	cmp	r2, r3
 80067e6:	d001      	beq.n	80067ec <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80067e8:	2301      	movs	r3, #1
 80067ea:	e036      	b.n	800685a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f003 0304 	and.w	r3, r3, #4
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d008      	beq.n	800680a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80067f8:	4b1b      	ldr	r3, [pc, #108]	; (8006868 <HAL_RCC_ClockConfig+0x1b4>)
 80067fa:	689b      	ldr	r3, [r3, #8]
 80067fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	68db      	ldr	r3, [r3, #12]
 8006804:	4918      	ldr	r1, [pc, #96]	; (8006868 <HAL_RCC_ClockConfig+0x1b4>)
 8006806:	4313      	orrs	r3, r2
 8006808:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f003 0308 	and.w	r3, r3, #8
 8006812:	2b00      	cmp	r3, #0
 8006814:	d009      	beq.n	800682a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006816:	4b14      	ldr	r3, [pc, #80]	; (8006868 <HAL_RCC_ClockConfig+0x1b4>)
 8006818:	689b      	ldr	r3, [r3, #8]
 800681a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	691b      	ldr	r3, [r3, #16]
 8006822:	00db      	lsls	r3, r3, #3
 8006824:	4910      	ldr	r1, [pc, #64]	; (8006868 <HAL_RCC_ClockConfig+0x1b4>)
 8006826:	4313      	orrs	r3, r2
 8006828:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800682a:	f000 f825 	bl	8006878 <HAL_RCC_GetSysClockFreq>
 800682e:	4602      	mov	r2, r0
 8006830:	4b0d      	ldr	r3, [pc, #52]	; (8006868 <HAL_RCC_ClockConfig+0x1b4>)
 8006832:	689b      	ldr	r3, [r3, #8]
 8006834:	091b      	lsrs	r3, r3, #4
 8006836:	f003 030f 	and.w	r3, r3, #15
 800683a:	490c      	ldr	r1, [pc, #48]	; (800686c <HAL_RCC_ClockConfig+0x1b8>)
 800683c:	5ccb      	ldrb	r3, [r1, r3]
 800683e:	f003 031f 	and.w	r3, r3, #31
 8006842:	fa22 f303 	lsr.w	r3, r2, r3
 8006846:	4a0a      	ldr	r2, [pc, #40]	; (8006870 <HAL_RCC_ClockConfig+0x1bc>)
 8006848:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800684a:	4b0a      	ldr	r3, [pc, #40]	; (8006874 <HAL_RCC_ClockConfig+0x1c0>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4618      	mov	r0, r3
 8006850:	f7fb fa7c 	bl	8001d4c <HAL_InitTick>
 8006854:	4603      	mov	r3, r0
 8006856:	72fb      	strb	r3, [r7, #11]

  return status;
 8006858:	7afb      	ldrb	r3, [r7, #11]
}
 800685a:	4618      	mov	r0, r3
 800685c:	3710      	adds	r7, #16
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}
 8006862:	bf00      	nop
 8006864:	40022000 	.word	0x40022000
 8006868:	40021000 	.word	0x40021000
 800686c:	0800f7d0 	.word	0x0800f7d0
 8006870:	20000024 	.word	0x20000024
 8006874:	20000028 	.word	0x20000028

08006878 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006878:	b480      	push	{r7}
 800687a:	b089      	sub	sp, #36	; 0x24
 800687c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800687e:	2300      	movs	r3, #0
 8006880:	61fb      	str	r3, [r7, #28]
 8006882:	2300      	movs	r3, #0
 8006884:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006886:	4b3e      	ldr	r3, [pc, #248]	; (8006980 <HAL_RCC_GetSysClockFreq+0x108>)
 8006888:	689b      	ldr	r3, [r3, #8]
 800688a:	f003 030c 	and.w	r3, r3, #12
 800688e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006890:	4b3b      	ldr	r3, [pc, #236]	; (8006980 <HAL_RCC_GetSysClockFreq+0x108>)
 8006892:	68db      	ldr	r3, [r3, #12]
 8006894:	f003 0303 	and.w	r3, r3, #3
 8006898:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d005      	beq.n	80068ac <HAL_RCC_GetSysClockFreq+0x34>
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	2b0c      	cmp	r3, #12
 80068a4:	d121      	bne.n	80068ea <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	2b01      	cmp	r3, #1
 80068aa:	d11e      	bne.n	80068ea <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80068ac:	4b34      	ldr	r3, [pc, #208]	; (8006980 <HAL_RCC_GetSysClockFreq+0x108>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f003 0308 	and.w	r3, r3, #8
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d107      	bne.n	80068c8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80068b8:	4b31      	ldr	r3, [pc, #196]	; (8006980 <HAL_RCC_GetSysClockFreq+0x108>)
 80068ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80068be:	0a1b      	lsrs	r3, r3, #8
 80068c0:	f003 030f 	and.w	r3, r3, #15
 80068c4:	61fb      	str	r3, [r7, #28]
 80068c6:	e005      	b.n	80068d4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80068c8:	4b2d      	ldr	r3, [pc, #180]	; (8006980 <HAL_RCC_GetSysClockFreq+0x108>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	091b      	lsrs	r3, r3, #4
 80068ce:	f003 030f 	and.w	r3, r3, #15
 80068d2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80068d4:	4a2b      	ldr	r2, [pc, #172]	; (8006984 <HAL_RCC_GetSysClockFreq+0x10c>)
 80068d6:	69fb      	ldr	r3, [r7, #28]
 80068d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068dc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d10d      	bne.n	8006900 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80068e4:	69fb      	ldr	r3, [r7, #28]
 80068e6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80068e8:	e00a      	b.n	8006900 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	2b04      	cmp	r3, #4
 80068ee:	d102      	bne.n	80068f6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80068f0:	4b25      	ldr	r3, [pc, #148]	; (8006988 <HAL_RCC_GetSysClockFreq+0x110>)
 80068f2:	61bb      	str	r3, [r7, #24]
 80068f4:	e004      	b.n	8006900 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	2b08      	cmp	r3, #8
 80068fa:	d101      	bne.n	8006900 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80068fc:	4b23      	ldr	r3, [pc, #140]	; (800698c <HAL_RCC_GetSysClockFreq+0x114>)
 80068fe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	2b0c      	cmp	r3, #12
 8006904:	d134      	bne.n	8006970 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006906:	4b1e      	ldr	r3, [pc, #120]	; (8006980 <HAL_RCC_GetSysClockFreq+0x108>)
 8006908:	68db      	ldr	r3, [r3, #12]
 800690a:	f003 0303 	and.w	r3, r3, #3
 800690e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	2b02      	cmp	r3, #2
 8006914:	d003      	beq.n	800691e <HAL_RCC_GetSysClockFreq+0xa6>
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	2b03      	cmp	r3, #3
 800691a:	d003      	beq.n	8006924 <HAL_RCC_GetSysClockFreq+0xac>
 800691c:	e005      	b.n	800692a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800691e:	4b1a      	ldr	r3, [pc, #104]	; (8006988 <HAL_RCC_GetSysClockFreq+0x110>)
 8006920:	617b      	str	r3, [r7, #20]
      break;
 8006922:	e005      	b.n	8006930 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006924:	4b19      	ldr	r3, [pc, #100]	; (800698c <HAL_RCC_GetSysClockFreq+0x114>)
 8006926:	617b      	str	r3, [r7, #20]
      break;
 8006928:	e002      	b.n	8006930 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800692a:	69fb      	ldr	r3, [r7, #28]
 800692c:	617b      	str	r3, [r7, #20]
      break;
 800692e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006930:	4b13      	ldr	r3, [pc, #76]	; (8006980 <HAL_RCC_GetSysClockFreq+0x108>)
 8006932:	68db      	ldr	r3, [r3, #12]
 8006934:	091b      	lsrs	r3, r3, #4
 8006936:	f003 0307 	and.w	r3, r3, #7
 800693a:	3301      	adds	r3, #1
 800693c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800693e:	4b10      	ldr	r3, [pc, #64]	; (8006980 <HAL_RCC_GetSysClockFreq+0x108>)
 8006940:	68db      	ldr	r3, [r3, #12]
 8006942:	0a1b      	lsrs	r3, r3, #8
 8006944:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006948:	697a      	ldr	r2, [r7, #20]
 800694a:	fb02 f203 	mul.w	r2, r2, r3
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	fbb2 f3f3 	udiv	r3, r2, r3
 8006954:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006956:	4b0a      	ldr	r3, [pc, #40]	; (8006980 <HAL_RCC_GetSysClockFreq+0x108>)
 8006958:	68db      	ldr	r3, [r3, #12]
 800695a:	0e5b      	lsrs	r3, r3, #25
 800695c:	f003 0303 	and.w	r3, r3, #3
 8006960:	3301      	adds	r3, #1
 8006962:	005b      	lsls	r3, r3, #1
 8006964:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006966:	697a      	ldr	r2, [r7, #20]
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	fbb2 f3f3 	udiv	r3, r2, r3
 800696e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006970:	69bb      	ldr	r3, [r7, #24]
}
 8006972:	4618      	mov	r0, r3
 8006974:	3724      	adds	r7, #36	; 0x24
 8006976:	46bd      	mov	sp, r7
 8006978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697c:	4770      	bx	lr
 800697e:	bf00      	nop
 8006980:	40021000 	.word	0x40021000
 8006984:	0800f7e0 	.word	0x0800f7e0
 8006988:	00f42400 	.word	0x00f42400
 800698c:	007a1200 	.word	0x007a1200

08006990 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b086      	sub	sp, #24
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006998:	2300      	movs	r3, #0
 800699a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800699c:	4b2a      	ldr	r3, [pc, #168]	; (8006a48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800699e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d003      	beq.n	80069b0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80069a8:	f7ff f9f0 	bl	8005d8c <HAL_PWREx_GetVoltageRange>
 80069ac:	6178      	str	r0, [r7, #20]
 80069ae:	e014      	b.n	80069da <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80069b0:	4b25      	ldr	r3, [pc, #148]	; (8006a48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80069b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069b4:	4a24      	ldr	r2, [pc, #144]	; (8006a48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80069b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069ba:	6593      	str	r3, [r2, #88]	; 0x58
 80069bc:	4b22      	ldr	r3, [pc, #136]	; (8006a48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80069be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069c4:	60fb      	str	r3, [r7, #12]
 80069c6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80069c8:	f7ff f9e0 	bl	8005d8c <HAL_PWREx_GetVoltageRange>
 80069cc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80069ce:	4b1e      	ldr	r3, [pc, #120]	; (8006a48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80069d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069d2:	4a1d      	ldr	r2, [pc, #116]	; (8006a48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80069d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80069d8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069e0:	d10b      	bne.n	80069fa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2b80      	cmp	r3, #128	; 0x80
 80069e6:	d919      	bls.n	8006a1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2ba0      	cmp	r3, #160	; 0xa0
 80069ec:	d902      	bls.n	80069f4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80069ee:	2302      	movs	r3, #2
 80069f0:	613b      	str	r3, [r7, #16]
 80069f2:	e013      	b.n	8006a1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80069f4:	2301      	movs	r3, #1
 80069f6:	613b      	str	r3, [r7, #16]
 80069f8:	e010      	b.n	8006a1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2b80      	cmp	r3, #128	; 0x80
 80069fe:	d902      	bls.n	8006a06 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006a00:	2303      	movs	r3, #3
 8006a02:	613b      	str	r3, [r7, #16]
 8006a04:	e00a      	b.n	8006a1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2b80      	cmp	r3, #128	; 0x80
 8006a0a:	d102      	bne.n	8006a12 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006a0c:	2302      	movs	r3, #2
 8006a0e:	613b      	str	r3, [r7, #16]
 8006a10:	e004      	b.n	8006a1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2b70      	cmp	r3, #112	; 0x70
 8006a16:	d101      	bne.n	8006a1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006a18:	2301      	movs	r3, #1
 8006a1a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006a1c:	4b0b      	ldr	r3, [pc, #44]	; (8006a4c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f023 0207 	bic.w	r2, r3, #7
 8006a24:	4909      	ldr	r1, [pc, #36]	; (8006a4c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006a2c:	4b07      	ldr	r3, [pc, #28]	; (8006a4c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f003 0307 	and.w	r3, r3, #7
 8006a34:	693a      	ldr	r2, [r7, #16]
 8006a36:	429a      	cmp	r2, r3
 8006a38:	d001      	beq.n	8006a3e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	e000      	b.n	8006a40 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006a3e:	2300      	movs	r3, #0
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	3718      	adds	r7, #24
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}
 8006a48:	40021000 	.word	0x40021000
 8006a4c:	40022000 	.word	0x40022000

08006a50 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b086      	sub	sp, #24
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006a58:	2300      	movs	r3, #0
 8006a5a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d031      	beq.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a70:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006a74:	d01a      	beq.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8006a76:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006a7a:	d814      	bhi.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d009      	beq.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006a80:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006a84:	d10f      	bne.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8006a86:	4bac      	ldr	r3, [pc, #688]	; (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006a88:	68db      	ldr	r3, [r3, #12]
 8006a8a:	4aab      	ldr	r2, [pc, #684]	; (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006a8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a90:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006a92:	e00c      	b.n	8006aae <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	3304      	adds	r3, #4
 8006a98:	2100      	movs	r1, #0
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f000 f9dc 	bl	8006e58 <RCCEx_PLLSAI1_Config>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006aa4:	e003      	b.n	8006aae <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	74fb      	strb	r3, [r7, #19]
      break;
 8006aaa:	e000      	b.n	8006aae <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8006aac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006aae:	7cfb      	ldrb	r3, [r7, #19]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d10b      	bne.n	8006acc <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006ab4:	4ba0      	ldr	r3, [pc, #640]	; (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006aba:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ac2:	499d      	ldr	r1, [pc, #628]	; (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006ac4:	4313      	orrs	r3, r2
 8006ac6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006aca:	e001      	b.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006acc:	7cfb      	ldrb	r3, [r7, #19]
 8006ace:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	f000 8099 	beq.w	8006c10 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006ae2:	4b95      	ldr	r3, [pc, #596]	; (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d101      	bne.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8006aee:	2301      	movs	r3, #1
 8006af0:	e000      	b.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8006af2:	2300      	movs	r3, #0
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d00d      	beq.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006af8:	4b8f      	ldr	r3, [pc, #572]	; (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006afa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006afc:	4a8e      	ldr	r2, [pc, #568]	; (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006afe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b02:	6593      	str	r3, [r2, #88]	; 0x58
 8006b04:	4b8c      	ldr	r3, [pc, #560]	; (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006b06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b0c:	60bb      	str	r3, [r7, #8]
 8006b0e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006b10:	2301      	movs	r3, #1
 8006b12:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006b14:	4b89      	ldr	r3, [pc, #548]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a88      	ldr	r2, [pc, #544]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8006b1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b1e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006b20:	f7fb f964 	bl	8001dec <HAL_GetTick>
 8006b24:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006b26:	e009      	b.n	8006b3c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b28:	f7fb f960 	bl	8001dec <HAL_GetTick>
 8006b2c:	4602      	mov	r2, r0
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	1ad3      	subs	r3, r2, r3
 8006b32:	2b02      	cmp	r3, #2
 8006b34:	d902      	bls.n	8006b3c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8006b36:	2303      	movs	r3, #3
 8006b38:	74fb      	strb	r3, [r7, #19]
        break;
 8006b3a:	e005      	b.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006b3c:	4b7f      	ldr	r3, [pc, #508]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d0ef      	beq.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8006b48:	7cfb      	ldrb	r3, [r7, #19]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d155      	bne.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006b4e:	4b7a      	ldr	r3, [pc, #488]	; (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006b50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b58:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d01e      	beq.n	8006b9e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b64:	697a      	ldr	r2, [r7, #20]
 8006b66:	429a      	cmp	r2, r3
 8006b68:	d019      	beq.n	8006b9e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006b6a:	4b73      	ldr	r3, [pc, #460]	; (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006b6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b74:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006b76:	4b70      	ldr	r3, [pc, #448]	; (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006b78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b7c:	4a6e      	ldr	r2, [pc, #440]	; (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006b7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006b86:	4b6c      	ldr	r3, [pc, #432]	; (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006b88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b8c:	4a6a      	ldr	r2, [pc, #424]	; (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006b8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006b96:	4a68      	ldr	r2, [pc, #416]	; (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	f003 0301 	and.w	r3, r3, #1
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d016      	beq.n	8006bd6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ba8:	f7fb f920 	bl	8001dec <HAL_GetTick>
 8006bac:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006bae:	e00b      	b.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006bb0:	f7fb f91c 	bl	8001dec <HAL_GetTick>
 8006bb4:	4602      	mov	r2, r0
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	1ad3      	subs	r3, r2, r3
 8006bba:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d902      	bls.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8006bc2:	2303      	movs	r3, #3
 8006bc4:	74fb      	strb	r3, [r7, #19]
            break;
 8006bc6:	e006      	b.n	8006bd6 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006bc8:	4b5b      	ldr	r3, [pc, #364]	; (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bce:	f003 0302 	and.w	r3, r3, #2
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d0ec      	beq.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8006bd6:	7cfb      	ldrb	r3, [r7, #19]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d10b      	bne.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006bdc:	4b56      	ldr	r3, [pc, #344]	; (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006be2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bea:	4953      	ldr	r1, [pc, #332]	; (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006bec:	4313      	orrs	r3, r2
 8006bee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006bf2:	e004      	b.n	8006bfe <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006bf4:	7cfb      	ldrb	r3, [r7, #19]
 8006bf6:	74bb      	strb	r3, [r7, #18]
 8006bf8:	e001      	b.n	8006bfe <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bfa:	7cfb      	ldrb	r3, [r7, #19]
 8006bfc:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006bfe:	7c7b      	ldrb	r3, [r7, #17]
 8006c00:	2b01      	cmp	r3, #1
 8006c02:	d105      	bne.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c04:	4b4c      	ldr	r3, [pc, #304]	; (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006c06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c08:	4a4b      	ldr	r2, [pc, #300]	; (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006c0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c0e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f003 0301 	and.w	r3, r3, #1
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d00a      	beq.n	8006c32 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006c1c:	4b46      	ldr	r3, [pc, #280]	; (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c22:	f023 0203 	bic.w	r2, r3, #3
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6a1b      	ldr	r3, [r3, #32]
 8006c2a:	4943      	ldr	r1, [pc, #268]	; (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f003 0302 	and.w	r3, r3, #2
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d00a      	beq.n	8006c54 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006c3e:	4b3e      	ldr	r3, [pc, #248]	; (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c44:	f023 020c 	bic.w	r2, r3, #12
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c4c:	493a      	ldr	r1, [pc, #232]	; (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f003 0320 	and.w	r3, r3, #32
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d00a      	beq.n	8006c76 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006c60:	4b35      	ldr	r3, [pc, #212]	; (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c66:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c6e:	4932      	ldr	r1, [pc, #200]	; (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006c70:	4313      	orrs	r3, r2
 8006c72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d00a      	beq.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006c82:	4b2d      	ldr	r3, [pc, #180]	; (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006c84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c88:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c90:	4929      	ldr	r1, [pc, #164]	; (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006c92:	4313      	orrs	r3, r2
 8006c94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d00a      	beq.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006ca4:	4b24      	ldr	r3, [pc, #144]	; (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006caa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cb2:	4921      	ldr	r1, [pc, #132]	; (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d00a      	beq.n	8006cdc <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006cc6:	4b1c      	ldr	r3, [pc, #112]	; (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006cc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ccc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cd4:	4918      	ldr	r1, [pc, #96]	; (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d00a      	beq.n	8006cfe <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006ce8:	4b13      	ldr	r3, [pc, #76]	; (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cee:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cf6:	4910      	ldr	r1, [pc, #64]	; (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006cf8:	4313      	orrs	r3, r2
 8006cfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d02c      	beq.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006d0a:	4b0b      	ldr	r3, [pc, #44]	; (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006d0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d10:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d18:	4907      	ldr	r1, [pc, #28]	; (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d24:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006d28:	d10a      	bne.n	8006d40 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006d2a:	4b03      	ldr	r3, [pc, #12]	; (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006d2c:	68db      	ldr	r3, [r3, #12]
 8006d2e:	4a02      	ldr	r2, [pc, #8]	; (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006d30:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006d34:	60d3      	str	r3, [r2, #12]
 8006d36:	e015      	b.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8006d38:	40021000 	.word	0x40021000
 8006d3c:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d44:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006d48:	d10c      	bne.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	3304      	adds	r3, #4
 8006d4e:	2101      	movs	r1, #1
 8006d50:	4618      	mov	r0, r3
 8006d52:	f000 f881 	bl	8006e58 <RCCEx_PLLSAI1_Config>
 8006d56:	4603      	mov	r3, r0
 8006d58:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006d5a:	7cfb      	ldrb	r3, [r7, #19]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d001      	beq.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 8006d60:	7cfb      	ldrb	r3, [r7, #19]
 8006d62:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d028      	beq.n	8006dc2 <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006d70:	4b30      	ldr	r3, [pc, #192]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d76:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d7e:	492d      	ldr	r1, [pc, #180]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006d80:	4313      	orrs	r3, r2
 8006d82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d8a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006d8e:	d106      	bne.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006d90:	4b28      	ldr	r3, [pc, #160]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006d92:	68db      	ldr	r3, [r3, #12]
 8006d94:	4a27      	ldr	r2, [pc, #156]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006d96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006d9a:	60d3      	str	r3, [r2, #12]
 8006d9c:	e011      	b.n	8006dc2 <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006da2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006da6:	d10c      	bne.n	8006dc2 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	3304      	adds	r3, #4
 8006dac:	2101      	movs	r1, #1
 8006dae:	4618      	mov	r0, r3
 8006db0:	f000 f852 	bl	8006e58 <RCCEx_PLLSAI1_Config>
 8006db4:	4603      	mov	r3, r0
 8006db6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006db8:	7cfb      	ldrb	r3, [r7, #19]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d001      	beq.n	8006dc2 <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 8006dbe:	7cfb      	ldrb	r3, [r7, #19]
 8006dc0:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d01c      	beq.n	8006e08 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006dce:	4b19      	ldr	r3, [pc, #100]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006dd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dd4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ddc:	4915      	ldr	r1, [pc, #84]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006dde:	4313      	orrs	r3, r2
 8006de0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006de8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006dec:	d10c      	bne.n	8006e08 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	3304      	adds	r3, #4
 8006df2:	2102      	movs	r1, #2
 8006df4:	4618      	mov	r0, r3
 8006df6:	f000 f82f 	bl	8006e58 <RCCEx_PLLSAI1_Config>
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006dfe:	7cfb      	ldrb	r3, [r7, #19]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d001      	beq.n	8006e08 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8006e04:	7cfb      	ldrb	r3, [r7, #19]
 8006e06:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d00a      	beq.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006e14:	4b07      	ldr	r3, [pc, #28]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e1a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e22:	4904      	ldr	r1, [pc, #16]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006e24:	4313      	orrs	r3, r2
 8006e26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006e2a:	7cbb      	ldrb	r3, [r7, #18]
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	3718      	adds	r7, #24
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}
 8006e34:	40021000 	.word	0x40021000

08006e38 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8006e38:	b480      	push	{r7}
 8006e3a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8006e3c:	4b05      	ldr	r3, [pc, #20]	; (8006e54 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4a04      	ldr	r2, [pc, #16]	; (8006e54 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006e42:	f043 0304 	orr.w	r3, r3, #4
 8006e46:	6013      	str	r3, [r2, #0]
}
 8006e48:	bf00      	nop
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e50:	4770      	bx	lr
 8006e52:	bf00      	nop
 8006e54:	40021000 	.word	0x40021000

08006e58 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b084      	sub	sp, #16
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
 8006e60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006e62:	2300      	movs	r3, #0
 8006e64:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006e66:	4b74      	ldr	r3, [pc, #464]	; (8007038 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006e68:	68db      	ldr	r3, [r3, #12]
 8006e6a:	f003 0303 	and.w	r3, r3, #3
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d018      	beq.n	8006ea4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006e72:	4b71      	ldr	r3, [pc, #452]	; (8007038 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006e74:	68db      	ldr	r3, [r3, #12]
 8006e76:	f003 0203 	and.w	r2, r3, #3
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	429a      	cmp	r2, r3
 8006e80:	d10d      	bne.n	8006e9e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
       ||
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d009      	beq.n	8006e9e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006e8a:	4b6b      	ldr	r3, [pc, #428]	; (8007038 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006e8c:	68db      	ldr	r3, [r3, #12]
 8006e8e:	091b      	lsrs	r3, r3, #4
 8006e90:	f003 0307 	and.w	r3, r3, #7
 8006e94:	1c5a      	adds	r2, r3, #1
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	685b      	ldr	r3, [r3, #4]
       ||
 8006e9a:	429a      	cmp	r2, r3
 8006e9c:	d047      	beq.n	8006f2e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	73fb      	strb	r3, [r7, #15]
 8006ea2:	e044      	b.n	8006f2e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	2b03      	cmp	r3, #3
 8006eaa:	d018      	beq.n	8006ede <RCCEx_PLLSAI1_Config+0x86>
 8006eac:	2b03      	cmp	r3, #3
 8006eae:	d825      	bhi.n	8006efc <RCCEx_PLLSAI1_Config+0xa4>
 8006eb0:	2b01      	cmp	r3, #1
 8006eb2:	d002      	beq.n	8006eba <RCCEx_PLLSAI1_Config+0x62>
 8006eb4:	2b02      	cmp	r3, #2
 8006eb6:	d009      	beq.n	8006ecc <RCCEx_PLLSAI1_Config+0x74>
 8006eb8:	e020      	b.n	8006efc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006eba:	4b5f      	ldr	r3, [pc, #380]	; (8007038 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f003 0302 	and.w	r3, r3, #2
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d11d      	bne.n	8006f02 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006eca:	e01a      	b.n	8006f02 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006ecc:	4b5a      	ldr	r3, [pc, #360]	; (8007038 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d116      	bne.n	8006f06 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006ed8:	2301      	movs	r3, #1
 8006eda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006edc:	e013      	b.n	8006f06 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006ede:	4b56      	ldr	r3, [pc, #344]	; (8007038 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d10f      	bne.n	8006f0a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006eea:	4b53      	ldr	r3, [pc, #332]	; (8007038 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d109      	bne.n	8006f0a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006efa:	e006      	b.n	8006f0a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006efc:	2301      	movs	r3, #1
 8006efe:	73fb      	strb	r3, [r7, #15]
      break;
 8006f00:	e004      	b.n	8006f0c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006f02:	bf00      	nop
 8006f04:	e002      	b.n	8006f0c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006f06:	bf00      	nop
 8006f08:	e000      	b.n	8006f0c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006f0a:	bf00      	nop
    }

    if(status == HAL_OK)
 8006f0c:	7bfb      	ldrb	r3, [r7, #15]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d10d      	bne.n	8006f2e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006f12:	4b49      	ldr	r3, [pc, #292]	; (8007038 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006f14:	68db      	ldr	r3, [r3, #12]
 8006f16:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6819      	ldr	r1, [r3, #0]
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	685b      	ldr	r3, [r3, #4]
 8006f22:	3b01      	subs	r3, #1
 8006f24:	011b      	lsls	r3, r3, #4
 8006f26:	430b      	orrs	r3, r1
 8006f28:	4943      	ldr	r1, [pc, #268]	; (8007038 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006f2a:	4313      	orrs	r3, r2
 8006f2c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006f2e:	7bfb      	ldrb	r3, [r7, #15]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d17c      	bne.n	800702e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006f34:	4b40      	ldr	r3, [pc, #256]	; (8007038 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4a3f      	ldr	r2, [pc, #252]	; (8007038 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006f3a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006f3e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f40:	f7fa ff54 	bl	8001dec <HAL_GetTick>
 8006f44:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006f46:	e009      	b.n	8006f5c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006f48:	f7fa ff50 	bl	8001dec <HAL_GetTick>
 8006f4c:	4602      	mov	r2, r0
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	1ad3      	subs	r3, r2, r3
 8006f52:	2b02      	cmp	r3, #2
 8006f54:	d902      	bls.n	8006f5c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006f56:	2303      	movs	r3, #3
 8006f58:	73fb      	strb	r3, [r7, #15]
        break;
 8006f5a:	e005      	b.n	8006f68 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006f5c:	4b36      	ldr	r3, [pc, #216]	; (8007038 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d1ef      	bne.n	8006f48 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006f68:	7bfb      	ldrb	r3, [r7, #15]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d15f      	bne.n	800702e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d110      	bne.n	8006f96 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006f74:	4b30      	ldr	r3, [pc, #192]	; (8007038 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006f76:	691b      	ldr	r3, [r3, #16]
 8006f78:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8006f7c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006f80:	687a      	ldr	r2, [r7, #4]
 8006f82:	6892      	ldr	r2, [r2, #8]
 8006f84:	0211      	lsls	r1, r2, #8
 8006f86:	687a      	ldr	r2, [r7, #4]
 8006f88:	68d2      	ldr	r2, [r2, #12]
 8006f8a:	06d2      	lsls	r2, r2, #27
 8006f8c:	430a      	orrs	r2, r1
 8006f8e:	492a      	ldr	r1, [pc, #168]	; (8007038 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006f90:	4313      	orrs	r3, r2
 8006f92:	610b      	str	r3, [r1, #16]
 8006f94:	e027      	b.n	8006fe6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	2b01      	cmp	r3, #1
 8006f9a:	d112      	bne.n	8006fc2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006f9c:	4b26      	ldr	r3, [pc, #152]	; (8007038 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006f9e:	691b      	ldr	r3, [r3, #16]
 8006fa0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006fa4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006fa8:	687a      	ldr	r2, [r7, #4]
 8006faa:	6892      	ldr	r2, [r2, #8]
 8006fac:	0211      	lsls	r1, r2, #8
 8006fae:	687a      	ldr	r2, [r7, #4]
 8006fb0:	6912      	ldr	r2, [r2, #16]
 8006fb2:	0852      	lsrs	r2, r2, #1
 8006fb4:	3a01      	subs	r2, #1
 8006fb6:	0552      	lsls	r2, r2, #21
 8006fb8:	430a      	orrs	r2, r1
 8006fba:	491f      	ldr	r1, [pc, #124]	; (8007038 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006fbc:	4313      	orrs	r3, r2
 8006fbe:	610b      	str	r3, [r1, #16]
 8006fc0:	e011      	b.n	8006fe6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006fc2:	4b1d      	ldr	r3, [pc, #116]	; (8007038 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006fc4:	691b      	ldr	r3, [r3, #16]
 8006fc6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006fca:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006fce:	687a      	ldr	r2, [r7, #4]
 8006fd0:	6892      	ldr	r2, [r2, #8]
 8006fd2:	0211      	lsls	r1, r2, #8
 8006fd4:	687a      	ldr	r2, [r7, #4]
 8006fd6:	6952      	ldr	r2, [r2, #20]
 8006fd8:	0852      	lsrs	r2, r2, #1
 8006fda:	3a01      	subs	r2, #1
 8006fdc:	0652      	lsls	r2, r2, #25
 8006fde:	430a      	orrs	r2, r1
 8006fe0:	4915      	ldr	r1, [pc, #84]	; (8007038 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006fe6:	4b14      	ldr	r3, [pc, #80]	; (8007038 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a13      	ldr	r2, [pc, #76]	; (8007038 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006fec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006ff0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ff2:	f7fa fefb 	bl	8001dec <HAL_GetTick>
 8006ff6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006ff8:	e009      	b.n	800700e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006ffa:	f7fa fef7 	bl	8001dec <HAL_GetTick>
 8006ffe:	4602      	mov	r2, r0
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	1ad3      	subs	r3, r2, r3
 8007004:	2b02      	cmp	r3, #2
 8007006:	d902      	bls.n	800700e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8007008:	2303      	movs	r3, #3
 800700a:	73fb      	strb	r3, [r7, #15]
          break;
 800700c:	e005      	b.n	800701a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800700e:	4b0a      	ldr	r3, [pc, #40]	; (8007038 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007016:	2b00      	cmp	r3, #0
 8007018:	d0ef      	beq.n	8006ffa <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800701a:	7bfb      	ldrb	r3, [r7, #15]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d106      	bne.n	800702e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007020:	4b05      	ldr	r3, [pc, #20]	; (8007038 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007022:	691a      	ldr	r2, [r3, #16]
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	699b      	ldr	r3, [r3, #24]
 8007028:	4903      	ldr	r1, [pc, #12]	; (8007038 <RCCEx_PLLSAI1_Config+0x1e0>)
 800702a:	4313      	orrs	r3, r2
 800702c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800702e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007030:	4618      	mov	r0, r3
 8007032:	3710      	adds	r7, #16
 8007034:	46bd      	mov	sp, r7
 8007036:	bd80      	pop	{r7, pc}
 8007038:	40021000 	.word	0x40021000

0800703c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b082      	sub	sp, #8
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d101      	bne.n	800704e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800704a:	2301      	movs	r3, #1
 800704c:	e049      	b.n	80070e2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007054:	b2db      	uxtb	r3, r3
 8007056:	2b00      	cmp	r3, #0
 8007058:	d106      	bne.n	8007068 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2200      	movs	r2, #0
 800705e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f7fa fdf6 	bl	8001c54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2202      	movs	r2, #2
 800706c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681a      	ldr	r2, [r3, #0]
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	3304      	adds	r3, #4
 8007078:	4619      	mov	r1, r3
 800707a:	4610      	mov	r0, r2
 800707c:	f000 fae4 	bl	8007648 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2201      	movs	r2, #1
 8007084:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2201      	movs	r2, #1
 800708c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2201      	movs	r2, #1
 8007094:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2201      	movs	r2, #1
 800709c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2201      	movs	r2, #1
 80070a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2201      	movs	r2, #1
 80070ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2201      	movs	r2, #1
 80070b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2201      	movs	r2, #1
 80070bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2201      	movs	r2, #1
 80070c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2201      	movs	r2, #1
 80070cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2201      	movs	r2, #1
 80070d4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2201      	movs	r2, #1
 80070dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80070e0:	2300      	movs	r3, #0
}
 80070e2:	4618      	mov	r0, r3
 80070e4:	3708      	adds	r7, #8
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd80      	pop	{r7, pc}
	...

080070ec <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80070ec:	b480      	push	{r7}
 80070ee:	b085      	sub	sp, #20
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070fa:	b2db      	uxtb	r3, r3
 80070fc:	2b01      	cmp	r3, #1
 80070fe:	d001      	beq.n	8007104 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007100:	2301      	movs	r3, #1
 8007102:	e033      	b.n	800716c <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2202      	movs	r2, #2
 8007108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a19      	ldr	r2, [pc, #100]	; (8007178 <HAL_TIM_Base_Start+0x8c>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d009      	beq.n	800712a <HAL_TIM_Base_Start+0x3e>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800711e:	d004      	beq.n	800712a <HAL_TIM_Base_Start+0x3e>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4a15      	ldr	r2, [pc, #84]	; (800717c <HAL_TIM_Base_Start+0x90>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d115      	bne.n	8007156 <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	689a      	ldr	r2, [r3, #8]
 8007130:	4b13      	ldr	r3, [pc, #76]	; (8007180 <HAL_TIM_Base_Start+0x94>)
 8007132:	4013      	ands	r3, r2
 8007134:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	2b06      	cmp	r3, #6
 800713a:	d015      	beq.n	8007168 <HAL_TIM_Base_Start+0x7c>
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007142:	d011      	beq.n	8007168 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	681a      	ldr	r2, [r3, #0]
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f042 0201 	orr.w	r2, r2, #1
 8007152:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007154:	e008      	b.n	8007168 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	681a      	ldr	r2, [r3, #0]
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f042 0201 	orr.w	r2, r2, #1
 8007164:	601a      	str	r2, [r3, #0]
 8007166:	e000      	b.n	800716a <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007168:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800716a:	2300      	movs	r3, #0
}
 800716c:	4618      	mov	r0, r3
 800716e:	3714      	adds	r7, #20
 8007170:	46bd      	mov	sp, r7
 8007172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007176:	4770      	bx	lr
 8007178:	40012c00 	.word	0x40012c00
 800717c:	40014000 	.word	0x40014000
 8007180:	00010007 	.word	0x00010007

08007184 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007184:	b480      	push	{r7}
 8007186:	b085      	sub	sp, #20
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007192:	b2db      	uxtb	r3, r3
 8007194:	2b01      	cmp	r3, #1
 8007196:	d001      	beq.n	800719c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007198:	2301      	movs	r3, #1
 800719a:	e03b      	b.n	8007214 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2202      	movs	r2, #2
 80071a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	68da      	ldr	r2, [r3, #12]
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f042 0201 	orr.w	r2, r2, #1
 80071b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4a19      	ldr	r2, [pc, #100]	; (8007220 <HAL_TIM_Base_Start_IT+0x9c>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d009      	beq.n	80071d2 <HAL_TIM_Base_Start_IT+0x4e>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071c6:	d004      	beq.n	80071d2 <HAL_TIM_Base_Start_IT+0x4e>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4a15      	ldr	r2, [pc, #84]	; (8007224 <HAL_TIM_Base_Start_IT+0xa0>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d115      	bne.n	80071fe <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	689a      	ldr	r2, [r3, #8]
 80071d8:	4b13      	ldr	r3, [pc, #76]	; (8007228 <HAL_TIM_Base_Start_IT+0xa4>)
 80071da:	4013      	ands	r3, r2
 80071dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	2b06      	cmp	r3, #6
 80071e2:	d015      	beq.n	8007210 <HAL_TIM_Base_Start_IT+0x8c>
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071ea:	d011      	beq.n	8007210 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	681a      	ldr	r2, [r3, #0]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f042 0201 	orr.w	r2, r2, #1
 80071fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071fc:	e008      	b.n	8007210 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	681a      	ldr	r2, [r3, #0]
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f042 0201 	orr.w	r2, r2, #1
 800720c:	601a      	str	r2, [r3, #0]
 800720e:	e000      	b.n	8007212 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007210:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007212:	2300      	movs	r3, #0
}
 8007214:	4618      	mov	r0, r3
 8007216:	3714      	adds	r7, #20
 8007218:	46bd      	mov	sp, r7
 800721a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721e:	4770      	bx	lr
 8007220:	40012c00 	.word	0x40012c00
 8007224:	40014000 	.word	0x40014000
 8007228:	00010007 	.word	0x00010007

0800722c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b082      	sub	sp, #8
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	691b      	ldr	r3, [r3, #16]
 800723a:	f003 0302 	and.w	r3, r3, #2
 800723e:	2b02      	cmp	r3, #2
 8007240:	d122      	bne.n	8007288 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	68db      	ldr	r3, [r3, #12]
 8007248:	f003 0302 	and.w	r3, r3, #2
 800724c:	2b02      	cmp	r3, #2
 800724e:	d11b      	bne.n	8007288 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f06f 0202 	mvn.w	r2, #2
 8007258:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2201      	movs	r2, #1
 800725e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	699b      	ldr	r3, [r3, #24]
 8007266:	f003 0303 	and.w	r3, r3, #3
 800726a:	2b00      	cmp	r3, #0
 800726c:	d003      	beq.n	8007276 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f000 f9cb 	bl	800760a <HAL_TIM_IC_CaptureCallback>
 8007274:	e005      	b.n	8007282 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f000 f9bd 	bl	80075f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	f000 f9ce 	bl	800761e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2200      	movs	r2, #0
 8007286:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	691b      	ldr	r3, [r3, #16]
 800728e:	f003 0304 	and.w	r3, r3, #4
 8007292:	2b04      	cmp	r3, #4
 8007294:	d122      	bne.n	80072dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	68db      	ldr	r3, [r3, #12]
 800729c:	f003 0304 	and.w	r3, r3, #4
 80072a0:	2b04      	cmp	r3, #4
 80072a2:	d11b      	bne.n	80072dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f06f 0204 	mvn.w	r2, #4
 80072ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2202      	movs	r2, #2
 80072b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	699b      	ldr	r3, [r3, #24]
 80072ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d003      	beq.n	80072ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f000 f9a1 	bl	800760a <HAL_TIM_IC_CaptureCallback>
 80072c8:	e005      	b.n	80072d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f000 f993 	bl	80075f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f000 f9a4 	bl	800761e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2200      	movs	r2, #0
 80072da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	691b      	ldr	r3, [r3, #16]
 80072e2:	f003 0308 	and.w	r3, r3, #8
 80072e6:	2b08      	cmp	r3, #8
 80072e8:	d122      	bne.n	8007330 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	68db      	ldr	r3, [r3, #12]
 80072f0:	f003 0308 	and.w	r3, r3, #8
 80072f4:	2b08      	cmp	r3, #8
 80072f6:	d11b      	bne.n	8007330 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f06f 0208 	mvn.w	r2, #8
 8007300:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2204      	movs	r2, #4
 8007306:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	69db      	ldr	r3, [r3, #28]
 800730e:	f003 0303 	and.w	r3, r3, #3
 8007312:	2b00      	cmp	r3, #0
 8007314:	d003      	beq.n	800731e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f000 f977 	bl	800760a <HAL_TIM_IC_CaptureCallback>
 800731c:	e005      	b.n	800732a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f000 f969 	bl	80075f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f000 f97a 	bl	800761e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2200      	movs	r2, #0
 800732e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	691b      	ldr	r3, [r3, #16]
 8007336:	f003 0310 	and.w	r3, r3, #16
 800733a:	2b10      	cmp	r3, #16
 800733c:	d122      	bne.n	8007384 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	68db      	ldr	r3, [r3, #12]
 8007344:	f003 0310 	and.w	r3, r3, #16
 8007348:	2b10      	cmp	r3, #16
 800734a:	d11b      	bne.n	8007384 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f06f 0210 	mvn.w	r2, #16
 8007354:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2208      	movs	r2, #8
 800735a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	69db      	ldr	r3, [r3, #28]
 8007362:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007366:	2b00      	cmp	r3, #0
 8007368:	d003      	beq.n	8007372 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f000 f94d 	bl	800760a <HAL_TIM_IC_CaptureCallback>
 8007370:	e005      	b.n	800737e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f000 f93f 	bl	80075f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	f000 f950 	bl	800761e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2200      	movs	r2, #0
 8007382:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	691b      	ldr	r3, [r3, #16]
 800738a:	f003 0301 	and.w	r3, r3, #1
 800738e:	2b01      	cmp	r3, #1
 8007390:	d10e      	bne.n	80073b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	68db      	ldr	r3, [r3, #12]
 8007398:	f003 0301 	and.w	r3, r3, #1
 800739c:	2b01      	cmp	r3, #1
 800739e:	d107      	bne.n	80073b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f06f 0201 	mvn.w	r2, #1
 80073a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f7fa f808 	bl	80013c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	691b      	ldr	r3, [r3, #16]
 80073b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073ba:	2b80      	cmp	r3, #128	; 0x80
 80073bc:	d10e      	bne.n	80073dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	68db      	ldr	r3, [r3, #12]
 80073c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073c8:	2b80      	cmp	r3, #128	; 0x80
 80073ca:	d107      	bne.n	80073dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80073d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f000 faa4 	bl	8007924 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	691b      	ldr	r3, [r3, #16]
 80073e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073ea:	d10e      	bne.n	800740a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	68db      	ldr	r3, [r3, #12]
 80073f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073f6:	2b80      	cmp	r3, #128	; 0x80
 80073f8:	d107      	bne.n	800740a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007402:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	f000 fa97 	bl	8007938 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	691b      	ldr	r3, [r3, #16]
 8007410:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007414:	2b40      	cmp	r3, #64	; 0x40
 8007416:	d10e      	bne.n	8007436 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	68db      	ldr	r3, [r3, #12]
 800741e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007422:	2b40      	cmp	r3, #64	; 0x40
 8007424:	d107      	bne.n	8007436 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800742e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f000 f8fe 	bl	8007632 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	691b      	ldr	r3, [r3, #16]
 800743c:	f003 0320 	and.w	r3, r3, #32
 8007440:	2b20      	cmp	r3, #32
 8007442:	d10e      	bne.n	8007462 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	68db      	ldr	r3, [r3, #12]
 800744a:	f003 0320 	and.w	r3, r3, #32
 800744e:	2b20      	cmp	r3, #32
 8007450:	d107      	bne.n	8007462 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f06f 0220 	mvn.w	r2, #32
 800745a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f000 fa57 	bl	8007910 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007462:	bf00      	nop
 8007464:	3708      	adds	r7, #8
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}

0800746a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800746a:	b580      	push	{r7, lr}
 800746c:	b084      	sub	sp, #16
 800746e:	af00      	add	r7, sp, #0
 8007470:	6078      	str	r0, [r7, #4]
 8007472:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800747a:	2b01      	cmp	r3, #1
 800747c:	d101      	bne.n	8007482 <HAL_TIM_ConfigClockSource+0x18>
 800747e:	2302      	movs	r3, #2
 8007480:	e0b5      	b.n	80075ee <HAL_TIM_ConfigClockSource+0x184>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2201      	movs	r2, #1
 8007486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2202      	movs	r2, #2
 800748e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	689b      	ldr	r3, [r3, #8]
 8007498:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80074a0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80074a4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80074ac:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	68fa      	ldr	r2, [r7, #12]
 80074b4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074be:	d03e      	beq.n	800753e <HAL_TIM_ConfigClockSource+0xd4>
 80074c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074c4:	f200 8087 	bhi.w	80075d6 <HAL_TIM_ConfigClockSource+0x16c>
 80074c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074cc:	f000 8085 	beq.w	80075da <HAL_TIM_ConfigClockSource+0x170>
 80074d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074d4:	d87f      	bhi.n	80075d6 <HAL_TIM_ConfigClockSource+0x16c>
 80074d6:	2b70      	cmp	r3, #112	; 0x70
 80074d8:	d01a      	beq.n	8007510 <HAL_TIM_ConfigClockSource+0xa6>
 80074da:	2b70      	cmp	r3, #112	; 0x70
 80074dc:	d87b      	bhi.n	80075d6 <HAL_TIM_ConfigClockSource+0x16c>
 80074de:	2b60      	cmp	r3, #96	; 0x60
 80074e0:	d050      	beq.n	8007584 <HAL_TIM_ConfigClockSource+0x11a>
 80074e2:	2b60      	cmp	r3, #96	; 0x60
 80074e4:	d877      	bhi.n	80075d6 <HAL_TIM_ConfigClockSource+0x16c>
 80074e6:	2b50      	cmp	r3, #80	; 0x50
 80074e8:	d03c      	beq.n	8007564 <HAL_TIM_ConfigClockSource+0xfa>
 80074ea:	2b50      	cmp	r3, #80	; 0x50
 80074ec:	d873      	bhi.n	80075d6 <HAL_TIM_ConfigClockSource+0x16c>
 80074ee:	2b40      	cmp	r3, #64	; 0x40
 80074f0:	d058      	beq.n	80075a4 <HAL_TIM_ConfigClockSource+0x13a>
 80074f2:	2b40      	cmp	r3, #64	; 0x40
 80074f4:	d86f      	bhi.n	80075d6 <HAL_TIM_ConfigClockSource+0x16c>
 80074f6:	2b30      	cmp	r3, #48	; 0x30
 80074f8:	d064      	beq.n	80075c4 <HAL_TIM_ConfigClockSource+0x15a>
 80074fa:	2b30      	cmp	r3, #48	; 0x30
 80074fc:	d86b      	bhi.n	80075d6 <HAL_TIM_ConfigClockSource+0x16c>
 80074fe:	2b20      	cmp	r3, #32
 8007500:	d060      	beq.n	80075c4 <HAL_TIM_ConfigClockSource+0x15a>
 8007502:	2b20      	cmp	r3, #32
 8007504:	d867      	bhi.n	80075d6 <HAL_TIM_ConfigClockSource+0x16c>
 8007506:	2b00      	cmp	r3, #0
 8007508:	d05c      	beq.n	80075c4 <HAL_TIM_ConfigClockSource+0x15a>
 800750a:	2b10      	cmp	r3, #16
 800750c:	d05a      	beq.n	80075c4 <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800750e:	e062      	b.n	80075d6 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6818      	ldr	r0, [r3, #0]
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	6899      	ldr	r1, [r3, #8]
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	685a      	ldr	r2, [r3, #4]
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	68db      	ldr	r3, [r3, #12]
 8007520:	f000 f970 	bl	8007804 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	689b      	ldr	r3, [r3, #8]
 800752a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007532:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	68fa      	ldr	r2, [r7, #12]
 800753a:	609a      	str	r2, [r3, #8]
      break;
 800753c:	e04e      	b.n	80075dc <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6818      	ldr	r0, [r3, #0]
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	6899      	ldr	r1, [r3, #8]
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	685a      	ldr	r2, [r3, #4]
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	68db      	ldr	r3, [r3, #12]
 800754e:	f000 f959 	bl	8007804 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	689a      	ldr	r2, [r3, #8]
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007560:	609a      	str	r2, [r3, #8]
      break;
 8007562:	e03b      	b.n	80075dc <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6818      	ldr	r0, [r3, #0]
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	6859      	ldr	r1, [r3, #4]
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	68db      	ldr	r3, [r3, #12]
 8007570:	461a      	mov	r2, r3
 8007572:	f000 f8cd 	bl	8007710 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	2150      	movs	r1, #80	; 0x50
 800757c:	4618      	mov	r0, r3
 800757e:	f000 f926 	bl	80077ce <TIM_ITRx_SetConfig>
      break;
 8007582:	e02b      	b.n	80075dc <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6818      	ldr	r0, [r3, #0]
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	6859      	ldr	r1, [r3, #4]
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	68db      	ldr	r3, [r3, #12]
 8007590:	461a      	mov	r2, r3
 8007592:	f000 f8ec 	bl	800776e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	2160      	movs	r1, #96	; 0x60
 800759c:	4618      	mov	r0, r3
 800759e:	f000 f916 	bl	80077ce <TIM_ITRx_SetConfig>
      break;
 80075a2:	e01b      	b.n	80075dc <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6818      	ldr	r0, [r3, #0]
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	6859      	ldr	r1, [r3, #4]
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	68db      	ldr	r3, [r3, #12]
 80075b0:	461a      	mov	r2, r3
 80075b2:	f000 f8ad 	bl	8007710 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	2140      	movs	r1, #64	; 0x40
 80075bc:	4618      	mov	r0, r3
 80075be:	f000 f906 	bl	80077ce <TIM_ITRx_SetConfig>
      break;
 80075c2:	e00b      	b.n	80075dc <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681a      	ldr	r2, [r3, #0]
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	4619      	mov	r1, r3
 80075ce:	4610      	mov	r0, r2
 80075d0:	f000 f8fd 	bl	80077ce <TIM_ITRx_SetConfig>
        break;
 80075d4:	e002      	b.n	80075dc <HAL_TIM_ConfigClockSource+0x172>
      break;
 80075d6:	bf00      	nop
 80075d8:	e000      	b.n	80075dc <HAL_TIM_ConfigClockSource+0x172>
      break;
 80075da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2201      	movs	r2, #1
 80075e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2200      	movs	r2, #0
 80075e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80075ec:	2300      	movs	r3, #0
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	3710      	adds	r7, #16
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}

080075f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80075f6:	b480      	push	{r7}
 80075f8:	b083      	sub	sp, #12
 80075fa:	af00      	add	r7, sp, #0
 80075fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80075fe:	bf00      	nop
 8007600:	370c      	adds	r7, #12
 8007602:	46bd      	mov	sp, r7
 8007604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007608:	4770      	bx	lr

0800760a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800760a:	b480      	push	{r7}
 800760c:	b083      	sub	sp, #12
 800760e:	af00      	add	r7, sp, #0
 8007610:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007612:	bf00      	nop
 8007614:	370c      	adds	r7, #12
 8007616:	46bd      	mov	sp, r7
 8007618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761c:	4770      	bx	lr

0800761e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800761e:	b480      	push	{r7}
 8007620:	b083      	sub	sp, #12
 8007622:	af00      	add	r7, sp, #0
 8007624:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007626:	bf00      	nop
 8007628:	370c      	adds	r7, #12
 800762a:	46bd      	mov	sp, r7
 800762c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007630:	4770      	bx	lr

08007632 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007632:	b480      	push	{r7}
 8007634:	b083      	sub	sp, #12
 8007636:	af00      	add	r7, sp, #0
 8007638:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800763a:	bf00      	nop
 800763c:	370c      	adds	r7, #12
 800763e:	46bd      	mov	sp, r7
 8007640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007644:	4770      	bx	lr
	...

08007648 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007648:	b480      	push	{r7}
 800764a:	b085      	sub	sp, #20
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
 8007650:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	4a2a      	ldr	r2, [pc, #168]	; (8007704 <TIM_Base_SetConfig+0xbc>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d003      	beq.n	8007668 <TIM_Base_SetConfig+0x20>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007666:	d108      	bne.n	800767a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800766e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	685b      	ldr	r3, [r3, #4]
 8007674:	68fa      	ldr	r2, [r7, #12]
 8007676:	4313      	orrs	r3, r2
 8007678:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	4a21      	ldr	r2, [pc, #132]	; (8007704 <TIM_Base_SetConfig+0xbc>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d00b      	beq.n	800769a <TIM_Base_SetConfig+0x52>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007688:	d007      	beq.n	800769a <TIM_Base_SetConfig+0x52>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	4a1e      	ldr	r2, [pc, #120]	; (8007708 <TIM_Base_SetConfig+0xc0>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d003      	beq.n	800769a <TIM_Base_SetConfig+0x52>
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	4a1d      	ldr	r2, [pc, #116]	; (800770c <TIM_Base_SetConfig+0xc4>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d108      	bne.n	80076ac <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80076a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	68db      	ldr	r3, [r3, #12]
 80076a6:	68fa      	ldr	r2, [r7, #12]
 80076a8:	4313      	orrs	r3, r2
 80076aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	695b      	ldr	r3, [r3, #20]
 80076b6:	4313      	orrs	r3, r2
 80076b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	68fa      	ldr	r2, [r7, #12]
 80076be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	689a      	ldr	r2, [r3, #8]
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	681a      	ldr	r2, [r3, #0]
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	4a0c      	ldr	r2, [pc, #48]	; (8007704 <TIM_Base_SetConfig+0xbc>)
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d007      	beq.n	80076e8 <TIM_Base_SetConfig+0xa0>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	4a0b      	ldr	r2, [pc, #44]	; (8007708 <TIM_Base_SetConfig+0xc0>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d003      	beq.n	80076e8 <TIM_Base_SetConfig+0xa0>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	4a0a      	ldr	r2, [pc, #40]	; (800770c <TIM_Base_SetConfig+0xc4>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d103      	bne.n	80076f0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	691a      	ldr	r2, [r3, #16]
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2201      	movs	r2, #1
 80076f4:	615a      	str	r2, [r3, #20]
}
 80076f6:	bf00      	nop
 80076f8:	3714      	adds	r7, #20
 80076fa:	46bd      	mov	sp, r7
 80076fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007700:	4770      	bx	lr
 8007702:	bf00      	nop
 8007704:	40012c00 	.word	0x40012c00
 8007708:	40014000 	.word	0x40014000
 800770c:	40014400 	.word	0x40014400

08007710 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007710:	b480      	push	{r7}
 8007712:	b087      	sub	sp, #28
 8007714:	af00      	add	r7, sp, #0
 8007716:	60f8      	str	r0, [r7, #12]
 8007718:	60b9      	str	r1, [r7, #8]
 800771a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	6a1b      	ldr	r3, [r3, #32]
 8007720:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	6a1b      	ldr	r3, [r3, #32]
 8007726:	f023 0201 	bic.w	r2, r3, #1
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	699b      	ldr	r3, [r3, #24]
 8007732:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007734:	693b      	ldr	r3, [r7, #16]
 8007736:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800773a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	011b      	lsls	r3, r3, #4
 8007740:	693a      	ldr	r2, [r7, #16]
 8007742:	4313      	orrs	r3, r2
 8007744:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007746:	697b      	ldr	r3, [r7, #20]
 8007748:	f023 030a 	bic.w	r3, r3, #10
 800774c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800774e:	697a      	ldr	r2, [r7, #20]
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	4313      	orrs	r3, r2
 8007754:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	693a      	ldr	r2, [r7, #16]
 800775a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	697a      	ldr	r2, [r7, #20]
 8007760:	621a      	str	r2, [r3, #32]
}
 8007762:	bf00      	nop
 8007764:	371c      	adds	r7, #28
 8007766:	46bd      	mov	sp, r7
 8007768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776c:	4770      	bx	lr

0800776e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800776e:	b480      	push	{r7}
 8007770:	b087      	sub	sp, #28
 8007772:	af00      	add	r7, sp, #0
 8007774:	60f8      	str	r0, [r7, #12]
 8007776:	60b9      	str	r1, [r7, #8]
 8007778:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	6a1b      	ldr	r3, [r3, #32]
 800777e:	f023 0210 	bic.w	r2, r3, #16
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	699b      	ldr	r3, [r3, #24]
 800778a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	6a1b      	ldr	r3, [r3, #32]
 8007790:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007792:	697b      	ldr	r3, [r7, #20]
 8007794:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007798:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	031b      	lsls	r3, r3, #12
 800779e:	697a      	ldr	r2, [r7, #20]
 80077a0:	4313      	orrs	r3, r2
 80077a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80077a4:	693b      	ldr	r3, [r7, #16]
 80077a6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80077aa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	011b      	lsls	r3, r3, #4
 80077b0:	693a      	ldr	r2, [r7, #16]
 80077b2:	4313      	orrs	r3, r2
 80077b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	697a      	ldr	r2, [r7, #20]
 80077ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	693a      	ldr	r2, [r7, #16]
 80077c0:	621a      	str	r2, [r3, #32]
}
 80077c2:	bf00      	nop
 80077c4:	371c      	adds	r7, #28
 80077c6:	46bd      	mov	sp, r7
 80077c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077cc:	4770      	bx	lr

080077ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80077ce:	b480      	push	{r7}
 80077d0:	b085      	sub	sp, #20
 80077d2:	af00      	add	r7, sp, #0
 80077d4:	6078      	str	r0, [r7, #4]
 80077d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	689b      	ldr	r3, [r3, #8]
 80077dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80077e6:	683a      	ldr	r2, [r7, #0]
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	4313      	orrs	r3, r2
 80077ec:	f043 0307 	orr.w	r3, r3, #7
 80077f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	68fa      	ldr	r2, [r7, #12]
 80077f6:	609a      	str	r2, [r3, #8]
}
 80077f8:	bf00      	nop
 80077fa:	3714      	adds	r7, #20
 80077fc:	46bd      	mov	sp, r7
 80077fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007802:	4770      	bx	lr

08007804 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007804:	b480      	push	{r7}
 8007806:	b087      	sub	sp, #28
 8007808:	af00      	add	r7, sp, #0
 800780a:	60f8      	str	r0, [r7, #12]
 800780c:	60b9      	str	r1, [r7, #8]
 800780e:	607a      	str	r2, [r7, #4]
 8007810:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	689b      	ldr	r3, [r3, #8]
 8007816:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007818:	697b      	ldr	r3, [r7, #20]
 800781a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800781e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	021a      	lsls	r2, r3, #8
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	431a      	orrs	r2, r3
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	4313      	orrs	r3, r2
 800782c:	697a      	ldr	r2, [r7, #20]
 800782e:	4313      	orrs	r3, r2
 8007830:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	697a      	ldr	r2, [r7, #20]
 8007836:	609a      	str	r2, [r3, #8]
}
 8007838:	bf00      	nop
 800783a:	371c      	adds	r7, #28
 800783c:	46bd      	mov	sp, r7
 800783e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007842:	4770      	bx	lr

08007844 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007844:	b480      	push	{r7}
 8007846:	b085      	sub	sp, #20
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
 800784c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007854:	2b01      	cmp	r3, #1
 8007856:	d101      	bne.n	800785c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007858:	2302      	movs	r3, #2
 800785a:	e04f      	b.n	80078fc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2201      	movs	r2, #1
 8007860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2202      	movs	r2, #2
 8007868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	685b      	ldr	r3, [r3, #4]
 8007872:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	689b      	ldr	r3, [r3, #8]
 800787a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	4a21      	ldr	r2, [pc, #132]	; (8007908 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007882:	4293      	cmp	r3, r2
 8007884:	d108      	bne.n	8007898 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800788c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	685b      	ldr	r3, [r3, #4]
 8007892:	68fa      	ldr	r2, [r7, #12]
 8007894:	4313      	orrs	r3, r2
 8007896:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800789e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	68fa      	ldr	r2, [r7, #12]
 80078a6:	4313      	orrs	r3, r2
 80078a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	68fa      	ldr	r2, [r7, #12]
 80078b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	4a14      	ldr	r2, [pc, #80]	; (8007908 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80078b8:	4293      	cmp	r3, r2
 80078ba:	d009      	beq.n	80078d0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078c4:	d004      	beq.n	80078d0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	4a10      	ldr	r2, [pc, #64]	; (800790c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d10c      	bne.n	80078ea <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80078d6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	689b      	ldr	r3, [r3, #8]
 80078dc:	68ba      	ldr	r2, [r7, #8]
 80078de:	4313      	orrs	r3, r2
 80078e0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	68ba      	ldr	r2, [r7, #8]
 80078e8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2201      	movs	r2, #1
 80078ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2200      	movs	r2, #0
 80078f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80078fa:	2300      	movs	r3, #0
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	3714      	adds	r7, #20
 8007900:	46bd      	mov	sp, r7
 8007902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007906:	4770      	bx	lr
 8007908:	40012c00 	.word	0x40012c00
 800790c:	40014000 	.word	0x40014000

08007910 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007910:	b480      	push	{r7}
 8007912:	b083      	sub	sp, #12
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007918:	bf00      	nop
 800791a:	370c      	adds	r7, #12
 800791c:	46bd      	mov	sp, r7
 800791e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007922:	4770      	bx	lr

08007924 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007924:	b480      	push	{r7}
 8007926:	b083      	sub	sp, #12
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800792c:	bf00      	nop
 800792e:	370c      	adds	r7, #12
 8007930:	46bd      	mov	sp, r7
 8007932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007936:	4770      	bx	lr

08007938 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007938:	b480      	push	{r7}
 800793a:	b083      	sub	sp, #12
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007940:	bf00      	nop
 8007942:	370c      	adds	r7, #12
 8007944:	46bd      	mov	sp, r7
 8007946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794a:	4770      	bx	lr

0800794c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800794c:	b084      	sub	sp, #16
 800794e:	b480      	push	{r7}
 8007950:	b083      	sub	sp, #12
 8007952:	af00      	add	r7, sp, #0
 8007954:	6078      	str	r0, [r7, #4]
 8007956:	f107 0014 	add.w	r0, r7, #20
 800795a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800795e:	2300      	movs	r3, #0
}
 8007960:	4618      	mov	r0, r3
 8007962:	370c      	adds	r7, #12
 8007964:	46bd      	mov	sp, r7
 8007966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796a:	b004      	add	sp, #16
 800796c:	4770      	bx	lr

0800796e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800796e:	b480      	push	{r7}
 8007970:	b085      	sub	sp, #20
 8007972:	af00      	add	r7, sp, #0
 8007974:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2200      	movs	r2, #0
 800797a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800797e:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8007982:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	b29a      	uxth	r2, r3
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800798e:	2300      	movs	r3, #0
}
 8007990:	4618      	mov	r0, r3
 8007992:	3714      	adds	r7, #20
 8007994:	46bd      	mov	sp, r7
 8007996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799a:	4770      	bx	lr

0800799c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800799c:	b480      	push	{r7}
 800799e:	b085      	sub	sp, #20
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80079a4:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80079a8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80079b0:	b29a      	uxth	r2, r3
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	b29b      	uxth	r3, r3
 80079b6:	43db      	mvns	r3, r3
 80079b8:	b29b      	uxth	r3, r3
 80079ba:	4013      	ands	r3, r2
 80079bc:	b29a      	uxth	r2, r3
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80079c4:	2300      	movs	r3, #0
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	3714      	adds	r7, #20
 80079ca:	46bd      	mov	sp, r7
 80079cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d0:	4770      	bx	lr

080079d2 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80079d2:	b480      	push	{r7}
 80079d4:	b083      	sub	sp, #12
 80079d6:	af00      	add	r7, sp, #0
 80079d8:	6078      	str	r0, [r7, #4]
 80079da:	460b      	mov	r3, r1
 80079dc:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80079de:	2300      	movs	r3, #0
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	370c      	adds	r7, #12
 80079e4:	46bd      	mov	sp, r7
 80079e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ea:	4770      	bx	lr

080079ec <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80079ec:	b084      	sub	sp, #16
 80079ee:	b480      	push	{r7}
 80079f0:	b083      	sub	sp, #12
 80079f2:	af00      	add	r7, sp, #0
 80079f4:	6078      	str	r0, [r7, #4]
 80079f6:	f107 0014 	add.w	r0, r7, #20
 80079fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2201      	movs	r2, #1
 8007a02:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2200      	movs	r2, #0
 8007a0a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2200      	movs	r2, #0
 8007a12:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8007a1e:	2300      	movs	r3, #0
}
 8007a20:	4618      	mov	r0, r3
 8007a22:	370c      	adds	r7, #12
 8007a24:	46bd      	mov	sp, r7
 8007a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2a:	b004      	add	sp, #16
 8007a2c:	4770      	bx	lr
	...

08007a30 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007a30:	b480      	push	{r7}
 8007a32:	b09b      	sub	sp, #108	; 0x6c
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
 8007a38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007a40:	687a      	ldr	r2, [r7, #4]
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	781b      	ldrb	r3, [r3, #0]
 8007a46:	009b      	lsls	r3, r3, #2
 8007a48:	4413      	add	r3, r2
 8007a4a:	881b      	ldrh	r3, [r3, #0]
 8007a4c:	b29b      	uxth	r3, r3
 8007a4e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8007a52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a56:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	78db      	ldrb	r3, [r3, #3]
 8007a5e:	2b03      	cmp	r3, #3
 8007a60:	d81f      	bhi.n	8007aa2 <USB_ActivateEndpoint+0x72>
 8007a62:	a201      	add	r2, pc, #4	; (adr r2, 8007a68 <USB_ActivateEndpoint+0x38>)
 8007a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a68:	08007a79 	.word	0x08007a79
 8007a6c:	08007a95 	.word	0x08007a95
 8007a70:	08007aab 	.word	0x08007aab
 8007a74:	08007a87 	.word	0x08007a87
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8007a78:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007a7c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007a80:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8007a84:	e012      	b.n	8007aac <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8007a86:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007a8a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8007a8e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8007a92:	e00b      	b.n	8007aac <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8007a94:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007a98:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007a9c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8007aa0:	e004      	b.n	8007aac <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8007aa8:	e000      	b.n	8007aac <USB_ActivateEndpoint+0x7c>
      break;
 8007aaa:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8007aac:	687a      	ldr	r2, [r7, #4]
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	781b      	ldrb	r3, [r3, #0]
 8007ab2:	009b      	lsls	r3, r3, #2
 8007ab4:	441a      	add	r2, r3
 8007ab6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007aba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007abe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ac2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ac6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007aca:	b29b      	uxth	r3, r3
 8007acc:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8007ace:	687a      	ldr	r2, [r7, #4]
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	781b      	ldrb	r3, [r3, #0]
 8007ad4:	009b      	lsls	r3, r3, #2
 8007ad6:	4413      	add	r3, r2
 8007ad8:	881b      	ldrh	r3, [r3, #0]
 8007ada:	b29b      	uxth	r3, r3
 8007adc:	b21b      	sxth	r3, r3
 8007ade:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ae2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ae6:	b21a      	sxth	r2, r3
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	781b      	ldrb	r3, [r3, #0]
 8007aec:	b21b      	sxth	r3, r3
 8007aee:	4313      	orrs	r3, r2
 8007af0:	b21b      	sxth	r3, r3
 8007af2:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8007af6:	687a      	ldr	r2, [r7, #4]
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	781b      	ldrb	r3, [r3, #0]
 8007afc:	009b      	lsls	r3, r3, #2
 8007afe:	441a      	add	r2, r3
 8007b00:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8007b04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b14:	b29b      	uxth	r3, r3
 8007b16:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	7b1b      	ldrb	r3, [r3, #12]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	f040 8149 	bne.w	8007db4 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	785b      	ldrb	r3, [r3, #1]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	f000 8084 	beq.w	8007c34 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	617b      	str	r3, [r7, #20]
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b36:	b29b      	uxth	r3, r3
 8007b38:	461a      	mov	r2, r3
 8007b3a:	697b      	ldr	r3, [r7, #20]
 8007b3c:	4413      	add	r3, r2
 8007b3e:	617b      	str	r3, [r7, #20]
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	781b      	ldrb	r3, [r3, #0]
 8007b44:	00da      	lsls	r2, r3, #3
 8007b46:	697b      	ldr	r3, [r7, #20]
 8007b48:	4413      	add	r3, r2
 8007b4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007b4e:	613b      	str	r3, [r7, #16]
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	88db      	ldrh	r3, [r3, #6]
 8007b54:	085b      	lsrs	r3, r3, #1
 8007b56:	b29b      	uxth	r3, r3
 8007b58:	005b      	lsls	r3, r3, #1
 8007b5a:	b29a      	uxth	r2, r3
 8007b5c:	693b      	ldr	r3, [r7, #16]
 8007b5e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007b60:	687a      	ldr	r2, [r7, #4]
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	781b      	ldrb	r3, [r3, #0]
 8007b66:	009b      	lsls	r3, r3, #2
 8007b68:	4413      	add	r3, r2
 8007b6a:	881b      	ldrh	r3, [r3, #0]
 8007b6c:	81fb      	strh	r3, [r7, #14]
 8007b6e:	89fb      	ldrh	r3, [r7, #14]
 8007b70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d01b      	beq.n	8007bb0 <USB_ActivateEndpoint+0x180>
 8007b78:	687a      	ldr	r2, [r7, #4]
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	781b      	ldrb	r3, [r3, #0]
 8007b7e:	009b      	lsls	r3, r3, #2
 8007b80:	4413      	add	r3, r2
 8007b82:	881b      	ldrh	r3, [r3, #0]
 8007b84:	b29b      	uxth	r3, r3
 8007b86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b8e:	81bb      	strh	r3, [r7, #12]
 8007b90:	687a      	ldr	r2, [r7, #4]
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	781b      	ldrb	r3, [r3, #0]
 8007b96:	009b      	lsls	r3, r3, #2
 8007b98:	441a      	add	r2, r3
 8007b9a:	89bb      	ldrh	r3, [r7, #12]
 8007b9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ba0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ba4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ba8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007bac:	b29b      	uxth	r3, r3
 8007bae:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	78db      	ldrb	r3, [r3, #3]
 8007bb4:	2b01      	cmp	r3, #1
 8007bb6:	d020      	beq.n	8007bfa <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007bb8:	687a      	ldr	r2, [r7, #4]
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	781b      	ldrb	r3, [r3, #0]
 8007bbe:	009b      	lsls	r3, r3, #2
 8007bc0:	4413      	add	r3, r2
 8007bc2:	881b      	ldrh	r3, [r3, #0]
 8007bc4:	b29b      	uxth	r3, r3
 8007bc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007bca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007bce:	813b      	strh	r3, [r7, #8]
 8007bd0:	893b      	ldrh	r3, [r7, #8]
 8007bd2:	f083 0320 	eor.w	r3, r3, #32
 8007bd6:	813b      	strh	r3, [r7, #8]
 8007bd8:	687a      	ldr	r2, [r7, #4]
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	781b      	ldrb	r3, [r3, #0]
 8007bde:	009b      	lsls	r3, r3, #2
 8007be0:	441a      	add	r2, r3
 8007be2:	893b      	ldrh	r3, [r7, #8]
 8007be4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007be8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007bec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bf4:	b29b      	uxth	r3, r3
 8007bf6:	8013      	strh	r3, [r2, #0]
 8007bf8:	e27f      	b.n	80080fa <USB_ActivateEndpoint+0x6ca>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007bfa:	687a      	ldr	r2, [r7, #4]
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	781b      	ldrb	r3, [r3, #0]
 8007c00:	009b      	lsls	r3, r3, #2
 8007c02:	4413      	add	r3, r2
 8007c04:	881b      	ldrh	r3, [r3, #0]
 8007c06:	b29b      	uxth	r3, r3
 8007c08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c10:	817b      	strh	r3, [r7, #10]
 8007c12:	687a      	ldr	r2, [r7, #4]
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	781b      	ldrb	r3, [r3, #0]
 8007c18:	009b      	lsls	r3, r3, #2
 8007c1a:	441a      	add	r2, r3
 8007c1c:	897b      	ldrh	r3, [r7, #10]
 8007c1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c2e:	b29b      	uxth	r3, r3
 8007c30:	8013      	strh	r3, [r2, #0]
 8007c32:	e262      	b.n	80080fa <USB_ActivateEndpoint+0x6ca>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c3e:	b29b      	uxth	r3, r3
 8007c40:	461a      	mov	r2, r3
 8007c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c44:	4413      	add	r3, r2
 8007c46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	781b      	ldrb	r3, [r3, #0]
 8007c4c:	00da      	lsls	r2, r3, #3
 8007c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c50:	4413      	add	r3, r2
 8007c52:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007c56:	62bb      	str	r3, [r7, #40]	; 0x28
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	88db      	ldrh	r3, [r3, #6]
 8007c5c:	085b      	lsrs	r3, r3, #1
 8007c5e:	b29b      	uxth	r3, r3
 8007c60:	005b      	lsls	r3, r3, #1
 8007c62:	b29a      	uxth	r2, r3
 8007c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c66:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	627b      	str	r3, [r7, #36]	; 0x24
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c72:	b29b      	uxth	r3, r3
 8007c74:	461a      	mov	r2, r3
 8007c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c78:	4413      	add	r3, r2
 8007c7a:	627b      	str	r3, [r7, #36]	; 0x24
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	781b      	ldrb	r3, [r3, #0]
 8007c80:	00da      	lsls	r2, r3, #3
 8007c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c84:	4413      	add	r3, r2
 8007c86:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007c8a:	623b      	str	r3, [r7, #32]
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	691b      	ldr	r3, [r3, #16]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d112      	bne.n	8007cba <USB_ActivateEndpoint+0x28a>
 8007c94:	6a3b      	ldr	r3, [r7, #32]
 8007c96:	881b      	ldrh	r3, [r3, #0]
 8007c98:	b29b      	uxth	r3, r3
 8007c9a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007c9e:	b29a      	uxth	r2, r3
 8007ca0:	6a3b      	ldr	r3, [r7, #32]
 8007ca2:	801a      	strh	r2, [r3, #0]
 8007ca4:	6a3b      	ldr	r3, [r7, #32]
 8007ca6:	881b      	ldrh	r3, [r3, #0]
 8007ca8:	b29b      	uxth	r3, r3
 8007caa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007cae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007cb2:	b29a      	uxth	r2, r3
 8007cb4:	6a3b      	ldr	r3, [r7, #32]
 8007cb6:	801a      	strh	r2, [r3, #0]
 8007cb8:	e02f      	b.n	8007d1a <USB_ActivateEndpoint+0x2ea>
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	691b      	ldr	r3, [r3, #16]
 8007cbe:	2b3e      	cmp	r3, #62	; 0x3e
 8007cc0:	d813      	bhi.n	8007cea <USB_ActivateEndpoint+0x2ba>
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	691b      	ldr	r3, [r3, #16]
 8007cc6:	085b      	lsrs	r3, r3, #1
 8007cc8:	663b      	str	r3, [r7, #96]	; 0x60
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	691b      	ldr	r3, [r3, #16]
 8007cce:	f003 0301 	and.w	r3, r3, #1
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d002      	beq.n	8007cdc <USB_ActivateEndpoint+0x2ac>
 8007cd6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007cd8:	3301      	adds	r3, #1
 8007cda:	663b      	str	r3, [r7, #96]	; 0x60
 8007cdc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007cde:	b29b      	uxth	r3, r3
 8007ce0:	029b      	lsls	r3, r3, #10
 8007ce2:	b29a      	uxth	r2, r3
 8007ce4:	6a3b      	ldr	r3, [r7, #32]
 8007ce6:	801a      	strh	r2, [r3, #0]
 8007ce8:	e017      	b.n	8007d1a <USB_ActivateEndpoint+0x2ea>
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	691b      	ldr	r3, [r3, #16]
 8007cee:	095b      	lsrs	r3, r3, #5
 8007cf0:	663b      	str	r3, [r7, #96]	; 0x60
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	691b      	ldr	r3, [r3, #16]
 8007cf6:	f003 031f 	and.w	r3, r3, #31
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d102      	bne.n	8007d04 <USB_ActivateEndpoint+0x2d4>
 8007cfe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007d00:	3b01      	subs	r3, #1
 8007d02:	663b      	str	r3, [r7, #96]	; 0x60
 8007d04:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007d06:	b29b      	uxth	r3, r3
 8007d08:	029b      	lsls	r3, r3, #10
 8007d0a:	b29b      	uxth	r3, r3
 8007d0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d14:	b29a      	uxth	r2, r3
 8007d16:	6a3b      	ldr	r3, [r7, #32]
 8007d18:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007d1a:	687a      	ldr	r2, [r7, #4]
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	781b      	ldrb	r3, [r3, #0]
 8007d20:	009b      	lsls	r3, r3, #2
 8007d22:	4413      	add	r3, r2
 8007d24:	881b      	ldrh	r3, [r3, #0]
 8007d26:	83fb      	strh	r3, [r7, #30]
 8007d28:	8bfb      	ldrh	r3, [r7, #30]
 8007d2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d01b      	beq.n	8007d6a <USB_ActivateEndpoint+0x33a>
 8007d32:	687a      	ldr	r2, [r7, #4]
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	781b      	ldrb	r3, [r3, #0]
 8007d38:	009b      	lsls	r3, r3, #2
 8007d3a:	4413      	add	r3, r2
 8007d3c:	881b      	ldrh	r3, [r3, #0]
 8007d3e:	b29b      	uxth	r3, r3
 8007d40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d48:	83bb      	strh	r3, [r7, #28]
 8007d4a:	687a      	ldr	r2, [r7, #4]
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	781b      	ldrb	r3, [r3, #0]
 8007d50:	009b      	lsls	r3, r3, #2
 8007d52:	441a      	add	r2, r3
 8007d54:	8bbb      	ldrh	r3, [r7, #28]
 8007d56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d5e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007d62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d66:	b29b      	uxth	r3, r3
 8007d68:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007d6a:	687a      	ldr	r2, [r7, #4]
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	781b      	ldrb	r3, [r3, #0]
 8007d70:	009b      	lsls	r3, r3, #2
 8007d72:	4413      	add	r3, r2
 8007d74:	881b      	ldrh	r3, [r3, #0]
 8007d76:	b29b      	uxth	r3, r3
 8007d78:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d80:	837b      	strh	r3, [r7, #26]
 8007d82:	8b7b      	ldrh	r3, [r7, #26]
 8007d84:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007d88:	837b      	strh	r3, [r7, #26]
 8007d8a:	8b7b      	ldrh	r3, [r7, #26]
 8007d8c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007d90:	837b      	strh	r3, [r7, #26]
 8007d92:	687a      	ldr	r2, [r7, #4]
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	781b      	ldrb	r3, [r3, #0]
 8007d98:	009b      	lsls	r3, r3, #2
 8007d9a:	441a      	add	r2, r3
 8007d9c:	8b7b      	ldrh	r3, [r7, #26]
 8007d9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007da2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007da6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007daa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007dae:	b29b      	uxth	r3, r3
 8007db0:	8013      	strh	r3, [r2, #0]
 8007db2:	e1a2      	b.n	80080fa <USB_ActivateEndpoint+0x6ca>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8007db4:	687a      	ldr	r2, [r7, #4]
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	781b      	ldrb	r3, [r3, #0]
 8007dba:	009b      	lsls	r3, r3, #2
 8007dbc:	4413      	add	r3, r2
 8007dbe:	881b      	ldrh	r3, [r3, #0]
 8007dc0:	b29b      	uxth	r3, r3
 8007dc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007dc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dca:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8007dce:	687a      	ldr	r2, [r7, #4]
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	781b      	ldrb	r3, [r3, #0]
 8007dd4:	009b      	lsls	r3, r3, #2
 8007dd6:	441a      	add	r2, r3
 8007dd8:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8007ddc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007de0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007de4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007de8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007dec:	b29b      	uxth	r3, r3
 8007dee:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	65bb      	str	r3, [r7, #88]	; 0x58
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007dfa:	b29b      	uxth	r3, r3
 8007dfc:	461a      	mov	r2, r3
 8007dfe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007e00:	4413      	add	r3, r2
 8007e02:	65bb      	str	r3, [r7, #88]	; 0x58
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	781b      	ldrb	r3, [r3, #0]
 8007e08:	00da      	lsls	r2, r3, #3
 8007e0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007e0c:	4413      	add	r3, r2
 8007e0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007e12:	657b      	str	r3, [r7, #84]	; 0x54
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	891b      	ldrh	r3, [r3, #8]
 8007e18:	085b      	lsrs	r3, r3, #1
 8007e1a:	b29b      	uxth	r3, r3
 8007e1c:	005b      	lsls	r3, r3, #1
 8007e1e:	b29a      	uxth	r2, r3
 8007e20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e22:	801a      	strh	r2, [r3, #0]
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	653b      	str	r3, [r7, #80]	; 0x50
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e2e:	b29b      	uxth	r3, r3
 8007e30:	461a      	mov	r2, r3
 8007e32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e34:	4413      	add	r3, r2
 8007e36:	653b      	str	r3, [r7, #80]	; 0x50
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	781b      	ldrb	r3, [r3, #0]
 8007e3c:	00da      	lsls	r2, r3, #3
 8007e3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e40:	4413      	add	r3, r2
 8007e42:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007e46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	895b      	ldrh	r3, [r3, #10]
 8007e4c:	085b      	lsrs	r3, r3, #1
 8007e4e:	b29b      	uxth	r3, r3
 8007e50:	005b      	lsls	r3, r3, #1
 8007e52:	b29a      	uxth	r2, r3
 8007e54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e56:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	785b      	ldrb	r3, [r3, #1]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	f040 8091 	bne.w	8007f84 <USB_ActivateEndpoint+0x554>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007e62:	687a      	ldr	r2, [r7, #4]
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	781b      	ldrb	r3, [r3, #0]
 8007e68:	009b      	lsls	r3, r3, #2
 8007e6a:	4413      	add	r3, r2
 8007e6c:	881b      	ldrh	r3, [r3, #0]
 8007e6e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8007e70:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007e72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d01b      	beq.n	8007eb2 <USB_ActivateEndpoint+0x482>
 8007e7a:	687a      	ldr	r2, [r7, #4]
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	781b      	ldrb	r3, [r3, #0]
 8007e80:	009b      	lsls	r3, r3, #2
 8007e82:	4413      	add	r3, r2
 8007e84:	881b      	ldrh	r3, [r3, #0]
 8007e86:	b29b      	uxth	r3, r3
 8007e88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e90:	877b      	strh	r3, [r7, #58]	; 0x3a
 8007e92:	687a      	ldr	r2, [r7, #4]
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	781b      	ldrb	r3, [r3, #0]
 8007e98:	009b      	lsls	r3, r3, #2
 8007e9a:	441a      	add	r2, r3
 8007e9c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8007e9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ea2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ea6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007eaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007eae:	b29b      	uxth	r3, r3
 8007eb0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007eb2:	687a      	ldr	r2, [r7, #4]
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	781b      	ldrb	r3, [r3, #0]
 8007eb8:	009b      	lsls	r3, r3, #2
 8007eba:	4413      	add	r3, r2
 8007ebc:	881b      	ldrh	r3, [r3, #0]
 8007ebe:	873b      	strh	r3, [r7, #56]	; 0x38
 8007ec0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007ec2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d01b      	beq.n	8007f02 <USB_ActivateEndpoint+0x4d2>
 8007eca:	687a      	ldr	r2, [r7, #4]
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	781b      	ldrb	r3, [r3, #0]
 8007ed0:	009b      	lsls	r3, r3, #2
 8007ed2:	4413      	add	r3, r2
 8007ed4:	881b      	ldrh	r3, [r3, #0]
 8007ed6:	b29b      	uxth	r3, r3
 8007ed8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007edc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ee0:	86fb      	strh	r3, [r7, #54]	; 0x36
 8007ee2:	687a      	ldr	r2, [r7, #4]
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	781b      	ldrb	r3, [r3, #0]
 8007ee8:	009b      	lsls	r3, r3, #2
 8007eea:	441a      	add	r2, r3
 8007eec:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007eee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ef2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ef6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007efa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007efe:	b29b      	uxth	r3, r3
 8007f00:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007f02:	687a      	ldr	r2, [r7, #4]
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	781b      	ldrb	r3, [r3, #0]
 8007f08:	009b      	lsls	r3, r3, #2
 8007f0a:	4413      	add	r3, r2
 8007f0c:	881b      	ldrh	r3, [r3, #0]
 8007f0e:	b29b      	uxth	r3, r3
 8007f10:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007f14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f18:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007f1a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007f1c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007f20:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007f22:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007f24:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007f28:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007f2a:	687a      	ldr	r2, [r7, #4]
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	781b      	ldrb	r3, [r3, #0]
 8007f30:	009b      	lsls	r3, r3, #2
 8007f32:	441a      	add	r2, r3
 8007f34:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007f36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f46:	b29b      	uxth	r3, r3
 8007f48:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007f4a:	687a      	ldr	r2, [r7, #4]
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	781b      	ldrb	r3, [r3, #0]
 8007f50:	009b      	lsls	r3, r3, #2
 8007f52:	4413      	add	r3, r2
 8007f54:	881b      	ldrh	r3, [r3, #0]
 8007f56:	b29b      	uxth	r3, r3
 8007f58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f60:	867b      	strh	r3, [r7, #50]	; 0x32
 8007f62:	687a      	ldr	r2, [r7, #4]
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	781b      	ldrb	r3, [r3, #0]
 8007f68:	009b      	lsls	r3, r3, #2
 8007f6a:	441a      	add	r2, r3
 8007f6c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8007f6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f7e:	b29b      	uxth	r3, r3
 8007f80:	8013      	strh	r3, [r2, #0]
 8007f82:	e0ba      	b.n	80080fa <USB_ActivateEndpoint+0x6ca>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007f84:	687a      	ldr	r2, [r7, #4]
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	781b      	ldrb	r3, [r3, #0]
 8007f8a:	009b      	lsls	r3, r3, #2
 8007f8c:	4413      	add	r3, r2
 8007f8e:	881b      	ldrh	r3, [r3, #0]
 8007f90:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8007f94:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007f98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d01d      	beq.n	8007fdc <USB_ActivateEndpoint+0x5ac>
 8007fa0:	687a      	ldr	r2, [r7, #4]
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	781b      	ldrb	r3, [r3, #0]
 8007fa6:	009b      	lsls	r3, r3, #2
 8007fa8:	4413      	add	r3, r2
 8007faa:	881b      	ldrh	r3, [r3, #0]
 8007fac:	b29b      	uxth	r3, r3
 8007fae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007fb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fb6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8007fba:	687a      	ldr	r2, [r7, #4]
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	781b      	ldrb	r3, [r3, #0]
 8007fc0:	009b      	lsls	r3, r3, #2
 8007fc2:	441a      	add	r2, r3
 8007fc4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007fc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007fcc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007fd0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007fd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fd8:	b29b      	uxth	r3, r3
 8007fda:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007fdc:	687a      	ldr	r2, [r7, #4]
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	781b      	ldrb	r3, [r3, #0]
 8007fe2:	009b      	lsls	r3, r3, #2
 8007fe4:	4413      	add	r3, r2
 8007fe6:	881b      	ldrh	r3, [r3, #0]
 8007fe8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8007fec:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007ff0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d01d      	beq.n	8008034 <USB_ActivateEndpoint+0x604>
 8007ff8:	687a      	ldr	r2, [r7, #4]
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	781b      	ldrb	r3, [r3, #0]
 8007ffe:	009b      	lsls	r3, r3, #2
 8008000:	4413      	add	r3, r2
 8008002:	881b      	ldrh	r3, [r3, #0]
 8008004:	b29b      	uxth	r3, r3
 8008006:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800800a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800800e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8008012:	687a      	ldr	r2, [r7, #4]
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	781b      	ldrb	r3, [r3, #0]
 8008018:	009b      	lsls	r3, r3, #2
 800801a:	441a      	add	r2, r3
 800801c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8008020:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008024:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008028:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800802c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008030:	b29b      	uxth	r3, r3
 8008032:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	78db      	ldrb	r3, [r3, #3]
 8008038:	2b01      	cmp	r3, #1
 800803a:	d024      	beq.n	8008086 <USB_ActivateEndpoint+0x656>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800803c:	687a      	ldr	r2, [r7, #4]
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	781b      	ldrb	r3, [r3, #0]
 8008042:	009b      	lsls	r3, r3, #2
 8008044:	4413      	add	r3, r2
 8008046:	881b      	ldrh	r3, [r3, #0]
 8008048:	b29b      	uxth	r3, r3
 800804a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800804e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008052:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8008056:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800805a:	f083 0320 	eor.w	r3, r3, #32
 800805e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8008062:	687a      	ldr	r2, [r7, #4]
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	781b      	ldrb	r3, [r3, #0]
 8008068:	009b      	lsls	r3, r3, #2
 800806a:	441a      	add	r2, r3
 800806c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008070:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008074:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008078:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800807c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008080:	b29b      	uxth	r3, r3
 8008082:	8013      	strh	r3, [r2, #0]
 8008084:	e01d      	b.n	80080c2 <USB_ActivateEndpoint+0x692>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008086:	687a      	ldr	r2, [r7, #4]
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	781b      	ldrb	r3, [r3, #0]
 800808c:	009b      	lsls	r3, r3, #2
 800808e:	4413      	add	r3, r2
 8008090:	881b      	ldrh	r3, [r3, #0]
 8008092:	b29b      	uxth	r3, r3
 8008094:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008098:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800809c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80080a0:	687a      	ldr	r2, [r7, #4]
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	781b      	ldrb	r3, [r3, #0]
 80080a6:	009b      	lsls	r3, r3, #2
 80080a8:	441a      	add	r2, r3
 80080aa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80080ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80080ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080be:	b29b      	uxth	r3, r3
 80080c0:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80080c2:	687a      	ldr	r2, [r7, #4]
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	781b      	ldrb	r3, [r3, #0]
 80080c8:	009b      	lsls	r3, r3, #2
 80080ca:	4413      	add	r3, r2
 80080cc:	881b      	ldrh	r3, [r3, #0]
 80080ce:	b29b      	uxth	r3, r3
 80080d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80080d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080d8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80080da:	687a      	ldr	r2, [r7, #4]
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	781b      	ldrb	r3, [r3, #0]
 80080e0:	009b      	lsls	r3, r3, #2
 80080e2:	441a      	add	r2, r3
 80080e4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80080e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80080f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080f6:	b29b      	uxth	r3, r3
 80080f8:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80080fa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80080fe:	4618      	mov	r0, r3
 8008100:	376c      	adds	r7, #108	; 0x6c
 8008102:	46bd      	mov	sp, r7
 8008104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008108:	4770      	bx	lr
 800810a:	bf00      	nop

0800810c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800810c:	b480      	push	{r7}
 800810e:	b08d      	sub	sp, #52	; 0x34
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
 8008114:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	7b1b      	ldrb	r3, [r3, #12]
 800811a:	2b00      	cmp	r3, #0
 800811c:	f040 808e 	bne.w	800823c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	785b      	ldrb	r3, [r3, #1]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d044      	beq.n	80081b2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008128:	687a      	ldr	r2, [r7, #4]
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	781b      	ldrb	r3, [r3, #0]
 800812e:	009b      	lsls	r3, r3, #2
 8008130:	4413      	add	r3, r2
 8008132:	881b      	ldrh	r3, [r3, #0]
 8008134:	81bb      	strh	r3, [r7, #12]
 8008136:	89bb      	ldrh	r3, [r7, #12]
 8008138:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800813c:	2b00      	cmp	r3, #0
 800813e:	d01b      	beq.n	8008178 <USB_DeactivateEndpoint+0x6c>
 8008140:	687a      	ldr	r2, [r7, #4]
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	781b      	ldrb	r3, [r3, #0]
 8008146:	009b      	lsls	r3, r3, #2
 8008148:	4413      	add	r3, r2
 800814a:	881b      	ldrh	r3, [r3, #0]
 800814c:	b29b      	uxth	r3, r3
 800814e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008152:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008156:	817b      	strh	r3, [r7, #10]
 8008158:	687a      	ldr	r2, [r7, #4]
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	781b      	ldrb	r3, [r3, #0]
 800815e:	009b      	lsls	r3, r3, #2
 8008160:	441a      	add	r2, r3
 8008162:	897b      	ldrh	r3, [r7, #10]
 8008164:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008168:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800816c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008170:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008174:	b29b      	uxth	r3, r3
 8008176:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008178:	687a      	ldr	r2, [r7, #4]
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	781b      	ldrb	r3, [r3, #0]
 800817e:	009b      	lsls	r3, r3, #2
 8008180:	4413      	add	r3, r2
 8008182:	881b      	ldrh	r3, [r3, #0]
 8008184:	b29b      	uxth	r3, r3
 8008186:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800818a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800818e:	813b      	strh	r3, [r7, #8]
 8008190:	687a      	ldr	r2, [r7, #4]
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	781b      	ldrb	r3, [r3, #0]
 8008196:	009b      	lsls	r3, r3, #2
 8008198:	441a      	add	r2, r3
 800819a:	893b      	ldrh	r3, [r7, #8]
 800819c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081ac:	b29b      	uxth	r3, r3
 80081ae:	8013      	strh	r3, [r2, #0]
 80081b0:	e192      	b.n	80084d8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80081b2:	687a      	ldr	r2, [r7, #4]
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	781b      	ldrb	r3, [r3, #0]
 80081b8:	009b      	lsls	r3, r3, #2
 80081ba:	4413      	add	r3, r2
 80081bc:	881b      	ldrh	r3, [r3, #0]
 80081be:	827b      	strh	r3, [r7, #18]
 80081c0:	8a7b      	ldrh	r3, [r7, #18]
 80081c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d01b      	beq.n	8008202 <USB_DeactivateEndpoint+0xf6>
 80081ca:	687a      	ldr	r2, [r7, #4]
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	781b      	ldrb	r3, [r3, #0]
 80081d0:	009b      	lsls	r3, r3, #2
 80081d2:	4413      	add	r3, r2
 80081d4:	881b      	ldrh	r3, [r3, #0]
 80081d6:	b29b      	uxth	r3, r3
 80081d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081e0:	823b      	strh	r3, [r7, #16]
 80081e2:	687a      	ldr	r2, [r7, #4]
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	781b      	ldrb	r3, [r3, #0]
 80081e8:	009b      	lsls	r3, r3, #2
 80081ea:	441a      	add	r2, r3
 80081ec:	8a3b      	ldrh	r3, [r7, #16]
 80081ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80081fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081fe:	b29b      	uxth	r3, r3
 8008200:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008202:	687a      	ldr	r2, [r7, #4]
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	781b      	ldrb	r3, [r3, #0]
 8008208:	009b      	lsls	r3, r3, #2
 800820a:	4413      	add	r3, r2
 800820c:	881b      	ldrh	r3, [r3, #0]
 800820e:	b29b      	uxth	r3, r3
 8008210:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008214:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008218:	81fb      	strh	r3, [r7, #14]
 800821a:	687a      	ldr	r2, [r7, #4]
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	781b      	ldrb	r3, [r3, #0]
 8008220:	009b      	lsls	r3, r3, #2
 8008222:	441a      	add	r2, r3
 8008224:	89fb      	ldrh	r3, [r7, #14]
 8008226:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800822a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800822e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008232:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008236:	b29b      	uxth	r3, r3
 8008238:	8013      	strh	r3, [r2, #0]
 800823a:	e14d      	b.n	80084d8 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	785b      	ldrb	r3, [r3, #1]
 8008240:	2b00      	cmp	r3, #0
 8008242:	f040 80a5 	bne.w	8008390 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008246:	687a      	ldr	r2, [r7, #4]
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	781b      	ldrb	r3, [r3, #0]
 800824c:	009b      	lsls	r3, r3, #2
 800824e:	4413      	add	r3, r2
 8008250:	881b      	ldrh	r3, [r3, #0]
 8008252:	843b      	strh	r3, [r7, #32]
 8008254:	8c3b      	ldrh	r3, [r7, #32]
 8008256:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800825a:	2b00      	cmp	r3, #0
 800825c:	d01b      	beq.n	8008296 <USB_DeactivateEndpoint+0x18a>
 800825e:	687a      	ldr	r2, [r7, #4]
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	781b      	ldrb	r3, [r3, #0]
 8008264:	009b      	lsls	r3, r3, #2
 8008266:	4413      	add	r3, r2
 8008268:	881b      	ldrh	r3, [r3, #0]
 800826a:	b29b      	uxth	r3, r3
 800826c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008270:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008274:	83fb      	strh	r3, [r7, #30]
 8008276:	687a      	ldr	r2, [r7, #4]
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	781b      	ldrb	r3, [r3, #0]
 800827c:	009b      	lsls	r3, r3, #2
 800827e:	441a      	add	r2, r3
 8008280:	8bfb      	ldrh	r3, [r7, #30]
 8008282:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008286:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800828a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800828e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008292:	b29b      	uxth	r3, r3
 8008294:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008296:	687a      	ldr	r2, [r7, #4]
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	781b      	ldrb	r3, [r3, #0]
 800829c:	009b      	lsls	r3, r3, #2
 800829e:	4413      	add	r3, r2
 80082a0:	881b      	ldrh	r3, [r3, #0]
 80082a2:	83bb      	strh	r3, [r7, #28]
 80082a4:	8bbb      	ldrh	r3, [r7, #28]
 80082a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d01b      	beq.n	80082e6 <USB_DeactivateEndpoint+0x1da>
 80082ae:	687a      	ldr	r2, [r7, #4]
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	781b      	ldrb	r3, [r3, #0]
 80082b4:	009b      	lsls	r3, r3, #2
 80082b6:	4413      	add	r3, r2
 80082b8:	881b      	ldrh	r3, [r3, #0]
 80082ba:	b29b      	uxth	r3, r3
 80082bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082c4:	837b      	strh	r3, [r7, #26]
 80082c6:	687a      	ldr	r2, [r7, #4]
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	781b      	ldrb	r3, [r3, #0]
 80082cc:	009b      	lsls	r3, r3, #2
 80082ce:	441a      	add	r2, r3
 80082d0:	8b7b      	ldrh	r3, [r7, #26]
 80082d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082de:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80082e2:	b29b      	uxth	r3, r3
 80082e4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80082e6:	687a      	ldr	r2, [r7, #4]
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	781b      	ldrb	r3, [r3, #0]
 80082ec:	009b      	lsls	r3, r3, #2
 80082ee:	4413      	add	r3, r2
 80082f0:	881b      	ldrh	r3, [r3, #0]
 80082f2:	b29b      	uxth	r3, r3
 80082f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082fc:	833b      	strh	r3, [r7, #24]
 80082fe:	687a      	ldr	r2, [r7, #4]
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	781b      	ldrb	r3, [r3, #0]
 8008304:	009b      	lsls	r3, r3, #2
 8008306:	441a      	add	r2, r3
 8008308:	8b3b      	ldrh	r3, [r7, #24]
 800830a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800830e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008312:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008316:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800831a:	b29b      	uxth	r3, r3
 800831c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800831e:	687a      	ldr	r2, [r7, #4]
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	781b      	ldrb	r3, [r3, #0]
 8008324:	009b      	lsls	r3, r3, #2
 8008326:	4413      	add	r3, r2
 8008328:	881b      	ldrh	r3, [r3, #0]
 800832a:	b29b      	uxth	r3, r3
 800832c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008330:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008334:	82fb      	strh	r3, [r7, #22]
 8008336:	687a      	ldr	r2, [r7, #4]
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	781b      	ldrb	r3, [r3, #0]
 800833c:	009b      	lsls	r3, r3, #2
 800833e:	441a      	add	r2, r3
 8008340:	8afb      	ldrh	r3, [r7, #22]
 8008342:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008346:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800834a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800834e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008352:	b29b      	uxth	r3, r3
 8008354:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008356:	687a      	ldr	r2, [r7, #4]
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	781b      	ldrb	r3, [r3, #0]
 800835c:	009b      	lsls	r3, r3, #2
 800835e:	4413      	add	r3, r2
 8008360:	881b      	ldrh	r3, [r3, #0]
 8008362:	b29b      	uxth	r3, r3
 8008364:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008368:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800836c:	82bb      	strh	r3, [r7, #20]
 800836e:	687a      	ldr	r2, [r7, #4]
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	781b      	ldrb	r3, [r3, #0]
 8008374:	009b      	lsls	r3, r3, #2
 8008376:	441a      	add	r2, r3
 8008378:	8abb      	ldrh	r3, [r7, #20]
 800837a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800837e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008382:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008386:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800838a:	b29b      	uxth	r3, r3
 800838c:	8013      	strh	r3, [r2, #0]
 800838e:	e0a3      	b.n	80084d8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008390:	687a      	ldr	r2, [r7, #4]
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	781b      	ldrb	r3, [r3, #0]
 8008396:	009b      	lsls	r3, r3, #2
 8008398:	4413      	add	r3, r2
 800839a:	881b      	ldrh	r3, [r3, #0]
 800839c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800839e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80083a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d01b      	beq.n	80083e0 <USB_DeactivateEndpoint+0x2d4>
 80083a8:	687a      	ldr	r2, [r7, #4]
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	781b      	ldrb	r3, [r3, #0]
 80083ae:	009b      	lsls	r3, r3, #2
 80083b0:	4413      	add	r3, r2
 80083b2:	881b      	ldrh	r3, [r3, #0]
 80083b4:	b29b      	uxth	r3, r3
 80083b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80083ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083be:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80083c0:	687a      	ldr	r2, [r7, #4]
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	781b      	ldrb	r3, [r3, #0]
 80083c6:	009b      	lsls	r3, r3, #2
 80083c8:	441a      	add	r2, r3
 80083ca:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80083cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80083d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80083d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083dc:	b29b      	uxth	r3, r3
 80083de:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80083e0:	687a      	ldr	r2, [r7, #4]
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	781b      	ldrb	r3, [r3, #0]
 80083e6:	009b      	lsls	r3, r3, #2
 80083e8:	4413      	add	r3, r2
 80083ea:	881b      	ldrh	r3, [r3, #0]
 80083ec:	857b      	strh	r3, [r7, #42]	; 0x2a
 80083ee:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80083f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d01b      	beq.n	8008430 <USB_DeactivateEndpoint+0x324>
 80083f8:	687a      	ldr	r2, [r7, #4]
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	781b      	ldrb	r3, [r3, #0]
 80083fe:	009b      	lsls	r3, r3, #2
 8008400:	4413      	add	r3, r2
 8008402:	881b      	ldrh	r3, [r3, #0]
 8008404:	b29b      	uxth	r3, r3
 8008406:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800840a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800840e:	853b      	strh	r3, [r7, #40]	; 0x28
 8008410:	687a      	ldr	r2, [r7, #4]
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	781b      	ldrb	r3, [r3, #0]
 8008416:	009b      	lsls	r3, r3, #2
 8008418:	441a      	add	r2, r3
 800841a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800841c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008420:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008424:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008428:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800842c:	b29b      	uxth	r3, r3
 800842e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008430:	687a      	ldr	r2, [r7, #4]
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	781b      	ldrb	r3, [r3, #0]
 8008436:	009b      	lsls	r3, r3, #2
 8008438:	4413      	add	r3, r2
 800843a:	881b      	ldrh	r3, [r3, #0]
 800843c:	b29b      	uxth	r3, r3
 800843e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008442:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008446:	84fb      	strh	r3, [r7, #38]	; 0x26
 8008448:	687a      	ldr	r2, [r7, #4]
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	781b      	ldrb	r3, [r3, #0]
 800844e:	009b      	lsls	r3, r3, #2
 8008450:	441a      	add	r2, r3
 8008452:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008454:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008458:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800845c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008460:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008464:	b29b      	uxth	r3, r3
 8008466:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008468:	687a      	ldr	r2, [r7, #4]
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	781b      	ldrb	r3, [r3, #0]
 800846e:	009b      	lsls	r3, r3, #2
 8008470:	4413      	add	r3, r2
 8008472:	881b      	ldrh	r3, [r3, #0]
 8008474:	b29b      	uxth	r3, r3
 8008476:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800847a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800847e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8008480:	687a      	ldr	r2, [r7, #4]
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	781b      	ldrb	r3, [r3, #0]
 8008486:	009b      	lsls	r3, r3, #2
 8008488:	441a      	add	r2, r3
 800848a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800848c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008490:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008494:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008498:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800849c:	b29b      	uxth	r3, r3
 800849e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80084a0:	687a      	ldr	r2, [r7, #4]
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	781b      	ldrb	r3, [r3, #0]
 80084a6:	009b      	lsls	r3, r3, #2
 80084a8:	4413      	add	r3, r2
 80084aa:	881b      	ldrh	r3, [r3, #0]
 80084ac:	b29b      	uxth	r3, r3
 80084ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80084b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084b6:	847b      	strh	r3, [r7, #34]	; 0x22
 80084b8:	687a      	ldr	r2, [r7, #4]
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	781b      	ldrb	r3, [r3, #0]
 80084be:	009b      	lsls	r3, r3, #2
 80084c0:	441a      	add	r2, r3
 80084c2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80084c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80084d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084d4:	b29b      	uxth	r3, r3
 80084d6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80084d8:	2300      	movs	r3, #0
}
 80084da:	4618      	mov	r0, r3
 80084dc:	3734      	adds	r7, #52	; 0x34
 80084de:	46bd      	mov	sp, r7
 80084e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e4:	4770      	bx	lr

080084e6 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80084e6:	b580      	push	{r7, lr}
 80084e8:	b0cc      	sub	sp, #304	; 0x130
 80084ea:	af00      	add	r7, sp, #0
 80084ec:	1d3b      	adds	r3, r7, #4
 80084ee:	6018      	str	r0, [r3, #0]
 80084f0:	463b      	mov	r3, r7
 80084f2:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80084f4:	463b      	mov	r3, r7
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	785b      	ldrb	r3, [r3, #1]
 80084fa:	2b01      	cmp	r3, #1
 80084fc:	f040 872e 	bne.w	800935c <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8008500:	463b      	mov	r3, r7
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	699a      	ldr	r2, [r3, #24]
 8008506:	463b      	mov	r3, r7
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	691b      	ldr	r3, [r3, #16]
 800850c:	429a      	cmp	r2, r3
 800850e:	d905      	bls.n	800851c <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8008510:	463b      	mov	r3, r7
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	691b      	ldr	r3, [r3, #16]
 8008516:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800851a:	e004      	b.n	8008526 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800851c:	463b      	mov	r3, r7
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	699b      	ldr	r3, [r3, #24]
 8008522:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8008526:	463b      	mov	r3, r7
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	7b1b      	ldrb	r3, [r3, #12]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d134      	bne.n	800859a <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008530:	463b      	mov	r3, r7
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	6959      	ldr	r1, [r3, #20]
 8008536:	463b      	mov	r3, r7
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	88da      	ldrh	r2, [r3, #6]
 800853c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008540:	b29b      	uxth	r3, r3
 8008542:	1d38      	adds	r0, r7, #4
 8008544:	6800      	ldr	r0, [r0, #0]
 8008546:	f001 fc20 	bl	8009d8a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800854a:	f107 0310 	add.w	r3, r7, #16
 800854e:	1d3a      	adds	r2, r7, #4
 8008550:	6812      	ldr	r2, [r2, #0]
 8008552:	601a      	str	r2, [r3, #0]
 8008554:	1d3b      	adds	r3, r7, #4
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800855c:	b29b      	uxth	r3, r3
 800855e:	4619      	mov	r1, r3
 8008560:	f107 0310 	add.w	r3, r7, #16
 8008564:	f107 0210 	add.w	r2, r7, #16
 8008568:	6812      	ldr	r2, [r2, #0]
 800856a:	440a      	add	r2, r1
 800856c:	601a      	str	r2, [r3, #0]
 800856e:	463b      	mov	r3, r7
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	781b      	ldrb	r3, [r3, #0]
 8008574:	00da      	lsls	r2, r3, #3
 8008576:	f107 0310 	add.w	r3, r7, #16
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	4413      	add	r3, r2
 800857e:	f203 4202 	addw	r2, r3, #1026	; 0x402
 8008582:	f107 030c 	add.w	r3, r7, #12
 8008586:	601a      	str	r2, [r3, #0]
 8008588:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800858c:	b29a      	uxth	r2, r3
 800858e:	f107 030c 	add.w	r3, r7, #12
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	801a      	strh	r2, [r3, #0]
 8008596:	f000 beac 	b.w	80092f2 <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800859a:	463b      	mov	r3, r7
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	78db      	ldrb	r3, [r3, #3]
 80085a0:	2b02      	cmp	r3, #2
 80085a2:	f040 838c 	bne.w	8008cbe <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80085a6:	463b      	mov	r3, r7
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	6a1a      	ldr	r2, [r3, #32]
 80085ac:	463b      	mov	r3, r7
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	691b      	ldr	r3, [r3, #16]
 80085b2:	429a      	cmp	r2, r3
 80085b4:	f240 8330 	bls.w	8008c18 <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80085b8:	1d3b      	adds	r3, r7, #4
 80085ba:	681a      	ldr	r2, [r3, #0]
 80085bc:	463b      	mov	r3, r7
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	781b      	ldrb	r3, [r3, #0]
 80085c2:	009b      	lsls	r3, r3, #2
 80085c4:	4413      	add	r3, r2
 80085c6:	881b      	ldrh	r3, [r3, #0]
 80085c8:	b29b      	uxth	r3, r3
 80085ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085d2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80085d6:	1d3b      	adds	r3, r7, #4
 80085d8:	681a      	ldr	r2, [r3, #0]
 80085da:	463b      	mov	r3, r7
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	781b      	ldrb	r3, [r3, #0]
 80085e0:	009b      	lsls	r3, r3, #2
 80085e2:	441a      	add	r2, r3
 80085e4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80085e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80085f0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80085f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085f8:	b29b      	uxth	r3, r3
 80085fa:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80085fc:	463b      	mov	r3, r7
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	6a1a      	ldr	r2, [r3, #32]
 8008602:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008606:	1ad2      	subs	r2, r2, r3
 8008608:	463b      	mov	r3, r7
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800860e:	1d3b      	adds	r3, r7, #4
 8008610:	681a      	ldr	r2, [r3, #0]
 8008612:	463b      	mov	r3, r7
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	781b      	ldrb	r3, [r3, #0]
 8008618:	009b      	lsls	r3, r3, #2
 800861a:	4413      	add	r3, r2
 800861c:	881b      	ldrh	r3, [r3, #0]
 800861e:	b29b      	uxth	r3, r3
 8008620:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008624:	2b00      	cmp	r3, #0
 8008626:	f000 819e 	beq.w	8008966 <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800862a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800862e:	1d3a      	adds	r2, r7, #4
 8008630:	6812      	ldr	r2, [r2, #0]
 8008632:	601a      	str	r2, [r3, #0]
 8008634:	463b      	mov	r3, r7
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	785b      	ldrb	r3, [r3, #1]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d17a      	bne.n	8008734 <USB_EPStartXfer+0x24e>
 800863e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008642:	1d3a      	adds	r2, r7, #4
 8008644:	6812      	ldr	r2, [r2, #0]
 8008646:	601a      	str	r2, [r3, #0]
 8008648:	1d3b      	adds	r3, r7, #4
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008650:	b29b      	uxth	r3, r3
 8008652:	4619      	mov	r1, r3
 8008654:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008658:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800865c:	6812      	ldr	r2, [r2, #0]
 800865e:	440a      	add	r2, r1
 8008660:	601a      	str	r2, [r3, #0]
 8008662:	463b      	mov	r3, r7
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	781b      	ldrb	r3, [r3, #0]
 8008668:	00da      	lsls	r2, r3, #3
 800866a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	4413      	add	r3, r2
 8008672:	f203 4206 	addw	r2, r3, #1030	; 0x406
 8008676:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800867a:	601a      	str	r2, [r3, #0]
 800867c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008680:	2b00      	cmp	r3, #0
 8008682:	d11a      	bne.n	80086ba <USB_EPStartXfer+0x1d4>
 8008684:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	881b      	ldrh	r3, [r3, #0]
 800868c:	b29b      	uxth	r3, r3
 800868e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008692:	b29a      	uxth	r2, r3
 8008694:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	801a      	strh	r2, [r3, #0]
 800869c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	881b      	ldrh	r3, [r3, #0]
 80086a4:	b29b      	uxth	r3, r3
 80086a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086ae:	b29a      	uxth	r2, r3
 80086b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	801a      	strh	r2, [r3, #0]
 80086b8:	e062      	b.n	8008780 <USB_EPStartXfer+0x29a>
 80086ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086be:	2b3e      	cmp	r3, #62	; 0x3e
 80086c0:	d819      	bhi.n	80086f6 <USB_EPStartXfer+0x210>
 80086c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086c6:	085b      	lsrs	r3, r3, #1
 80086c8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80086cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086d0:	f003 0301 	and.w	r3, r3, #1
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d004      	beq.n	80086e2 <USB_EPStartXfer+0x1fc>
 80086d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80086dc:	3301      	adds	r3, #1
 80086de:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80086e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80086e6:	b29b      	uxth	r3, r3
 80086e8:	029b      	lsls	r3, r3, #10
 80086ea:	b29a      	uxth	r2, r3
 80086ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	801a      	strh	r2, [r3, #0]
 80086f4:	e044      	b.n	8008780 <USB_EPStartXfer+0x29a>
 80086f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086fa:	095b      	lsrs	r3, r3, #5
 80086fc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008700:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008704:	f003 031f 	and.w	r3, r3, #31
 8008708:	2b00      	cmp	r3, #0
 800870a:	d104      	bne.n	8008716 <USB_EPStartXfer+0x230>
 800870c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008710:	3b01      	subs	r3, #1
 8008712:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008716:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800871a:	b29b      	uxth	r3, r3
 800871c:	029b      	lsls	r3, r3, #10
 800871e:	b29b      	uxth	r3, r3
 8008720:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008724:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008728:	b29a      	uxth	r2, r3
 800872a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	801a      	strh	r2, [r3, #0]
 8008732:	e025      	b.n	8008780 <USB_EPStartXfer+0x29a>
 8008734:	463b      	mov	r3, r7
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	785b      	ldrb	r3, [r3, #1]
 800873a:	2b01      	cmp	r3, #1
 800873c:	d120      	bne.n	8008780 <USB_EPStartXfer+0x29a>
 800873e:	1d3b      	adds	r3, r7, #4
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008746:	b29b      	uxth	r3, r3
 8008748:	4619      	mov	r1, r3
 800874a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800874e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8008752:	6812      	ldr	r2, [r2, #0]
 8008754:	440a      	add	r2, r1
 8008756:	601a      	str	r2, [r3, #0]
 8008758:	463b      	mov	r3, r7
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	781b      	ldrb	r3, [r3, #0]
 800875e:	00da      	lsls	r2, r3, #3
 8008760:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	4413      	add	r3, r2
 8008768:	f203 4206 	addw	r2, r3, #1030	; 0x406
 800876c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008770:	601a      	str	r2, [r3, #0]
 8008772:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008776:	b29a      	uxth	r2, r3
 8008778:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008780:	463b      	mov	r3, r7
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	895b      	ldrh	r3, [r3, #10]
 8008786:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800878a:	463b      	mov	r3, r7
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	6959      	ldr	r1, [r3, #20]
 8008790:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008794:	b29b      	uxth	r3, r3
 8008796:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800879a:	1d38      	adds	r0, r7, #4
 800879c:	6800      	ldr	r0, [r0, #0]
 800879e:	f001 faf4 	bl	8009d8a <USB_WritePMA>
            ep->xfer_buff += len;
 80087a2:	463b      	mov	r3, r7
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	695a      	ldr	r2, [r3, #20]
 80087a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087ac:	441a      	add	r2, r3
 80087ae:	463b      	mov	r3, r7
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80087b4:	463b      	mov	r3, r7
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	6a1a      	ldr	r2, [r3, #32]
 80087ba:	463b      	mov	r3, r7
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	691b      	ldr	r3, [r3, #16]
 80087c0:	429a      	cmp	r2, r3
 80087c2:	d909      	bls.n	80087d8 <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 80087c4:	463b      	mov	r3, r7
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	6a1a      	ldr	r2, [r3, #32]
 80087ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087ce:	1ad2      	subs	r2, r2, r3
 80087d0:	463b      	mov	r3, r7
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	621a      	str	r2, [r3, #32]
 80087d6:	e008      	b.n	80087ea <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 80087d8:	463b      	mov	r3, r7
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	6a1b      	ldr	r3, [r3, #32]
 80087de:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80087e2:	463b      	mov	r3, r7
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	2200      	movs	r2, #0
 80087e8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80087ea:	463b      	mov	r3, r7
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	785b      	ldrb	r3, [r3, #1]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d17a      	bne.n	80088ea <USB_EPStartXfer+0x404>
 80087f4:	f107 0318 	add.w	r3, r7, #24
 80087f8:	1d3a      	adds	r2, r7, #4
 80087fa:	6812      	ldr	r2, [r2, #0]
 80087fc:	601a      	str	r2, [r3, #0]
 80087fe:	1d3b      	adds	r3, r7, #4
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008806:	b29b      	uxth	r3, r3
 8008808:	4619      	mov	r1, r3
 800880a:	f107 0318 	add.w	r3, r7, #24
 800880e:	f107 0218 	add.w	r2, r7, #24
 8008812:	6812      	ldr	r2, [r2, #0]
 8008814:	440a      	add	r2, r1
 8008816:	601a      	str	r2, [r3, #0]
 8008818:	463b      	mov	r3, r7
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	781b      	ldrb	r3, [r3, #0]
 800881e:	00da      	lsls	r2, r3, #3
 8008820:	f107 0318 	add.w	r3, r7, #24
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	4413      	add	r3, r2
 8008828:	f203 4202 	addw	r2, r3, #1026	; 0x402
 800882c:	f107 0314 	add.w	r3, r7, #20
 8008830:	601a      	str	r2, [r3, #0]
 8008832:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008836:	2b00      	cmp	r3, #0
 8008838:	d11a      	bne.n	8008870 <USB_EPStartXfer+0x38a>
 800883a:	f107 0314 	add.w	r3, r7, #20
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	881b      	ldrh	r3, [r3, #0]
 8008842:	b29b      	uxth	r3, r3
 8008844:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008848:	b29a      	uxth	r2, r3
 800884a:	f107 0314 	add.w	r3, r7, #20
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	801a      	strh	r2, [r3, #0]
 8008852:	f107 0314 	add.w	r3, r7, #20
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	881b      	ldrh	r3, [r3, #0]
 800885a:	b29b      	uxth	r3, r3
 800885c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008860:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008864:	b29a      	uxth	r2, r3
 8008866:	f107 0314 	add.w	r3, r7, #20
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	801a      	strh	r2, [r3, #0]
 800886e:	e067      	b.n	8008940 <USB_EPStartXfer+0x45a>
 8008870:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008874:	2b3e      	cmp	r3, #62	; 0x3e
 8008876:	d819      	bhi.n	80088ac <USB_EPStartXfer+0x3c6>
 8008878:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800887c:	085b      	lsrs	r3, r3, #1
 800887e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008882:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008886:	f003 0301 	and.w	r3, r3, #1
 800888a:	2b00      	cmp	r3, #0
 800888c:	d004      	beq.n	8008898 <USB_EPStartXfer+0x3b2>
 800888e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008892:	3301      	adds	r3, #1
 8008894:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008898:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800889c:	b29b      	uxth	r3, r3
 800889e:	029b      	lsls	r3, r3, #10
 80088a0:	b29a      	uxth	r2, r3
 80088a2:	f107 0314 	add.w	r3, r7, #20
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	801a      	strh	r2, [r3, #0]
 80088aa:	e049      	b.n	8008940 <USB_EPStartXfer+0x45a>
 80088ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088b0:	095b      	lsrs	r3, r3, #5
 80088b2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80088b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088ba:	f003 031f 	and.w	r3, r3, #31
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d104      	bne.n	80088cc <USB_EPStartXfer+0x3e6>
 80088c2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80088c6:	3b01      	subs	r3, #1
 80088c8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80088cc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80088d0:	b29b      	uxth	r3, r3
 80088d2:	029b      	lsls	r3, r3, #10
 80088d4:	b29b      	uxth	r3, r3
 80088d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80088da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80088de:	b29a      	uxth	r2, r3
 80088e0:	f107 0314 	add.w	r3, r7, #20
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	801a      	strh	r2, [r3, #0]
 80088e8:	e02a      	b.n	8008940 <USB_EPStartXfer+0x45a>
 80088ea:	463b      	mov	r3, r7
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	785b      	ldrb	r3, [r3, #1]
 80088f0:	2b01      	cmp	r3, #1
 80088f2:	d125      	bne.n	8008940 <USB_EPStartXfer+0x45a>
 80088f4:	f107 0320 	add.w	r3, r7, #32
 80088f8:	1d3a      	adds	r2, r7, #4
 80088fa:	6812      	ldr	r2, [r2, #0]
 80088fc:	601a      	str	r2, [r3, #0]
 80088fe:	1d3b      	adds	r3, r7, #4
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008906:	b29b      	uxth	r3, r3
 8008908:	4619      	mov	r1, r3
 800890a:	f107 0320 	add.w	r3, r7, #32
 800890e:	f107 0220 	add.w	r2, r7, #32
 8008912:	6812      	ldr	r2, [r2, #0]
 8008914:	440a      	add	r2, r1
 8008916:	601a      	str	r2, [r3, #0]
 8008918:	463b      	mov	r3, r7
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	781b      	ldrb	r3, [r3, #0]
 800891e:	00da      	lsls	r2, r3, #3
 8008920:	f107 0320 	add.w	r3, r7, #32
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	4413      	add	r3, r2
 8008928:	f203 4202 	addw	r2, r3, #1026	; 0x402
 800892c:	f107 031c 	add.w	r3, r7, #28
 8008930:	601a      	str	r2, [r3, #0]
 8008932:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008936:	b29a      	uxth	r2, r3
 8008938:	f107 031c 	add.w	r3, r7, #28
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008940:	463b      	mov	r3, r7
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	891b      	ldrh	r3, [r3, #8]
 8008946:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800894a:	463b      	mov	r3, r7
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	6959      	ldr	r1, [r3, #20]
 8008950:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008954:	b29b      	uxth	r3, r3
 8008956:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800895a:	1d38      	adds	r0, r7, #4
 800895c:	6800      	ldr	r0, [r0, #0]
 800895e:	f001 fa14 	bl	8009d8a <USB_WritePMA>
 8008962:	f000 bcc6 	b.w	80092f2 <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008966:	463b      	mov	r3, r7
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	785b      	ldrb	r3, [r3, #1]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d164      	bne.n	8008a3a <USB_EPStartXfer+0x554>
 8008970:	1d3b      	adds	r3, r7, #4
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	64bb      	str	r3, [r7, #72]	; 0x48
 8008976:	1d3b      	adds	r3, r7, #4
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800897e:	b29b      	uxth	r3, r3
 8008980:	461a      	mov	r2, r3
 8008982:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008984:	4413      	add	r3, r2
 8008986:	64bb      	str	r3, [r7, #72]	; 0x48
 8008988:	463b      	mov	r3, r7
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	781b      	ldrb	r3, [r3, #0]
 800898e:	00da      	lsls	r2, r3, #3
 8008990:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008992:	4413      	add	r3, r2
 8008994:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008998:	647b      	str	r3, [r7, #68]	; 0x44
 800899a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d112      	bne.n	80089c8 <USB_EPStartXfer+0x4e2>
 80089a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089a4:	881b      	ldrh	r3, [r3, #0]
 80089a6:	b29b      	uxth	r3, r3
 80089a8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80089ac:	b29a      	uxth	r2, r3
 80089ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089b0:	801a      	strh	r2, [r3, #0]
 80089b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089b4:	881b      	ldrh	r3, [r3, #0]
 80089b6:	b29b      	uxth	r3, r3
 80089b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80089bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80089c0:	b29a      	uxth	r2, r3
 80089c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089c4:	801a      	strh	r2, [r3, #0]
 80089c6:	e057      	b.n	8008a78 <USB_EPStartXfer+0x592>
 80089c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089cc:	2b3e      	cmp	r3, #62	; 0x3e
 80089ce:	d817      	bhi.n	8008a00 <USB_EPStartXfer+0x51a>
 80089d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089d4:	085b      	lsrs	r3, r3, #1
 80089d6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80089da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089de:	f003 0301 	and.w	r3, r3, #1
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d004      	beq.n	80089f0 <USB_EPStartXfer+0x50a>
 80089e6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80089ea:	3301      	adds	r3, #1
 80089ec:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80089f0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80089f4:	b29b      	uxth	r3, r3
 80089f6:	029b      	lsls	r3, r3, #10
 80089f8:	b29a      	uxth	r2, r3
 80089fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089fc:	801a      	strh	r2, [r3, #0]
 80089fe:	e03b      	b.n	8008a78 <USB_EPStartXfer+0x592>
 8008a00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a04:	095b      	lsrs	r3, r3, #5
 8008a06:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8008a0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a0e:	f003 031f 	and.w	r3, r3, #31
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d104      	bne.n	8008a20 <USB_EPStartXfer+0x53a>
 8008a16:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008a1a:	3b01      	subs	r3, #1
 8008a1c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8008a20:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008a24:	b29b      	uxth	r3, r3
 8008a26:	029b      	lsls	r3, r3, #10
 8008a28:	b29b      	uxth	r3, r3
 8008a2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a32:	b29a      	uxth	r2, r3
 8008a34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a36:	801a      	strh	r2, [r3, #0]
 8008a38:	e01e      	b.n	8008a78 <USB_EPStartXfer+0x592>
 8008a3a:	463b      	mov	r3, r7
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	785b      	ldrb	r3, [r3, #1]
 8008a40:	2b01      	cmp	r3, #1
 8008a42:	d119      	bne.n	8008a78 <USB_EPStartXfer+0x592>
 8008a44:	1d3b      	adds	r3, r7, #4
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	653b      	str	r3, [r7, #80]	; 0x50
 8008a4a:	1d3b      	adds	r3, r7, #4
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a52:	b29b      	uxth	r3, r3
 8008a54:	461a      	mov	r2, r3
 8008a56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a58:	4413      	add	r3, r2
 8008a5a:	653b      	str	r3, [r7, #80]	; 0x50
 8008a5c:	463b      	mov	r3, r7
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	781b      	ldrb	r3, [r3, #0]
 8008a62:	00da      	lsls	r2, r3, #3
 8008a64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a66:	4413      	add	r3, r2
 8008a68:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008a6c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008a6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a72:	b29a      	uxth	r2, r3
 8008a74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a76:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008a78:	463b      	mov	r3, r7
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	891b      	ldrh	r3, [r3, #8]
 8008a7e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008a82:	463b      	mov	r3, r7
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	6959      	ldr	r1, [r3, #20]
 8008a88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a8c:	b29b      	uxth	r3, r3
 8008a8e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008a92:	1d38      	adds	r0, r7, #4
 8008a94:	6800      	ldr	r0, [r0, #0]
 8008a96:	f001 f978 	bl	8009d8a <USB_WritePMA>
            ep->xfer_buff += len;
 8008a9a:	463b      	mov	r3, r7
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	695a      	ldr	r2, [r3, #20]
 8008aa0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008aa4:	441a      	add	r2, r3
 8008aa6:	463b      	mov	r3, r7
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008aac:	463b      	mov	r3, r7
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	6a1a      	ldr	r2, [r3, #32]
 8008ab2:	463b      	mov	r3, r7
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	691b      	ldr	r3, [r3, #16]
 8008ab8:	429a      	cmp	r2, r3
 8008aba:	d909      	bls.n	8008ad0 <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 8008abc:	463b      	mov	r3, r7
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	6a1a      	ldr	r2, [r3, #32]
 8008ac2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ac6:	1ad2      	subs	r2, r2, r3
 8008ac8:	463b      	mov	r3, r7
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	621a      	str	r2, [r3, #32]
 8008ace:	e008      	b.n	8008ae2 <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 8008ad0:	463b      	mov	r3, r7
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	6a1b      	ldr	r3, [r3, #32]
 8008ad6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8008ada:	463b      	mov	r3, r7
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	2200      	movs	r2, #0
 8008ae0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008ae2:	1d3b      	adds	r3, r7, #4
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	643b      	str	r3, [r7, #64]	; 0x40
 8008ae8:	463b      	mov	r3, r7
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	785b      	ldrb	r3, [r3, #1]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d164      	bne.n	8008bbc <USB_EPStartXfer+0x6d6>
 8008af2:	1d3b      	adds	r3, r7, #4
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	63bb      	str	r3, [r7, #56]	; 0x38
 8008af8:	1d3b      	adds	r3, r7, #4
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b00:	b29b      	uxth	r3, r3
 8008b02:	461a      	mov	r2, r3
 8008b04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b06:	4413      	add	r3, r2
 8008b08:	63bb      	str	r3, [r7, #56]	; 0x38
 8008b0a:	463b      	mov	r3, r7
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	781b      	ldrb	r3, [r3, #0]
 8008b10:	00da      	lsls	r2, r3, #3
 8008b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b14:	4413      	add	r3, r2
 8008b16:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008b1a:	637b      	str	r3, [r7, #52]	; 0x34
 8008b1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d112      	bne.n	8008b4a <USB_EPStartXfer+0x664>
 8008b24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b26:	881b      	ldrh	r3, [r3, #0]
 8008b28:	b29b      	uxth	r3, r3
 8008b2a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008b2e:	b29a      	uxth	r2, r3
 8008b30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b32:	801a      	strh	r2, [r3, #0]
 8008b34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b36:	881b      	ldrh	r3, [r3, #0]
 8008b38:	b29b      	uxth	r3, r3
 8008b3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b42:	b29a      	uxth	r2, r3
 8008b44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b46:	801a      	strh	r2, [r3, #0]
 8008b48:	e054      	b.n	8008bf4 <USB_EPStartXfer+0x70e>
 8008b4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b4e:	2b3e      	cmp	r3, #62	; 0x3e
 8008b50:	d817      	bhi.n	8008b82 <USB_EPStartXfer+0x69c>
 8008b52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b56:	085b      	lsrs	r3, r3, #1
 8008b58:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8008b5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b60:	f003 0301 	and.w	r3, r3, #1
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d004      	beq.n	8008b72 <USB_EPStartXfer+0x68c>
 8008b68:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008b6c:	3301      	adds	r3, #1
 8008b6e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8008b72:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008b76:	b29b      	uxth	r3, r3
 8008b78:	029b      	lsls	r3, r3, #10
 8008b7a:	b29a      	uxth	r2, r3
 8008b7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b7e:	801a      	strh	r2, [r3, #0]
 8008b80:	e038      	b.n	8008bf4 <USB_EPStartXfer+0x70e>
 8008b82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b86:	095b      	lsrs	r3, r3, #5
 8008b88:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8008b8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b90:	f003 031f 	and.w	r3, r3, #31
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d104      	bne.n	8008ba2 <USB_EPStartXfer+0x6bc>
 8008b98:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008b9c:	3b01      	subs	r3, #1
 8008b9e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8008ba2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008ba6:	b29b      	uxth	r3, r3
 8008ba8:	029b      	lsls	r3, r3, #10
 8008baa:	b29b      	uxth	r3, r3
 8008bac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008bb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008bb4:	b29a      	uxth	r2, r3
 8008bb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bb8:	801a      	strh	r2, [r3, #0]
 8008bba:	e01b      	b.n	8008bf4 <USB_EPStartXfer+0x70e>
 8008bbc:	463b      	mov	r3, r7
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	785b      	ldrb	r3, [r3, #1]
 8008bc2:	2b01      	cmp	r3, #1
 8008bc4:	d116      	bne.n	8008bf4 <USB_EPStartXfer+0x70e>
 8008bc6:	1d3b      	adds	r3, r7, #4
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008bce:	b29b      	uxth	r3, r3
 8008bd0:	461a      	mov	r2, r3
 8008bd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008bd4:	4413      	add	r3, r2
 8008bd6:	643b      	str	r3, [r7, #64]	; 0x40
 8008bd8:	463b      	mov	r3, r7
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	781b      	ldrb	r3, [r3, #0]
 8008bde:	00da      	lsls	r2, r3, #3
 8008be0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008be2:	4413      	add	r3, r2
 8008be4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008be8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008bea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008bee:	b29a      	uxth	r2, r3
 8008bf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bf2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008bf4:	463b      	mov	r3, r7
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	895b      	ldrh	r3, [r3, #10]
 8008bfa:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008bfe:	463b      	mov	r3, r7
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	6959      	ldr	r1, [r3, #20]
 8008c04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c08:	b29b      	uxth	r3, r3
 8008c0a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008c0e:	1d38      	adds	r0, r7, #4
 8008c10:	6800      	ldr	r0, [r0, #0]
 8008c12:	f001 f8ba 	bl	8009d8a <USB_WritePMA>
 8008c16:	e36c      	b.n	80092f2 <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8008c18:	463b      	mov	r3, r7
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	6a1b      	ldr	r3, [r3, #32]
 8008c1e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8008c22:	1d3b      	adds	r3, r7, #4
 8008c24:	681a      	ldr	r2, [r3, #0]
 8008c26:	463b      	mov	r3, r7
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	781b      	ldrb	r3, [r3, #0]
 8008c2c:	009b      	lsls	r3, r3, #2
 8008c2e:	4413      	add	r3, r2
 8008c30:	881b      	ldrh	r3, [r3, #0]
 8008c32:	b29b      	uxth	r3, r3
 8008c34:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8008c38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c3c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8008c40:	1d3b      	adds	r3, r7, #4
 8008c42:	681a      	ldr	r2, [r3, #0]
 8008c44:	463b      	mov	r3, r7
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	781b      	ldrb	r3, [r3, #0]
 8008c4a:	009b      	lsls	r3, r3, #2
 8008c4c:	441a      	add	r2, r3
 8008c4e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8008c52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c62:	b29b      	uxth	r3, r3
 8008c64:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008c66:	1d3b      	adds	r3, r7, #4
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008c6c:	1d3b      	adds	r3, r7, #4
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c74:	b29b      	uxth	r3, r3
 8008c76:	461a      	mov	r2, r3
 8008c78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008c7a:	4413      	add	r3, r2
 8008c7c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008c7e:	463b      	mov	r3, r7
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	781b      	ldrb	r3, [r3, #0]
 8008c84:	00da      	lsls	r2, r3, #3
 8008c86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008c88:	4413      	add	r3, r2
 8008c8a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008c8e:	65bb      	str	r3, [r7, #88]	; 0x58
 8008c90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c94:	b29a      	uxth	r2, r3
 8008c96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008c98:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008c9a:	463b      	mov	r3, r7
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	891b      	ldrh	r3, [r3, #8]
 8008ca0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008ca4:	463b      	mov	r3, r7
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	6959      	ldr	r1, [r3, #20]
 8008caa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008cae:	b29b      	uxth	r3, r3
 8008cb0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008cb4:	1d38      	adds	r0, r7, #4
 8008cb6:	6800      	ldr	r0, [r0, #0]
 8008cb8:	f001 f867 	bl	8009d8a <USB_WritePMA>
 8008cbc:	e319      	b.n	80092f2 <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8008cbe:	1d3b      	adds	r3, r7, #4
 8008cc0:	681a      	ldr	r2, [r3, #0]
 8008cc2:	463b      	mov	r3, r7
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	781b      	ldrb	r3, [r3, #0]
 8008cc8:	009b      	lsls	r3, r3, #2
 8008cca:	4413      	add	r3, r2
 8008ccc:	881b      	ldrh	r3, [r3, #0]
 8008cce:	b29b      	uxth	r3, r3
 8008cd0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008cd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cd8:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8008cdc:	1d3b      	adds	r3, r7, #4
 8008cde:	681a      	ldr	r2, [r3, #0]
 8008ce0:	463b      	mov	r3, r7
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	781b      	ldrb	r3, [r3, #0]
 8008ce6:	009b      	lsls	r3, r3, #2
 8008ce8:	441a      	add	r2, r3
 8008cea:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8008cee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008cf2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008cf6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008cfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cfe:	b29b      	uxth	r3, r3
 8008d00:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8008d02:	463b      	mov	r3, r7
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	6a1a      	ldr	r2, [r3, #32]
 8008d08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d0c:	1ad2      	subs	r2, r2, r3
 8008d0e:	463b      	mov	r3, r7
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008d14:	1d3b      	adds	r3, r7, #4
 8008d16:	681a      	ldr	r2, [r3, #0]
 8008d18:	463b      	mov	r3, r7
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	781b      	ldrb	r3, [r3, #0]
 8008d1e:	009b      	lsls	r3, r3, #2
 8008d20:	4413      	add	r3, r2
 8008d22:	881b      	ldrh	r3, [r3, #0]
 8008d24:	b29b      	uxth	r3, r3
 8008d26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	f000 8162 	beq.w	8008ff4 <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008d30:	1d3b      	adds	r3, r7, #4
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008d38:	463b      	mov	r3, r7
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	785b      	ldrb	r3, [r3, #1]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d164      	bne.n	8008e0c <USB_EPStartXfer+0x926>
 8008d42:	1d3b      	adds	r3, r7, #4
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	67bb      	str	r3, [r7, #120]	; 0x78
 8008d48:	1d3b      	adds	r3, r7, #4
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d50:	b29b      	uxth	r3, r3
 8008d52:	461a      	mov	r2, r3
 8008d54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d56:	4413      	add	r3, r2
 8008d58:	67bb      	str	r3, [r7, #120]	; 0x78
 8008d5a:	463b      	mov	r3, r7
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	781b      	ldrb	r3, [r3, #0]
 8008d60:	00da      	lsls	r2, r3, #3
 8008d62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d64:	4413      	add	r3, r2
 8008d66:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008d6a:	677b      	str	r3, [r7, #116]	; 0x74
 8008d6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d112      	bne.n	8008d9a <USB_EPStartXfer+0x8b4>
 8008d74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008d76:	881b      	ldrh	r3, [r3, #0]
 8008d78:	b29b      	uxth	r3, r3
 8008d7a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008d7e:	b29a      	uxth	r2, r3
 8008d80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008d82:	801a      	strh	r2, [r3, #0]
 8008d84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008d86:	881b      	ldrh	r3, [r3, #0]
 8008d88:	b29b      	uxth	r3, r3
 8008d8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d92:	b29a      	uxth	r2, r3
 8008d94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008d96:	801a      	strh	r2, [r3, #0]
 8008d98:	e057      	b.n	8008e4a <USB_EPStartXfer+0x964>
 8008d9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d9e:	2b3e      	cmp	r3, #62	; 0x3e
 8008da0:	d817      	bhi.n	8008dd2 <USB_EPStartXfer+0x8ec>
 8008da2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008da6:	085b      	lsrs	r3, r3, #1
 8008da8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008dac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008db0:	f003 0301 	and.w	r3, r3, #1
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d004      	beq.n	8008dc2 <USB_EPStartXfer+0x8dc>
 8008db8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008dbc:	3301      	adds	r3, #1
 8008dbe:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008dc2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008dc6:	b29b      	uxth	r3, r3
 8008dc8:	029b      	lsls	r3, r3, #10
 8008dca:	b29a      	uxth	r2, r3
 8008dcc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008dce:	801a      	strh	r2, [r3, #0]
 8008dd0:	e03b      	b.n	8008e4a <USB_EPStartXfer+0x964>
 8008dd2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008dd6:	095b      	lsrs	r3, r3, #5
 8008dd8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008ddc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008de0:	f003 031f 	and.w	r3, r3, #31
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d104      	bne.n	8008df2 <USB_EPStartXfer+0x90c>
 8008de8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008dec:	3b01      	subs	r3, #1
 8008dee:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008df2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008df6:	b29b      	uxth	r3, r3
 8008df8:	029b      	lsls	r3, r3, #10
 8008dfa:	b29b      	uxth	r3, r3
 8008dfc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e04:	b29a      	uxth	r2, r3
 8008e06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008e08:	801a      	strh	r2, [r3, #0]
 8008e0a:	e01e      	b.n	8008e4a <USB_EPStartXfer+0x964>
 8008e0c:	463b      	mov	r3, r7
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	785b      	ldrb	r3, [r3, #1]
 8008e12:	2b01      	cmp	r3, #1
 8008e14:	d119      	bne.n	8008e4a <USB_EPStartXfer+0x964>
 8008e16:	1d3b      	adds	r3, r7, #4
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e1e:	b29b      	uxth	r3, r3
 8008e20:	461a      	mov	r2, r3
 8008e22:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008e26:	4413      	add	r3, r2
 8008e28:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008e2c:	463b      	mov	r3, r7
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	781b      	ldrb	r3, [r3, #0]
 8008e32:	00da      	lsls	r2, r3, #3
 8008e34:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008e38:	4413      	add	r3, r2
 8008e3a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008e3e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008e40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e44:	b29a      	uxth	r2, r3
 8008e46:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008e48:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8008e4a:	463b      	mov	r3, r7
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	895b      	ldrh	r3, [r3, #10]
 8008e50:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008e54:	463b      	mov	r3, r7
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	6959      	ldr	r1, [r3, #20]
 8008e5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e5e:	b29b      	uxth	r3, r3
 8008e60:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008e64:	1d38      	adds	r0, r7, #4
 8008e66:	6800      	ldr	r0, [r0, #0]
 8008e68:	f000 ff8f 	bl	8009d8a <USB_WritePMA>
          ep->xfer_buff += len;
 8008e6c:	463b      	mov	r3, r7
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	695a      	ldr	r2, [r3, #20]
 8008e72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e76:	441a      	add	r2, r3
 8008e78:	463b      	mov	r3, r7
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8008e7e:	463b      	mov	r3, r7
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	6a1a      	ldr	r2, [r3, #32]
 8008e84:	463b      	mov	r3, r7
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	691b      	ldr	r3, [r3, #16]
 8008e8a:	429a      	cmp	r2, r3
 8008e8c:	d909      	bls.n	8008ea2 <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 8008e8e:	463b      	mov	r3, r7
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	6a1a      	ldr	r2, [r3, #32]
 8008e94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e98:	1ad2      	subs	r2, r2, r3
 8008e9a:	463b      	mov	r3, r7
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	621a      	str	r2, [r3, #32]
 8008ea0:	e008      	b.n	8008eb4 <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 8008ea2:	463b      	mov	r3, r7
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	6a1b      	ldr	r3, [r3, #32]
 8008ea8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8008eac:	463b      	mov	r3, r7
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8008eb4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	f000 821a 	beq.w	80092f2 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008ebe:	463b      	mov	r3, r7
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	785b      	ldrb	r3, [r3, #1]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d164      	bne.n	8008f92 <USB_EPStartXfer+0xaac>
 8008ec8:	1d3b      	adds	r3, r7, #4
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	66bb      	str	r3, [r7, #104]	; 0x68
 8008ece:	1d3b      	adds	r3, r7, #4
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008ed6:	b29b      	uxth	r3, r3
 8008ed8:	461a      	mov	r2, r3
 8008eda:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008edc:	4413      	add	r3, r2
 8008ede:	66bb      	str	r3, [r7, #104]	; 0x68
 8008ee0:	463b      	mov	r3, r7
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	781b      	ldrb	r3, [r3, #0]
 8008ee6:	00da      	lsls	r2, r3, #3
 8008ee8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008eea:	4413      	add	r3, r2
 8008eec:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008ef0:	667b      	str	r3, [r7, #100]	; 0x64
 8008ef2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d112      	bne.n	8008f20 <USB_EPStartXfer+0xa3a>
 8008efa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008efc:	881b      	ldrh	r3, [r3, #0]
 8008efe:	b29b      	uxth	r3, r3
 8008f00:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008f04:	b29a      	uxth	r2, r3
 8008f06:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008f08:	801a      	strh	r2, [r3, #0]
 8008f0a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008f0c:	881b      	ldrh	r3, [r3, #0]
 8008f0e:	b29b      	uxth	r3, r3
 8008f10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f18:	b29a      	uxth	r2, r3
 8008f1a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008f1c:	801a      	strh	r2, [r3, #0]
 8008f1e:	e057      	b.n	8008fd0 <USB_EPStartXfer+0xaea>
 8008f20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f24:	2b3e      	cmp	r3, #62	; 0x3e
 8008f26:	d817      	bhi.n	8008f58 <USB_EPStartXfer+0xa72>
 8008f28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f2c:	085b      	lsrs	r3, r3, #1
 8008f2e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008f32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f36:	f003 0301 	and.w	r3, r3, #1
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d004      	beq.n	8008f48 <USB_EPStartXfer+0xa62>
 8008f3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f42:	3301      	adds	r3, #1
 8008f44:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008f48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f4c:	b29b      	uxth	r3, r3
 8008f4e:	029b      	lsls	r3, r3, #10
 8008f50:	b29a      	uxth	r2, r3
 8008f52:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008f54:	801a      	strh	r2, [r3, #0]
 8008f56:	e03b      	b.n	8008fd0 <USB_EPStartXfer+0xaea>
 8008f58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f5c:	095b      	lsrs	r3, r3, #5
 8008f5e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008f62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f66:	f003 031f 	and.w	r3, r3, #31
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d104      	bne.n	8008f78 <USB_EPStartXfer+0xa92>
 8008f6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f72:	3b01      	subs	r3, #1
 8008f74:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008f78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f7c:	b29b      	uxth	r3, r3
 8008f7e:	029b      	lsls	r3, r3, #10
 8008f80:	b29b      	uxth	r3, r3
 8008f82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f8a:	b29a      	uxth	r2, r3
 8008f8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008f8e:	801a      	strh	r2, [r3, #0]
 8008f90:	e01e      	b.n	8008fd0 <USB_EPStartXfer+0xaea>
 8008f92:	463b      	mov	r3, r7
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	785b      	ldrb	r3, [r3, #1]
 8008f98:	2b01      	cmp	r3, #1
 8008f9a:	d119      	bne.n	8008fd0 <USB_EPStartXfer+0xaea>
 8008f9c:	1d3b      	adds	r3, r7, #4
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	673b      	str	r3, [r7, #112]	; 0x70
 8008fa2:	1d3b      	adds	r3, r7, #4
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008faa:	b29b      	uxth	r3, r3
 8008fac:	461a      	mov	r2, r3
 8008fae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008fb0:	4413      	add	r3, r2
 8008fb2:	673b      	str	r3, [r7, #112]	; 0x70
 8008fb4:	463b      	mov	r3, r7
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	781b      	ldrb	r3, [r3, #0]
 8008fba:	00da      	lsls	r2, r3, #3
 8008fbc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008fbe:	4413      	add	r3, r2
 8008fc0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008fc4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008fc6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008fca:	b29a      	uxth	r2, r3
 8008fcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008fce:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008fd0:	463b      	mov	r3, r7
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	891b      	ldrh	r3, [r3, #8]
 8008fd6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008fda:	463b      	mov	r3, r7
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	6959      	ldr	r1, [r3, #20]
 8008fe0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008fe4:	b29b      	uxth	r3, r3
 8008fe6:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008fea:	1d38      	adds	r0, r7, #4
 8008fec:	6800      	ldr	r0, [r0, #0]
 8008fee:	f000 fecc 	bl	8009d8a <USB_WritePMA>
 8008ff2:	e17e      	b.n	80092f2 <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008ff4:	463b      	mov	r3, r7
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	785b      	ldrb	r3, [r3, #1]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d16f      	bne.n	80090de <USB_EPStartXfer+0xbf8>
 8008ffe:	1d3b      	adds	r3, r7, #4
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009006:	1d3b      	adds	r3, r7, #4
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800900e:	b29b      	uxth	r3, r3
 8009010:	461a      	mov	r2, r3
 8009012:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009016:	4413      	add	r3, r2
 8009018:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800901c:	463b      	mov	r3, r7
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	781b      	ldrb	r3, [r3, #0]
 8009022:	00da      	lsls	r2, r3, #3
 8009024:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009028:	4413      	add	r3, r2
 800902a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800902e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009032:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009036:	2b00      	cmp	r3, #0
 8009038:	d116      	bne.n	8009068 <USB_EPStartXfer+0xb82>
 800903a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800903e:	881b      	ldrh	r3, [r3, #0]
 8009040:	b29b      	uxth	r3, r3
 8009042:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009046:	b29a      	uxth	r2, r3
 8009048:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800904c:	801a      	strh	r2, [r3, #0]
 800904e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009052:	881b      	ldrh	r3, [r3, #0]
 8009054:	b29b      	uxth	r3, r3
 8009056:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800905a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800905e:	b29a      	uxth	r2, r3
 8009060:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009064:	801a      	strh	r2, [r3, #0]
 8009066:	e05f      	b.n	8009128 <USB_EPStartXfer+0xc42>
 8009068:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800906c:	2b3e      	cmp	r3, #62	; 0x3e
 800906e:	d818      	bhi.n	80090a2 <USB_EPStartXfer+0xbbc>
 8009070:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009074:	085b      	lsrs	r3, r3, #1
 8009076:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800907a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800907e:	f003 0301 	and.w	r3, r3, #1
 8009082:	2b00      	cmp	r3, #0
 8009084:	d004      	beq.n	8009090 <USB_EPStartXfer+0xbaa>
 8009086:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800908a:	3301      	adds	r3, #1
 800908c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8009090:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8009094:	b29b      	uxth	r3, r3
 8009096:	029b      	lsls	r3, r3, #10
 8009098:	b29a      	uxth	r2, r3
 800909a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800909e:	801a      	strh	r2, [r3, #0]
 80090a0:	e042      	b.n	8009128 <USB_EPStartXfer+0xc42>
 80090a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80090a6:	095b      	lsrs	r3, r3, #5
 80090a8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80090ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80090b0:	f003 031f 	and.w	r3, r3, #31
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d104      	bne.n	80090c2 <USB_EPStartXfer+0xbdc>
 80090b8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80090bc:	3b01      	subs	r3, #1
 80090be:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80090c2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80090c6:	b29b      	uxth	r3, r3
 80090c8:	029b      	lsls	r3, r3, #10
 80090ca:	b29b      	uxth	r3, r3
 80090cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80090d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80090d4:	b29a      	uxth	r2, r3
 80090d6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80090da:	801a      	strh	r2, [r3, #0]
 80090dc:	e024      	b.n	8009128 <USB_EPStartXfer+0xc42>
 80090de:	463b      	mov	r3, r7
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	785b      	ldrb	r3, [r3, #1]
 80090e4:	2b01      	cmp	r3, #1
 80090e6:	d11f      	bne.n	8009128 <USB_EPStartXfer+0xc42>
 80090e8:	1d3b      	adds	r3, r7, #4
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80090f0:	1d3b      	adds	r3, r7, #4
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80090f8:	b29b      	uxth	r3, r3
 80090fa:	461a      	mov	r2, r3
 80090fc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009100:	4413      	add	r3, r2
 8009102:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009106:	463b      	mov	r3, r7
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	781b      	ldrb	r3, [r3, #0]
 800910c:	00da      	lsls	r2, r3, #3
 800910e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009112:	4413      	add	r3, r2
 8009114:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009118:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800911c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009120:	b29a      	uxth	r2, r3
 8009122:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009126:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009128:	463b      	mov	r3, r7
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	891b      	ldrh	r3, [r3, #8]
 800912e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009132:	463b      	mov	r3, r7
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	6959      	ldr	r1, [r3, #20]
 8009138:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800913c:	b29b      	uxth	r3, r3
 800913e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009142:	1d38      	adds	r0, r7, #4
 8009144:	6800      	ldr	r0, [r0, #0]
 8009146:	f000 fe20 	bl	8009d8a <USB_WritePMA>
          ep->xfer_buff += len;
 800914a:	463b      	mov	r3, r7
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	695a      	ldr	r2, [r3, #20]
 8009150:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009154:	441a      	add	r2, r3
 8009156:	463b      	mov	r3, r7
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800915c:	463b      	mov	r3, r7
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	6a1a      	ldr	r2, [r3, #32]
 8009162:	463b      	mov	r3, r7
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	691b      	ldr	r3, [r3, #16]
 8009168:	429a      	cmp	r2, r3
 800916a:	d909      	bls.n	8009180 <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 800916c:	463b      	mov	r3, r7
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	6a1a      	ldr	r2, [r3, #32]
 8009172:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009176:	1ad2      	subs	r2, r2, r3
 8009178:	463b      	mov	r3, r7
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	621a      	str	r2, [r3, #32]
 800917e:	e008      	b.n	8009192 <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 8009180:	463b      	mov	r3, r7
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	6a1b      	ldr	r3, [r3, #32]
 8009186:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800918a:	463b      	mov	r3, r7
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	2200      	movs	r2, #0
 8009190:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8009192:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009196:	2b00      	cmp	r3, #0
 8009198:	f000 80ab 	beq.w	80092f2 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800919c:	1d3b      	adds	r3, r7, #4
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80091a4:	463b      	mov	r3, r7
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	785b      	ldrb	r3, [r3, #1]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d16f      	bne.n	800928e <USB_EPStartXfer+0xda8>
 80091ae:	1d3b      	adds	r3, r7, #4
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80091b6:	1d3b      	adds	r3, r7, #4
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80091be:	b29b      	uxth	r3, r3
 80091c0:	461a      	mov	r2, r3
 80091c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80091c6:	4413      	add	r3, r2
 80091c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80091cc:	463b      	mov	r3, r7
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	781b      	ldrb	r3, [r3, #0]
 80091d2:	00da      	lsls	r2, r3, #3
 80091d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80091d8:	4413      	add	r3, r2
 80091da:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80091de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80091e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d116      	bne.n	8009218 <USB_EPStartXfer+0xd32>
 80091ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80091ee:	881b      	ldrh	r3, [r3, #0]
 80091f0:	b29b      	uxth	r3, r3
 80091f2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80091f6:	b29a      	uxth	r2, r3
 80091f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80091fc:	801a      	strh	r2, [r3, #0]
 80091fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009202:	881b      	ldrh	r3, [r3, #0]
 8009204:	b29b      	uxth	r3, r3
 8009206:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800920a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800920e:	b29a      	uxth	r2, r3
 8009210:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009214:	801a      	strh	r2, [r3, #0]
 8009216:	e05b      	b.n	80092d0 <USB_EPStartXfer+0xdea>
 8009218:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800921c:	2b3e      	cmp	r3, #62	; 0x3e
 800921e:	d818      	bhi.n	8009252 <USB_EPStartXfer+0xd6c>
 8009220:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009224:	085b      	lsrs	r3, r3, #1
 8009226:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800922a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800922e:	f003 0301 	and.w	r3, r3, #1
 8009232:	2b00      	cmp	r3, #0
 8009234:	d004      	beq.n	8009240 <USB_EPStartXfer+0xd5a>
 8009236:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800923a:	3301      	adds	r3, #1
 800923c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009240:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009244:	b29b      	uxth	r3, r3
 8009246:	029b      	lsls	r3, r3, #10
 8009248:	b29a      	uxth	r2, r3
 800924a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800924e:	801a      	strh	r2, [r3, #0]
 8009250:	e03e      	b.n	80092d0 <USB_EPStartXfer+0xdea>
 8009252:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009256:	095b      	lsrs	r3, r3, #5
 8009258:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800925c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009260:	f003 031f 	and.w	r3, r3, #31
 8009264:	2b00      	cmp	r3, #0
 8009266:	d104      	bne.n	8009272 <USB_EPStartXfer+0xd8c>
 8009268:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800926c:	3b01      	subs	r3, #1
 800926e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009272:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009276:	b29b      	uxth	r3, r3
 8009278:	029b      	lsls	r3, r3, #10
 800927a:	b29b      	uxth	r3, r3
 800927c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009280:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009284:	b29a      	uxth	r2, r3
 8009286:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800928a:	801a      	strh	r2, [r3, #0]
 800928c:	e020      	b.n	80092d0 <USB_EPStartXfer+0xdea>
 800928e:	463b      	mov	r3, r7
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	785b      	ldrb	r3, [r3, #1]
 8009294:	2b01      	cmp	r3, #1
 8009296:	d11b      	bne.n	80092d0 <USB_EPStartXfer+0xdea>
 8009298:	1d3b      	adds	r3, r7, #4
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80092a0:	b29b      	uxth	r3, r3
 80092a2:	461a      	mov	r2, r3
 80092a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80092a8:	4413      	add	r3, r2
 80092aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80092ae:	463b      	mov	r3, r7
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	781b      	ldrb	r3, [r3, #0]
 80092b4:	00da      	lsls	r2, r3, #3
 80092b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80092ba:	4413      	add	r3, r2
 80092bc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80092c0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80092c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80092c8:	b29a      	uxth	r2, r3
 80092ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80092ce:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80092d0:	463b      	mov	r3, r7
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	895b      	ldrh	r3, [r3, #10]
 80092d6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80092da:	463b      	mov	r3, r7
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	6959      	ldr	r1, [r3, #20]
 80092e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80092e4:	b29b      	uxth	r3, r3
 80092e6:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80092ea:	1d38      	adds	r0, r7, #4
 80092ec:	6800      	ldr	r0, [r0, #0]
 80092ee:	f000 fd4c 	bl	8009d8a <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80092f2:	1d3b      	adds	r3, r7, #4
 80092f4:	681a      	ldr	r2, [r3, #0]
 80092f6:	463b      	mov	r3, r7
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	781b      	ldrb	r3, [r3, #0]
 80092fc:	009b      	lsls	r3, r3, #2
 80092fe:	4413      	add	r3, r2
 8009300:	881b      	ldrh	r3, [r3, #0]
 8009302:	b29b      	uxth	r3, r3
 8009304:	f107 020a 	add.w	r2, r7, #10
 8009308:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800930c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009310:	8013      	strh	r3, [r2, #0]
 8009312:	f107 030a 	add.w	r3, r7, #10
 8009316:	f107 020a 	add.w	r2, r7, #10
 800931a:	8812      	ldrh	r2, [r2, #0]
 800931c:	f082 0210 	eor.w	r2, r2, #16
 8009320:	801a      	strh	r2, [r3, #0]
 8009322:	f107 030a 	add.w	r3, r7, #10
 8009326:	f107 020a 	add.w	r2, r7, #10
 800932a:	8812      	ldrh	r2, [r2, #0]
 800932c:	f082 0220 	eor.w	r2, r2, #32
 8009330:	801a      	strh	r2, [r3, #0]
 8009332:	1d3b      	adds	r3, r7, #4
 8009334:	681a      	ldr	r2, [r3, #0]
 8009336:	463b      	mov	r3, r7
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	781b      	ldrb	r3, [r3, #0]
 800933c:	009b      	lsls	r3, r3, #2
 800933e:	441a      	add	r2, r3
 8009340:	f107 030a 	add.w	r3, r7, #10
 8009344:	881b      	ldrh	r3, [r3, #0]
 8009346:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800934a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800934e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009352:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009356:	b29b      	uxth	r3, r3
 8009358:	8013      	strh	r3, [r2, #0]
 800935a:	e3b5      	b.n	8009ac8 <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800935c:	463b      	mov	r3, r7
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	7b1b      	ldrb	r3, [r3, #12]
 8009362:	2b00      	cmp	r3, #0
 8009364:	f040 8090 	bne.w	8009488 <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8009368:	463b      	mov	r3, r7
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	699a      	ldr	r2, [r3, #24]
 800936e:	463b      	mov	r3, r7
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	691b      	ldr	r3, [r3, #16]
 8009374:	429a      	cmp	r2, r3
 8009376:	d90e      	bls.n	8009396 <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 8009378:	463b      	mov	r3, r7
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	691b      	ldr	r3, [r3, #16]
 800937e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8009382:	463b      	mov	r3, r7
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	699a      	ldr	r2, [r3, #24]
 8009388:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800938c:	1ad2      	subs	r2, r2, r3
 800938e:	463b      	mov	r3, r7
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	619a      	str	r2, [r3, #24]
 8009394:	e008      	b.n	80093a8 <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 8009396:	463b      	mov	r3, r7
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	699b      	ldr	r3, [r3, #24]
 800939c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 80093a0:	463b      	mov	r3, r7
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	2200      	movs	r2, #0
 80093a6:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80093a8:	1d3b      	adds	r3, r7, #4
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80093b0:	1d3b      	adds	r3, r7, #4
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80093b8:	b29b      	uxth	r3, r3
 80093ba:	461a      	mov	r2, r3
 80093bc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80093c0:	4413      	add	r3, r2
 80093c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80093c6:	463b      	mov	r3, r7
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	781b      	ldrb	r3, [r3, #0]
 80093cc:	00da      	lsls	r2, r3, #3
 80093ce:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80093d2:	4413      	add	r3, r2
 80093d4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80093d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80093dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d116      	bne.n	8009412 <USB_EPStartXfer+0xf2c>
 80093e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80093e8:	881b      	ldrh	r3, [r3, #0]
 80093ea:	b29b      	uxth	r3, r3
 80093ec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80093f0:	b29a      	uxth	r2, r3
 80093f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80093f6:	801a      	strh	r2, [r3, #0]
 80093f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80093fc:	881b      	ldrh	r3, [r3, #0]
 80093fe:	b29b      	uxth	r3, r3
 8009400:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009404:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009408:	b29a      	uxth	r2, r3
 800940a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800940e:	801a      	strh	r2, [r3, #0]
 8009410:	e32c      	b.n	8009a6c <USB_EPStartXfer+0x1586>
 8009412:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009416:	2b3e      	cmp	r3, #62	; 0x3e
 8009418:	d818      	bhi.n	800944c <USB_EPStartXfer+0xf66>
 800941a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800941e:	085b      	lsrs	r3, r3, #1
 8009420:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009424:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009428:	f003 0301 	and.w	r3, r3, #1
 800942c:	2b00      	cmp	r3, #0
 800942e:	d004      	beq.n	800943a <USB_EPStartXfer+0xf54>
 8009430:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009434:	3301      	adds	r3, #1
 8009436:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800943a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800943e:	b29b      	uxth	r3, r3
 8009440:	029b      	lsls	r3, r3, #10
 8009442:	b29a      	uxth	r2, r3
 8009444:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009448:	801a      	strh	r2, [r3, #0]
 800944a:	e30f      	b.n	8009a6c <USB_EPStartXfer+0x1586>
 800944c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009450:	095b      	lsrs	r3, r3, #5
 8009452:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009456:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800945a:	f003 031f 	and.w	r3, r3, #31
 800945e:	2b00      	cmp	r3, #0
 8009460:	d104      	bne.n	800946c <USB_EPStartXfer+0xf86>
 8009462:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009466:	3b01      	subs	r3, #1
 8009468:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800946c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009470:	b29b      	uxth	r3, r3
 8009472:	029b      	lsls	r3, r3, #10
 8009474:	b29b      	uxth	r3, r3
 8009476:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800947a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800947e:	b29a      	uxth	r2, r3
 8009480:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009484:	801a      	strh	r2, [r3, #0]
 8009486:	e2f1      	b.n	8009a6c <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8009488:	463b      	mov	r3, r7
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	78db      	ldrb	r3, [r3, #3]
 800948e:	2b02      	cmp	r3, #2
 8009490:	f040 818f 	bne.w	80097b2 <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8009494:	463b      	mov	r3, r7
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	785b      	ldrb	r3, [r3, #1]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d175      	bne.n	800958a <USB_EPStartXfer+0x10a4>
 800949e:	1d3b      	adds	r3, r7, #4
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80094a6:	1d3b      	adds	r3, r7, #4
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80094ae:	b29b      	uxth	r3, r3
 80094b0:	461a      	mov	r2, r3
 80094b2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80094b6:	4413      	add	r3, r2
 80094b8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80094bc:	463b      	mov	r3, r7
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	781b      	ldrb	r3, [r3, #0]
 80094c2:	00da      	lsls	r2, r3, #3
 80094c4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80094c8:	4413      	add	r3, r2
 80094ca:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80094ce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80094d2:	463b      	mov	r3, r7
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	691b      	ldr	r3, [r3, #16]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d116      	bne.n	800950a <USB_EPStartXfer+0x1024>
 80094dc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80094e0:	881b      	ldrh	r3, [r3, #0]
 80094e2:	b29b      	uxth	r3, r3
 80094e4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80094e8:	b29a      	uxth	r2, r3
 80094ea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80094ee:	801a      	strh	r2, [r3, #0]
 80094f0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80094f4:	881b      	ldrh	r3, [r3, #0]
 80094f6:	b29b      	uxth	r3, r3
 80094f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80094fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009500:	b29a      	uxth	r2, r3
 8009502:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009506:	801a      	strh	r2, [r3, #0]
 8009508:	e065      	b.n	80095d6 <USB_EPStartXfer+0x10f0>
 800950a:	463b      	mov	r3, r7
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	691b      	ldr	r3, [r3, #16]
 8009510:	2b3e      	cmp	r3, #62	; 0x3e
 8009512:	d81a      	bhi.n	800954a <USB_EPStartXfer+0x1064>
 8009514:	463b      	mov	r3, r7
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	691b      	ldr	r3, [r3, #16]
 800951a:	085b      	lsrs	r3, r3, #1
 800951c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009520:	463b      	mov	r3, r7
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	691b      	ldr	r3, [r3, #16]
 8009526:	f003 0301 	and.w	r3, r3, #1
 800952a:	2b00      	cmp	r3, #0
 800952c:	d004      	beq.n	8009538 <USB_EPStartXfer+0x1052>
 800952e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009532:	3301      	adds	r3, #1
 8009534:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009538:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800953c:	b29b      	uxth	r3, r3
 800953e:	029b      	lsls	r3, r3, #10
 8009540:	b29a      	uxth	r2, r3
 8009542:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009546:	801a      	strh	r2, [r3, #0]
 8009548:	e045      	b.n	80095d6 <USB_EPStartXfer+0x10f0>
 800954a:	463b      	mov	r3, r7
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	691b      	ldr	r3, [r3, #16]
 8009550:	095b      	lsrs	r3, r3, #5
 8009552:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009556:	463b      	mov	r3, r7
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	691b      	ldr	r3, [r3, #16]
 800955c:	f003 031f 	and.w	r3, r3, #31
 8009560:	2b00      	cmp	r3, #0
 8009562:	d104      	bne.n	800956e <USB_EPStartXfer+0x1088>
 8009564:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009568:	3b01      	subs	r3, #1
 800956a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800956e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009572:	b29b      	uxth	r3, r3
 8009574:	029b      	lsls	r3, r3, #10
 8009576:	b29b      	uxth	r3, r3
 8009578:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800957c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009580:	b29a      	uxth	r2, r3
 8009582:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009586:	801a      	strh	r2, [r3, #0]
 8009588:	e025      	b.n	80095d6 <USB_EPStartXfer+0x10f0>
 800958a:	463b      	mov	r3, r7
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	785b      	ldrb	r3, [r3, #1]
 8009590:	2b01      	cmp	r3, #1
 8009592:	d120      	bne.n	80095d6 <USB_EPStartXfer+0x10f0>
 8009594:	1d3b      	adds	r3, r7, #4
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800959c:	1d3b      	adds	r3, r7, #4
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80095a4:	b29b      	uxth	r3, r3
 80095a6:	461a      	mov	r2, r3
 80095a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80095ac:	4413      	add	r3, r2
 80095ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80095b2:	463b      	mov	r3, r7
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	781b      	ldrb	r3, [r3, #0]
 80095b8:	00da      	lsls	r2, r3, #3
 80095ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80095be:	4413      	add	r3, r2
 80095c0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80095c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80095c8:	463b      	mov	r3, r7
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	691b      	ldr	r3, [r3, #16]
 80095ce:	b29a      	uxth	r2, r3
 80095d0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80095d4:	801a      	strh	r2, [r3, #0]
 80095d6:	1d3b      	adds	r3, r7, #4
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80095de:	463b      	mov	r3, r7
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	785b      	ldrb	r3, [r3, #1]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d175      	bne.n	80096d4 <USB_EPStartXfer+0x11ee>
 80095e8:	1d3b      	adds	r3, r7, #4
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80095f0:	1d3b      	adds	r3, r7, #4
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80095f8:	b29b      	uxth	r3, r3
 80095fa:	461a      	mov	r2, r3
 80095fc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009600:	4413      	add	r3, r2
 8009602:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009606:	463b      	mov	r3, r7
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	781b      	ldrb	r3, [r3, #0]
 800960c:	00da      	lsls	r2, r3, #3
 800960e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009612:	4413      	add	r3, r2
 8009614:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009618:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800961c:	463b      	mov	r3, r7
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	691b      	ldr	r3, [r3, #16]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d116      	bne.n	8009654 <USB_EPStartXfer+0x116e>
 8009626:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800962a:	881b      	ldrh	r3, [r3, #0]
 800962c:	b29b      	uxth	r3, r3
 800962e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009632:	b29a      	uxth	r2, r3
 8009634:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009638:	801a      	strh	r2, [r3, #0]
 800963a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800963e:	881b      	ldrh	r3, [r3, #0]
 8009640:	b29b      	uxth	r3, r3
 8009642:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009646:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800964a:	b29a      	uxth	r2, r3
 800964c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009650:	801a      	strh	r2, [r3, #0]
 8009652:	e061      	b.n	8009718 <USB_EPStartXfer+0x1232>
 8009654:	463b      	mov	r3, r7
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	691b      	ldr	r3, [r3, #16]
 800965a:	2b3e      	cmp	r3, #62	; 0x3e
 800965c:	d81a      	bhi.n	8009694 <USB_EPStartXfer+0x11ae>
 800965e:	463b      	mov	r3, r7
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	691b      	ldr	r3, [r3, #16]
 8009664:	085b      	lsrs	r3, r3, #1
 8009666:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800966a:	463b      	mov	r3, r7
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	691b      	ldr	r3, [r3, #16]
 8009670:	f003 0301 	and.w	r3, r3, #1
 8009674:	2b00      	cmp	r3, #0
 8009676:	d004      	beq.n	8009682 <USB_EPStartXfer+0x119c>
 8009678:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800967c:	3301      	adds	r3, #1
 800967e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009682:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009686:	b29b      	uxth	r3, r3
 8009688:	029b      	lsls	r3, r3, #10
 800968a:	b29a      	uxth	r2, r3
 800968c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009690:	801a      	strh	r2, [r3, #0]
 8009692:	e041      	b.n	8009718 <USB_EPStartXfer+0x1232>
 8009694:	463b      	mov	r3, r7
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	691b      	ldr	r3, [r3, #16]
 800969a:	095b      	lsrs	r3, r3, #5
 800969c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80096a0:	463b      	mov	r3, r7
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	691b      	ldr	r3, [r3, #16]
 80096a6:	f003 031f 	and.w	r3, r3, #31
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d104      	bne.n	80096b8 <USB_EPStartXfer+0x11d2>
 80096ae:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80096b2:	3b01      	subs	r3, #1
 80096b4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80096b8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80096bc:	b29b      	uxth	r3, r3
 80096be:	029b      	lsls	r3, r3, #10
 80096c0:	b29b      	uxth	r3, r3
 80096c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80096c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80096ca:	b29a      	uxth	r2, r3
 80096cc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80096d0:	801a      	strh	r2, [r3, #0]
 80096d2:	e021      	b.n	8009718 <USB_EPStartXfer+0x1232>
 80096d4:	463b      	mov	r3, r7
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	785b      	ldrb	r3, [r3, #1]
 80096da:	2b01      	cmp	r3, #1
 80096dc:	d11c      	bne.n	8009718 <USB_EPStartXfer+0x1232>
 80096de:	1d3b      	adds	r3, r7, #4
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80096e6:	b29b      	uxth	r3, r3
 80096e8:	461a      	mov	r2, r3
 80096ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80096ee:	4413      	add	r3, r2
 80096f0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80096f4:	463b      	mov	r3, r7
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	781b      	ldrb	r3, [r3, #0]
 80096fa:	00da      	lsls	r2, r3, #3
 80096fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009700:	4413      	add	r3, r2
 8009702:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009706:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800970a:	463b      	mov	r3, r7
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	691b      	ldr	r3, [r3, #16]
 8009710:	b29a      	uxth	r2, r3
 8009712:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009716:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8009718:	463b      	mov	r3, r7
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	69db      	ldr	r3, [r3, #28]
 800971e:	2b00      	cmp	r3, #0
 8009720:	f000 81a4 	beq.w	8009a6c <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8009724:	1d3b      	adds	r3, r7, #4
 8009726:	681a      	ldr	r2, [r3, #0]
 8009728:	463b      	mov	r3, r7
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	781b      	ldrb	r3, [r3, #0]
 800972e:	009b      	lsls	r3, r3, #2
 8009730:	4413      	add	r3, r2
 8009732:	881b      	ldrh	r3, [r3, #0]
 8009734:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009738:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800973c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009740:	2b00      	cmp	r3, #0
 8009742:	d005      	beq.n	8009750 <USB_EPStartXfer+0x126a>
 8009744:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8009748:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800974c:	2b00      	cmp	r3, #0
 800974e:	d10d      	bne.n	800976c <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009750:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8009754:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009758:	2b00      	cmp	r3, #0
 800975a:	f040 8187 	bne.w	8009a6c <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800975e:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8009762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009766:	2b00      	cmp	r3, #0
 8009768:	f040 8180 	bne.w	8009a6c <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800976c:	1d3b      	adds	r3, r7, #4
 800976e:	681a      	ldr	r2, [r3, #0]
 8009770:	463b      	mov	r3, r7
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	781b      	ldrb	r3, [r3, #0]
 8009776:	009b      	lsls	r3, r3, #2
 8009778:	4413      	add	r3, r2
 800977a:	881b      	ldrh	r3, [r3, #0]
 800977c:	b29b      	uxth	r3, r3
 800977e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009782:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009786:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800978a:	1d3b      	adds	r3, r7, #4
 800978c:	681a      	ldr	r2, [r3, #0]
 800978e:	463b      	mov	r3, r7
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	781b      	ldrb	r3, [r3, #0]
 8009794:	009b      	lsls	r3, r3, #2
 8009796:	441a      	add	r2, r3
 8009798:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800979c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80097a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80097a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80097a8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80097ac:	b29b      	uxth	r3, r3
 80097ae:	8013      	strh	r3, [r2, #0]
 80097b0:	e15c      	b.n	8009a6c <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80097b2:	463b      	mov	r3, r7
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	78db      	ldrb	r3, [r3, #3]
 80097b8:	2b01      	cmp	r3, #1
 80097ba:	f040 8155 	bne.w	8009a68 <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80097be:	463b      	mov	r3, r7
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	699a      	ldr	r2, [r3, #24]
 80097c4:	463b      	mov	r3, r7
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	691b      	ldr	r3, [r3, #16]
 80097ca:	429a      	cmp	r2, r3
 80097cc:	d90e      	bls.n	80097ec <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 80097ce:	463b      	mov	r3, r7
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	691b      	ldr	r3, [r3, #16]
 80097d4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 80097d8:	463b      	mov	r3, r7
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	699a      	ldr	r2, [r3, #24]
 80097de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80097e2:	1ad2      	subs	r2, r2, r3
 80097e4:	463b      	mov	r3, r7
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	619a      	str	r2, [r3, #24]
 80097ea:	e008      	b.n	80097fe <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 80097ec:	463b      	mov	r3, r7
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	699b      	ldr	r3, [r3, #24]
 80097f2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 80097f6:	463b      	mov	r3, r7
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	2200      	movs	r2, #0
 80097fc:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80097fe:	463b      	mov	r3, r7
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	785b      	ldrb	r3, [r3, #1]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d16f      	bne.n	80098e8 <USB_EPStartXfer+0x1402>
 8009808:	1d3b      	adds	r3, r7, #4
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009810:	1d3b      	adds	r3, r7, #4
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009818:	b29b      	uxth	r3, r3
 800981a:	461a      	mov	r2, r3
 800981c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009820:	4413      	add	r3, r2
 8009822:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009826:	463b      	mov	r3, r7
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	781b      	ldrb	r3, [r3, #0]
 800982c:	00da      	lsls	r2, r3, #3
 800982e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009832:	4413      	add	r3, r2
 8009834:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009838:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800983c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009840:	2b00      	cmp	r3, #0
 8009842:	d116      	bne.n	8009872 <USB_EPStartXfer+0x138c>
 8009844:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009848:	881b      	ldrh	r3, [r3, #0]
 800984a:	b29b      	uxth	r3, r3
 800984c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009850:	b29a      	uxth	r2, r3
 8009852:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009856:	801a      	strh	r2, [r3, #0]
 8009858:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800985c:	881b      	ldrh	r3, [r3, #0]
 800985e:	b29b      	uxth	r3, r3
 8009860:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009864:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009868:	b29a      	uxth	r2, r3
 800986a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800986e:	801a      	strh	r2, [r3, #0]
 8009870:	e05f      	b.n	8009932 <USB_EPStartXfer+0x144c>
 8009872:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009876:	2b3e      	cmp	r3, #62	; 0x3e
 8009878:	d818      	bhi.n	80098ac <USB_EPStartXfer+0x13c6>
 800987a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800987e:	085b      	lsrs	r3, r3, #1
 8009880:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009884:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009888:	f003 0301 	and.w	r3, r3, #1
 800988c:	2b00      	cmp	r3, #0
 800988e:	d004      	beq.n	800989a <USB_EPStartXfer+0x13b4>
 8009890:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009894:	3301      	adds	r3, #1
 8009896:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800989a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800989e:	b29b      	uxth	r3, r3
 80098a0:	029b      	lsls	r3, r3, #10
 80098a2:	b29a      	uxth	r2, r3
 80098a4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80098a8:	801a      	strh	r2, [r3, #0]
 80098aa:	e042      	b.n	8009932 <USB_EPStartXfer+0x144c>
 80098ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80098b0:	095b      	lsrs	r3, r3, #5
 80098b2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80098b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80098ba:	f003 031f 	and.w	r3, r3, #31
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d104      	bne.n	80098cc <USB_EPStartXfer+0x13e6>
 80098c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80098c6:	3b01      	subs	r3, #1
 80098c8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80098cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80098d0:	b29b      	uxth	r3, r3
 80098d2:	029b      	lsls	r3, r3, #10
 80098d4:	b29b      	uxth	r3, r3
 80098d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80098da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80098de:	b29a      	uxth	r2, r3
 80098e0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80098e4:	801a      	strh	r2, [r3, #0]
 80098e6:	e024      	b.n	8009932 <USB_EPStartXfer+0x144c>
 80098e8:	463b      	mov	r3, r7
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	785b      	ldrb	r3, [r3, #1]
 80098ee:	2b01      	cmp	r3, #1
 80098f0:	d11f      	bne.n	8009932 <USB_EPStartXfer+0x144c>
 80098f2:	1d3b      	adds	r3, r7, #4
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80098fa:	1d3b      	adds	r3, r7, #4
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009902:	b29b      	uxth	r3, r3
 8009904:	461a      	mov	r2, r3
 8009906:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800990a:	4413      	add	r3, r2
 800990c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009910:	463b      	mov	r3, r7
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	781b      	ldrb	r3, [r3, #0]
 8009916:	00da      	lsls	r2, r3, #3
 8009918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800991c:	4413      	add	r3, r2
 800991e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009922:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009926:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800992a:	b29a      	uxth	r2, r3
 800992c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009930:	801a      	strh	r2, [r3, #0]
 8009932:	1d3b      	adds	r3, r7, #4
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800993a:	463b      	mov	r3, r7
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	785b      	ldrb	r3, [r3, #1]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d16f      	bne.n	8009a24 <USB_EPStartXfer+0x153e>
 8009944:	1d3b      	adds	r3, r7, #4
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800994c:	1d3b      	adds	r3, r7, #4
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009954:	b29b      	uxth	r3, r3
 8009956:	461a      	mov	r2, r3
 8009958:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800995c:	4413      	add	r3, r2
 800995e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009962:	463b      	mov	r3, r7
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	781b      	ldrb	r3, [r3, #0]
 8009968:	00da      	lsls	r2, r3, #3
 800996a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800996e:	4413      	add	r3, r2
 8009970:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009974:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009978:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800997c:	2b00      	cmp	r3, #0
 800997e:	d116      	bne.n	80099ae <USB_EPStartXfer+0x14c8>
 8009980:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009984:	881b      	ldrh	r3, [r3, #0]
 8009986:	b29b      	uxth	r3, r3
 8009988:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800998c:	b29a      	uxth	r2, r3
 800998e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009992:	801a      	strh	r2, [r3, #0]
 8009994:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009998:	881b      	ldrh	r3, [r3, #0]
 800999a:	b29b      	uxth	r3, r3
 800999c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80099a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80099a4:	b29a      	uxth	r2, r3
 80099a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80099aa:	801a      	strh	r2, [r3, #0]
 80099ac:	e05e      	b.n	8009a6c <USB_EPStartXfer+0x1586>
 80099ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80099b2:	2b3e      	cmp	r3, #62	; 0x3e
 80099b4:	d818      	bhi.n	80099e8 <USB_EPStartXfer+0x1502>
 80099b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80099ba:	085b      	lsrs	r3, r3, #1
 80099bc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80099c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80099c4:	f003 0301 	and.w	r3, r3, #1
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d004      	beq.n	80099d6 <USB_EPStartXfer+0x14f0>
 80099cc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80099d0:	3301      	adds	r3, #1
 80099d2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80099d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80099da:	b29b      	uxth	r3, r3
 80099dc:	029b      	lsls	r3, r3, #10
 80099de:	b29a      	uxth	r2, r3
 80099e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80099e4:	801a      	strh	r2, [r3, #0]
 80099e6:	e041      	b.n	8009a6c <USB_EPStartXfer+0x1586>
 80099e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80099ec:	095b      	lsrs	r3, r3, #5
 80099ee:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80099f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80099f6:	f003 031f 	and.w	r3, r3, #31
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d104      	bne.n	8009a08 <USB_EPStartXfer+0x1522>
 80099fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009a02:	3b01      	subs	r3, #1
 8009a04:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009a08:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009a0c:	b29b      	uxth	r3, r3
 8009a0e:	029b      	lsls	r3, r3, #10
 8009a10:	b29b      	uxth	r3, r3
 8009a12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a1a:	b29a      	uxth	r2, r3
 8009a1c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009a20:	801a      	strh	r2, [r3, #0]
 8009a22:	e023      	b.n	8009a6c <USB_EPStartXfer+0x1586>
 8009a24:	463b      	mov	r3, r7
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	785b      	ldrb	r3, [r3, #1]
 8009a2a:	2b01      	cmp	r3, #1
 8009a2c:	d11e      	bne.n	8009a6c <USB_EPStartXfer+0x1586>
 8009a2e:	1d3b      	adds	r3, r7, #4
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009a36:	b29b      	uxth	r3, r3
 8009a38:	461a      	mov	r2, r3
 8009a3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a3e:	4413      	add	r3, r2
 8009a40:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009a44:	463b      	mov	r3, r7
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	781b      	ldrb	r3, [r3, #0]
 8009a4a:	00da      	lsls	r2, r3, #3
 8009a4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a50:	4413      	add	r3, r2
 8009a52:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009a56:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009a5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a5e:	b29a      	uxth	r2, r3
 8009a60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a64:	801a      	strh	r2, [r3, #0]
 8009a66:	e001      	b.n	8009a6c <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 8009a68:	2301      	movs	r3, #1
 8009a6a:	e02e      	b.n	8009aca <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009a6c:	1d3b      	adds	r3, r7, #4
 8009a6e:	681a      	ldr	r2, [r3, #0]
 8009a70:	463b      	mov	r3, r7
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	781b      	ldrb	r3, [r3, #0]
 8009a76:	009b      	lsls	r3, r3, #2
 8009a78:	4413      	add	r3, r2
 8009a7a:	881b      	ldrh	r3, [r3, #0]
 8009a7c:	b29b      	uxth	r3, r3
 8009a7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009a82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a86:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8009a8a:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8009a8e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009a92:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8009a96:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8009a9a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009a9e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8009aa2:	1d3b      	adds	r3, r7, #4
 8009aa4:	681a      	ldr	r2, [r3, #0]
 8009aa6:	463b      	mov	r3, r7
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	781b      	ldrb	r3, [r3, #0]
 8009aac:	009b      	lsls	r3, r3, #2
 8009aae:	441a      	add	r2, r3
 8009ab0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8009ab4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ab8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009abc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ac0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ac4:	b29b      	uxth	r3, r3
 8009ac6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009ac8:	2300      	movs	r3, #0
}
 8009aca:	4618      	mov	r0, r3
 8009acc:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	bd80      	pop	{r7, pc}

08009ad4 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009ad4:	b480      	push	{r7}
 8009ad6:	b085      	sub	sp, #20
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
 8009adc:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8009ade:	683b      	ldr	r3, [r7, #0]
 8009ae0:	785b      	ldrb	r3, [r3, #1]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d020      	beq.n	8009b28 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8009ae6:	687a      	ldr	r2, [r7, #4]
 8009ae8:	683b      	ldr	r3, [r7, #0]
 8009aea:	781b      	ldrb	r3, [r3, #0]
 8009aec:	009b      	lsls	r3, r3, #2
 8009aee:	4413      	add	r3, r2
 8009af0:	881b      	ldrh	r3, [r3, #0]
 8009af2:	b29b      	uxth	r3, r3
 8009af4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009af8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009afc:	81bb      	strh	r3, [r7, #12]
 8009afe:	89bb      	ldrh	r3, [r7, #12]
 8009b00:	f083 0310 	eor.w	r3, r3, #16
 8009b04:	81bb      	strh	r3, [r7, #12]
 8009b06:	687a      	ldr	r2, [r7, #4]
 8009b08:	683b      	ldr	r3, [r7, #0]
 8009b0a:	781b      	ldrb	r3, [r3, #0]
 8009b0c:	009b      	lsls	r3, r3, #2
 8009b0e:	441a      	add	r2, r3
 8009b10:	89bb      	ldrh	r3, [r7, #12]
 8009b12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009b1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b22:	b29b      	uxth	r3, r3
 8009b24:	8013      	strh	r3, [r2, #0]
 8009b26:	e01f      	b.n	8009b68 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8009b28:	687a      	ldr	r2, [r7, #4]
 8009b2a:	683b      	ldr	r3, [r7, #0]
 8009b2c:	781b      	ldrb	r3, [r3, #0]
 8009b2e:	009b      	lsls	r3, r3, #2
 8009b30:	4413      	add	r3, r2
 8009b32:	881b      	ldrh	r3, [r3, #0]
 8009b34:	b29b      	uxth	r3, r3
 8009b36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009b3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b3e:	81fb      	strh	r3, [r7, #14]
 8009b40:	89fb      	ldrh	r3, [r7, #14]
 8009b42:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009b46:	81fb      	strh	r3, [r7, #14]
 8009b48:	687a      	ldr	r2, [r7, #4]
 8009b4a:	683b      	ldr	r3, [r7, #0]
 8009b4c:	781b      	ldrb	r3, [r3, #0]
 8009b4e:	009b      	lsls	r3, r3, #2
 8009b50:	441a      	add	r2, r3
 8009b52:	89fb      	ldrh	r3, [r7, #14]
 8009b54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009b60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b64:	b29b      	uxth	r3, r3
 8009b66:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009b68:	2300      	movs	r3, #0
}
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	3714      	adds	r7, #20
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b74:	4770      	bx	lr

08009b76 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009b76:	b480      	push	{r7}
 8009b78:	b087      	sub	sp, #28
 8009b7a:	af00      	add	r7, sp, #0
 8009b7c:	6078      	str	r0, [r7, #4]
 8009b7e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	7b1b      	ldrb	r3, [r3, #12]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	f040 809d 	bne.w	8009cc4 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8009b8a:	683b      	ldr	r3, [r7, #0]
 8009b8c:	785b      	ldrb	r3, [r3, #1]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d04c      	beq.n	8009c2c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009b92:	687a      	ldr	r2, [r7, #4]
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	781b      	ldrb	r3, [r3, #0]
 8009b98:	009b      	lsls	r3, r3, #2
 8009b9a:	4413      	add	r3, r2
 8009b9c:	881b      	ldrh	r3, [r3, #0]
 8009b9e:	823b      	strh	r3, [r7, #16]
 8009ba0:	8a3b      	ldrh	r3, [r7, #16]
 8009ba2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d01b      	beq.n	8009be2 <USB_EPClearStall+0x6c>
 8009baa:	687a      	ldr	r2, [r7, #4]
 8009bac:	683b      	ldr	r3, [r7, #0]
 8009bae:	781b      	ldrb	r3, [r3, #0]
 8009bb0:	009b      	lsls	r3, r3, #2
 8009bb2:	4413      	add	r3, r2
 8009bb4:	881b      	ldrh	r3, [r3, #0]
 8009bb6:	b29b      	uxth	r3, r3
 8009bb8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009bbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009bc0:	81fb      	strh	r3, [r7, #14]
 8009bc2:	687a      	ldr	r2, [r7, #4]
 8009bc4:	683b      	ldr	r3, [r7, #0]
 8009bc6:	781b      	ldrb	r3, [r3, #0]
 8009bc8:	009b      	lsls	r3, r3, #2
 8009bca:	441a      	add	r2, r3
 8009bcc:	89fb      	ldrh	r3, [r7, #14]
 8009bce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009bd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009bd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009bda:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009bde:	b29b      	uxth	r3, r3
 8009be0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	78db      	ldrb	r3, [r3, #3]
 8009be6:	2b01      	cmp	r3, #1
 8009be8:	d06c      	beq.n	8009cc4 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009bea:	687a      	ldr	r2, [r7, #4]
 8009bec:	683b      	ldr	r3, [r7, #0]
 8009bee:	781b      	ldrb	r3, [r3, #0]
 8009bf0:	009b      	lsls	r3, r3, #2
 8009bf2:	4413      	add	r3, r2
 8009bf4:	881b      	ldrh	r3, [r3, #0]
 8009bf6:	b29b      	uxth	r3, r3
 8009bf8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009bfc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009c00:	81bb      	strh	r3, [r7, #12]
 8009c02:	89bb      	ldrh	r3, [r7, #12]
 8009c04:	f083 0320 	eor.w	r3, r3, #32
 8009c08:	81bb      	strh	r3, [r7, #12]
 8009c0a:	687a      	ldr	r2, [r7, #4]
 8009c0c:	683b      	ldr	r3, [r7, #0]
 8009c0e:	781b      	ldrb	r3, [r3, #0]
 8009c10:	009b      	lsls	r3, r3, #2
 8009c12:	441a      	add	r2, r3
 8009c14:	89bb      	ldrh	r3, [r7, #12]
 8009c16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c26:	b29b      	uxth	r3, r3
 8009c28:	8013      	strh	r3, [r2, #0]
 8009c2a:	e04b      	b.n	8009cc4 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009c2c:	687a      	ldr	r2, [r7, #4]
 8009c2e:	683b      	ldr	r3, [r7, #0]
 8009c30:	781b      	ldrb	r3, [r3, #0]
 8009c32:	009b      	lsls	r3, r3, #2
 8009c34:	4413      	add	r3, r2
 8009c36:	881b      	ldrh	r3, [r3, #0]
 8009c38:	82fb      	strh	r3, [r7, #22]
 8009c3a:	8afb      	ldrh	r3, [r7, #22]
 8009c3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d01b      	beq.n	8009c7c <USB_EPClearStall+0x106>
 8009c44:	687a      	ldr	r2, [r7, #4]
 8009c46:	683b      	ldr	r3, [r7, #0]
 8009c48:	781b      	ldrb	r3, [r3, #0]
 8009c4a:	009b      	lsls	r3, r3, #2
 8009c4c:	4413      	add	r3, r2
 8009c4e:	881b      	ldrh	r3, [r3, #0]
 8009c50:	b29b      	uxth	r3, r3
 8009c52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c5a:	82bb      	strh	r3, [r7, #20]
 8009c5c:	687a      	ldr	r2, [r7, #4]
 8009c5e:	683b      	ldr	r3, [r7, #0]
 8009c60:	781b      	ldrb	r3, [r3, #0]
 8009c62:	009b      	lsls	r3, r3, #2
 8009c64:	441a      	add	r2, r3
 8009c66:	8abb      	ldrh	r3, [r7, #20]
 8009c68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c70:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009c74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c78:	b29b      	uxth	r3, r3
 8009c7a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009c7c:	687a      	ldr	r2, [r7, #4]
 8009c7e:	683b      	ldr	r3, [r7, #0]
 8009c80:	781b      	ldrb	r3, [r3, #0]
 8009c82:	009b      	lsls	r3, r3, #2
 8009c84:	4413      	add	r3, r2
 8009c86:	881b      	ldrh	r3, [r3, #0]
 8009c88:	b29b      	uxth	r3, r3
 8009c8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009c8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c92:	827b      	strh	r3, [r7, #18]
 8009c94:	8a7b      	ldrh	r3, [r7, #18]
 8009c96:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009c9a:	827b      	strh	r3, [r7, #18]
 8009c9c:	8a7b      	ldrh	r3, [r7, #18]
 8009c9e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009ca2:	827b      	strh	r3, [r7, #18]
 8009ca4:	687a      	ldr	r2, [r7, #4]
 8009ca6:	683b      	ldr	r3, [r7, #0]
 8009ca8:	781b      	ldrb	r3, [r3, #0]
 8009caa:	009b      	lsls	r3, r3, #2
 8009cac:	441a      	add	r2, r3
 8009cae:	8a7b      	ldrh	r3, [r7, #18]
 8009cb0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009cb4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009cb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009cbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009cc0:	b29b      	uxth	r3, r3
 8009cc2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8009cc4:	2300      	movs	r3, #0
}
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	371c      	adds	r7, #28
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd0:	4770      	bx	lr

08009cd2 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8009cd2:	b480      	push	{r7}
 8009cd4:	b083      	sub	sp, #12
 8009cd6:	af00      	add	r7, sp, #0
 8009cd8:	6078      	str	r0, [r7, #4]
 8009cda:	460b      	mov	r3, r1
 8009cdc:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8009cde:	78fb      	ldrb	r3, [r7, #3]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d103      	bne.n	8009cec <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	2280      	movs	r2, #128	; 0x80
 8009ce8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8009cec:	2300      	movs	r3, #0
}
 8009cee:	4618      	mov	r0, r3
 8009cf0:	370c      	adds	r7, #12
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf8:	4770      	bx	lr

08009cfa <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8009cfa:	b480      	push	{r7}
 8009cfc:	b083      	sub	sp, #12
 8009cfe:	af00      	add	r7, sp, #0
 8009d00:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009d08:	b29b      	uxth	r3, r3
 8009d0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d12:	b29a      	uxth	r2, r3
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8009d1a:	2300      	movs	r3, #0
}
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	370c      	adds	r7, #12
 8009d20:	46bd      	mov	sp, r7
 8009d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d26:	4770      	bx	lr

08009d28 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8009d28:	b480      	push	{r7}
 8009d2a:	b083      	sub	sp, #12
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009d36:	b29b      	uxth	r3, r3
 8009d38:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8009d3c:	b29a      	uxth	r2, r3
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8009d44:	2300      	movs	r3, #0
}
 8009d46:	4618      	mov	r0, r3
 8009d48:	370c      	adds	r7, #12
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d50:	4770      	bx	lr

08009d52 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8009d52:	b480      	push	{r7}
 8009d54:	b085      	sub	sp, #20
 8009d56:	af00      	add	r7, sp, #0
 8009d58:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009d60:	b29b      	uxth	r3, r3
 8009d62:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8009d64:	68fb      	ldr	r3, [r7, #12]
}
 8009d66:	4618      	mov	r0, r3
 8009d68:	3714      	adds	r7, #20
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d70:	4770      	bx	lr

08009d72 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8009d72:	b480      	push	{r7}
 8009d74:	b083      	sub	sp, #12
 8009d76:	af00      	add	r7, sp, #0
 8009d78:	6078      	str	r0, [r7, #4]
 8009d7a:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8009d7c:	2300      	movs	r3, #0
}
 8009d7e:	4618      	mov	r0, r3
 8009d80:	370c      	adds	r7, #12
 8009d82:	46bd      	mov	sp, r7
 8009d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d88:	4770      	bx	lr

08009d8a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009d8a:	b480      	push	{r7}
 8009d8c:	b08d      	sub	sp, #52	; 0x34
 8009d8e:	af00      	add	r7, sp, #0
 8009d90:	60f8      	str	r0, [r7, #12]
 8009d92:	60b9      	str	r1, [r7, #8]
 8009d94:	4611      	mov	r1, r2
 8009d96:	461a      	mov	r2, r3
 8009d98:	460b      	mov	r3, r1
 8009d9a:	80fb      	strh	r3, [r7, #6]
 8009d9c:	4613      	mov	r3, r2
 8009d9e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009da0:	88bb      	ldrh	r3, [r7, #4]
 8009da2:	3301      	adds	r3, #1
 8009da4:	085b      	lsrs	r3, r3, #1
 8009da6:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009dac:	68bb      	ldr	r3, [r7, #8]
 8009dae:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009db0:	88fa      	ldrh	r2, [r7, #6]
 8009db2:	69fb      	ldr	r3, [r7, #28]
 8009db4:	4413      	add	r3, r2
 8009db6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009dba:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8009dbc:	6a3b      	ldr	r3, [r7, #32]
 8009dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009dc0:	e01b      	b.n	8009dfa <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8009dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dc4:	781b      	ldrb	r3, [r3, #0]
 8009dc6:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8009dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dca:	3301      	adds	r3, #1
 8009dcc:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8009dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dd0:	781b      	ldrb	r3, [r3, #0]
 8009dd2:	b29b      	uxth	r3, r3
 8009dd4:	021b      	lsls	r3, r3, #8
 8009dd6:	b29b      	uxth	r3, r3
 8009dd8:	461a      	mov	r2, r3
 8009dda:	69bb      	ldr	r3, [r7, #24]
 8009ddc:	4313      	orrs	r3, r2
 8009dde:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8009de0:	697b      	ldr	r3, [r7, #20]
 8009de2:	b29a      	uxth	r2, r3
 8009de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009de6:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8009de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dea:	3302      	adds	r3, #2
 8009dec:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8009dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009df0:	3301      	adds	r3, #1
 8009df2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8009df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009df6:	3b01      	subs	r3, #1
 8009df8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d1e0      	bne.n	8009dc2 <USB_WritePMA+0x38>
  }
}
 8009e00:	bf00      	nop
 8009e02:	bf00      	nop
 8009e04:	3734      	adds	r7, #52	; 0x34
 8009e06:	46bd      	mov	sp, r7
 8009e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0c:	4770      	bx	lr

08009e0e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009e0e:	b480      	push	{r7}
 8009e10:	b08b      	sub	sp, #44	; 0x2c
 8009e12:	af00      	add	r7, sp, #0
 8009e14:	60f8      	str	r0, [r7, #12]
 8009e16:	60b9      	str	r1, [r7, #8]
 8009e18:	4611      	mov	r1, r2
 8009e1a:	461a      	mov	r2, r3
 8009e1c:	460b      	mov	r3, r1
 8009e1e:	80fb      	strh	r3, [r7, #6]
 8009e20:	4613      	mov	r3, r2
 8009e22:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8009e24:	88bb      	ldrh	r3, [r7, #4]
 8009e26:	085b      	lsrs	r3, r3, #1
 8009e28:	b29b      	uxth	r3, r3
 8009e2a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009e30:	68bb      	ldr	r3, [r7, #8]
 8009e32:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009e34:	88fa      	ldrh	r2, [r7, #6]
 8009e36:	697b      	ldr	r3, [r7, #20]
 8009e38:	4413      	add	r3, r2
 8009e3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009e3e:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8009e40:	69bb      	ldr	r3, [r7, #24]
 8009e42:	627b      	str	r3, [r7, #36]	; 0x24
 8009e44:	e018      	b.n	8009e78 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8009e46:	6a3b      	ldr	r3, [r7, #32]
 8009e48:	881b      	ldrh	r3, [r3, #0]
 8009e4a:	b29b      	uxth	r3, r3
 8009e4c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8009e4e:	6a3b      	ldr	r3, [r7, #32]
 8009e50:	3302      	adds	r3, #2
 8009e52:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009e54:	693b      	ldr	r3, [r7, #16]
 8009e56:	b2da      	uxtb	r2, r3
 8009e58:	69fb      	ldr	r3, [r7, #28]
 8009e5a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009e5c:	69fb      	ldr	r3, [r7, #28]
 8009e5e:	3301      	adds	r3, #1
 8009e60:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8009e62:	693b      	ldr	r3, [r7, #16]
 8009e64:	0a1b      	lsrs	r3, r3, #8
 8009e66:	b2da      	uxtb	r2, r3
 8009e68:	69fb      	ldr	r3, [r7, #28]
 8009e6a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009e6c:	69fb      	ldr	r3, [r7, #28]
 8009e6e:	3301      	adds	r3, #1
 8009e70:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8009e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e74:	3b01      	subs	r3, #1
 8009e76:	627b      	str	r3, [r7, #36]	; 0x24
 8009e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d1e3      	bne.n	8009e46 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8009e7e:	88bb      	ldrh	r3, [r7, #4]
 8009e80:	f003 0301 	and.w	r3, r3, #1
 8009e84:	b29b      	uxth	r3, r3
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d007      	beq.n	8009e9a <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8009e8a:	6a3b      	ldr	r3, [r7, #32]
 8009e8c:	881b      	ldrh	r3, [r3, #0]
 8009e8e:	b29b      	uxth	r3, r3
 8009e90:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009e92:	693b      	ldr	r3, [r7, #16]
 8009e94:	b2da      	uxtb	r2, r3
 8009e96:	69fb      	ldr	r3, [r7, #28]
 8009e98:	701a      	strb	r2, [r3, #0]
  }
}
 8009e9a:	bf00      	nop
 8009e9c:	372c      	adds	r7, #44	; 0x2c
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea4:	4770      	bx	lr

08009ea6 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009ea6:	b580      	push	{r7, lr}
 8009ea8:	b084      	sub	sp, #16
 8009eaa:	af00      	add	r7, sp, #0
 8009eac:	6078      	str	r0, [r7, #4]
 8009eae:	460b      	mov	r3, r1
 8009eb0:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8009eb2:	2010      	movs	r0, #16
 8009eb4:	f001 ff52 	bl	800bd5c <USBD_static_malloc>
 8009eb8:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d105      	bne.n	8009ecc <USBD_HID_Init+0x26>
  {
    pdev->pClassData = NULL;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8009ec8:	2302      	movs	r3, #2
 8009eca:	e01b      	b.n	8009f04 <USBD_HID_Init+0x5e>
  }

  pdev->pClassData = (void *)hhid;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	68fa      	ldr	r2, [r7, #12]
 8009ed0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	7c1b      	ldrb	r3, [r3, #16]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d103      	bne.n	8009ee4 <USBD_HID_Init+0x3e>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	2207      	movs	r2, #7
 8009ee0:	875a      	strh	r2, [r3, #58]	; 0x3a
 8009ee2:	e002      	b.n	8009eea <USBD_HID_Init+0x44>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	220a      	movs	r2, #10
 8009ee8:	875a      	strh	r2, [r3, #58]	; 0x3a
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8009eea:	2304      	movs	r3, #4
 8009eec:	2203      	movs	r2, #3
 8009eee:	2181      	movs	r1, #129	; 0x81
 8009ef0:	6878      	ldr	r0, [r7, #4]
 8009ef2:	f001 fd49 	bl	800b988 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	2201      	movs	r2, #1
 8009efa:	871a      	strh	r2, [r3, #56]	; 0x38

  hhid->state = HID_IDLE;
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	2200      	movs	r2, #0
 8009f00:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8009f02:	2300      	movs	r3, #0
}
 8009f04:	4618      	mov	r0, r3
 8009f06:	3710      	adds	r7, #16
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	bd80      	pop	{r7, pc}

08009f0c <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b082      	sub	sp, #8
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
 8009f14:	460b      	mov	r3, r1
 8009f16:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8009f18:	2181      	movs	r1, #129	; 0x81
 8009f1a:	6878      	ldr	r0, [r7, #4]
 8009f1c:	f001 fd72 	bl	800ba04 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2200      	movs	r2, #0
 8009f24:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	2200      	movs	r2, #0
 8009f2a:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Free allocated memory */
  if (pdev->pClassData != NULL)
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d009      	beq.n	8009f4a <USBD_HID_DeInit+0x3e>
  {
    (void)USBD_free(pdev->pClassData);
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	f001 ff1b 	bl	800bd78 <USBD_static_free>
    pdev->pClassData = NULL;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	2200      	movs	r2, #0
 8009f46:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009f4a:	2300      	movs	r3, #0
}
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	3708      	adds	r7, #8
 8009f50:	46bd      	mov	sp, r7
 8009f52:	bd80      	pop	{r7, pc}

08009f54 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b086      	sub	sp, #24
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
 8009f5c:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009f64:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8009f66:	2300      	movs	r3, #0
 8009f68:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d101      	bne.n	8009f78 <USBD_HID_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8009f74:	2303      	movs	r3, #3
 8009f76:	e0e8      	b.n	800a14a <USBD_HID_Setup+0x1f6>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009f78:	683b      	ldr	r3, [r7, #0]
 8009f7a:	781b      	ldrb	r3, [r3, #0]
 8009f7c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d046      	beq.n	800a012 <USBD_HID_Setup+0xbe>
 8009f84:	2b20      	cmp	r3, #32
 8009f86:	f040 80d8 	bne.w	800a13a <USBD_HID_Setup+0x1e6>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8009f8a:	683b      	ldr	r3, [r7, #0]
 8009f8c:	785b      	ldrb	r3, [r3, #1]
 8009f8e:	3b02      	subs	r3, #2
 8009f90:	2b09      	cmp	r3, #9
 8009f92:	d836      	bhi.n	800a002 <USBD_HID_Setup+0xae>
 8009f94:	a201      	add	r2, pc, #4	; (adr r2, 8009f9c <USBD_HID_Setup+0x48>)
 8009f96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f9a:	bf00      	nop
 8009f9c:	08009ff3 	.word	0x08009ff3
 8009fa0:	08009fd3 	.word	0x08009fd3
 8009fa4:	0800a003 	.word	0x0800a003
 8009fa8:	0800a003 	.word	0x0800a003
 8009fac:	0800a003 	.word	0x0800a003
 8009fb0:	0800a003 	.word	0x0800a003
 8009fb4:	0800a003 	.word	0x0800a003
 8009fb8:	0800a003 	.word	0x0800a003
 8009fbc:	08009fe1 	.word	0x08009fe1
 8009fc0:	08009fc5 	.word	0x08009fc5
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8009fc4:	683b      	ldr	r3, [r7, #0]
 8009fc6:	885b      	ldrh	r3, [r3, #2]
 8009fc8:	b2db      	uxtb	r3, r3
 8009fca:	461a      	mov	r2, r3
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	601a      	str	r2, [r3, #0]
          break;
 8009fd0:	e01e      	b.n	800a010 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	2201      	movs	r2, #1
 8009fd6:	4619      	mov	r1, r3
 8009fd8:	6878      	ldr	r0, [r7, #4]
 8009fda:	f001 f9d8 	bl	800b38e <USBD_CtlSendData>
          break;
 8009fde:	e017      	b.n	800a010 <USBD_HID_Setup+0xbc>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	885b      	ldrh	r3, [r3, #2]
 8009fe4:	0a1b      	lsrs	r3, r3, #8
 8009fe6:	b29b      	uxth	r3, r3
 8009fe8:	b2db      	uxtb	r3, r3
 8009fea:	461a      	mov	r2, r3
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	605a      	str	r2, [r3, #4]
          break;
 8009ff0:	e00e      	b.n	800a010 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	3304      	adds	r3, #4
 8009ff6:	2201      	movs	r2, #1
 8009ff8:	4619      	mov	r1, r3
 8009ffa:	6878      	ldr	r0, [r7, #4]
 8009ffc:	f001 f9c7 	bl	800b38e <USBD_CtlSendData>
          break;
 800a000:	e006      	b.n	800a010 <USBD_HID_Setup+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800a002:	6839      	ldr	r1, [r7, #0]
 800a004:	6878      	ldr	r0, [r7, #4]
 800a006:	f001 f951 	bl	800b2ac <USBD_CtlError>
          ret = USBD_FAIL;
 800a00a:	2303      	movs	r3, #3
 800a00c:	75fb      	strb	r3, [r7, #23]
          break;
 800a00e:	bf00      	nop
      }
      break;
 800a010:	e09a      	b.n	800a148 <USBD_HID_Setup+0x1f4>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a012:	683b      	ldr	r3, [r7, #0]
 800a014:	785b      	ldrb	r3, [r3, #1]
 800a016:	2b0b      	cmp	r3, #11
 800a018:	f200 8086 	bhi.w	800a128 <USBD_HID_Setup+0x1d4>
 800a01c:	a201      	add	r2, pc, #4	; (adr r2, 800a024 <USBD_HID_Setup+0xd0>)
 800a01e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a022:	bf00      	nop
 800a024:	0800a055 	.word	0x0800a055
 800a028:	0800a137 	.word	0x0800a137
 800a02c:	0800a129 	.word	0x0800a129
 800a030:	0800a129 	.word	0x0800a129
 800a034:	0800a129 	.word	0x0800a129
 800a038:	0800a129 	.word	0x0800a129
 800a03c:	0800a07f 	.word	0x0800a07f
 800a040:	0800a129 	.word	0x0800a129
 800a044:	0800a129 	.word	0x0800a129
 800a048:	0800a129 	.word	0x0800a129
 800a04c:	0800a0d7 	.word	0x0800a0d7
 800a050:	0800a101 	.word	0x0800a101
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a05a:	b2db      	uxtb	r3, r3
 800a05c:	2b03      	cmp	r3, #3
 800a05e:	d107      	bne.n	800a070 <USBD_HID_Setup+0x11c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a060:	f107 030a 	add.w	r3, r7, #10
 800a064:	2202      	movs	r2, #2
 800a066:	4619      	mov	r1, r3
 800a068:	6878      	ldr	r0, [r7, #4]
 800a06a:	f001 f990 	bl	800b38e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a06e:	e063      	b.n	800a138 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 800a070:	6839      	ldr	r1, [r7, #0]
 800a072:	6878      	ldr	r0, [r7, #4]
 800a074:	f001 f91a 	bl	800b2ac <USBD_CtlError>
            ret = USBD_FAIL;
 800a078:	2303      	movs	r3, #3
 800a07a:	75fb      	strb	r3, [r7, #23]
          break;
 800a07c:	e05c      	b.n	800a138 <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 800a07e:	683b      	ldr	r3, [r7, #0]
 800a080:	885b      	ldrh	r3, [r3, #2]
 800a082:	0a1b      	lsrs	r3, r3, #8
 800a084:	b29b      	uxth	r3, r3
 800a086:	2b22      	cmp	r3, #34	; 0x22
 800a088:	d108      	bne.n	800a09c <USBD_HID_Setup+0x148>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 800a08a:	683b      	ldr	r3, [r7, #0]
 800a08c:	88db      	ldrh	r3, [r3, #6]
 800a08e:	2b4a      	cmp	r3, #74	; 0x4a
 800a090:	bf28      	it	cs
 800a092:	234a      	movcs	r3, #74	; 0x4a
 800a094:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 800a096:	4b2f      	ldr	r3, [pc, #188]	; (800a154 <USBD_HID_Setup+0x200>)
 800a098:	613b      	str	r3, [r7, #16]
 800a09a:	e015      	b.n	800a0c8 <USBD_HID_Setup+0x174>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	885b      	ldrh	r3, [r3, #2]
 800a0a0:	0a1b      	lsrs	r3, r3, #8
 800a0a2:	b29b      	uxth	r3, r3
 800a0a4:	2b21      	cmp	r3, #33	; 0x21
 800a0a6:	d108      	bne.n	800a0ba <USBD_HID_Setup+0x166>
          {
            pbuf = USBD_HID_Desc;
 800a0a8:	4b2b      	ldr	r3, [pc, #172]	; (800a158 <USBD_HID_Setup+0x204>)
 800a0aa:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 800a0ac:	683b      	ldr	r3, [r7, #0]
 800a0ae:	88db      	ldrh	r3, [r3, #6]
 800a0b0:	2b09      	cmp	r3, #9
 800a0b2:	bf28      	it	cs
 800a0b4:	2309      	movcs	r3, #9
 800a0b6:	82bb      	strh	r3, [r7, #20]
 800a0b8:	e006      	b.n	800a0c8 <USBD_HID_Setup+0x174>
          }
          else
          {
            USBD_CtlError(pdev, req);
 800a0ba:	6839      	ldr	r1, [r7, #0]
 800a0bc:	6878      	ldr	r0, [r7, #4]
 800a0be:	f001 f8f5 	bl	800b2ac <USBD_CtlError>
            ret = USBD_FAIL;
 800a0c2:	2303      	movs	r3, #3
 800a0c4:	75fb      	strb	r3, [r7, #23]
            break;
 800a0c6:	e037      	b.n	800a138 <USBD_HID_Setup+0x1e4>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 800a0c8:	8abb      	ldrh	r3, [r7, #20]
 800a0ca:	461a      	mov	r2, r3
 800a0cc:	6939      	ldr	r1, [r7, #16]
 800a0ce:	6878      	ldr	r0, [r7, #4]
 800a0d0:	f001 f95d 	bl	800b38e <USBD_CtlSendData>
          break;
 800a0d4:	e030      	b.n	800a138 <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a0dc:	b2db      	uxtb	r3, r3
 800a0de:	2b03      	cmp	r3, #3
 800a0e0:	d107      	bne.n	800a0f2 <USBD_HID_Setup+0x19e>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	3308      	adds	r3, #8
 800a0e6:	2201      	movs	r2, #1
 800a0e8:	4619      	mov	r1, r3
 800a0ea:	6878      	ldr	r0, [r7, #4]
 800a0ec:	f001 f94f 	bl	800b38e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a0f0:	e022      	b.n	800a138 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 800a0f2:	6839      	ldr	r1, [r7, #0]
 800a0f4:	6878      	ldr	r0, [r7, #4]
 800a0f6:	f001 f8d9 	bl	800b2ac <USBD_CtlError>
            ret = USBD_FAIL;
 800a0fa:	2303      	movs	r3, #3
 800a0fc:	75fb      	strb	r3, [r7, #23]
          break;
 800a0fe:	e01b      	b.n	800a138 <USBD_HID_Setup+0x1e4>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a106:	b2db      	uxtb	r3, r3
 800a108:	2b03      	cmp	r3, #3
 800a10a:	d106      	bne.n	800a11a <USBD_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 800a10c:	683b      	ldr	r3, [r7, #0]
 800a10e:	885b      	ldrh	r3, [r3, #2]
 800a110:	b2db      	uxtb	r3, r3
 800a112:	461a      	mov	r2, r3
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a118:	e00e      	b.n	800a138 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 800a11a:	6839      	ldr	r1, [r7, #0]
 800a11c:	6878      	ldr	r0, [r7, #4]
 800a11e:	f001 f8c5 	bl	800b2ac <USBD_CtlError>
            ret = USBD_FAIL;
 800a122:	2303      	movs	r3, #3
 800a124:	75fb      	strb	r3, [r7, #23]
          break;
 800a126:	e007      	b.n	800a138 <USBD_HID_Setup+0x1e4>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a128:	6839      	ldr	r1, [r7, #0]
 800a12a:	6878      	ldr	r0, [r7, #4]
 800a12c:	f001 f8be 	bl	800b2ac <USBD_CtlError>
          ret = USBD_FAIL;
 800a130:	2303      	movs	r3, #3
 800a132:	75fb      	strb	r3, [r7, #23]
          break;
 800a134:	e000      	b.n	800a138 <USBD_HID_Setup+0x1e4>
          break;
 800a136:	bf00      	nop
      }
      break;
 800a138:	e006      	b.n	800a148 <USBD_HID_Setup+0x1f4>

    default:
      USBD_CtlError(pdev, req);
 800a13a:	6839      	ldr	r1, [r7, #0]
 800a13c:	6878      	ldr	r0, [r7, #4]
 800a13e:	f001 f8b5 	bl	800b2ac <USBD_CtlError>
      ret = USBD_FAIL;
 800a142:	2303      	movs	r3, #3
 800a144:	75fb      	strb	r3, [r7, #23]
      break;
 800a146:	bf00      	nop
  }

  return (uint8_t)ret;
 800a148:	7dfb      	ldrb	r3, [r7, #23]
}
 800a14a:	4618      	mov	r0, r3
 800a14c:	3718      	adds	r7, #24
 800a14e:	46bd      	mov	sp, r7
 800a150:	bd80      	pop	{r7, pc}
 800a152:	bf00      	nop
 800a154:	200000ec 	.word	0x200000ec
 800a158:	200000d4 	.word	0x200000d4

0800a15c <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 800a15c:	b580      	push	{r7, lr}
 800a15e:	b086      	sub	sp, #24
 800a160:	af00      	add	r7, sp, #0
 800a162:	60f8      	str	r0, [r7, #12]
 800a164:	60b9      	str	r1, [r7, #8]
 800a166:	4613      	mov	r3, r2
 800a168:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a170:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 800a172:	697b      	ldr	r3, [r7, #20]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d101      	bne.n	800a17c <USBD_HID_SendReport+0x20>
  {
    return (uint8_t)USBD_FAIL;
 800a178:	2303      	movs	r3, #3
 800a17a:	e013      	b.n	800a1a4 <USBD_HID_SendReport+0x48>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a182:	b2db      	uxtb	r3, r3
 800a184:	2b03      	cmp	r3, #3
 800a186:	d10c      	bne.n	800a1a2 <USBD_HID_SendReport+0x46>
  {
    if (hhid->state == HID_IDLE)
 800a188:	697b      	ldr	r3, [r7, #20]
 800a18a:	7b1b      	ldrb	r3, [r3, #12]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d108      	bne.n	800a1a2 <USBD_HID_SendReport+0x46>
    {
      hhid->state = HID_BUSY;
 800a190:	697b      	ldr	r3, [r7, #20]
 800a192:	2201      	movs	r2, #1
 800a194:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HID_EPIN_ADDR, report, len);
 800a196:	88fb      	ldrh	r3, [r7, #6]
 800a198:	68ba      	ldr	r2, [r7, #8]
 800a19a:	2181      	movs	r1, #129	; 0x81
 800a19c:	68f8      	ldr	r0, [r7, #12]
 800a19e:	f001 fd37 	bl	800bc10 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 800a1a2:	2300      	movs	r3, #0
}
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	3718      	adds	r7, #24
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	bd80      	pop	{r7, pc}

0800a1ac <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 800a1ac:	b480      	push	{r7}
 800a1ae:	b083      	sub	sp, #12
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	2222      	movs	r2, #34	; 0x22
 800a1b8:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 800a1ba:	4b03      	ldr	r3, [pc, #12]	; (800a1c8 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 800a1bc:	4618      	mov	r0, r3
 800a1be:	370c      	adds	r7, #12
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c6:	4770      	bx	lr
 800a1c8:	20000068 	.word	0x20000068

0800a1cc <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 800a1cc:	b480      	push	{r7}
 800a1ce:	b083      	sub	sp, #12
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	2222      	movs	r2, #34	; 0x22
 800a1d8:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgHSDesc;
 800a1da:	4b03      	ldr	r3, [pc, #12]	; (800a1e8 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 800a1dc:	4618      	mov	r0, r3
 800a1de:	370c      	adds	r7, #12
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e6:	4770      	bx	lr
 800a1e8:	2000008c 	.word	0x2000008c

0800a1ec <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a1ec:	b480      	push	{r7}
 800a1ee:	b083      	sub	sp, #12
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	2222      	movs	r2, #34	; 0x22
 800a1f8:	801a      	strh	r2, [r3, #0]

  return USBD_HID_OtherSpeedCfgDesc;
 800a1fa:	4b03      	ldr	r3, [pc, #12]	; (800a208 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	370c      	adds	r7, #12
 800a200:	46bd      	mov	sp, r7
 800a202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a206:	4770      	bx	lr
 800a208:	200000b0 	.word	0x200000b0

0800a20c <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a20c:	b480      	push	{r7}
 800a20e:	b083      	sub	sp, #12
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
 800a214:	460b      	mov	r3, r1
 800a216:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a21e:	2200      	movs	r2, #0
 800a220:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800a222:	2300      	movs	r3, #0
}
 800a224:	4618      	mov	r0, r3
 800a226:	370c      	adds	r7, #12
 800a228:	46bd      	mov	sp, r7
 800a22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22e:	4770      	bx	lr

0800a230 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800a230:	b480      	push	{r7}
 800a232:	b083      	sub	sp, #12
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	220a      	movs	r2, #10
 800a23c:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 800a23e:	4b03      	ldr	r3, [pc, #12]	; (800a24c <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 800a240:	4618      	mov	r0, r3
 800a242:	370c      	adds	r7, #12
 800a244:	46bd      	mov	sp, r7
 800a246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24a:	4770      	bx	lr
 800a24c:	200000e0 	.word	0x200000e0

0800a250 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a250:	b580      	push	{r7, lr}
 800a252:	b086      	sub	sp, #24
 800a254:	af00      	add	r7, sp, #0
 800a256:	60f8      	str	r0, [r7, #12]
 800a258:	60b9      	str	r1, [r7, #8]
 800a25a:	4613      	mov	r3, r2
 800a25c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d101      	bne.n	800a268 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a264:	2303      	movs	r3, #3
 800a266:	e01f      	b.n	800a2a8 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	2200      	movs	r2, #0
 800a26c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	2200      	movs	r2, #0
 800a274:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	2200      	movs	r2, #0
 800a27c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a280:	68bb      	ldr	r3, [r7, #8]
 800a282:	2b00      	cmp	r3, #0
 800a284:	d003      	beq.n	800a28e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	68ba      	ldr	r2, [r7, #8]
 800a28a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	2201      	movs	r2, #1
 800a292:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	79fa      	ldrb	r2, [r7, #7]
 800a29a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a29c:	68f8      	ldr	r0, [r7, #12]
 800a29e:	f001 faf1 	bl	800b884 <USBD_LL_Init>
 800a2a2:	4603      	mov	r3, r0
 800a2a4:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a2a6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	3718      	adds	r7, #24
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	bd80      	pop	{r7, pc}

0800a2b0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b084      	sub	sp, #16
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	6078      	str	r0, [r7, #4]
 800a2b8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a2be:	683b      	ldr	r3, [r7, #0]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d101      	bne.n	800a2c8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800a2c4:	2303      	movs	r3, #3
 800a2c6:	e016      	b.n	800a2f6 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	683a      	ldr	r2, [r7, #0]
 800a2cc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d00b      	beq.n	800a2f4 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2e4:	f107 020e 	add.w	r2, r7, #14
 800a2e8:	4610      	mov	r0, r2
 800a2ea:	4798      	blx	r3
 800a2ec:	4602      	mov	r2, r0
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800a2f4:	2300      	movs	r3, #0
}
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	3710      	adds	r7, #16
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	bd80      	pop	{r7, pc}

0800a2fe <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a2fe:	b580      	push	{r7, lr}
 800a300:	b082      	sub	sp, #8
 800a302:	af00      	add	r7, sp, #0
 800a304:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a306:	6878      	ldr	r0, [r7, #4]
 800a308:	f001 fb0c 	bl	800b924 <USBD_LL_Start>
 800a30c:	4603      	mov	r3, r0
}
 800a30e:	4618      	mov	r0, r3
 800a310:	3708      	adds	r7, #8
 800a312:	46bd      	mov	sp, r7
 800a314:	bd80      	pop	{r7, pc}

0800a316 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a316:	b480      	push	{r7}
 800a318:	b083      	sub	sp, #12
 800a31a:	af00      	add	r7, sp, #0
 800a31c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a31e:	2300      	movs	r3, #0
}
 800a320:	4618      	mov	r0, r3
 800a322:	370c      	adds	r7, #12
 800a324:	46bd      	mov	sp, r7
 800a326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32a:	4770      	bx	lr

0800a32c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b084      	sub	sp, #16
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
 800a334:	460b      	mov	r3, r1
 800a336:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a338:	2303      	movs	r3, #3
 800a33a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a342:	2b00      	cmp	r3, #0
 800a344:	d009      	beq.n	800a35a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	78fa      	ldrb	r2, [r7, #3]
 800a350:	4611      	mov	r1, r2
 800a352:	6878      	ldr	r0, [r7, #4]
 800a354:	4798      	blx	r3
 800a356:	4603      	mov	r3, r0
 800a358:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a35a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a35c:	4618      	mov	r0, r3
 800a35e:	3710      	adds	r7, #16
 800a360:	46bd      	mov	sp, r7
 800a362:	bd80      	pop	{r7, pc}

0800a364 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a364:	b580      	push	{r7, lr}
 800a366:	b082      	sub	sp, #8
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
 800a36c:	460b      	mov	r3, r1
 800a36e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a376:	2b00      	cmp	r3, #0
 800a378:	d007      	beq.n	800a38a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a380:	685b      	ldr	r3, [r3, #4]
 800a382:	78fa      	ldrb	r2, [r7, #3]
 800a384:	4611      	mov	r1, r2
 800a386:	6878      	ldr	r0, [r7, #4]
 800a388:	4798      	blx	r3
  }

  return USBD_OK;
 800a38a:	2300      	movs	r3, #0
}
 800a38c:	4618      	mov	r0, r3
 800a38e:	3708      	adds	r7, #8
 800a390:	46bd      	mov	sp, r7
 800a392:	bd80      	pop	{r7, pc}

0800a394 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a394:	b580      	push	{r7, lr}
 800a396:	b084      	sub	sp, #16
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
 800a39c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a3a4:	6839      	ldr	r1, [r7, #0]
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	f000 ff46 	bl	800b238 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	2201      	movs	r2, #1
 800a3b0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a3ba:	461a      	mov	r2, r3
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a3c8:	f003 031f 	and.w	r3, r3, #31
 800a3cc:	2b02      	cmp	r3, #2
 800a3ce:	d01a      	beq.n	800a406 <USBD_LL_SetupStage+0x72>
 800a3d0:	2b02      	cmp	r3, #2
 800a3d2:	d822      	bhi.n	800a41a <USBD_LL_SetupStage+0x86>
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d002      	beq.n	800a3de <USBD_LL_SetupStage+0x4a>
 800a3d8:	2b01      	cmp	r3, #1
 800a3da:	d00a      	beq.n	800a3f2 <USBD_LL_SetupStage+0x5e>
 800a3dc:	e01d      	b.n	800a41a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a3e4:	4619      	mov	r1, r3
 800a3e6:	6878      	ldr	r0, [r7, #4]
 800a3e8:	f000 f9ee 	bl	800a7c8 <USBD_StdDevReq>
 800a3ec:	4603      	mov	r3, r0
 800a3ee:	73fb      	strb	r3, [r7, #15]
      break;
 800a3f0:	e020      	b.n	800a434 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a3f8:	4619      	mov	r1, r3
 800a3fa:	6878      	ldr	r0, [r7, #4]
 800a3fc:	f000 fa52 	bl	800a8a4 <USBD_StdItfReq>
 800a400:	4603      	mov	r3, r0
 800a402:	73fb      	strb	r3, [r7, #15]
      break;
 800a404:	e016      	b.n	800a434 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a40c:	4619      	mov	r1, r3
 800a40e:	6878      	ldr	r0, [r7, #4]
 800a410:	f000 fa91 	bl	800a936 <USBD_StdEPReq>
 800a414:	4603      	mov	r3, r0
 800a416:	73fb      	strb	r3, [r7, #15]
      break;
 800a418:	e00c      	b.n	800a434 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a420:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a424:	b2db      	uxtb	r3, r3
 800a426:	4619      	mov	r1, r3
 800a428:	6878      	ldr	r0, [r7, #4]
 800a42a:	f001 fb21 	bl	800ba70 <USBD_LL_StallEP>
 800a42e:	4603      	mov	r3, r0
 800a430:	73fb      	strb	r3, [r7, #15]
      break;
 800a432:	bf00      	nop
  }

  return ret;
 800a434:	7bfb      	ldrb	r3, [r7, #15]
}
 800a436:	4618      	mov	r0, r3
 800a438:	3710      	adds	r7, #16
 800a43a:	46bd      	mov	sp, r7
 800a43c:	bd80      	pop	{r7, pc}

0800a43e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a43e:	b580      	push	{r7, lr}
 800a440:	b086      	sub	sp, #24
 800a442:	af00      	add	r7, sp, #0
 800a444:	60f8      	str	r0, [r7, #12]
 800a446:	460b      	mov	r3, r1
 800a448:	607a      	str	r2, [r7, #4]
 800a44a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a44c:	7afb      	ldrb	r3, [r7, #11]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d138      	bne.n	800a4c4 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a458:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a460:	2b03      	cmp	r3, #3
 800a462:	d14a      	bne.n	800a4fa <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800a464:	693b      	ldr	r3, [r7, #16]
 800a466:	689a      	ldr	r2, [r3, #8]
 800a468:	693b      	ldr	r3, [r7, #16]
 800a46a:	68db      	ldr	r3, [r3, #12]
 800a46c:	429a      	cmp	r2, r3
 800a46e:	d913      	bls.n	800a498 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a470:	693b      	ldr	r3, [r7, #16]
 800a472:	689a      	ldr	r2, [r3, #8]
 800a474:	693b      	ldr	r3, [r7, #16]
 800a476:	68db      	ldr	r3, [r3, #12]
 800a478:	1ad2      	subs	r2, r2, r3
 800a47a:	693b      	ldr	r3, [r7, #16]
 800a47c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a47e:	693b      	ldr	r3, [r7, #16]
 800a480:	68da      	ldr	r2, [r3, #12]
 800a482:	693b      	ldr	r3, [r7, #16]
 800a484:	689b      	ldr	r3, [r3, #8]
 800a486:	4293      	cmp	r3, r2
 800a488:	bf28      	it	cs
 800a48a:	4613      	movcs	r3, r2
 800a48c:	461a      	mov	r2, r3
 800a48e:	6879      	ldr	r1, [r7, #4]
 800a490:	68f8      	ldr	r0, [r7, #12]
 800a492:	f000 ffa8 	bl	800b3e6 <USBD_CtlContinueRx>
 800a496:	e030      	b.n	800a4fa <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a49e:	b2db      	uxtb	r3, r3
 800a4a0:	2b03      	cmp	r3, #3
 800a4a2:	d10b      	bne.n	800a4bc <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4aa:	691b      	ldr	r3, [r3, #16]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d005      	beq.n	800a4bc <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4b6:	691b      	ldr	r3, [r3, #16]
 800a4b8:	68f8      	ldr	r0, [r7, #12]
 800a4ba:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a4bc:	68f8      	ldr	r0, [r7, #12]
 800a4be:	f000 ffa3 	bl	800b408 <USBD_CtlSendStatus>
 800a4c2:	e01a      	b.n	800a4fa <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4ca:	b2db      	uxtb	r3, r3
 800a4cc:	2b03      	cmp	r3, #3
 800a4ce:	d114      	bne.n	800a4fa <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4d6:	699b      	ldr	r3, [r3, #24]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d00e      	beq.n	800a4fa <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4e2:	699b      	ldr	r3, [r3, #24]
 800a4e4:	7afa      	ldrb	r2, [r7, #11]
 800a4e6:	4611      	mov	r1, r2
 800a4e8:	68f8      	ldr	r0, [r7, #12]
 800a4ea:	4798      	blx	r3
 800a4ec:	4603      	mov	r3, r0
 800a4ee:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800a4f0:	7dfb      	ldrb	r3, [r7, #23]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d001      	beq.n	800a4fa <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800a4f6:	7dfb      	ldrb	r3, [r7, #23]
 800a4f8:	e000      	b.n	800a4fc <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800a4fa:	2300      	movs	r3, #0
}
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	3718      	adds	r7, #24
 800a500:	46bd      	mov	sp, r7
 800a502:	bd80      	pop	{r7, pc}

0800a504 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a504:	b580      	push	{r7, lr}
 800a506:	b086      	sub	sp, #24
 800a508:	af00      	add	r7, sp, #0
 800a50a:	60f8      	str	r0, [r7, #12]
 800a50c:	460b      	mov	r3, r1
 800a50e:	607a      	str	r2, [r7, #4]
 800a510:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a512:	7afb      	ldrb	r3, [r7, #11]
 800a514:	2b00      	cmp	r3, #0
 800a516:	d16b      	bne.n	800a5f0 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	3314      	adds	r3, #20
 800a51c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a524:	2b02      	cmp	r3, #2
 800a526:	d156      	bne.n	800a5d6 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800a528:	693b      	ldr	r3, [r7, #16]
 800a52a:	689a      	ldr	r2, [r3, #8]
 800a52c:	693b      	ldr	r3, [r7, #16]
 800a52e:	68db      	ldr	r3, [r3, #12]
 800a530:	429a      	cmp	r2, r3
 800a532:	d914      	bls.n	800a55e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a534:	693b      	ldr	r3, [r7, #16]
 800a536:	689a      	ldr	r2, [r3, #8]
 800a538:	693b      	ldr	r3, [r7, #16]
 800a53a:	68db      	ldr	r3, [r3, #12]
 800a53c:	1ad2      	subs	r2, r2, r3
 800a53e:	693b      	ldr	r3, [r7, #16]
 800a540:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a542:	693b      	ldr	r3, [r7, #16]
 800a544:	689b      	ldr	r3, [r3, #8]
 800a546:	461a      	mov	r2, r3
 800a548:	6879      	ldr	r1, [r7, #4]
 800a54a:	68f8      	ldr	r0, [r7, #12]
 800a54c:	f000 ff3a 	bl	800b3c4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a550:	2300      	movs	r3, #0
 800a552:	2200      	movs	r2, #0
 800a554:	2100      	movs	r1, #0
 800a556:	68f8      	ldr	r0, [r7, #12]
 800a558:	f001 fb92 	bl	800bc80 <USBD_LL_PrepareReceive>
 800a55c:	e03b      	b.n	800a5d6 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a55e:	693b      	ldr	r3, [r7, #16]
 800a560:	68da      	ldr	r2, [r3, #12]
 800a562:	693b      	ldr	r3, [r7, #16]
 800a564:	689b      	ldr	r3, [r3, #8]
 800a566:	429a      	cmp	r2, r3
 800a568:	d11c      	bne.n	800a5a4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a56a:	693b      	ldr	r3, [r7, #16]
 800a56c:	685a      	ldr	r2, [r3, #4]
 800a56e:	693b      	ldr	r3, [r7, #16]
 800a570:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a572:	429a      	cmp	r2, r3
 800a574:	d316      	bcc.n	800a5a4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a576:	693b      	ldr	r3, [r7, #16]
 800a578:	685a      	ldr	r2, [r3, #4]
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a580:	429a      	cmp	r2, r3
 800a582:	d20f      	bcs.n	800a5a4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a584:	2200      	movs	r2, #0
 800a586:	2100      	movs	r1, #0
 800a588:	68f8      	ldr	r0, [r7, #12]
 800a58a:	f000 ff1b 	bl	800b3c4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	2200      	movs	r2, #0
 800a592:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a596:	2300      	movs	r3, #0
 800a598:	2200      	movs	r2, #0
 800a59a:	2100      	movs	r1, #0
 800a59c:	68f8      	ldr	r0, [r7, #12]
 800a59e:	f001 fb6f 	bl	800bc80 <USBD_LL_PrepareReceive>
 800a5a2:	e018      	b.n	800a5d6 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a5aa:	b2db      	uxtb	r3, r3
 800a5ac:	2b03      	cmp	r3, #3
 800a5ae:	d10b      	bne.n	800a5c8 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5b6:	68db      	ldr	r3, [r3, #12]
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d005      	beq.n	800a5c8 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5c2:	68db      	ldr	r3, [r3, #12]
 800a5c4:	68f8      	ldr	r0, [r7, #12]
 800a5c6:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a5c8:	2180      	movs	r1, #128	; 0x80
 800a5ca:	68f8      	ldr	r0, [r7, #12]
 800a5cc:	f001 fa50 	bl	800ba70 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a5d0:	68f8      	ldr	r0, [r7, #12]
 800a5d2:	f000 ff2c 	bl	800b42e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a5dc:	2b01      	cmp	r3, #1
 800a5de:	d122      	bne.n	800a626 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800a5e0:	68f8      	ldr	r0, [r7, #12]
 800a5e2:	f7ff fe98 	bl	800a316 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a5ee:	e01a      	b.n	800a626 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a5f6:	b2db      	uxtb	r3, r3
 800a5f8:	2b03      	cmp	r3, #3
 800a5fa:	d114      	bne.n	800a626 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a602:	695b      	ldr	r3, [r3, #20]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d00e      	beq.n	800a626 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a60e:	695b      	ldr	r3, [r3, #20]
 800a610:	7afa      	ldrb	r2, [r7, #11]
 800a612:	4611      	mov	r1, r2
 800a614:	68f8      	ldr	r0, [r7, #12]
 800a616:	4798      	blx	r3
 800a618:	4603      	mov	r3, r0
 800a61a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800a61c:	7dfb      	ldrb	r3, [r7, #23]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d001      	beq.n	800a626 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800a622:	7dfb      	ldrb	r3, [r7, #23]
 800a624:	e000      	b.n	800a628 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800a626:	2300      	movs	r3, #0
}
 800a628:	4618      	mov	r0, r3
 800a62a:	3718      	adds	r7, #24
 800a62c:	46bd      	mov	sp, r7
 800a62e:	bd80      	pop	{r7, pc}

0800a630 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a630:	b580      	push	{r7, lr}
 800a632:	b082      	sub	sp, #8
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	2201      	movs	r2, #1
 800a63c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	2200      	movs	r2, #0
 800a644:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	2200      	movs	r2, #0
 800a64c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	2200      	movs	r2, #0
 800a652:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d101      	bne.n	800a664 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800a660:	2303      	movs	r3, #3
 800a662:	e02f      	b.n	800a6c4 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d00f      	beq.n	800a68e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a674:	685b      	ldr	r3, [r3, #4]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d009      	beq.n	800a68e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a680:	685b      	ldr	r3, [r3, #4]
 800a682:	687a      	ldr	r2, [r7, #4]
 800a684:	6852      	ldr	r2, [r2, #4]
 800a686:	b2d2      	uxtb	r2, r2
 800a688:	4611      	mov	r1, r2
 800a68a:	6878      	ldr	r0, [r7, #4]
 800a68c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a68e:	2340      	movs	r3, #64	; 0x40
 800a690:	2200      	movs	r2, #0
 800a692:	2100      	movs	r1, #0
 800a694:	6878      	ldr	r0, [r7, #4]
 800a696:	f001 f977 	bl	800b988 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	2201      	movs	r2, #1
 800a69e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	2240      	movs	r2, #64	; 0x40
 800a6a6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a6aa:	2340      	movs	r3, #64	; 0x40
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	2180      	movs	r1, #128	; 0x80
 800a6b0:	6878      	ldr	r0, [r7, #4]
 800a6b2:	f001 f969 	bl	800b988 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	2201      	movs	r2, #1
 800a6ba:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	2240      	movs	r2, #64	; 0x40
 800a6c0:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800a6c2:	2300      	movs	r3, #0
}
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	3708      	adds	r7, #8
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	bd80      	pop	{r7, pc}

0800a6cc <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a6cc:	b480      	push	{r7}
 800a6ce:	b083      	sub	sp, #12
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
 800a6d4:	460b      	mov	r3, r1
 800a6d6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	78fa      	ldrb	r2, [r7, #3]
 800a6dc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a6de:	2300      	movs	r3, #0
}
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	370c      	adds	r7, #12
 800a6e4:	46bd      	mov	sp, r7
 800a6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ea:	4770      	bx	lr

0800a6ec <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a6ec:	b480      	push	{r7}
 800a6ee:	b083      	sub	sp, #12
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6fa:	b2da      	uxtb	r2, r3
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	2204      	movs	r2, #4
 800a706:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a70a:	2300      	movs	r3, #0
}
 800a70c:	4618      	mov	r0, r3
 800a70e:	370c      	adds	r7, #12
 800a710:	46bd      	mov	sp, r7
 800a712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a716:	4770      	bx	lr

0800a718 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a718:	b480      	push	{r7}
 800a71a:	b083      	sub	sp, #12
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a726:	b2db      	uxtb	r3, r3
 800a728:	2b04      	cmp	r3, #4
 800a72a:	d106      	bne.n	800a73a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800a732:	b2da      	uxtb	r2, r3
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a73a:	2300      	movs	r3, #0
}
 800a73c:	4618      	mov	r0, r3
 800a73e:	370c      	adds	r7, #12
 800a740:	46bd      	mov	sp, r7
 800a742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a746:	4770      	bx	lr

0800a748 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b082      	sub	sp, #8
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a756:	2b00      	cmp	r3, #0
 800a758:	d101      	bne.n	800a75e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800a75a:	2303      	movs	r3, #3
 800a75c:	e012      	b.n	800a784 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a764:	b2db      	uxtb	r3, r3
 800a766:	2b03      	cmp	r3, #3
 800a768:	d10b      	bne.n	800a782 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a770:	69db      	ldr	r3, [r3, #28]
 800a772:	2b00      	cmp	r3, #0
 800a774:	d005      	beq.n	800a782 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a77c:	69db      	ldr	r3, [r3, #28]
 800a77e:	6878      	ldr	r0, [r7, #4]
 800a780:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a782:	2300      	movs	r3, #0
}
 800a784:	4618      	mov	r0, r3
 800a786:	3708      	adds	r7, #8
 800a788:	46bd      	mov	sp, r7
 800a78a:	bd80      	pop	{r7, pc}

0800a78c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a78c:	b480      	push	{r7}
 800a78e:	b087      	sub	sp, #28
 800a790:	af00      	add	r7, sp, #0
 800a792:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a798:	697b      	ldr	r3, [r7, #20]
 800a79a:	781b      	ldrb	r3, [r3, #0]
 800a79c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a79e:	697b      	ldr	r3, [r7, #20]
 800a7a0:	3301      	adds	r3, #1
 800a7a2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a7a4:	697b      	ldr	r3, [r7, #20]
 800a7a6:	781b      	ldrb	r3, [r3, #0]
 800a7a8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a7aa:	8a3b      	ldrh	r3, [r7, #16]
 800a7ac:	021b      	lsls	r3, r3, #8
 800a7ae:	b21a      	sxth	r2, r3
 800a7b0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a7b4:	4313      	orrs	r3, r2
 800a7b6:	b21b      	sxth	r3, r3
 800a7b8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a7ba:	89fb      	ldrh	r3, [r7, #14]
}
 800a7bc:	4618      	mov	r0, r3
 800a7be:	371c      	adds	r7, #28
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c6:	4770      	bx	lr

0800a7c8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b084      	sub	sp, #16
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]
 800a7d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a7d6:	683b      	ldr	r3, [r7, #0]
 800a7d8:	781b      	ldrb	r3, [r3, #0]
 800a7da:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a7de:	2b40      	cmp	r3, #64	; 0x40
 800a7e0:	d005      	beq.n	800a7ee <USBD_StdDevReq+0x26>
 800a7e2:	2b40      	cmp	r3, #64	; 0x40
 800a7e4:	d853      	bhi.n	800a88e <USBD_StdDevReq+0xc6>
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d00b      	beq.n	800a802 <USBD_StdDevReq+0x3a>
 800a7ea:	2b20      	cmp	r3, #32
 800a7ec:	d14f      	bne.n	800a88e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7f4:	689b      	ldr	r3, [r3, #8]
 800a7f6:	6839      	ldr	r1, [r7, #0]
 800a7f8:	6878      	ldr	r0, [r7, #4]
 800a7fa:	4798      	blx	r3
 800a7fc:	4603      	mov	r3, r0
 800a7fe:	73fb      	strb	r3, [r7, #15]
      break;
 800a800:	e04a      	b.n	800a898 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a802:	683b      	ldr	r3, [r7, #0]
 800a804:	785b      	ldrb	r3, [r3, #1]
 800a806:	2b09      	cmp	r3, #9
 800a808:	d83b      	bhi.n	800a882 <USBD_StdDevReq+0xba>
 800a80a:	a201      	add	r2, pc, #4	; (adr r2, 800a810 <USBD_StdDevReq+0x48>)
 800a80c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a810:	0800a865 	.word	0x0800a865
 800a814:	0800a879 	.word	0x0800a879
 800a818:	0800a883 	.word	0x0800a883
 800a81c:	0800a86f 	.word	0x0800a86f
 800a820:	0800a883 	.word	0x0800a883
 800a824:	0800a843 	.word	0x0800a843
 800a828:	0800a839 	.word	0x0800a839
 800a82c:	0800a883 	.word	0x0800a883
 800a830:	0800a85b 	.word	0x0800a85b
 800a834:	0800a84d 	.word	0x0800a84d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a838:	6839      	ldr	r1, [r7, #0]
 800a83a:	6878      	ldr	r0, [r7, #4]
 800a83c:	f000 f9de 	bl	800abfc <USBD_GetDescriptor>
          break;
 800a840:	e024      	b.n	800a88c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a842:	6839      	ldr	r1, [r7, #0]
 800a844:	6878      	ldr	r0, [r7, #4]
 800a846:	f000 fb6d 	bl	800af24 <USBD_SetAddress>
          break;
 800a84a:	e01f      	b.n	800a88c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a84c:	6839      	ldr	r1, [r7, #0]
 800a84e:	6878      	ldr	r0, [r7, #4]
 800a850:	f000 fbac 	bl	800afac <USBD_SetConfig>
 800a854:	4603      	mov	r3, r0
 800a856:	73fb      	strb	r3, [r7, #15]
          break;
 800a858:	e018      	b.n	800a88c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a85a:	6839      	ldr	r1, [r7, #0]
 800a85c:	6878      	ldr	r0, [r7, #4]
 800a85e:	f000 fc4b 	bl	800b0f8 <USBD_GetConfig>
          break;
 800a862:	e013      	b.n	800a88c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a864:	6839      	ldr	r1, [r7, #0]
 800a866:	6878      	ldr	r0, [r7, #4]
 800a868:	f000 fc7c 	bl	800b164 <USBD_GetStatus>
          break;
 800a86c:	e00e      	b.n	800a88c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a86e:	6839      	ldr	r1, [r7, #0]
 800a870:	6878      	ldr	r0, [r7, #4]
 800a872:	f000 fcab 	bl	800b1cc <USBD_SetFeature>
          break;
 800a876:	e009      	b.n	800a88c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a878:	6839      	ldr	r1, [r7, #0]
 800a87a:	6878      	ldr	r0, [r7, #4]
 800a87c:	f000 fcba 	bl	800b1f4 <USBD_ClrFeature>
          break;
 800a880:	e004      	b.n	800a88c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800a882:	6839      	ldr	r1, [r7, #0]
 800a884:	6878      	ldr	r0, [r7, #4]
 800a886:	f000 fd11 	bl	800b2ac <USBD_CtlError>
          break;
 800a88a:	bf00      	nop
      }
      break;
 800a88c:	e004      	b.n	800a898 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800a88e:	6839      	ldr	r1, [r7, #0]
 800a890:	6878      	ldr	r0, [r7, #4]
 800a892:	f000 fd0b 	bl	800b2ac <USBD_CtlError>
      break;
 800a896:	bf00      	nop
  }

  return ret;
 800a898:	7bfb      	ldrb	r3, [r7, #15]
}
 800a89a:	4618      	mov	r0, r3
 800a89c:	3710      	adds	r7, #16
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	bd80      	pop	{r7, pc}
 800a8a2:	bf00      	nop

0800a8a4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	b084      	sub	sp, #16
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	6078      	str	r0, [r7, #4]
 800a8ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a8b2:	683b      	ldr	r3, [r7, #0]
 800a8b4:	781b      	ldrb	r3, [r3, #0]
 800a8b6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a8ba:	2b40      	cmp	r3, #64	; 0x40
 800a8bc:	d005      	beq.n	800a8ca <USBD_StdItfReq+0x26>
 800a8be:	2b40      	cmp	r3, #64	; 0x40
 800a8c0:	d82f      	bhi.n	800a922 <USBD_StdItfReq+0x7e>
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d001      	beq.n	800a8ca <USBD_StdItfReq+0x26>
 800a8c6:	2b20      	cmp	r3, #32
 800a8c8:	d12b      	bne.n	800a922 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8d0:	b2db      	uxtb	r3, r3
 800a8d2:	3b01      	subs	r3, #1
 800a8d4:	2b02      	cmp	r3, #2
 800a8d6:	d81d      	bhi.n	800a914 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a8d8:	683b      	ldr	r3, [r7, #0]
 800a8da:	889b      	ldrh	r3, [r3, #4]
 800a8dc:	b2db      	uxtb	r3, r3
 800a8de:	2b01      	cmp	r3, #1
 800a8e0:	d813      	bhi.n	800a90a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8e8:	689b      	ldr	r3, [r3, #8]
 800a8ea:	6839      	ldr	r1, [r7, #0]
 800a8ec:	6878      	ldr	r0, [r7, #4]
 800a8ee:	4798      	blx	r3
 800a8f0:	4603      	mov	r3, r0
 800a8f2:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a8f4:	683b      	ldr	r3, [r7, #0]
 800a8f6:	88db      	ldrh	r3, [r3, #6]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d110      	bne.n	800a91e <USBD_StdItfReq+0x7a>
 800a8fc:	7bfb      	ldrb	r3, [r7, #15]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d10d      	bne.n	800a91e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a902:	6878      	ldr	r0, [r7, #4]
 800a904:	f000 fd80 	bl	800b408 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a908:	e009      	b.n	800a91e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800a90a:	6839      	ldr	r1, [r7, #0]
 800a90c:	6878      	ldr	r0, [r7, #4]
 800a90e:	f000 fccd 	bl	800b2ac <USBD_CtlError>
          break;
 800a912:	e004      	b.n	800a91e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800a914:	6839      	ldr	r1, [r7, #0]
 800a916:	6878      	ldr	r0, [r7, #4]
 800a918:	f000 fcc8 	bl	800b2ac <USBD_CtlError>
          break;
 800a91c:	e000      	b.n	800a920 <USBD_StdItfReq+0x7c>
          break;
 800a91e:	bf00      	nop
      }
      break;
 800a920:	e004      	b.n	800a92c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800a922:	6839      	ldr	r1, [r7, #0]
 800a924:	6878      	ldr	r0, [r7, #4]
 800a926:	f000 fcc1 	bl	800b2ac <USBD_CtlError>
      break;
 800a92a:	bf00      	nop
  }

  return ret;
 800a92c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a92e:	4618      	mov	r0, r3
 800a930:	3710      	adds	r7, #16
 800a932:	46bd      	mov	sp, r7
 800a934:	bd80      	pop	{r7, pc}

0800a936 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a936:	b580      	push	{r7, lr}
 800a938:	b084      	sub	sp, #16
 800a93a:	af00      	add	r7, sp, #0
 800a93c:	6078      	str	r0, [r7, #4]
 800a93e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a940:	2300      	movs	r3, #0
 800a942:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800a944:	683b      	ldr	r3, [r7, #0]
 800a946:	889b      	ldrh	r3, [r3, #4]
 800a948:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a94a:	683b      	ldr	r3, [r7, #0]
 800a94c:	781b      	ldrb	r3, [r3, #0]
 800a94e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a952:	2b40      	cmp	r3, #64	; 0x40
 800a954:	d007      	beq.n	800a966 <USBD_StdEPReq+0x30>
 800a956:	2b40      	cmp	r3, #64	; 0x40
 800a958:	f200 8145 	bhi.w	800abe6 <USBD_StdEPReq+0x2b0>
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d00c      	beq.n	800a97a <USBD_StdEPReq+0x44>
 800a960:	2b20      	cmp	r3, #32
 800a962:	f040 8140 	bne.w	800abe6 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a96c:	689b      	ldr	r3, [r3, #8]
 800a96e:	6839      	ldr	r1, [r7, #0]
 800a970:	6878      	ldr	r0, [r7, #4]
 800a972:	4798      	blx	r3
 800a974:	4603      	mov	r3, r0
 800a976:	73fb      	strb	r3, [r7, #15]
      break;
 800a978:	e13a      	b.n	800abf0 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a97a:	683b      	ldr	r3, [r7, #0]
 800a97c:	785b      	ldrb	r3, [r3, #1]
 800a97e:	2b03      	cmp	r3, #3
 800a980:	d007      	beq.n	800a992 <USBD_StdEPReq+0x5c>
 800a982:	2b03      	cmp	r3, #3
 800a984:	f300 8129 	bgt.w	800abda <USBD_StdEPReq+0x2a4>
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d07f      	beq.n	800aa8c <USBD_StdEPReq+0x156>
 800a98c:	2b01      	cmp	r3, #1
 800a98e:	d03c      	beq.n	800aa0a <USBD_StdEPReq+0xd4>
 800a990:	e123      	b.n	800abda <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a998:	b2db      	uxtb	r3, r3
 800a99a:	2b02      	cmp	r3, #2
 800a99c:	d002      	beq.n	800a9a4 <USBD_StdEPReq+0x6e>
 800a99e:	2b03      	cmp	r3, #3
 800a9a0:	d016      	beq.n	800a9d0 <USBD_StdEPReq+0x9a>
 800a9a2:	e02c      	b.n	800a9fe <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a9a4:	7bbb      	ldrb	r3, [r7, #14]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d00d      	beq.n	800a9c6 <USBD_StdEPReq+0x90>
 800a9aa:	7bbb      	ldrb	r3, [r7, #14]
 800a9ac:	2b80      	cmp	r3, #128	; 0x80
 800a9ae:	d00a      	beq.n	800a9c6 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a9b0:	7bbb      	ldrb	r3, [r7, #14]
 800a9b2:	4619      	mov	r1, r3
 800a9b4:	6878      	ldr	r0, [r7, #4]
 800a9b6:	f001 f85b 	bl	800ba70 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a9ba:	2180      	movs	r1, #128	; 0x80
 800a9bc:	6878      	ldr	r0, [r7, #4]
 800a9be:	f001 f857 	bl	800ba70 <USBD_LL_StallEP>
 800a9c2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a9c4:	e020      	b.n	800aa08 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800a9c6:	6839      	ldr	r1, [r7, #0]
 800a9c8:	6878      	ldr	r0, [r7, #4]
 800a9ca:	f000 fc6f 	bl	800b2ac <USBD_CtlError>
              break;
 800a9ce:	e01b      	b.n	800aa08 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a9d0:	683b      	ldr	r3, [r7, #0]
 800a9d2:	885b      	ldrh	r3, [r3, #2]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d10e      	bne.n	800a9f6 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a9d8:	7bbb      	ldrb	r3, [r7, #14]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d00b      	beq.n	800a9f6 <USBD_StdEPReq+0xc0>
 800a9de:	7bbb      	ldrb	r3, [r7, #14]
 800a9e0:	2b80      	cmp	r3, #128	; 0x80
 800a9e2:	d008      	beq.n	800a9f6 <USBD_StdEPReq+0xc0>
 800a9e4:	683b      	ldr	r3, [r7, #0]
 800a9e6:	88db      	ldrh	r3, [r3, #6]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d104      	bne.n	800a9f6 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a9ec:	7bbb      	ldrb	r3, [r7, #14]
 800a9ee:	4619      	mov	r1, r3
 800a9f0:	6878      	ldr	r0, [r7, #4]
 800a9f2:	f001 f83d 	bl	800ba70 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a9f6:	6878      	ldr	r0, [r7, #4]
 800a9f8:	f000 fd06 	bl	800b408 <USBD_CtlSendStatus>

              break;
 800a9fc:	e004      	b.n	800aa08 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800a9fe:	6839      	ldr	r1, [r7, #0]
 800aa00:	6878      	ldr	r0, [r7, #4]
 800aa02:	f000 fc53 	bl	800b2ac <USBD_CtlError>
              break;
 800aa06:	bf00      	nop
          }
          break;
 800aa08:	e0ec      	b.n	800abe4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa10:	b2db      	uxtb	r3, r3
 800aa12:	2b02      	cmp	r3, #2
 800aa14:	d002      	beq.n	800aa1c <USBD_StdEPReq+0xe6>
 800aa16:	2b03      	cmp	r3, #3
 800aa18:	d016      	beq.n	800aa48 <USBD_StdEPReq+0x112>
 800aa1a:	e030      	b.n	800aa7e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aa1c:	7bbb      	ldrb	r3, [r7, #14]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d00d      	beq.n	800aa3e <USBD_StdEPReq+0x108>
 800aa22:	7bbb      	ldrb	r3, [r7, #14]
 800aa24:	2b80      	cmp	r3, #128	; 0x80
 800aa26:	d00a      	beq.n	800aa3e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800aa28:	7bbb      	ldrb	r3, [r7, #14]
 800aa2a:	4619      	mov	r1, r3
 800aa2c:	6878      	ldr	r0, [r7, #4]
 800aa2e:	f001 f81f 	bl	800ba70 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800aa32:	2180      	movs	r1, #128	; 0x80
 800aa34:	6878      	ldr	r0, [r7, #4]
 800aa36:	f001 f81b 	bl	800ba70 <USBD_LL_StallEP>
 800aa3a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800aa3c:	e025      	b.n	800aa8a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800aa3e:	6839      	ldr	r1, [r7, #0]
 800aa40:	6878      	ldr	r0, [r7, #4]
 800aa42:	f000 fc33 	bl	800b2ac <USBD_CtlError>
              break;
 800aa46:	e020      	b.n	800aa8a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800aa48:	683b      	ldr	r3, [r7, #0]
 800aa4a:	885b      	ldrh	r3, [r3, #2]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d11b      	bne.n	800aa88 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800aa50:	7bbb      	ldrb	r3, [r7, #14]
 800aa52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d004      	beq.n	800aa64 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800aa5a:	7bbb      	ldrb	r3, [r7, #14]
 800aa5c:	4619      	mov	r1, r3
 800aa5e:	6878      	ldr	r0, [r7, #4]
 800aa60:	f001 f83c 	bl	800badc <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800aa64:	6878      	ldr	r0, [r7, #4]
 800aa66:	f000 fccf 	bl	800b408 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa70:	689b      	ldr	r3, [r3, #8]
 800aa72:	6839      	ldr	r1, [r7, #0]
 800aa74:	6878      	ldr	r0, [r7, #4]
 800aa76:	4798      	blx	r3
 800aa78:	4603      	mov	r3, r0
 800aa7a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800aa7c:	e004      	b.n	800aa88 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800aa7e:	6839      	ldr	r1, [r7, #0]
 800aa80:	6878      	ldr	r0, [r7, #4]
 800aa82:	f000 fc13 	bl	800b2ac <USBD_CtlError>
              break;
 800aa86:	e000      	b.n	800aa8a <USBD_StdEPReq+0x154>
              break;
 800aa88:	bf00      	nop
          }
          break;
 800aa8a:	e0ab      	b.n	800abe4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa92:	b2db      	uxtb	r3, r3
 800aa94:	2b02      	cmp	r3, #2
 800aa96:	d002      	beq.n	800aa9e <USBD_StdEPReq+0x168>
 800aa98:	2b03      	cmp	r3, #3
 800aa9a:	d032      	beq.n	800ab02 <USBD_StdEPReq+0x1cc>
 800aa9c:	e097      	b.n	800abce <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aa9e:	7bbb      	ldrb	r3, [r7, #14]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d007      	beq.n	800aab4 <USBD_StdEPReq+0x17e>
 800aaa4:	7bbb      	ldrb	r3, [r7, #14]
 800aaa6:	2b80      	cmp	r3, #128	; 0x80
 800aaa8:	d004      	beq.n	800aab4 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800aaaa:	6839      	ldr	r1, [r7, #0]
 800aaac:	6878      	ldr	r0, [r7, #4]
 800aaae:	f000 fbfd 	bl	800b2ac <USBD_CtlError>
                break;
 800aab2:	e091      	b.n	800abd8 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aab4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	da0b      	bge.n	800aad4 <USBD_StdEPReq+0x19e>
 800aabc:	7bbb      	ldrb	r3, [r7, #14]
 800aabe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aac2:	4613      	mov	r3, r2
 800aac4:	009b      	lsls	r3, r3, #2
 800aac6:	4413      	add	r3, r2
 800aac8:	009b      	lsls	r3, r3, #2
 800aaca:	3310      	adds	r3, #16
 800aacc:	687a      	ldr	r2, [r7, #4]
 800aace:	4413      	add	r3, r2
 800aad0:	3304      	adds	r3, #4
 800aad2:	e00b      	b.n	800aaec <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800aad4:	7bbb      	ldrb	r3, [r7, #14]
 800aad6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aada:	4613      	mov	r3, r2
 800aadc:	009b      	lsls	r3, r3, #2
 800aade:	4413      	add	r3, r2
 800aae0:	009b      	lsls	r3, r3, #2
 800aae2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800aae6:	687a      	ldr	r2, [r7, #4]
 800aae8:	4413      	add	r3, r2
 800aaea:	3304      	adds	r3, #4
 800aaec:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800aaee:	68bb      	ldr	r3, [r7, #8]
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800aaf4:	68bb      	ldr	r3, [r7, #8]
 800aaf6:	2202      	movs	r2, #2
 800aaf8:	4619      	mov	r1, r3
 800aafa:	6878      	ldr	r0, [r7, #4]
 800aafc:	f000 fc47 	bl	800b38e <USBD_CtlSendData>
              break;
 800ab00:	e06a      	b.n	800abd8 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ab02:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	da11      	bge.n	800ab2e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ab0a:	7bbb      	ldrb	r3, [r7, #14]
 800ab0c:	f003 020f 	and.w	r2, r3, #15
 800ab10:	6879      	ldr	r1, [r7, #4]
 800ab12:	4613      	mov	r3, r2
 800ab14:	009b      	lsls	r3, r3, #2
 800ab16:	4413      	add	r3, r2
 800ab18:	009b      	lsls	r3, r3, #2
 800ab1a:	440b      	add	r3, r1
 800ab1c:	3324      	adds	r3, #36	; 0x24
 800ab1e:	881b      	ldrh	r3, [r3, #0]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d117      	bne.n	800ab54 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800ab24:	6839      	ldr	r1, [r7, #0]
 800ab26:	6878      	ldr	r0, [r7, #4]
 800ab28:	f000 fbc0 	bl	800b2ac <USBD_CtlError>
                  break;
 800ab2c:	e054      	b.n	800abd8 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ab2e:	7bbb      	ldrb	r3, [r7, #14]
 800ab30:	f003 020f 	and.w	r2, r3, #15
 800ab34:	6879      	ldr	r1, [r7, #4]
 800ab36:	4613      	mov	r3, r2
 800ab38:	009b      	lsls	r3, r3, #2
 800ab3a:	4413      	add	r3, r2
 800ab3c:	009b      	lsls	r3, r3, #2
 800ab3e:	440b      	add	r3, r1
 800ab40:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ab44:	881b      	ldrh	r3, [r3, #0]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d104      	bne.n	800ab54 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800ab4a:	6839      	ldr	r1, [r7, #0]
 800ab4c:	6878      	ldr	r0, [r7, #4]
 800ab4e:	f000 fbad 	bl	800b2ac <USBD_CtlError>
                  break;
 800ab52:	e041      	b.n	800abd8 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ab54:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	da0b      	bge.n	800ab74 <USBD_StdEPReq+0x23e>
 800ab5c:	7bbb      	ldrb	r3, [r7, #14]
 800ab5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ab62:	4613      	mov	r3, r2
 800ab64:	009b      	lsls	r3, r3, #2
 800ab66:	4413      	add	r3, r2
 800ab68:	009b      	lsls	r3, r3, #2
 800ab6a:	3310      	adds	r3, #16
 800ab6c:	687a      	ldr	r2, [r7, #4]
 800ab6e:	4413      	add	r3, r2
 800ab70:	3304      	adds	r3, #4
 800ab72:	e00b      	b.n	800ab8c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ab74:	7bbb      	ldrb	r3, [r7, #14]
 800ab76:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ab7a:	4613      	mov	r3, r2
 800ab7c:	009b      	lsls	r3, r3, #2
 800ab7e:	4413      	add	r3, r2
 800ab80:	009b      	lsls	r3, r3, #2
 800ab82:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ab86:	687a      	ldr	r2, [r7, #4]
 800ab88:	4413      	add	r3, r2
 800ab8a:	3304      	adds	r3, #4
 800ab8c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ab8e:	7bbb      	ldrb	r3, [r7, #14]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d002      	beq.n	800ab9a <USBD_StdEPReq+0x264>
 800ab94:	7bbb      	ldrb	r3, [r7, #14]
 800ab96:	2b80      	cmp	r3, #128	; 0x80
 800ab98:	d103      	bne.n	800aba2 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800ab9a:	68bb      	ldr	r3, [r7, #8]
 800ab9c:	2200      	movs	r2, #0
 800ab9e:	601a      	str	r2, [r3, #0]
 800aba0:	e00e      	b.n	800abc0 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800aba2:	7bbb      	ldrb	r3, [r7, #14]
 800aba4:	4619      	mov	r1, r3
 800aba6:	6878      	ldr	r0, [r7, #4]
 800aba8:	f000 ffce 	bl	800bb48 <USBD_LL_IsStallEP>
 800abac:	4603      	mov	r3, r0
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d003      	beq.n	800abba <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800abb2:	68bb      	ldr	r3, [r7, #8]
 800abb4:	2201      	movs	r2, #1
 800abb6:	601a      	str	r2, [r3, #0]
 800abb8:	e002      	b.n	800abc0 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800abba:	68bb      	ldr	r3, [r7, #8]
 800abbc:	2200      	movs	r2, #0
 800abbe:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800abc0:	68bb      	ldr	r3, [r7, #8]
 800abc2:	2202      	movs	r2, #2
 800abc4:	4619      	mov	r1, r3
 800abc6:	6878      	ldr	r0, [r7, #4]
 800abc8:	f000 fbe1 	bl	800b38e <USBD_CtlSendData>
              break;
 800abcc:	e004      	b.n	800abd8 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800abce:	6839      	ldr	r1, [r7, #0]
 800abd0:	6878      	ldr	r0, [r7, #4]
 800abd2:	f000 fb6b 	bl	800b2ac <USBD_CtlError>
              break;
 800abd6:	bf00      	nop
          }
          break;
 800abd8:	e004      	b.n	800abe4 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800abda:	6839      	ldr	r1, [r7, #0]
 800abdc:	6878      	ldr	r0, [r7, #4]
 800abde:	f000 fb65 	bl	800b2ac <USBD_CtlError>
          break;
 800abe2:	bf00      	nop
      }
      break;
 800abe4:	e004      	b.n	800abf0 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800abe6:	6839      	ldr	r1, [r7, #0]
 800abe8:	6878      	ldr	r0, [r7, #4]
 800abea:	f000 fb5f 	bl	800b2ac <USBD_CtlError>
      break;
 800abee:	bf00      	nop
  }

  return ret;
 800abf0:	7bfb      	ldrb	r3, [r7, #15]
}
 800abf2:	4618      	mov	r0, r3
 800abf4:	3710      	adds	r7, #16
 800abf6:	46bd      	mov	sp, r7
 800abf8:	bd80      	pop	{r7, pc}
	...

0800abfc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800abfc:	b580      	push	{r7, lr}
 800abfe:	b084      	sub	sp, #16
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	6078      	str	r0, [r7, #4]
 800ac04:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ac06:	2300      	movs	r3, #0
 800ac08:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ac0e:	2300      	movs	r3, #0
 800ac10:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ac12:	683b      	ldr	r3, [r7, #0]
 800ac14:	885b      	ldrh	r3, [r3, #2]
 800ac16:	0a1b      	lsrs	r3, r3, #8
 800ac18:	b29b      	uxth	r3, r3
 800ac1a:	3b01      	subs	r3, #1
 800ac1c:	2b0e      	cmp	r3, #14
 800ac1e:	f200 8152 	bhi.w	800aec6 <USBD_GetDescriptor+0x2ca>
 800ac22:	a201      	add	r2, pc, #4	; (adr r2, 800ac28 <USBD_GetDescriptor+0x2c>)
 800ac24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac28:	0800ac99 	.word	0x0800ac99
 800ac2c:	0800acb1 	.word	0x0800acb1
 800ac30:	0800acf1 	.word	0x0800acf1
 800ac34:	0800aec7 	.word	0x0800aec7
 800ac38:	0800aec7 	.word	0x0800aec7
 800ac3c:	0800ae67 	.word	0x0800ae67
 800ac40:	0800ae93 	.word	0x0800ae93
 800ac44:	0800aec7 	.word	0x0800aec7
 800ac48:	0800aec7 	.word	0x0800aec7
 800ac4c:	0800aec7 	.word	0x0800aec7
 800ac50:	0800aec7 	.word	0x0800aec7
 800ac54:	0800aec7 	.word	0x0800aec7
 800ac58:	0800aec7 	.word	0x0800aec7
 800ac5c:	0800aec7 	.word	0x0800aec7
 800ac60:	0800ac65 	.word	0x0800ac65
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac6a:	69db      	ldr	r3, [r3, #28]
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d00b      	beq.n	800ac88 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac76:	69db      	ldr	r3, [r3, #28]
 800ac78:	687a      	ldr	r2, [r7, #4]
 800ac7a:	7c12      	ldrb	r2, [r2, #16]
 800ac7c:	f107 0108 	add.w	r1, r7, #8
 800ac80:	4610      	mov	r0, r2
 800ac82:	4798      	blx	r3
 800ac84:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ac86:	e126      	b.n	800aed6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ac88:	6839      	ldr	r1, [r7, #0]
 800ac8a:	6878      	ldr	r0, [r7, #4]
 800ac8c:	f000 fb0e 	bl	800b2ac <USBD_CtlError>
        err++;
 800ac90:	7afb      	ldrb	r3, [r7, #11]
 800ac92:	3301      	adds	r3, #1
 800ac94:	72fb      	strb	r3, [r7, #11]
      break;
 800ac96:	e11e      	b.n	800aed6 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	687a      	ldr	r2, [r7, #4]
 800aca2:	7c12      	ldrb	r2, [r2, #16]
 800aca4:	f107 0108 	add.w	r1, r7, #8
 800aca8:	4610      	mov	r0, r2
 800acaa:	4798      	blx	r3
 800acac:	60f8      	str	r0, [r7, #12]
      break;
 800acae:	e112      	b.n	800aed6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	7c1b      	ldrb	r3, [r3, #16]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d10d      	bne.n	800acd4 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800acbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acc0:	f107 0208 	add.w	r2, r7, #8
 800acc4:	4610      	mov	r0, r2
 800acc6:	4798      	blx	r3
 800acc8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	3301      	adds	r3, #1
 800acce:	2202      	movs	r2, #2
 800acd0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800acd2:	e100      	b.n	800aed6 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800acda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acdc:	f107 0208 	add.w	r2, r7, #8
 800ace0:	4610      	mov	r0, r2
 800ace2:	4798      	blx	r3
 800ace4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	3301      	adds	r3, #1
 800acea:	2202      	movs	r2, #2
 800acec:	701a      	strb	r2, [r3, #0]
      break;
 800acee:	e0f2      	b.n	800aed6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800acf0:	683b      	ldr	r3, [r7, #0]
 800acf2:	885b      	ldrh	r3, [r3, #2]
 800acf4:	b2db      	uxtb	r3, r3
 800acf6:	2b05      	cmp	r3, #5
 800acf8:	f200 80ac 	bhi.w	800ae54 <USBD_GetDescriptor+0x258>
 800acfc:	a201      	add	r2, pc, #4	; (adr r2, 800ad04 <USBD_GetDescriptor+0x108>)
 800acfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad02:	bf00      	nop
 800ad04:	0800ad1d 	.word	0x0800ad1d
 800ad08:	0800ad51 	.word	0x0800ad51
 800ad0c:	0800ad85 	.word	0x0800ad85
 800ad10:	0800adb9 	.word	0x0800adb9
 800ad14:	0800aded 	.word	0x0800aded
 800ad18:	0800ae21 	.word	0x0800ae21
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad22:	685b      	ldr	r3, [r3, #4]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d00b      	beq.n	800ad40 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad2e:	685b      	ldr	r3, [r3, #4]
 800ad30:	687a      	ldr	r2, [r7, #4]
 800ad32:	7c12      	ldrb	r2, [r2, #16]
 800ad34:	f107 0108 	add.w	r1, r7, #8
 800ad38:	4610      	mov	r0, r2
 800ad3a:	4798      	blx	r3
 800ad3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad3e:	e091      	b.n	800ae64 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ad40:	6839      	ldr	r1, [r7, #0]
 800ad42:	6878      	ldr	r0, [r7, #4]
 800ad44:	f000 fab2 	bl	800b2ac <USBD_CtlError>
            err++;
 800ad48:	7afb      	ldrb	r3, [r7, #11]
 800ad4a:	3301      	adds	r3, #1
 800ad4c:	72fb      	strb	r3, [r7, #11]
          break;
 800ad4e:	e089      	b.n	800ae64 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad56:	689b      	ldr	r3, [r3, #8]
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d00b      	beq.n	800ad74 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad62:	689b      	ldr	r3, [r3, #8]
 800ad64:	687a      	ldr	r2, [r7, #4]
 800ad66:	7c12      	ldrb	r2, [r2, #16]
 800ad68:	f107 0108 	add.w	r1, r7, #8
 800ad6c:	4610      	mov	r0, r2
 800ad6e:	4798      	blx	r3
 800ad70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad72:	e077      	b.n	800ae64 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ad74:	6839      	ldr	r1, [r7, #0]
 800ad76:	6878      	ldr	r0, [r7, #4]
 800ad78:	f000 fa98 	bl	800b2ac <USBD_CtlError>
            err++;
 800ad7c:	7afb      	ldrb	r3, [r7, #11]
 800ad7e:	3301      	adds	r3, #1
 800ad80:	72fb      	strb	r3, [r7, #11]
          break;
 800ad82:	e06f      	b.n	800ae64 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad8a:	68db      	ldr	r3, [r3, #12]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d00b      	beq.n	800ada8 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad96:	68db      	ldr	r3, [r3, #12]
 800ad98:	687a      	ldr	r2, [r7, #4]
 800ad9a:	7c12      	ldrb	r2, [r2, #16]
 800ad9c:	f107 0108 	add.w	r1, r7, #8
 800ada0:	4610      	mov	r0, r2
 800ada2:	4798      	blx	r3
 800ada4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ada6:	e05d      	b.n	800ae64 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ada8:	6839      	ldr	r1, [r7, #0]
 800adaa:	6878      	ldr	r0, [r7, #4]
 800adac:	f000 fa7e 	bl	800b2ac <USBD_CtlError>
            err++;
 800adb0:	7afb      	ldrb	r3, [r7, #11]
 800adb2:	3301      	adds	r3, #1
 800adb4:	72fb      	strb	r3, [r7, #11]
          break;
 800adb6:	e055      	b.n	800ae64 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800adbe:	691b      	ldr	r3, [r3, #16]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d00b      	beq.n	800addc <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800adca:	691b      	ldr	r3, [r3, #16]
 800adcc:	687a      	ldr	r2, [r7, #4]
 800adce:	7c12      	ldrb	r2, [r2, #16]
 800add0:	f107 0108 	add.w	r1, r7, #8
 800add4:	4610      	mov	r0, r2
 800add6:	4798      	blx	r3
 800add8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800adda:	e043      	b.n	800ae64 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800addc:	6839      	ldr	r1, [r7, #0]
 800adde:	6878      	ldr	r0, [r7, #4]
 800ade0:	f000 fa64 	bl	800b2ac <USBD_CtlError>
            err++;
 800ade4:	7afb      	ldrb	r3, [r7, #11]
 800ade6:	3301      	adds	r3, #1
 800ade8:	72fb      	strb	r3, [r7, #11]
          break;
 800adea:	e03b      	b.n	800ae64 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800adf2:	695b      	ldr	r3, [r3, #20]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d00b      	beq.n	800ae10 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800adfe:	695b      	ldr	r3, [r3, #20]
 800ae00:	687a      	ldr	r2, [r7, #4]
 800ae02:	7c12      	ldrb	r2, [r2, #16]
 800ae04:	f107 0108 	add.w	r1, r7, #8
 800ae08:	4610      	mov	r0, r2
 800ae0a:	4798      	blx	r3
 800ae0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ae0e:	e029      	b.n	800ae64 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ae10:	6839      	ldr	r1, [r7, #0]
 800ae12:	6878      	ldr	r0, [r7, #4]
 800ae14:	f000 fa4a 	bl	800b2ac <USBD_CtlError>
            err++;
 800ae18:	7afb      	ldrb	r3, [r7, #11]
 800ae1a:	3301      	adds	r3, #1
 800ae1c:	72fb      	strb	r3, [r7, #11]
          break;
 800ae1e:	e021      	b.n	800ae64 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae26:	699b      	ldr	r3, [r3, #24]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d00b      	beq.n	800ae44 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae32:	699b      	ldr	r3, [r3, #24]
 800ae34:	687a      	ldr	r2, [r7, #4]
 800ae36:	7c12      	ldrb	r2, [r2, #16]
 800ae38:	f107 0108 	add.w	r1, r7, #8
 800ae3c:	4610      	mov	r0, r2
 800ae3e:	4798      	blx	r3
 800ae40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ae42:	e00f      	b.n	800ae64 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ae44:	6839      	ldr	r1, [r7, #0]
 800ae46:	6878      	ldr	r0, [r7, #4]
 800ae48:	f000 fa30 	bl	800b2ac <USBD_CtlError>
            err++;
 800ae4c:	7afb      	ldrb	r3, [r7, #11]
 800ae4e:	3301      	adds	r3, #1
 800ae50:	72fb      	strb	r3, [r7, #11]
          break;
 800ae52:	e007      	b.n	800ae64 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800ae54:	6839      	ldr	r1, [r7, #0]
 800ae56:	6878      	ldr	r0, [r7, #4]
 800ae58:	f000 fa28 	bl	800b2ac <USBD_CtlError>
          err++;
 800ae5c:	7afb      	ldrb	r3, [r7, #11]
 800ae5e:	3301      	adds	r3, #1
 800ae60:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800ae62:	bf00      	nop
      }
      break;
 800ae64:	e037      	b.n	800aed6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	7c1b      	ldrb	r3, [r3, #16]
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d109      	bne.n	800ae82 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae76:	f107 0208 	add.w	r2, r7, #8
 800ae7a:	4610      	mov	r0, r2
 800ae7c:	4798      	blx	r3
 800ae7e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ae80:	e029      	b.n	800aed6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ae82:	6839      	ldr	r1, [r7, #0]
 800ae84:	6878      	ldr	r0, [r7, #4]
 800ae86:	f000 fa11 	bl	800b2ac <USBD_CtlError>
        err++;
 800ae8a:	7afb      	ldrb	r3, [r7, #11]
 800ae8c:	3301      	adds	r3, #1
 800ae8e:	72fb      	strb	r3, [r7, #11]
      break;
 800ae90:	e021      	b.n	800aed6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	7c1b      	ldrb	r3, [r3, #16]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d10d      	bne.n	800aeb6 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aea2:	f107 0208 	add.w	r2, r7, #8
 800aea6:	4610      	mov	r0, r2
 800aea8:	4798      	blx	r3
 800aeaa:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	3301      	adds	r3, #1
 800aeb0:	2207      	movs	r2, #7
 800aeb2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800aeb4:	e00f      	b.n	800aed6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800aeb6:	6839      	ldr	r1, [r7, #0]
 800aeb8:	6878      	ldr	r0, [r7, #4]
 800aeba:	f000 f9f7 	bl	800b2ac <USBD_CtlError>
        err++;
 800aebe:	7afb      	ldrb	r3, [r7, #11]
 800aec0:	3301      	adds	r3, #1
 800aec2:	72fb      	strb	r3, [r7, #11]
      break;
 800aec4:	e007      	b.n	800aed6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800aec6:	6839      	ldr	r1, [r7, #0]
 800aec8:	6878      	ldr	r0, [r7, #4]
 800aeca:	f000 f9ef 	bl	800b2ac <USBD_CtlError>
      err++;
 800aece:	7afb      	ldrb	r3, [r7, #11]
 800aed0:	3301      	adds	r3, #1
 800aed2:	72fb      	strb	r3, [r7, #11]
      break;
 800aed4:	bf00      	nop
  }

  if (err != 0U)
 800aed6:	7afb      	ldrb	r3, [r7, #11]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d11e      	bne.n	800af1a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800aedc:	683b      	ldr	r3, [r7, #0]
 800aede:	88db      	ldrh	r3, [r3, #6]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d016      	beq.n	800af12 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800aee4:	893b      	ldrh	r3, [r7, #8]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d00e      	beq.n	800af08 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800aeea:	683b      	ldr	r3, [r7, #0]
 800aeec:	88da      	ldrh	r2, [r3, #6]
 800aeee:	893b      	ldrh	r3, [r7, #8]
 800aef0:	4293      	cmp	r3, r2
 800aef2:	bf28      	it	cs
 800aef4:	4613      	movcs	r3, r2
 800aef6:	b29b      	uxth	r3, r3
 800aef8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800aefa:	893b      	ldrh	r3, [r7, #8]
 800aefc:	461a      	mov	r2, r3
 800aefe:	68f9      	ldr	r1, [r7, #12]
 800af00:	6878      	ldr	r0, [r7, #4]
 800af02:	f000 fa44 	bl	800b38e <USBD_CtlSendData>
 800af06:	e009      	b.n	800af1c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800af08:	6839      	ldr	r1, [r7, #0]
 800af0a:	6878      	ldr	r0, [r7, #4]
 800af0c:	f000 f9ce 	bl	800b2ac <USBD_CtlError>
 800af10:	e004      	b.n	800af1c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800af12:	6878      	ldr	r0, [r7, #4]
 800af14:	f000 fa78 	bl	800b408 <USBD_CtlSendStatus>
 800af18:	e000      	b.n	800af1c <USBD_GetDescriptor+0x320>
    return;
 800af1a:	bf00      	nop
  }
}
 800af1c:	3710      	adds	r7, #16
 800af1e:	46bd      	mov	sp, r7
 800af20:	bd80      	pop	{r7, pc}
 800af22:	bf00      	nop

0800af24 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af24:	b580      	push	{r7, lr}
 800af26:	b084      	sub	sp, #16
 800af28:	af00      	add	r7, sp, #0
 800af2a:	6078      	str	r0, [r7, #4]
 800af2c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800af2e:	683b      	ldr	r3, [r7, #0]
 800af30:	889b      	ldrh	r3, [r3, #4]
 800af32:	2b00      	cmp	r3, #0
 800af34:	d131      	bne.n	800af9a <USBD_SetAddress+0x76>
 800af36:	683b      	ldr	r3, [r7, #0]
 800af38:	88db      	ldrh	r3, [r3, #6]
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d12d      	bne.n	800af9a <USBD_SetAddress+0x76>
 800af3e:	683b      	ldr	r3, [r7, #0]
 800af40:	885b      	ldrh	r3, [r3, #2]
 800af42:	2b7f      	cmp	r3, #127	; 0x7f
 800af44:	d829      	bhi.n	800af9a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800af46:	683b      	ldr	r3, [r7, #0]
 800af48:	885b      	ldrh	r3, [r3, #2]
 800af4a:	b2db      	uxtb	r3, r3
 800af4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af50:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af58:	b2db      	uxtb	r3, r3
 800af5a:	2b03      	cmp	r3, #3
 800af5c:	d104      	bne.n	800af68 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800af5e:	6839      	ldr	r1, [r7, #0]
 800af60:	6878      	ldr	r0, [r7, #4]
 800af62:	f000 f9a3 	bl	800b2ac <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af66:	e01d      	b.n	800afa4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	7bfa      	ldrb	r2, [r7, #15]
 800af6c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800af70:	7bfb      	ldrb	r3, [r7, #15]
 800af72:	4619      	mov	r1, r3
 800af74:	6878      	ldr	r0, [r7, #4]
 800af76:	f000 fe15 	bl	800bba4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800af7a:	6878      	ldr	r0, [r7, #4]
 800af7c:	f000 fa44 	bl	800b408 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800af80:	7bfb      	ldrb	r3, [r7, #15]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d004      	beq.n	800af90 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	2202      	movs	r2, #2
 800af8a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af8e:	e009      	b.n	800afa4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	2201      	movs	r2, #1
 800af94:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af98:	e004      	b.n	800afa4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800af9a:	6839      	ldr	r1, [r7, #0]
 800af9c:	6878      	ldr	r0, [r7, #4]
 800af9e:	f000 f985 	bl	800b2ac <USBD_CtlError>
  }
}
 800afa2:	bf00      	nop
 800afa4:	bf00      	nop
 800afa6:	3710      	adds	r7, #16
 800afa8:	46bd      	mov	sp, r7
 800afaa:	bd80      	pop	{r7, pc}

0800afac <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800afac:	b580      	push	{r7, lr}
 800afae:	b084      	sub	sp, #16
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]
 800afb4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800afb6:	2300      	movs	r3, #0
 800afb8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800afba:	683b      	ldr	r3, [r7, #0]
 800afbc:	885b      	ldrh	r3, [r3, #2]
 800afbe:	b2da      	uxtb	r2, r3
 800afc0:	4b4c      	ldr	r3, [pc, #304]	; (800b0f4 <USBD_SetConfig+0x148>)
 800afc2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800afc4:	4b4b      	ldr	r3, [pc, #300]	; (800b0f4 <USBD_SetConfig+0x148>)
 800afc6:	781b      	ldrb	r3, [r3, #0]
 800afc8:	2b01      	cmp	r3, #1
 800afca:	d905      	bls.n	800afd8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800afcc:	6839      	ldr	r1, [r7, #0]
 800afce:	6878      	ldr	r0, [r7, #4]
 800afd0:	f000 f96c 	bl	800b2ac <USBD_CtlError>
    return USBD_FAIL;
 800afd4:	2303      	movs	r3, #3
 800afd6:	e088      	b.n	800b0ea <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800afde:	b2db      	uxtb	r3, r3
 800afe0:	2b02      	cmp	r3, #2
 800afe2:	d002      	beq.n	800afea <USBD_SetConfig+0x3e>
 800afe4:	2b03      	cmp	r3, #3
 800afe6:	d025      	beq.n	800b034 <USBD_SetConfig+0x88>
 800afe8:	e071      	b.n	800b0ce <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800afea:	4b42      	ldr	r3, [pc, #264]	; (800b0f4 <USBD_SetConfig+0x148>)
 800afec:	781b      	ldrb	r3, [r3, #0]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d01c      	beq.n	800b02c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800aff2:	4b40      	ldr	r3, [pc, #256]	; (800b0f4 <USBD_SetConfig+0x148>)
 800aff4:	781b      	ldrb	r3, [r3, #0]
 800aff6:	461a      	mov	r2, r3
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800affc:	4b3d      	ldr	r3, [pc, #244]	; (800b0f4 <USBD_SetConfig+0x148>)
 800affe:	781b      	ldrb	r3, [r3, #0]
 800b000:	4619      	mov	r1, r3
 800b002:	6878      	ldr	r0, [r7, #4]
 800b004:	f7ff f992 	bl	800a32c <USBD_SetClassConfig>
 800b008:	4603      	mov	r3, r0
 800b00a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b00c:	7bfb      	ldrb	r3, [r7, #15]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d004      	beq.n	800b01c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800b012:	6839      	ldr	r1, [r7, #0]
 800b014:	6878      	ldr	r0, [r7, #4]
 800b016:	f000 f949 	bl	800b2ac <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b01a:	e065      	b.n	800b0e8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b01c:	6878      	ldr	r0, [r7, #4]
 800b01e:	f000 f9f3 	bl	800b408 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	2203      	movs	r2, #3
 800b026:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b02a:	e05d      	b.n	800b0e8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b02c:	6878      	ldr	r0, [r7, #4]
 800b02e:	f000 f9eb 	bl	800b408 <USBD_CtlSendStatus>
      break;
 800b032:	e059      	b.n	800b0e8 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b034:	4b2f      	ldr	r3, [pc, #188]	; (800b0f4 <USBD_SetConfig+0x148>)
 800b036:	781b      	ldrb	r3, [r3, #0]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d112      	bne.n	800b062 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	2202      	movs	r2, #2
 800b040:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b044:	4b2b      	ldr	r3, [pc, #172]	; (800b0f4 <USBD_SetConfig+0x148>)
 800b046:	781b      	ldrb	r3, [r3, #0]
 800b048:	461a      	mov	r2, r3
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b04e:	4b29      	ldr	r3, [pc, #164]	; (800b0f4 <USBD_SetConfig+0x148>)
 800b050:	781b      	ldrb	r3, [r3, #0]
 800b052:	4619      	mov	r1, r3
 800b054:	6878      	ldr	r0, [r7, #4]
 800b056:	f7ff f985 	bl	800a364 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b05a:	6878      	ldr	r0, [r7, #4]
 800b05c:	f000 f9d4 	bl	800b408 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b060:	e042      	b.n	800b0e8 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800b062:	4b24      	ldr	r3, [pc, #144]	; (800b0f4 <USBD_SetConfig+0x148>)
 800b064:	781b      	ldrb	r3, [r3, #0]
 800b066:	461a      	mov	r2, r3
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	685b      	ldr	r3, [r3, #4]
 800b06c:	429a      	cmp	r2, r3
 800b06e:	d02a      	beq.n	800b0c6 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	685b      	ldr	r3, [r3, #4]
 800b074:	b2db      	uxtb	r3, r3
 800b076:	4619      	mov	r1, r3
 800b078:	6878      	ldr	r0, [r7, #4]
 800b07a:	f7ff f973 	bl	800a364 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b07e:	4b1d      	ldr	r3, [pc, #116]	; (800b0f4 <USBD_SetConfig+0x148>)
 800b080:	781b      	ldrb	r3, [r3, #0]
 800b082:	461a      	mov	r2, r3
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b088:	4b1a      	ldr	r3, [pc, #104]	; (800b0f4 <USBD_SetConfig+0x148>)
 800b08a:	781b      	ldrb	r3, [r3, #0]
 800b08c:	4619      	mov	r1, r3
 800b08e:	6878      	ldr	r0, [r7, #4]
 800b090:	f7ff f94c 	bl	800a32c <USBD_SetClassConfig>
 800b094:	4603      	mov	r3, r0
 800b096:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b098:	7bfb      	ldrb	r3, [r7, #15]
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d00f      	beq.n	800b0be <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800b09e:	6839      	ldr	r1, [r7, #0]
 800b0a0:	6878      	ldr	r0, [r7, #4]
 800b0a2:	f000 f903 	bl	800b2ac <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	685b      	ldr	r3, [r3, #4]
 800b0aa:	b2db      	uxtb	r3, r3
 800b0ac:	4619      	mov	r1, r3
 800b0ae:	6878      	ldr	r0, [r7, #4]
 800b0b0:	f7ff f958 	bl	800a364 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	2202      	movs	r2, #2
 800b0b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b0bc:	e014      	b.n	800b0e8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b0be:	6878      	ldr	r0, [r7, #4]
 800b0c0:	f000 f9a2 	bl	800b408 <USBD_CtlSendStatus>
      break;
 800b0c4:	e010      	b.n	800b0e8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b0c6:	6878      	ldr	r0, [r7, #4]
 800b0c8:	f000 f99e 	bl	800b408 <USBD_CtlSendStatus>
      break;
 800b0cc:	e00c      	b.n	800b0e8 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800b0ce:	6839      	ldr	r1, [r7, #0]
 800b0d0:	6878      	ldr	r0, [r7, #4]
 800b0d2:	f000 f8eb 	bl	800b2ac <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b0d6:	4b07      	ldr	r3, [pc, #28]	; (800b0f4 <USBD_SetConfig+0x148>)
 800b0d8:	781b      	ldrb	r3, [r3, #0]
 800b0da:	4619      	mov	r1, r3
 800b0dc:	6878      	ldr	r0, [r7, #4]
 800b0de:	f7ff f941 	bl	800a364 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b0e2:	2303      	movs	r3, #3
 800b0e4:	73fb      	strb	r3, [r7, #15]
      break;
 800b0e6:	bf00      	nop
  }

  return ret;
 800b0e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	3710      	adds	r7, #16
 800b0ee:	46bd      	mov	sp, r7
 800b0f0:	bd80      	pop	{r7, pc}
 800b0f2:	bf00      	nop
 800b0f4:	200003bc 	.word	0x200003bc

0800b0f8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b0f8:	b580      	push	{r7, lr}
 800b0fa:	b082      	sub	sp, #8
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	6078      	str	r0, [r7, #4]
 800b100:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b102:	683b      	ldr	r3, [r7, #0]
 800b104:	88db      	ldrh	r3, [r3, #6]
 800b106:	2b01      	cmp	r3, #1
 800b108:	d004      	beq.n	800b114 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b10a:	6839      	ldr	r1, [r7, #0]
 800b10c:	6878      	ldr	r0, [r7, #4]
 800b10e:	f000 f8cd 	bl	800b2ac <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b112:	e023      	b.n	800b15c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b11a:	b2db      	uxtb	r3, r3
 800b11c:	2b02      	cmp	r3, #2
 800b11e:	dc02      	bgt.n	800b126 <USBD_GetConfig+0x2e>
 800b120:	2b00      	cmp	r3, #0
 800b122:	dc03      	bgt.n	800b12c <USBD_GetConfig+0x34>
 800b124:	e015      	b.n	800b152 <USBD_GetConfig+0x5a>
 800b126:	2b03      	cmp	r3, #3
 800b128:	d00b      	beq.n	800b142 <USBD_GetConfig+0x4a>
 800b12a:	e012      	b.n	800b152 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	2200      	movs	r2, #0
 800b130:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	3308      	adds	r3, #8
 800b136:	2201      	movs	r2, #1
 800b138:	4619      	mov	r1, r3
 800b13a:	6878      	ldr	r0, [r7, #4]
 800b13c:	f000 f927 	bl	800b38e <USBD_CtlSendData>
        break;
 800b140:	e00c      	b.n	800b15c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	3304      	adds	r3, #4
 800b146:	2201      	movs	r2, #1
 800b148:	4619      	mov	r1, r3
 800b14a:	6878      	ldr	r0, [r7, #4]
 800b14c:	f000 f91f 	bl	800b38e <USBD_CtlSendData>
        break;
 800b150:	e004      	b.n	800b15c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b152:	6839      	ldr	r1, [r7, #0]
 800b154:	6878      	ldr	r0, [r7, #4]
 800b156:	f000 f8a9 	bl	800b2ac <USBD_CtlError>
        break;
 800b15a:	bf00      	nop
}
 800b15c:	bf00      	nop
 800b15e:	3708      	adds	r7, #8
 800b160:	46bd      	mov	sp, r7
 800b162:	bd80      	pop	{r7, pc}

0800b164 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b164:	b580      	push	{r7, lr}
 800b166:	b082      	sub	sp, #8
 800b168:	af00      	add	r7, sp, #0
 800b16a:	6078      	str	r0, [r7, #4]
 800b16c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b174:	b2db      	uxtb	r3, r3
 800b176:	3b01      	subs	r3, #1
 800b178:	2b02      	cmp	r3, #2
 800b17a:	d81e      	bhi.n	800b1ba <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b17c:	683b      	ldr	r3, [r7, #0]
 800b17e:	88db      	ldrh	r3, [r3, #6]
 800b180:	2b02      	cmp	r3, #2
 800b182:	d004      	beq.n	800b18e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b184:	6839      	ldr	r1, [r7, #0]
 800b186:	6878      	ldr	r0, [r7, #4]
 800b188:	f000 f890 	bl	800b2ac <USBD_CtlError>
        break;
 800b18c:	e01a      	b.n	800b1c4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	2201      	movs	r2, #1
 800b192:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d005      	beq.n	800b1aa <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	68db      	ldr	r3, [r3, #12]
 800b1a2:	f043 0202 	orr.w	r2, r3, #2
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	330c      	adds	r3, #12
 800b1ae:	2202      	movs	r2, #2
 800b1b0:	4619      	mov	r1, r3
 800b1b2:	6878      	ldr	r0, [r7, #4]
 800b1b4:	f000 f8eb 	bl	800b38e <USBD_CtlSendData>
      break;
 800b1b8:	e004      	b.n	800b1c4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b1ba:	6839      	ldr	r1, [r7, #0]
 800b1bc:	6878      	ldr	r0, [r7, #4]
 800b1be:	f000 f875 	bl	800b2ac <USBD_CtlError>
      break;
 800b1c2:	bf00      	nop
  }
}
 800b1c4:	bf00      	nop
 800b1c6:	3708      	adds	r7, #8
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	bd80      	pop	{r7, pc}

0800b1cc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b1cc:	b580      	push	{r7, lr}
 800b1ce:	b082      	sub	sp, #8
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	6078      	str	r0, [r7, #4]
 800b1d4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b1d6:	683b      	ldr	r3, [r7, #0]
 800b1d8:	885b      	ldrh	r3, [r3, #2]
 800b1da:	2b01      	cmp	r3, #1
 800b1dc:	d106      	bne.n	800b1ec <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	2201      	movs	r2, #1
 800b1e2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b1e6:	6878      	ldr	r0, [r7, #4]
 800b1e8:	f000 f90e 	bl	800b408 <USBD_CtlSendStatus>
  }
}
 800b1ec:	bf00      	nop
 800b1ee:	3708      	adds	r7, #8
 800b1f0:	46bd      	mov	sp, r7
 800b1f2:	bd80      	pop	{r7, pc}

0800b1f4 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b1f4:	b580      	push	{r7, lr}
 800b1f6:	b082      	sub	sp, #8
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
 800b1fc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b204:	b2db      	uxtb	r3, r3
 800b206:	3b01      	subs	r3, #1
 800b208:	2b02      	cmp	r3, #2
 800b20a:	d80b      	bhi.n	800b224 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b20c:	683b      	ldr	r3, [r7, #0]
 800b20e:	885b      	ldrh	r3, [r3, #2]
 800b210:	2b01      	cmp	r3, #1
 800b212:	d10c      	bne.n	800b22e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	2200      	movs	r2, #0
 800b218:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b21c:	6878      	ldr	r0, [r7, #4]
 800b21e:	f000 f8f3 	bl	800b408 <USBD_CtlSendStatus>
      }
      break;
 800b222:	e004      	b.n	800b22e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b224:	6839      	ldr	r1, [r7, #0]
 800b226:	6878      	ldr	r0, [r7, #4]
 800b228:	f000 f840 	bl	800b2ac <USBD_CtlError>
      break;
 800b22c:	e000      	b.n	800b230 <USBD_ClrFeature+0x3c>
      break;
 800b22e:	bf00      	nop
  }
}
 800b230:	bf00      	nop
 800b232:	3708      	adds	r7, #8
 800b234:	46bd      	mov	sp, r7
 800b236:	bd80      	pop	{r7, pc}

0800b238 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b238:	b580      	push	{r7, lr}
 800b23a:	b084      	sub	sp, #16
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	6078      	str	r0, [r7, #4]
 800b240:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b242:	683b      	ldr	r3, [r7, #0]
 800b244:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	781a      	ldrb	r2, [r3, #0]
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	3301      	adds	r3, #1
 800b252:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	781a      	ldrb	r2, [r3, #0]
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	3301      	adds	r3, #1
 800b260:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b262:	68f8      	ldr	r0, [r7, #12]
 800b264:	f7ff fa92 	bl	800a78c <SWAPBYTE>
 800b268:	4603      	mov	r3, r0
 800b26a:	461a      	mov	r2, r3
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	3301      	adds	r3, #1
 800b274:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	3301      	adds	r3, #1
 800b27a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b27c:	68f8      	ldr	r0, [r7, #12]
 800b27e:	f7ff fa85 	bl	800a78c <SWAPBYTE>
 800b282:	4603      	mov	r3, r0
 800b284:	461a      	mov	r2, r3
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	3301      	adds	r3, #1
 800b28e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	3301      	adds	r3, #1
 800b294:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b296:	68f8      	ldr	r0, [r7, #12]
 800b298:	f7ff fa78 	bl	800a78c <SWAPBYTE>
 800b29c:	4603      	mov	r3, r0
 800b29e:	461a      	mov	r2, r3
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	80da      	strh	r2, [r3, #6]
}
 800b2a4:	bf00      	nop
 800b2a6:	3710      	adds	r7, #16
 800b2a8:	46bd      	mov	sp, r7
 800b2aa:	bd80      	pop	{r7, pc}

0800b2ac <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b2ac:	b580      	push	{r7, lr}
 800b2ae:	b082      	sub	sp, #8
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	6078      	str	r0, [r7, #4]
 800b2b4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b2b6:	2180      	movs	r1, #128	; 0x80
 800b2b8:	6878      	ldr	r0, [r7, #4]
 800b2ba:	f000 fbd9 	bl	800ba70 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b2be:	2100      	movs	r1, #0
 800b2c0:	6878      	ldr	r0, [r7, #4]
 800b2c2:	f000 fbd5 	bl	800ba70 <USBD_LL_StallEP>
}
 800b2c6:	bf00      	nop
 800b2c8:	3708      	adds	r7, #8
 800b2ca:	46bd      	mov	sp, r7
 800b2cc:	bd80      	pop	{r7, pc}

0800b2ce <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b2ce:	b580      	push	{r7, lr}
 800b2d0:	b086      	sub	sp, #24
 800b2d2:	af00      	add	r7, sp, #0
 800b2d4:	60f8      	str	r0, [r7, #12]
 800b2d6:	60b9      	str	r1, [r7, #8]
 800b2d8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b2da:	2300      	movs	r3, #0
 800b2dc:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d036      	beq.n	800b352 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b2e8:	6938      	ldr	r0, [r7, #16]
 800b2ea:	f000 f836 	bl	800b35a <USBD_GetLen>
 800b2ee:	4603      	mov	r3, r0
 800b2f0:	3301      	adds	r3, #1
 800b2f2:	b29b      	uxth	r3, r3
 800b2f4:	005b      	lsls	r3, r3, #1
 800b2f6:	b29a      	uxth	r2, r3
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b2fc:	7dfb      	ldrb	r3, [r7, #23]
 800b2fe:	68ba      	ldr	r2, [r7, #8]
 800b300:	4413      	add	r3, r2
 800b302:	687a      	ldr	r2, [r7, #4]
 800b304:	7812      	ldrb	r2, [r2, #0]
 800b306:	701a      	strb	r2, [r3, #0]
  idx++;
 800b308:	7dfb      	ldrb	r3, [r7, #23]
 800b30a:	3301      	adds	r3, #1
 800b30c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b30e:	7dfb      	ldrb	r3, [r7, #23]
 800b310:	68ba      	ldr	r2, [r7, #8]
 800b312:	4413      	add	r3, r2
 800b314:	2203      	movs	r2, #3
 800b316:	701a      	strb	r2, [r3, #0]
  idx++;
 800b318:	7dfb      	ldrb	r3, [r7, #23]
 800b31a:	3301      	adds	r3, #1
 800b31c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b31e:	e013      	b.n	800b348 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b320:	7dfb      	ldrb	r3, [r7, #23]
 800b322:	68ba      	ldr	r2, [r7, #8]
 800b324:	4413      	add	r3, r2
 800b326:	693a      	ldr	r2, [r7, #16]
 800b328:	7812      	ldrb	r2, [r2, #0]
 800b32a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b32c:	693b      	ldr	r3, [r7, #16]
 800b32e:	3301      	adds	r3, #1
 800b330:	613b      	str	r3, [r7, #16]
    idx++;
 800b332:	7dfb      	ldrb	r3, [r7, #23]
 800b334:	3301      	adds	r3, #1
 800b336:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b338:	7dfb      	ldrb	r3, [r7, #23]
 800b33a:	68ba      	ldr	r2, [r7, #8]
 800b33c:	4413      	add	r3, r2
 800b33e:	2200      	movs	r2, #0
 800b340:	701a      	strb	r2, [r3, #0]
    idx++;
 800b342:	7dfb      	ldrb	r3, [r7, #23]
 800b344:	3301      	adds	r3, #1
 800b346:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b348:	693b      	ldr	r3, [r7, #16]
 800b34a:	781b      	ldrb	r3, [r3, #0]
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d1e7      	bne.n	800b320 <USBD_GetString+0x52>
 800b350:	e000      	b.n	800b354 <USBD_GetString+0x86>
    return;
 800b352:	bf00      	nop
  }
}
 800b354:	3718      	adds	r7, #24
 800b356:	46bd      	mov	sp, r7
 800b358:	bd80      	pop	{r7, pc}

0800b35a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b35a:	b480      	push	{r7}
 800b35c:	b085      	sub	sp, #20
 800b35e:	af00      	add	r7, sp, #0
 800b360:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b362:	2300      	movs	r3, #0
 800b364:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b36a:	e005      	b.n	800b378 <USBD_GetLen+0x1e>
  {
    len++;
 800b36c:	7bfb      	ldrb	r3, [r7, #15]
 800b36e:	3301      	adds	r3, #1
 800b370:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b372:	68bb      	ldr	r3, [r7, #8]
 800b374:	3301      	adds	r3, #1
 800b376:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b378:	68bb      	ldr	r3, [r7, #8]
 800b37a:	781b      	ldrb	r3, [r3, #0]
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d1f5      	bne.n	800b36c <USBD_GetLen+0x12>
  }

  return len;
 800b380:	7bfb      	ldrb	r3, [r7, #15]
}
 800b382:	4618      	mov	r0, r3
 800b384:	3714      	adds	r7, #20
 800b386:	46bd      	mov	sp, r7
 800b388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38c:	4770      	bx	lr

0800b38e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b38e:	b580      	push	{r7, lr}
 800b390:	b084      	sub	sp, #16
 800b392:	af00      	add	r7, sp, #0
 800b394:	60f8      	str	r0, [r7, #12]
 800b396:	60b9      	str	r1, [r7, #8]
 800b398:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	2202      	movs	r2, #2
 800b39e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	687a      	ldr	r2, [r7, #4]
 800b3a6:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	687a      	ldr	r2, [r7, #4]
 800b3ac:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	68ba      	ldr	r2, [r7, #8]
 800b3b2:	2100      	movs	r1, #0
 800b3b4:	68f8      	ldr	r0, [r7, #12]
 800b3b6:	f000 fc2b 	bl	800bc10 <USBD_LL_Transmit>

  return USBD_OK;
 800b3ba:	2300      	movs	r3, #0
}
 800b3bc:	4618      	mov	r0, r3
 800b3be:	3710      	adds	r7, #16
 800b3c0:	46bd      	mov	sp, r7
 800b3c2:	bd80      	pop	{r7, pc}

0800b3c4 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b3c4:	b580      	push	{r7, lr}
 800b3c6:	b084      	sub	sp, #16
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	60f8      	str	r0, [r7, #12]
 800b3cc:	60b9      	str	r1, [r7, #8]
 800b3ce:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	68ba      	ldr	r2, [r7, #8]
 800b3d4:	2100      	movs	r1, #0
 800b3d6:	68f8      	ldr	r0, [r7, #12]
 800b3d8:	f000 fc1a 	bl	800bc10 <USBD_LL_Transmit>

  return USBD_OK;
 800b3dc:	2300      	movs	r3, #0
}
 800b3de:	4618      	mov	r0, r3
 800b3e0:	3710      	adds	r7, #16
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	bd80      	pop	{r7, pc}

0800b3e6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b3e6:	b580      	push	{r7, lr}
 800b3e8:	b084      	sub	sp, #16
 800b3ea:	af00      	add	r7, sp, #0
 800b3ec:	60f8      	str	r0, [r7, #12]
 800b3ee:	60b9      	str	r1, [r7, #8]
 800b3f0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	68ba      	ldr	r2, [r7, #8]
 800b3f6:	2100      	movs	r1, #0
 800b3f8:	68f8      	ldr	r0, [r7, #12]
 800b3fa:	f000 fc41 	bl	800bc80 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b3fe:	2300      	movs	r3, #0
}
 800b400:	4618      	mov	r0, r3
 800b402:	3710      	adds	r7, #16
 800b404:	46bd      	mov	sp, r7
 800b406:	bd80      	pop	{r7, pc}

0800b408 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b408:	b580      	push	{r7, lr}
 800b40a:	b082      	sub	sp, #8
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	2204      	movs	r2, #4
 800b414:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b418:	2300      	movs	r3, #0
 800b41a:	2200      	movs	r2, #0
 800b41c:	2100      	movs	r1, #0
 800b41e:	6878      	ldr	r0, [r7, #4]
 800b420:	f000 fbf6 	bl	800bc10 <USBD_LL_Transmit>

  return USBD_OK;
 800b424:	2300      	movs	r3, #0
}
 800b426:	4618      	mov	r0, r3
 800b428:	3708      	adds	r7, #8
 800b42a:	46bd      	mov	sp, r7
 800b42c:	bd80      	pop	{r7, pc}

0800b42e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b42e:	b580      	push	{r7, lr}
 800b430:	b082      	sub	sp, #8
 800b432:	af00      	add	r7, sp, #0
 800b434:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	2205      	movs	r2, #5
 800b43a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b43e:	2300      	movs	r3, #0
 800b440:	2200      	movs	r2, #0
 800b442:	2100      	movs	r1, #0
 800b444:	6878      	ldr	r0, [r7, #4]
 800b446:	f000 fc1b 	bl	800bc80 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b44a:	2300      	movs	r3, #0
}
 800b44c:	4618      	mov	r0, r3
 800b44e:	3708      	adds	r7, #8
 800b450:	46bd      	mov	sp, r7
 800b452:	bd80      	pop	{r7, pc}

0800b454 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b454:	b580      	push	{r7, lr}
 800b456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b458:	2200      	movs	r2, #0
 800b45a:	490e      	ldr	r1, [pc, #56]	; (800b494 <MX_USB_DEVICE_Init+0x40>)
 800b45c:	480e      	ldr	r0, [pc, #56]	; (800b498 <MX_USB_DEVICE_Init+0x44>)
 800b45e:	f7fe fef7 	bl	800a250 <USBD_Init>
 800b462:	4603      	mov	r3, r0
 800b464:	2b00      	cmp	r3, #0
 800b466:	d001      	beq.n	800b46c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b468:	f7f6 f9ee 	bl	8001848 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 800b46c:	490b      	ldr	r1, [pc, #44]	; (800b49c <MX_USB_DEVICE_Init+0x48>)
 800b46e:	480a      	ldr	r0, [pc, #40]	; (800b498 <MX_USB_DEVICE_Init+0x44>)
 800b470:	f7fe ff1e 	bl	800a2b0 <USBD_RegisterClass>
 800b474:	4603      	mov	r3, r0
 800b476:	2b00      	cmp	r3, #0
 800b478:	d001      	beq.n	800b47e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b47a:	f7f6 f9e5 	bl	8001848 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b47e:	4806      	ldr	r0, [pc, #24]	; (800b498 <MX_USB_DEVICE_Init+0x44>)
 800b480:	f7fe ff3d 	bl	800a2fe <USBD_Start>
 800b484:	4603      	mov	r3, r0
 800b486:	2b00      	cmp	r3, #0
 800b488:	d001      	beq.n	800b48e <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 800b48a:	f7f6 f9dd 	bl	8001848 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b48e:	bf00      	nop
 800b490:	bd80      	pop	{r7, pc}
 800b492:	bf00      	nop
 800b494:	20000138 	.word	0x20000138
 800b498:	20000934 	.word	0x20000934
 800b49c:	20000030 	.word	0x20000030

0800b4a0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b4a0:	b480      	push	{r7}
 800b4a2:	b083      	sub	sp, #12
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	4603      	mov	r3, r0
 800b4a8:	6039      	str	r1, [r7, #0]
 800b4aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b4ac:	683b      	ldr	r3, [r7, #0]
 800b4ae:	2212      	movs	r2, #18
 800b4b0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b4b2:	4b03      	ldr	r3, [pc, #12]	; (800b4c0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b4b4:	4618      	mov	r0, r3
 800b4b6:	370c      	adds	r7, #12
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4be:	4770      	bx	lr
 800b4c0:	20000158 	.word	0x20000158

0800b4c4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b4c4:	b480      	push	{r7}
 800b4c6:	b083      	sub	sp, #12
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	4603      	mov	r3, r0
 800b4cc:	6039      	str	r1, [r7, #0]
 800b4ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b4d0:	683b      	ldr	r3, [r7, #0]
 800b4d2:	2204      	movs	r2, #4
 800b4d4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b4d6:	4b03      	ldr	r3, [pc, #12]	; (800b4e4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b4d8:	4618      	mov	r0, r3
 800b4da:	370c      	adds	r7, #12
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e2:	4770      	bx	lr
 800b4e4:	20000178 	.word	0x20000178

0800b4e8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b4e8:	b580      	push	{r7, lr}
 800b4ea:	b082      	sub	sp, #8
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	4603      	mov	r3, r0
 800b4f0:	6039      	str	r1, [r7, #0]
 800b4f2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b4f4:	79fb      	ldrb	r3, [r7, #7]
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d105      	bne.n	800b506 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b4fa:	683a      	ldr	r2, [r7, #0]
 800b4fc:	4907      	ldr	r1, [pc, #28]	; (800b51c <USBD_FS_ProductStrDescriptor+0x34>)
 800b4fe:	4808      	ldr	r0, [pc, #32]	; (800b520 <USBD_FS_ProductStrDescriptor+0x38>)
 800b500:	f7ff fee5 	bl	800b2ce <USBD_GetString>
 800b504:	e004      	b.n	800b510 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b506:	683a      	ldr	r2, [r7, #0]
 800b508:	4904      	ldr	r1, [pc, #16]	; (800b51c <USBD_FS_ProductStrDescriptor+0x34>)
 800b50a:	4805      	ldr	r0, [pc, #20]	; (800b520 <USBD_FS_ProductStrDescriptor+0x38>)
 800b50c:	f7ff fedf 	bl	800b2ce <USBD_GetString>
  }
  return USBD_StrDesc;
 800b510:	4b02      	ldr	r3, [pc, #8]	; (800b51c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b512:	4618      	mov	r0, r3
 800b514:	3708      	adds	r7, #8
 800b516:	46bd      	mov	sp, r7
 800b518:	bd80      	pop	{r7, pc}
 800b51a:	bf00      	nop
 800b51c:	20000c04 	.word	0x20000c04
 800b520:	0800f788 	.word	0x0800f788

0800b524 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b524:	b580      	push	{r7, lr}
 800b526:	b082      	sub	sp, #8
 800b528:	af00      	add	r7, sp, #0
 800b52a:	4603      	mov	r3, r0
 800b52c:	6039      	str	r1, [r7, #0]
 800b52e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b530:	683a      	ldr	r2, [r7, #0]
 800b532:	4904      	ldr	r1, [pc, #16]	; (800b544 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b534:	4804      	ldr	r0, [pc, #16]	; (800b548 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b536:	f7ff feca 	bl	800b2ce <USBD_GetString>
  return USBD_StrDesc;
 800b53a:	4b02      	ldr	r3, [pc, #8]	; (800b544 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b53c:	4618      	mov	r0, r3
 800b53e:	3708      	adds	r7, #8
 800b540:	46bd      	mov	sp, r7
 800b542:	bd80      	pop	{r7, pc}
 800b544:	20000c04 	.word	0x20000c04
 800b548:	0800f7a0 	.word	0x0800f7a0

0800b54c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b54c:	b580      	push	{r7, lr}
 800b54e:	b082      	sub	sp, #8
 800b550:	af00      	add	r7, sp, #0
 800b552:	4603      	mov	r3, r0
 800b554:	6039      	str	r1, [r7, #0]
 800b556:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b558:	683b      	ldr	r3, [r7, #0]
 800b55a:	221a      	movs	r2, #26
 800b55c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b55e:	f000 f855 	bl	800b60c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b562:	4b02      	ldr	r3, [pc, #8]	; (800b56c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b564:	4618      	mov	r0, r3
 800b566:	3708      	adds	r7, #8
 800b568:	46bd      	mov	sp, r7
 800b56a:	bd80      	pop	{r7, pc}
 800b56c:	2000017c 	.word	0x2000017c

0800b570 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b570:	b580      	push	{r7, lr}
 800b572:	b082      	sub	sp, #8
 800b574:	af00      	add	r7, sp, #0
 800b576:	4603      	mov	r3, r0
 800b578:	6039      	str	r1, [r7, #0]
 800b57a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b57c:	79fb      	ldrb	r3, [r7, #7]
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d105      	bne.n	800b58e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b582:	683a      	ldr	r2, [r7, #0]
 800b584:	4907      	ldr	r1, [pc, #28]	; (800b5a4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b586:	4808      	ldr	r0, [pc, #32]	; (800b5a8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b588:	f7ff fea1 	bl	800b2ce <USBD_GetString>
 800b58c:	e004      	b.n	800b598 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b58e:	683a      	ldr	r2, [r7, #0]
 800b590:	4904      	ldr	r1, [pc, #16]	; (800b5a4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b592:	4805      	ldr	r0, [pc, #20]	; (800b5a8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b594:	f7ff fe9b 	bl	800b2ce <USBD_GetString>
  }
  return USBD_StrDesc;
 800b598:	4b02      	ldr	r3, [pc, #8]	; (800b5a4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b59a:	4618      	mov	r0, r3
 800b59c:	3708      	adds	r7, #8
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	bd80      	pop	{r7, pc}
 800b5a2:	bf00      	nop
 800b5a4:	20000c04 	.word	0x20000c04
 800b5a8:	0800f7b4 	.word	0x0800f7b4

0800b5ac <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b5ac:	b580      	push	{r7, lr}
 800b5ae:	b082      	sub	sp, #8
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	4603      	mov	r3, r0
 800b5b4:	6039      	str	r1, [r7, #0]
 800b5b6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b5b8:	79fb      	ldrb	r3, [r7, #7]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d105      	bne.n	800b5ca <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b5be:	683a      	ldr	r2, [r7, #0]
 800b5c0:	4907      	ldr	r1, [pc, #28]	; (800b5e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b5c2:	4808      	ldr	r0, [pc, #32]	; (800b5e4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b5c4:	f7ff fe83 	bl	800b2ce <USBD_GetString>
 800b5c8:	e004      	b.n	800b5d4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b5ca:	683a      	ldr	r2, [r7, #0]
 800b5cc:	4904      	ldr	r1, [pc, #16]	; (800b5e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b5ce:	4805      	ldr	r0, [pc, #20]	; (800b5e4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b5d0:	f7ff fe7d 	bl	800b2ce <USBD_GetString>
  }
  return USBD_StrDesc;
 800b5d4:	4b02      	ldr	r3, [pc, #8]	; (800b5e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	3708      	adds	r7, #8
 800b5da:	46bd      	mov	sp, r7
 800b5dc:	bd80      	pop	{r7, pc}
 800b5de:	bf00      	nop
 800b5e0:	20000c04 	.word	0x20000c04
 800b5e4:	0800f7c0 	.word	0x0800f7c0

0800b5e8 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b5e8:	b480      	push	{r7}
 800b5ea:	b083      	sub	sp, #12
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	4603      	mov	r3, r0
 800b5f0:	6039      	str	r1, [r7, #0]
 800b5f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800b5f4:	683b      	ldr	r3, [r7, #0]
 800b5f6:	220c      	movs	r2, #12
 800b5f8:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800b5fa:	4b03      	ldr	r3, [pc, #12]	; (800b608 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	370c      	adds	r7, #12
 800b600:	46bd      	mov	sp, r7
 800b602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b606:	4770      	bx	lr
 800b608:	2000016c 	.word	0x2000016c

0800b60c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b60c:	b580      	push	{r7, lr}
 800b60e:	b084      	sub	sp, #16
 800b610:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b612:	4b0f      	ldr	r3, [pc, #60]	; (800b650 <Get_SerialNum+0x44>)
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b618:	4b0e      	ldr	r3, [pc, #56]	; (800b654 <Get_SerialNum+0x48>)
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b61e:	4b0e      	ldr	r3, [pc, #56]	; (800b658 <Get_SerialNum+0x4c>)
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b624:	68fa      	ldr	r2, [r7, #12]
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	4413      	add	r3, r2
 800b62a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d009      	beq.n	800b646 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b632:	2208      	movs	r2, #8
 800b634:	4909      	ldr	r1, [pc, #36]	; (800b65c <Get_SerialNum+0x50>)
 800b636:	68f8      	ldr	r0, [r7, #12]
 800b638:	f000 f814 	bl	800b664 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b63c:	2204      	movs	r2, #4
 800b63e:	4908      	ldr	r1, [pc, #32]	; (800b660 <Get_SerialNum+0x54>)
 800b640:	68b8      	ldr	r0, [r7, #8]
 800b642:	f000 f80f 	bl	800b664 <IntToUnicode>
  }
}
 800b646:	bf00      	nop
 800b648:	3710      	adds	r7, #16
 800b64a:	46bd      	mov	sp, r7
 800b64c:	bd80      	pop	{r7, pc}
 800b64e:	bf00      	nop
 800b650:	1fff7590 	.word	0x1fff7590
 800b654:	1fff7594 	.word	0x1fff7594
 800b658:	1fff7598 	.word	0x1fff7598
 800b65c:	2000017e 	.word	0x2000017e
 800b660:	2000018e 	.word	0x2000018e

0800b664 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b664:	b480      	push	{r7}
 800b666:	b087      	sub	sp, #28
 800b668:	af00      	add	r7, sp, #0
 800b66a:	60f8      	str	r0, [r7, #12]
 800b66c:	60b9      	str	r1, [r7, #8]
 800b66e:	4613      	mov	r3, r2
 800b670:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b672:	2300      	movs	r3, #0
 800b674:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b676:	2300      	movs	r3, #0
 800b678:	75fb      	strb	r3, [r7, #23]
 800b67a:	e027      	b.n	800b6cc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	0f1b      	lsrs	r3, r3, #28
 800b680:	2b09      	cmp	r3, #9
 800b682:	d80b      	bhi.n	800b69c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	0f1b      	lsrs	r3, r3, #28
 800b688:	b2da      	uxtb	r2, r3
 800b68a:	7dfb      	ldrb	r3, [r7, #23]
 800b68c:	005b      	lsls	r3, r3, #1
 800b68e:	4619      	mov	r1, r3
 800b690:	68bb      	ldr	r3, [r7, #8]
 800b692:	440b      	add	r3, r1
 800b694:	3230      	adds	r2, #48	; 0x30
 800b696:	b2d2      	uxtb	r2, r2
 800b698:	701a      	strb	r2, [r3, #0]
 800b69a:	e00a      	b.n	800b6b2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	0f1b      	lsrs	r3, r3, #28
 800b6a0:	b2da      	uxtb	r2, r3
 800b6a2:	7dfb      	ldrb	r3, [r7, #23]
 800b6a4:	005b      	lsls	r3, r3, #1
 800b6a6:	4619      	mov	r1, r3
 800b6a8:	68bb      	ldr	r3, [r7, #8]
 800b6aa:	440b      	add	r3, r1
 800b6ac:	3237      	adds	r2, #55	; 0x37
 800b6ae:	b2d2      	uxtb	r2, r2
 800b6b0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	011b      	lsls	r3, r3, #4
 800b6b6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b6b8:	7dfb      	ldrb	r3, [r7, #23]
 800b6ba:	005b      	lsls	r3, r3, #1
 800b6bc:	3301      	adds	r3, #1
 800b6be:	68ba      	ldr	r2, [r7, #8]
 800b6c0:	4413      	add	r3, r2
 800b6c2:	2200      	movs	r2, #0
 800b6c4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b6c6:	7dfb      	ldrb	r3, [r7, #23]
 800b6c8:	3301      	adds	r3, #1
 800b6ca:	75fb      	strb	r3, [r7, #23]
 800b6cc:	7dfa      	ldrb	r2, [r7, #23]
 800b6ce:	79fb      	ldrb	r3, [r7, #7]
 800b6d0:	429a      	cmp	r2, r3
 800b6d2:	d3d3      	bcc.n	800b67c <IntToUnicode+0x18>
  }
}
 800b6d4:	bf00      	nop
 800b6d6:	bf00      	nop
 800b6d8:	371c      	adds	r7, #28
 800b6da:	46bd      	mov	sp, r7
 800b6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e0:	4770      	bx	lr
	...

0800b6e4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b6e4:	b580      	push	{r7, lr}
 800b6e6:	b084      	sub	sp, #16
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	4a0d      	ldr	r2, [pc, #52]	; (800b728 <HAL_PCD_MspInit+0x44>)
 800b6f2:	4293      	cmp	r3, r2
 800b6f4:	d113      	bne.n	800b71e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800b6f6:	4b0d      	ldr	r3, [pc, #52]	; (800b72c <HAL_PCD_MspInit+0x48>)
 800b6f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b6fa:	4a0c      	ldr	r2, [pc, #48]	; (800b72c <HAL_PCD_MspInit+0x48>)
 800b6fc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b700:	6593      	str	r3, [r2, #88]	; 0x58
 800b702:	4b0a      	ldr	r3, [pc, #40]	; (800b72c <HAL_PCD_MspInit+0x48>)
 800b704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b706:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b70a:	60fb      	str	r3, [r7, #12]
 800b70c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 1, 0);
 800b70e:	2200      	movs	r2, #0
 800b710:	2101      	movs	r1, #1
 800b712:	2043      	movs	r0, #67	; 0x43
 800b714:	f7f7 fd11 	bl	800313a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800b718:	2043      	movs	r0, #67	; 0x43
 800b71a:	f7f7 fd2a 	bl	8003172 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800b71e:	bf00      	nop
 800b720:	3710      	adds	r7, #16
 800b722:	46bd      	mov	sp, r7
 800b724:	bd80      	pop	{r7, pc}
 800b726:	bf00      	nop
 800b728:	40006800 	.word	0x40006800
 800b72c:	40021000 	.word	0x40021000

0800b730 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b730:	b580      	push	{r7, lr}
 800b732:	b082      	sub	sp, #8
 800b734:	af00      	add	r7, sp, #0
 800b736:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800b744:	4619      	mov	r1, r3
 800b746:	4610      	mov	r0, r2
 800b748:	f7fe fe24 	bl	800a394 <USBD_LL_SetupStage>
}
 800b74c:	bf00      	nop
 800b74e:	3708      	adds	r7, #8
 800b750:	46bd      	mov	sp, r7
 800b752:	bd80      	pop	{r7, pc}

0800b754 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b754:	b580      	push	{r7, lr}
 800b756:	b082      	sub	sp, #8
 800b758:	af00      	add	r7, sp, #0
 800b75a:	6078      	str	r0, [r7, #4]
 800b75c:	460b      	mov	r3, r1
 800b75e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800b766:	78fa      	ldrb	r2, [r7, #3]
 800b768:	6879      	ldr	r1, [r7, #4]
 800b76a:	4613      	mov	r3, r2
 800b76c:	009b      	lsls	r3, r3, #2
 800b76e:	4413      	add	r3, r2
 800b770:	00db      	lsls	r3, r3, #3
 800b772:	440b      	add	r3, r1
 800b774:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800b778:	681a      	ldr	r2, [r3, #0]
 800b77a:	78fb      	ldrb	r3, [r7, #3]
 800b77c:	4619      	mov	r1, r3
 800b77e:	f7fe fe5e 	bl	800a43e <USBD_LL_DataOutStage>
}
 800b782:	bf00      	nop
 800b784:	3708      	adds	r7, #8
 800b786:	46bd      	mov	sp, r7
 800b788:	bd80      	pop	{r7, pc}

0800b78a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b78a:	b580      	push	{r7, lr}
 800b78c:	b082      	sub	sp, #8
 800b78e:	af00      	add	r7, sp, #0
 800b790:	6078      	str	r0, [r7, #4]
 800b792:	460b      	mov	r3, r1
 800b794:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800b79c:	78fa      	ldrb	r2, [r7, #3]
 800b79e:	6879      	ldr	r1, [r7, #4]
 800b7a0:	4613      	mov	r3, r2
 800b7a2:	009b      	lsls	r3, r3, #2
 800b7a4:	4413      	add	r3, r2
 800b7a6:	00db      	lsls	r3, r3, #3
 800b7a8:	440b      	add	r3, r1
 800b7aa:	333c      	adds	r3, #60	; 0x3c
 800b7ac:	681a      	ldr	r2, [r3, #0]
 800b7ae:	78fb      	ldrb	r3, [r7, #3]
 800b7b0:	4619      	mov	r1, r3
 800b7b2:	f7fe fea7 	bl	800a504 <USBD_LL_DataInStage>
}
 800b7b6:	bf00      	nop
 800b7b8:	3708      	adds	r7, #8
 800b7ba:	46bd      	mov	sp, r7
 800b7bc:	bd80      	pop	{r7, pc}

0800b7be <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b7be:	b580      	push	{r7, lr}
 800b7c0:	b082      	sub	sp, #8
 800b7c2:	af00      	add	r7, sp, #0
 800b7c4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	f7fe ffbb 	bl	800a748 <USBD_LL_SOF>
}
 800b7d2:	bf00      	nop
 800b7d4:	3708      	adds	r7, #8
 800b7d6:	46bd      	mov	sp, r7
 800b7d8:	bd80      	pop	{r7, pc}

0800b7da <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b7da:	b580      	push	{r7, lr}
 800b7dc:	b084      	sub	sp, #16
 800b7de:	af00      	add	r7, sp, #0
 800b7e0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b7e2:	2301      	movs	r3, #1
 800b7e4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	689b      	ldr	r3, [r3, #8]
 800b7ea:	2b02      	cmp	r3, #2
 800b7ec:	d001      	beq.n	800b7f2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b7ee:	f7f6 f82b 	bl	8001848 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800b7f8:	7bfa      	ldrb	r2, [r7, #15]
 800b7fa:	4611      	mov	r1, r2
 800b7fc:	4618      	mov	r0, r3
 800b7fe:	f7fe ff65 	bl	800a6cc <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800b808:	4618      	mov	r0, r3
 800b80a:	f7fe ff11 	bl	800a630 <USBD_LL_Reset>
}
 800b80e:	bf00      	nop
 800b810:	3710      	adds	r7, #16
 800b812:	46bd      	mov	sp, r7
 800b814:	bd80      	pop	{r7, pc}
	...

0800b818 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b818:	b580      	push	{r7, lr}
 800b81a:	b082      	sub	sp, #8
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800b826:	4618      	mov	r0, r3
 800b828:	f7fe ff60 	bl	800a6ec <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	699b      	ldr	r3, [r3, #24]
 800b830:	2b00      	cmp	r3, #0
 800b832:	d005      	beq.n	800b840 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b834:	4b04      	ldr	r3, [pc, #16]	; (800b848 <HAL_PCD_SuspendCallback+0x30>)
 800b836:	691b      	ldr	r3, [r3, #16]
 800b838:	4a03      	ldr	r2, [pc, #12]	; (800b848 <HAL_PCD_SuspendCallback+0x30>)
 800b83a:	f043 0306 	orr.w	r3, r3, #6
 800b83e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b840:	bf00      	nop
 800b842:	3708      	adds	r7, #8
 800b844:	46bd      	mov	sp, r7
 800b846:	bd80      	pop	{r7, pc}
 800b848:	e000ed00 	.word	0xe000ed00

0800b84c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b84c:	b580      	push	{r7, lr}
 800b84e:	b082      	sub	sp, #8
 800b850:	af00      	add	r7, sp, #0
 800b852:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	699b      	ldr	r3, [r3, #24]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d007      	beq.n	800b86c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b85c:	4b08      	ldr	r3, [pc, #32]	; (800b880 <HAL_PCD_ResumeCallback+0x34>)
 800b85e:	691b      	ldr	r3, [r3, #16]
 800b860:	4a07      	ldr	r2, [pc, #28]	; (800b880 <HAL_PCD_ResumeCallback+0x34>)
 800b862:	f023 0306 	bic.w	r3, r3, #6
 800b866:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800b868:	f000 fa90 	bl	800bd8c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800b872:	4618      	mov	r0, r3
 800b874:	f7fe ff50 	bl	800a718 <USBD_LL_Resume>
}
 800b878:	bf00      	nop
 800b87a:	3708      	adds	r7, #8
 800b87c:	46bd      	mov	sp, r7
 800b87e:	bd80      	pop	{r7, pc}
 800b880:	e000ed00 	.word	0xe000ed00

0800b884 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b884:	b580      	push	{r7, lr}
 800b886:	b082      	sub	sp, #8
 800b888:	af00      	add	r7, sp, #0
 800b88a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800b88c:	f7fa fae2 	bl	8005e54 <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800b890:	4a22      	ldr	r2, [pc, #136]	; (800b91c <USBD_LL_Init+0x98>)
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  pdev->pData = &hpcd_USB_FS;
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	4a20      	ldr	r2, [pc, #128]	; (800b91c <USBD_LL_Init+0x98>)
 800b89c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800b8a0:	4b1e      	ldr	r3, [pc, #120]	; (800b91c <USBD_LL_Init+0x98>)
 800b8a2:	4a1f      	ldr	r2, [pc, #124]	; (800b920 <USBD_LL_Init+0x9c>)
 800b8a4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800b8a6:	4b1d      	ldr	r3, [pc, #116]	; (800b91c <USBD_LL_Init+0x98>)
 800b8a8:	2208      	movs	r2, #8
 800b8aa:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800b8ac:	4b1b      	ldr	r3, [pc, #108]	; (800b91c <USBD_LL_Init+0x98>)
 800b8ae:	2202      	movs	r2, #2
 800b8b0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b8b2:	4b1a      	ldr	r3, [pc, #104]	; (800b91c <USBD_LL_Init+0x98>)
 800b8b4:	2202      	movs	r2, #2
 800b8b6:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800b8b8:	4b18      	ldr	r3, [pc, #96]	; (800b91c <USBD_LL_Init+0x98>)
 800b8ba:	2200      	movs	r2, #0
 800b8bc:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800b8be:	4b17      	ldr	r3, [pc, #92]	; (800b91c <USBD_LL_Init+0x98>)
 800b8c0:	2200      	movs	r2, #0
 800b8c2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800b8c4:	4b15      	ldr	r3, [pc, #84]	; (800b91c <USBD_LL_Init+0x98>)
 800b8c6:	2200      	movs	r2, #0
 800b8c8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800b8ca:	4b14      	ldr	r3, [pc, #80]	; (800b91c <USBD_LL_Init+0x98>)
 800b8cc:	2200      	movs	r2, #0
 800b8ce:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800b8d0:	4812      	ldr	r0, [pc, #72]	; (800b91c <USBD_LL_Init+0x98>)
 800b8d2:	f7f8 fd94 	bl	80043fe <HAL_PCD_Init>
 800b8d6:	4603      	mov	r3, r0
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d001      	beq.n	800b8e0 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800b8dc:	f7f5 ffb4 	bl	8001848 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b8e6:	2318      	movs	r3, #24
 800b8e8:	2200      	movs	r2, #0
 800b8ea:	2100      	movs	r1, #0
 800b8ec:	f7fa f9d1 	bl	8005c92 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b8f6:	2358      	movs	r3, #88	; 0x58
 800b8f8:	2200      	movs	r2, #0
 800b8fa:	2180      	movs	r1, #128	; 0x80
 800b8fc:	f7fa f9c9 	bl	8005c92 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b906:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b90a:	2200      	movs	r2, #0
 800b90c:	2181      	movs	r1, #129	; 0x81
 800b90e:	f7fa f9c0 	bl	8005c92 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 800b912:	2300      	movs	r3, #0
}
 800b914:	4618      	mov	r0, r3
 800b916:	3708      	adds	r7, #8
 800b918:	46bd      	mov	sp, r7
 800b91a:	bd80      	pop	{r7, pc}
 800b91c:	20000e04 	.word	0x20000e04
 800b920:	40006800 	.word	0x40006800

0800b924 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b924:	b580      	push	{r7, lr}
 800b926:	b084      	sub	sp, #16
 800b928:	af00      	add	r7, sp, #0
 800b92a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b92c:	2300      	movs	r3, #0
 800b92e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b930:	2300      	movs	r3, #0
 800b932:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b93a:	4618      	mov	r0, r3
 800b93c:	f7f8 fe71 	bl	8004622 <HAL_PCD_Start>
 800b940:	4603      	mov	r3, r0
 800b942:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b944:	7bbb      	ldrb	r3, [r7, #14]
 800b946:	2b03      	cmp	r3, #3
 800b948:	d816      	bhi.n	800b978 <USBD_LL_Start+0x54>
 800b94a:	a201      	add	r2, pc, #4	; (adr r2, 800b950 <USBD_LL_Start+0x2c>)
 800b94c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b950:	0800b961 	.word	0x0800b961
 800b954:	0800b967 	.word	0x0800b967
 800b958:	0800b96d 	.word	0x0800b96d
 800b95c:	0800b973 	.word	0x0800b973
    case HAL_OK :
      usb_status = USBD_OK;
 800b960:	2300      	movs	r3, #0
 800b962:	73fb      	strb	r3, [r7, #15]
    break;
 800b964:	e00b      	b.n	800b97e <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b966:	2303      	movs	r3, #3
 800b968:	73fb      	strb	r3, [r7, #15]
    break;
 800b96a:	e008      	b.n	800b97e <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b96c:	2301      	movs	r3, #1
 800b96e:	73fb      	strb	r3, [r7, #15]
    break;
 800b970:	e005      	b.n	800b97e <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b972:	2303      	movs	r3, #3
 800b974:	73fb      	strb	r3, [r7, #15]
    break;
 800b976:	e002      	b.n	800b97e <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800b978:	2303      	movs	r3, #3
 800b97a:	73fb      	strb	r3, [r7, #15]
    break;
 800b97c:	bf00      	nop
  }
  return usb_status;
 800b97e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b980:	4618      	mov	r0, r3
 800b982:	3710      	adds	r7, #16
 800b984:	46bd      	mov	sp, r7
 800b986:	bd80      	pop	{r7, pc}

0800b988 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b988:	b580      	push	{r7, lr}
 800b98a:	b084      	sub	sp, #16
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]
 800b990:	4608      	mov	r0, r1
 800b992:	4611      	mov	r1, r2
 800b994:	461a      	mov	r2, r3
 800b996:	4603      	mov	r3, r0
 800b998:	70fb      	strb	r3, [r7, #3]
 800b99a:	460b      	mov	r3, r1
 800b99c:	70bb      	strb	r3, [r7, #2]
 800b99e:	4613      	mov	r3, r2
 800b9a0:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b9a2:	2300      	movs	r3, #0
 800b9a4:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b9a6:	2300      	movs	r3, #0
 800b9a8:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b9b0:	78bb      	ldrb	r3, [r7, #2]
 800b9b2:	883a      	ldrh	r2, [r7, #0]
 800b9b4:	78f9      	ldrb	r1, [r7, #3]
 800b9b6:	f7f8 ffc9 	bl	800494c <HAL_PCD_EP_Open>
 800b9ba:	4603      	mov	r3, r0
 800b9bc:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b9be:	7bbb      	ldrb	r3, [r7, #14]
 800b9c0:	2b03      	cmp	r3, #3
 800b9c2:	d817      	bhi.n	800b9f4 <USBD_LL_OpenEP+0x6c>
 800b9c4:	a201      	add	r2, pc, #4	; (adr r2, 800b9cc <USBD_LL_OpenEP+0x44>)
 800b9c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9ca:	bf00      	nop
 800b9cc:	0800b9dd 	.word	0x0800b9dd
 800b9d0:	0800b9e3 	.word	0x0800b9e3
 800b9d4:	0800b9e9 	.word	0x0800b9e9
 800b9d8:	0800b9ef 	.word	0x0800b9ef
    case HAL_OK :
      usb_status = USBD_OK;
 800b9dc:	2300      	movs	r3, #0
 800b9de:	73fb      	strb	r3, [r7, #15]
    break;
 800b9e0:	e00b      	b.n	800b9fa <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b9e2:	2303      	movs	r3, #3
 800b9e4:	73fb      	strb	r3, [r7, #15]
    break;
 800b9e6:	e008      	b.n	800b9fa <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b9e8:	2301      	movs	r3, #1
 800b9ea:	73fb      	strb	r3, [r7, #15]
    break;
 800b9ec:	e005      	b.n	800b9fa <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b9ee:	2303      	movs	r3, #3
 800b9f0:	73fb      	strb	r3, [r7, #15]
    break;
 800b9f2:	e002      	b.n	800b9fa <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800b9f4:	2303      	movs	r3, #3
 800b9f6:	73fb      	strb	r3, [r7, #15]
    break;
 800b9f8:	bf00      	nop
  }
  return usb_status;
 800b9fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9fc:	4618      	mov	r0, r3
 800b9fe:	3710      	adds	r7, #16
 800ba00:	46bd      	mov	sp, r7
 800ba02:	bd80      	pop	{r7, pc}

0800ba04 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ba04:	b580      	push	{r7, lr}
 800ba06:	b084      	sub	sp, #16
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	6078      	str	r0, [r7, #4]
 800ba0c:	460b      	mov	r3, r1
 800ba0e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba10:	2300      	movs	r3, #0
 800ba12:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba14:	2300      	movs	r3, #0
 800ba16:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ba1e:	78fa      	ldrb	r2, [r7, #3]
 800ba20:	4611      	mov	r1, r2
 800ba22:	4618      	mov	r0, r3
 800ba24:	f7f8 fff8 	bl	8004a18 <HAL_PCD_EP_Close>
 800ba28:	4603      	mov	r3, r0
 800ba2a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800ba2c:	7bbb      	ldrb	r3, [r7, #14]
 800ba2e:	2b03      	cmp	r3, #3
 800ba30:	d816      	bhi.n	800ba60 <USBD_LL_CloseEP+0x5c>
 800ba32:	a201      	add	r2, pc, #4	; (adr r2, 800ba38 <USBD_LL_CloseEP+0x34>)
 800ba34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba38:	0800ba49 	.word	0x0800ba49
 800ba3c:	0800ba4f 	.word	0x0800ba4f
 800ba40:	0800ba55 	.word	0x0800ba55
 800ba44:	0800ba5b 	.word	0x0800ba5b
    case HAL_OK :
      usb_status = USBD_OK;
 800ba48:	2300      	movs	r3, #0
 800ba4a:	73fb      	strb	r3, [r7, #15]
    break;
 800ba4c:	e00b      	b.n	800ba66 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ba4e:	2303      	movs	r3, #3
 800ba50:	73fb      	strb	r3, [r7, #15]
    break;
 800ba52:	e008      	b.n	800ba66 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ba54:	2301      	movs	r3, #1
 800ba56:	73fb      	strb	r3, [r7, #15]
    break;
 800ba58:	e005      	b.n	800ba66 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ba5a:	2303      	movs	r3, #3
 800ba5c:	73fb      	strb	r3, [r7, #15]
    break;
 800ba5e:	e002      	b.n	800ba66 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800ba60:	2303      	movs	r3, #3
 800ba62:	73fb      	strb	r3, [r7, #15]
    break;
 800ba64:	bf00      	nop
  }
  return usb_status;
 800ba66:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba68:	4618      	mov	r0, r3
 800ba6a:	3710      	adds	r7, #16
 800ba6c:	46bd      	mov	sp, r7
 800ba6e:	bd80      	pop	{r7, pc}

0800ba70 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ba70:	b580      	push	{r7, lr}
 800ba72:	b084      	sub	sp, #16
 800ba74:	af00      	add	r7, sp, #0
 800ba76:	6078      	str	r0, [r7, #4]
 800ba78:	460b      	mov	r3, r1
 800ba7a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba7c:	2300      	movs	r3, #0
 800ba7e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba80:	2300      	movs	r3, #0
 800ba82:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ba8a:	78fa      	ldrb	r2, [r7, #3]
 800ba8c:	4611      	mov	r1, r2
 800ba8e:	4618      	mov	r0, r3
 800ba90:	f7f9 f88a 	bl	8004ba8 <HAL_PCD_EP_SetStall>
 800ba94:	4603      	mov	r3, r0
 800ba96:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800ba98:	7bbb      	ldrb	r3, [r7, #14]
 800ba9a:	2b03      	cmp	r3, #3
 800ba9c:	d816      	bhi.n	800bacc <USBD_LL_StallEP+0x5c>
 800ba9e:	a201      	add	r2, pc, #4	; (adr r2, 800baa4 <USBD_LL_StallEP+0x34>)
 800baa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800baa4:	0800bab5 	.word	0x0800bab5
 800baa8:	0800babb 	.word	0x0800babb
 800baac:	0800bac1 	.word	0x0800bac1
 800bab0:	0800bac7 	.word	0x0800bac7
    case HAL_OK :
      usb_status = USBD_OK;
 800bab4:	2300      	movs	r3, #0
 800bab6:	73fb      	strb	r3, [r7, #15]
    break;
 800bab8:	e00b      	b.n	800bad2 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800baba:	2303      	movs	r3, #3
 800babc:	73fb      	strb	r3, [r7, #15]
    break;
 800babe:	e008      	b.n	800bad2 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bac0:	2301      	movs	r3, #1
 800bac2:	73fb      	strb	r3, [r7, #15]
    break;
 800bac4:	e005      	b.n	800bad2 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bac6:	2303      	movs	r3, #3
 800bac8:	73fb      	strb	r3, [r7, #15]
    break;
 800baca:	e002      	b.n	800bad2 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800bacc:	2303      	movs	r3, #3
 800bace:	73fb      	strb	r3, [r7, #15]
    break;
 800bad0:	bf00      	nop
  }
  return usb_status;
 800bad2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bad4:	4618      	mov	r0, r3
 800bad6:	3710      	adds	r7, #16
 800bad8:	46bd      	mov	sp, r7
 800bada:	bd80      	pop	{r7, pc}

0800badc <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800badc:	b580      	push	{r7, lr}
 800bade:	b084      	sub	sp, #16
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	6078      	str	r0, [r7, #4]
 800bae4:	460b      	mov	r3, r1
 800bae6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bae8:	2300      	movs	r3, #0
 800baea:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800baec:	2300      	movs	r3, #0
 800baee:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800baf6:	78fa      	ldrb	r2, [r7, #3]
 800baf8:	4611      	mov	r1, r2
 800bafa:	4618      	mov	r0, r3
 800bafc:	f7f9 f8b4 	bl	8004c68 <HAL_PCD_EP_ClrStall>
 800bb00:	4603      	mov	r3, r0
 800bb02:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800bb04:	7bbb      	ldrb	r3, [r7, #14]
 800bb06:	2b03      	cmp	r3, #3
 800bb08:	d816      	bhi.n	800bb38 <USBD_LL_ClearStallEP+0x5c>
 800bb0a:	a201      	add	r2, pc, #4	; (adr r2, 800bb10 <USBD_LL_ClearStallEP+0x34>)
 800bb0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb10:	0800bb21 	.word	0x0800bb21
 800bb14:	0800bb27 	.word	0x0800bb27
 800bb18:	0800bb2d 	.word	0x0800bb2d
 800bb1c:	0800bb33 	.word	0x0800bb33
    case HAL_OK :
      usb_status = USBD_OK;
 800bb20:	2300      	movs	r3, #0
 800bb22:	73fb      	strb	r3, [r7, #15]
    break;
 800bb24:	e00b      	b.n	800bb3e <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bb26:	2303      	movs	r3, #3
 800bb28:	73fb      	strb	r3, [r7, #15]
    break;
 800bb2a:	e008      	b.n	800bb3e <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bb2c:	2301      	movs	r3, #1
 800bb2e:	73fb      	strb	r3, [r7, #15]
    break;
 800bb30:	e005      	b.n	800bb3e <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bb32:	2303      	movs	r3, #3
 800bb34:	73fb      	strb	r3, [r7, #15]
    break;
 800bb36:	e002      	b.n	800bb3e <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800bb38:	2303      	movs	r3, #3
 800bb3a:	73fb      	strb	r3, [r7, #15]
    break;
 800bb3c:	bf00      	nop
  }
  return usb_status;
 800bb3e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb40:	4618      	mov	r0, r3
 800bb42:	3710      	adds	r7, #16
 800bb44:	46bd      	mov	sp, r7
 800bb46:	bd80      	pop	{r7, pc}

0800bb48 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bb48:	b480      	push	{r7}
 800bb4a:	b085      	sub	sp, #20
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	6078      	str	r0, [r7, #4]
 800bb50:	460b      	mov	r3, r1
 800bb52:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bb5a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800bb5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	da0c      	bge.n	800bb7e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bb64:	78fb      	ldrb	r3, [r7, #3]
 800bb66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb6a:	68f9      	ldr	r1, [r7, #12]
 800bb6c:	1c5a      	adds	r2, r3, #1
 800bb6e:	4613      	mov	r3, r2
 800bb70:	009b      	lsls	r3, r3, #2
 800bb72:	4413      	add	r3, r2
 800bb74:	00db      	lsls	r3, r3, #3
 800bb76:	440b      	add	r3, r1
 800bb78:	3302      	adds	r3, #2
 800bb7a:	781b      	ldrb	r3, [r3, #0]
 800bb7c:	e00b      	b.n	800bb96 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800bb7e:	78fb      	ldrb	r3, [r7, #3]
 800bb80:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bb84:	68f9      	ldr	r1, [r7, #12]
 800bb86:	4613      	mov	r3, r2
 800bb88:	009b      	lsls	r3, r3, #2
 800bb8a:	4413      	add	r3, r2
 800bb8c:	00db      	lsls	r3, r3, #3
 800bb8e:	440b      	add	r3, r1
 800bb90:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800bb94:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bb96:	4618      	mov	r0, r3
 800bb98:	3714      	adds	r7, #20
 800bb9a:	46bd      	mov	sp, r7
 800bb9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba0:	4770      	bx	lr
	...

0800bba4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bba4:	b580      	push	{r7, lr}
 800bba6:	b084      	sub	sp, #16
 800bba8:	af00      	add	r7, sp, #0
 800bbaa:	6078      	str	r0, [r7, #4]
 800bbac:	460b      	mov	r3, r1
 800bbae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bbb0:	2300      	movs	r3, #0
 800bbb2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bbb4:	2300      	movs	r3, #0
 800bbb6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bbbe:	78fa      	ldrb	r2, [r7, #3]
 800bbc0:	4611      	mov	r1, r2
 800bbc2:	4618      	mov	r0, r3
 800bbc4:	f7f8 fe9d 	bl	8004902 <HAL_PCD_SetAddress>
 800bbc8:	4603      	mov	r3, r0
 800bbca:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800bbcc:	7bbb      	ldrb	r3, [r7, #14]
 800bbce:	2b03      	cmp	r3, #3
 800bbd0:	d816      	bhi.n	800bc00 <USBD_LL_SetUSBAddress+0x5c>
 800bbd2:	a201      	add	r2, pc, #4	; (adr r2, 800bbd8 <USBD_LL_SetUSBAddress+0x34>)
 800bbd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbd8:	0800bbe9 	.word	0x0800bbe9
 800bbdc:	0800bbef 	.word	0x0800bbef
 800bbe0:	0800bbf5 	.word	0x0800bbf5
 800bbe4:	0800bbfb 	.word	0x0800bbfb
    case HAL_OK :
      usb_status = USBD_OK;
 800bbe8:	2300      	movs	r3, #0
 800bbea:	73fb      	strb	r3, [r7, #15]
    break;
 800bbec:	e00b      	b.n	800bc06 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bbee:	2303      	movs	r3, #3
 800bbf0:	73fb      	strb	r3, [r7, #15]
    break;
 800bbf2:	e008      	b.n	800bc06 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bbf4:	2301      	movs	r3, #1
 800bbf6:	73fb      	strb	r3, [r7, #15]
    break;
 800bbf8:	e005      	b.n	800bc06 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bbfa:	2303      	movs	r3, #3
 800bbfc:	73fb      	strb	r3, [r7, #15]
    break;
 800bbfe:	e002      	b.n	800bc06 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800bc00:	2303      	movs	r3, #3
 800bc02:	73fb      	strb	r3, [r7, #15]
    break;
 800bc04:	bf00      	nop
  }
  return usb_status;
 800bc06:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc08:	4618      	mov	r0, r3
 800bc0a:	3710      	adds	r7, #16
 800bc0c:	46bd      	mov	sp, r7
 800bc0e:	bd80      	pop	{r7, pc}

0800bc10 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bc10:	b580      	push	{r7, lr}
 800bc12:	b086      	sub	sp, #24
 800bc14:	af00      	add	r7, sp, #0
 800bc16:	60f8      	str	r0, [r7, #12]
 800bc18:	607a      	str	r2, [r7, #4]
 800bc1a:	603b      	str	r3, [r7, #0]
 800bc1c:	460b      	mov	r3, r1
 800bc1e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc20:	2300      	movs	r3, #0
 800bc22:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc24:	2300      	movs	r3, #0
 800bc26:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bc2e:	7af9      	ldrb	r1, [r7, #11]
 800bc30:	683b      	ldr	r3, [r7, #0]
 800bc32:	687a      	ldr	r2, [r7, #4]
 800bc34:	f7f8 ff75 	bl	8004b22 <HAL_PCD_EP_Transmit>
 800bc38:	4603      	mov	r3, r0
 800bc3a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800bc3c:	7dbb      	ldrb	r3, [r7, #22]
 800bc3e:	2b03      	cmp	r3, #3
 800bc40:	d816      	bhi.n	800bc70 <USBD_LL_Transmit+0x60>
 800bc42:	a201      	add	r2, pc, #4	; (adr r2, 800bc48 <USBD_LL_Transmit+0x38>)
 800bc44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc48:	0800bc59 	.word	0x0800bc59
 800bc4c:	0800bc5f 	.word	0x0800bc5f
 800bc50:	0800bc65 	.word	0x0800bc65
 800bc54:	0800bc6b 	.word	0x0800bc6b
    case HAL_OK :
      usb_status = USBD_OK;
 800bc58:	2300      	movs	r3, #0
 800bc5a:	75fb      	strb	r3, [r7, #23]
    break;
 800bc5c:	e00b      	b.n	800bc76 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bc5e:	2303      	movs	r3, #3
 800bc60:	75fb      	strb	r3, [r7, #23]
    break;
 800bc62:	e008      	b.n	800bc76 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bc64:	2301      	movs	r3, #1
 800bc66:	75fb      	strb	r3, [r7, #23]
    break;
 800bc68:	e005      	b.n	800bc76 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bc6a:	2303      	movs	r3, #3
 800bc6c:	75fb      	strb	r3, [r7, #23]
    break;
 800bc6e:	e002      	b.n	800bc76 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800bc70:	2303      	movs	r3, #3
 800bc72:	75fb      	strb	r3, [r7, #23]
    break;
 800bc74:	bf00      	nop
  }
  return usb_status;
 800bc76:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc78:	4618      	mov	r0, r3
 800bc7a:	3718      	adds	r7, #24
 800bc7c:	46bd      	mov	sp, r7
 800bc7e:	bd80      	pop	{r7, pc}

0800bc80 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bc80:	b580      	push	{r7, lr}
 800bc82:	b086      	sub	sp, #24
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	60f8      	str	r0, [r7, #12]
 800bc88:	607a      	str	r2, [r7, #4]
 800bc8a:	603b      	str	r3, [r7, #0]
 800bc8c:	460b      	mov	r3, r1
 800bc8e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc90:	2300      	movs	r3, #0
 800bc92:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc94:	2300      	movs	r3, #0
 800bc96:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bc9e:	7af9      	ldrb	r1, [r7, #11]
 800bca0:	683b      	ldr	r3, [r7, #0]
 800bca2:	687a      	ldr	r2, [r7, #4]
 800bca4:	f7f8 ff00 	bl	8004aa8 <HAL_PCD_EP_Receive>
 800bca8:	4603      	mov	r3, r0
 800bcaa:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800bcac:	7dbb      	ldrb	r3, [r7, #22]
 800bcae:	2b03      	cmp	r3, #3
 800bcb0:	d816      	bhi.n	800bce0 <USBD_LL_PrepareReceive+0x60>
 800bcb2:	a201      	add	r2, pc, #4	; (adr r2, 800bcb8 <USBD_LL_PrepareReceive+0x38>)
 800bcb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcb8:	0800bcc9 	.word	0x0800bcc9
 800bcbc:	0800bccf 	.word	0x0800bccf
 800bcc0:	0800bcd5 	.word	0x0800bcd5
 800bcc4:	0800bcdb 	.word	0x0800bcdb
    case HAL_OK :
      usb_status = USBD_OK;
 800bcc8:	2300      	movs	r3, #0
 800bcca:	75fb      	strb	r3, [r7, #23]
    break;
 800bccc:	e00b      	b.n	800bce6 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bcce:	2303      	movs	r3, #3
 800bcd0:	75fb      	strb	r3, [r7, #23]
    break;
 800bcd2:	e008      	b.n	800bce6 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bcd4:	2301      	movs	r3, #1
 800bcd6:	75fb      	strb	r3, [r7, #23]
    break;
 800bcd8:	e005      	b.n	800bce6 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bcda:	2303      	movs	r3, #3
 800bcdc:	75fb      	strb	r3, [r7, #23]
    break;
 800bcde:	e002      	b.n	800bce6 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800bce0:	2303      	movs	r3, #3
 800bce2:	75fb      	strb	r3, [r7, #23]
    break;
 800bce4:	bf00      	nop
  }
  return usb_status;
 800bce6:	7dfb      	ldrb	r3, [r7, #23]
}
 800bce8:	4618      	mov	r0, r3
 800bcea:	3718      	adds	r7, #24
 800bcec:	46bd      	mov	sp, r7
 800bcee:	bd80      	pop	{r7, pc}

0800bcf0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800bcf0:	b580      	push	{r7, lr}
 800bcf2:	b082      	sub	sp, #8
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	6078      	str	r0, [r7, #4]
 800bcf8:	460b      	mov	r3, r1
 800bcfa:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800bcfc:	78fb      	ldrb	r3, [r7, #3]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d002      	beq.n	800bd08 <HAL_PCDEx_LPM_Callback+0x18>
 800bd02:	2b01      	cmp	r3, #1
 800bd04:	d013      	beq.n	800bd2e <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800bd06:	e023      	b.n	800bd50 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	699b      	ldr	r3, [r3, #24]
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d007      	beq.n	800bd20 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800bd10:	f000 f83c 	bl	800bd8c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bd14:	4b10      	ldr	r3, [pc, #64]	; (800bd58 <HAL_PCDEx_LPM_Callback+0x68>)
 800bd16:	691b      	ldr	r3, [r3, #16]
 800bd18:	4a0f      	ldr	r2, [pc, #60]	; (800bd58 <HAL_PCDEx_LPM_Callback+0x68>)
 800bd1a:	f023 0306 	bic.w	r3, r3, #6
 800bd1e:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800bd26:	4618      	mov	r0, r3
 800bd28:	f7fe fcf6 	bl	800a718 <USBD_LL_Resume>
    break;
 800bd2c:	e010      	b.n	800bd50 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800bd34:	4618      	mov	r0, r3
 800bd36:	f7fe fcd9 	bl	800a6ec <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	699b      	ldr	r3, [r3, #24]
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d005      	beq.n	800bd4e <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bd42:	4b05      	ldr	r3, [pc, #20]	; (800bd58 <HAL_PCDEx_LPM_Callback+0x68>)
 800bd44:	691b      	ldr	r3, [r3, #16]
 800bd46:	4a04      	ldr	r2, [pc, #16]	; (800bd58 <HAL_PCDEx_LPM_Callback+0x68>)
 800bd48:	f043 0306 	orr.w	r3, r3, #6
 800bd4c:	6113      	str	r3, [r2, #16]
    break;
 800bd4e:	bf00      	nop
}
 800bd50:	bf00      	nop
 800bd52:	3708      	adds	r7, #8
 800bd54:	46bd      	mov	sp, r7
 800bd56:	bd80      	pop	{r7, pc}
 800bd58:	e000ed00 	.word	0xe000ed00

0800bd5c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800bd5c:	b480      	push	{r7}
 800bd5e:	b083      	sub	sp, #12
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800bd64:	4b03      	ldr	r3, [pc, #12]	; (800bd74 <USBD_static_malloc+0x18>)
}
 800bd66:	4618      	mov	r0, r3
 800bd68:	370c      	adds	r7, #12
 800bd6a:	46bd      	mov	sp, r7
 800bd6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd70:	4770      	bx	lr
 800bd72:	bf00      	nop
 800bd74:	200003c0 	.word	0x200003c0

0800bd78 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800bd78:	b480      	push	{r7}
 800bd7a:	b083      	sub	sp, #12
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	6078      	str	r0, [r7, #4]

}
 800bd80:	bf00      	nop
 800bd82:	370c      	adds	r7, #12
 800bd84:	46bd      	mov	sp, r7
 800bd86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd8a:	4770      	bx	lr

0800bd8c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800bd8c:	b580      	push	{r7, lr}
 800bd8e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800bd90:	f7f5 fcca 	bl	8001728 <SystemClock_Config>
}
 800bd94:	bf00      	nop
 800bd96:	bd80      	pop	{r7, pc}

0800bd98 <__errno>:
 800bd98:	4b01      	ldr	r3, [pc, #4]	; (800bda0 <__errno+0x8>)
 800bd9a:	6818      	ldr	r0, [r3, #0]
 800bd9c:	4770      	bx	lr
 800bd9e:	bf00      	nop
 800bda0:	20000198 	.word	0x20000198

0800bda4 <__libc_init_array>:
 800bda4:	b570      	push	{r4, r5, r6, lr}
 800bda6:	4d0d      	ldr	r5, [pc, #52]	; (800bddc <__libc_init_array+0x38>)
 800bda8:	4c0d      	ldr	r4, [pc, #52]	; (800bde0 <__libc_init_array+0x3c>)
 800bdaa:	1b64      	subs	r4, r4, r5
 800bdac:	10a4      	asrs	r4, r4, #2
 800bdae:	2600      	movs	r6, #0
 800bdb0:	42a6      	cmp	r6, r4
 800bdb2:	d109      	bne.n	800bdc8 <__libc_init_array+0x24>
 800bdb4:	4d0b      	ldr	r5, [pc, #44]	; (800bde4 <__libc_init_array+0x40>)
 800bdb6:	4c0c      	ldr	r4, [pc, #48]	; (800bde8 <__libc_init_array+0x44>)
 800bdb8:	f003 fcd8 	bl	800f76c <_init>
 800bdbc:	1b64      	subs	r4, r4, r5
 800bdbe:	10a4      	asrs	r4, r4, #2
 800bdc0:	2600      	movs	r6, #0
 800bdc2:	42a6      	cmp	r6, r4
 800bdc4:	d105      	bne.n	800bdd2 <__libc_init_array+0x2e>
 800bdc6:	bd70      	pop	{r4, r5, r6, pc}
 800bdc8:	f855 3b04 	ldr.w	r3, [r5], #4
 800bdcc:	4798      	blx	r3
 800bdce:	3601      	adds	r6, #1
 800bdd0:	e7ee      	b.n	800bdb0 <__libc_init_array+0xc>
 800bdd2:	f855 3b04 	ldr.w	r3, [r5], #4
 800bdd6:	4798      	blx	r3
 800bdd8:	3601      	adds	r6, #1
 800bdda:	e7f2      	b.n	800bdc2 <__libc_init_array+0x1e>
 800bddc:	0800fc38 	.word	0x0800fc38
 800bde0:	0800fc38 	.word	0x0800fc38
 800bde4:	0800fc38 	.word	0x0800fc38
 800bde8:	0800fc3c 	.word	0x0800fc3c

0800bdec <memset>:
 800bdec:	4402      	add	r2, r0
 800bdee:	4603      	mov	r3, r0
 800bdf0:	4293      	cmp	r3, r2
 800bdf2:	d100      	bne.n	800bdf6 <memset+0xa>
 800bdf4:	4770      	bx	lr
 800bdf6:	f803 1b01 	strb.w	r1, [r3], #1
 800bdfa:	e7f9      	b.n	800bdf0 <memset+0x4>

0800bdfc <__cvt>:
 800bdfc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800be00:	ec55 4b10 	vmov	r4, r5, d0
 800be04:	2d00      	cmp	r5, #0
 800be06:	460e      	mov	r6, r1
 800be08:	4619      	mov	r1, r3
 800be0a:	462b      	mov	r3, r5
 800be0c:	bfbb      	ittet	lt
 800be0e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800be12:	461d      	movlt	r5, r3
 800be14:	2300      	movge	r3, #0
 800be16:	232d      	movlt	r3, #45	; 0x2d
 800be18:	700b      	strb	r3, [r1, #0]
 800be1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800be1c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800be20:	4691      	mov	r9, r2
 800be22:	f023 0820 	bic.w	r8, r3, #32
 800be26:	bfbc      	itt	lt
 800be28:	4622      	movlt	r2, r4
 800be2a:	4614      	movlt	r4, r2
 800be2c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800be30:	d005      	beq.n	800be3e <__cvt+0x42>
 800be32:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800be36:	d100      	bne.n	800be3a <__cvt+0x3e>
 800be38:	3601      	adds	r6, #1
 800be3a:	2102      	movs	r1, #2
 800be3c:	e000      	b.n	800be40 <__cvt+0x44>
 800be3e:	2103      	movs	r1, #3
 800be40:	ab03      	add	r3, sp, #12
 800be42:	9301      	str	r3, [sp, #4]
 800be44:	ab02      	add	r3, sp, #8
 800be46:	9300      	str	r3, [sp, #0]
 800be48:	ec45 4b10 	vmov	d0, r4, r5
 800be4c:	4653      	mov	r3, sl
 800be4e:	4632      	mov	r2, r6
 800be50:	f000 fcca 	bl	800c7e8 <_dtoa_r>
 800be54:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800be58:	4607      	mov	r7, r0
 800be5a:	d102      	bne.n	800be62 <__cvt+0x66>
 800be5c:	f019 0f01 	tst.w	r9, #1
 800be60:	d022      	beq.n	800bea8 <__cvt+0xac>
 800be62:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800be66:	eb07 0906 	add.w	r9, r7, r6
 800be6a:	d110      	bne.n	800be8e <__cvt+0x92>
 800be6c:	783b      	ldrb	r3, [r7, #0]
 800be6e:	2b30      	cmp	r3, #48	; 0x30
 800be70:	d10a      	bne.n	800be88 <__cvt+0x8c>
 800be72:	2200      	movs	r2, #0
 800be74:	2300      	movs	r3, #0
 800be76:	4620      	mov	r0, r4
 800be78:	4629      	mov	r1, r5
 800be7a:	f7f4 fe25 	bl	8000ac8 <__aeabi_dcmpeq>
 800be7e:	b918      	cbnz	r0, 800be88 <__cvt+0x8c>
 800be80:	f1c6 0601 	rsb	r6, r6, #1
 800be84:	f8ca 6000 	str.w	r6, [sl]
 800be88:	f8da 3000 	ldr.w	r3, [sl]
 800be8c:	4499      	add	r9, r3
 800be8e:	2200      	movs	r2, #0
 800be90:	2300      	movs	r3, #0
 800be92:	4620      	mov	r0, r4
 800be94:	4629      	mov	r1, r5
 800be96:	f7f4 fe17 	bl	8000ac8 <__aeabi_dcmpeq>
 800be9a:	b108      	cbz	r0, 800bea0 <__cvt+0xa4>
 800be9c:	f8cd 900c 	str.w	r9, [sp, #12]
 800bea0:	2230      	movs	r2, #48	; 0x30
 800bea2:	9b03      	ldr	r3, [sp, #12]
 800bea4:	454b      	cmp	r3, r9
 800bea6:	d307      	bcc.n	800beb8 <__cvt+0xbc>
 800bea8:	9b03      	ldr	r3, [sp, #12]
 800beaa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800beac:	1bdb      	subs	r3, r3, r7
 800beae:	4638      	mov	r0, r7
 800beb0:	6013      	str	r3, [r2, #0]
 800beb2:	b004      	add	sp, #16
 800beb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800beb8:	1c59      	adds	r1, r3, #1
 800beba:	9103      	str	r1, [sp, #12]
 800bebc:	701a      	strb	r2, [r3, #0]
 800bebe:	e7f0      	b.n	800bea2 <__cvt+0xa6>

0800bec0 <__exponent>:
 800bec0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bec2:	4603      	mov	r3, r0
 800bec4:	2900      	cmp	r1, #0
 800bec6:	bfb8      	it	lt
 800bec8:	4249      	neglt	r1, r1
 800beca:	f803 2b02 	strb.w	r2, [r3], #2
 800bece:	bfb4      	ite	lt
 800bed0:	222d      	movlt	r2, #45	; 0x2d
 800bed2:	222b      	movge	r2, #43	; 0x2b
 800bed4:	2909      	cmp	r1, #9
 800bed6:	7042      	strb	r2, [r0, #1]
 800bed8:	dd2a      	ble.n	800bf30 <__exponent+0x70>
 800beda:	f10d 0407 	add.w	r4, sp, #7
 800bede:	46a4      	mov	ip, r4
 800bee0:	270a      	movs	r7, #10
 800bee2:	46a6      	mov	lr, r4
 800bee4:	460a      	mov	r2, r1
 800bee6:	fb91 f6f7 	sdiv	r6, r1, r7
 800beea:	fb07 1516 	mls	r5, r7, r6, r1
 800beee:	3530      	adds	r5, #48	; 0x30
 800bef0:	2a63      	cmp	r2, #99	; 0x63
 800bef2:	f104 34ff 	add.w	r4, r4, #4294967295
 800bef6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800befa:	4631      	mov	r1, r6
 800befc:	dcf1      	bgt.n	800bee2 <__exponent+0x22>
 800befe:	3130      	adds	r1, #48	; 0x30
 800bf00:	f1ae 0502 	sub.w	r5, lr, #2
 800bf04:	f804 1c01 	strb.w	r1, [r4, #-1]
 800bf08:	1c44      	adds	r4, r0, #1
 800bf0a:	4629      	mov	r1, r5
 800bf0c:	4561      	cmp	r1, ip
 800bf0e:	d30a      	bcc.n	800bf26 <__exponent+0x66>
 800bf10:	f10d 0209 	add.w	r2, sp, #9
 800bf14:	eba2 020e 	sub.w	r2, r2, lr
 800bf18:	4565      	cmp	r5, ip
 800bf1a:	bf88      	it	hi
 800bf1c:	2200      	movhi	r2, #0
 800bf1e:	4413      	add	r3, r2
 800bf20:	1a18      	subs	r0, r3, r0
 800bf22:	b003      	add	sp, #12
 800bf24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf26:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bf2a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800bf2e:	e7ed      	b.n	800bf0c <__exponent+0x4c>
 800bf30:	2330      	movs	r3, #48	; 0x30
 800bf32:	3130      	adds	r1, #48	; 0x30
 800bf34:	7083      	strb	r3, [r0, #2]
 800bf36:	70c1      	strb	r1, [r0, #3]
 800bf38:	1d03      	adds	r3, r0, #4
 800bf3a:	e7f1      	b.n	800bf20 <__exponent+0x60>

0800bf3c <_printf_float>:
 800bf3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf40:	ed2d 8b02 	vpush	{d8}
 800bf44:	b08d      	sub	sp, #52	; 0x34
 800bf46:	460c      	mov	r4, r1
 800bf48:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800bf4c:	4616      	mov	r6, r2
 800bf4e:	461f      	mov	r7, r3
 800bf50:	4605      	mov	r5, r0
 800bf52:	f001 fa35 	bl	800d3c0 <_localeconv_r>
 800bf56:	f8d0 a000 	ldr.w	sl, [r0]
 800bf5a:	4650      	mov	r0, sl
 800bf5c:	f7f4 f938 	bl	80001d0 <strlen>
 800bf60:	2300      	movs	r3, #0
 800bf62:	930a      	str	r3, [sp, #40]	; 0x28
 800bf64:	6823      	ldr	r3, [r4, #0]
 800bf66:	9305      	str	r3, [sp, #20]
 800bf68:	f8d8 3000 	ldr.w	r3, [r8]
 800bf6c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800bf70:	3307      	adds	r3, #7
 800bf72:	f023 0307 	bic.w	r3, r3, #7
 800bf76:	f103 0208 	add.w	r2, r3, #8
 800bf7a:	f8c8 2000 	str.w	r2, [r8]
 800bf7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf82:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800bf86:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800bf8a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800bf8e:	9307      	str	r3, [sp, #28]
 800bf90:	f8cd 8018 	str.w	r8, [sp, #24]
 800bf94:	ee08 0a10 	vmov	s16, r0
 800bf98:	4b9f      	ldr	r3, [pc, #636]	; (800c218 <_printf_float+0x2dc>)
 800bf9a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bf9e:	f04f 32ff 	mov.w	r2, #4294967295
 800bfa2:	f7f4 fdc3 	bl	8000b2c <__aeabi_dcmpun>
 800bfa6:	bb88      	cbnz	r0, 800c00c <_printf_float+0xd0>
 800bfa8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bfac:	4b9a      	ldr	r3, [pc, #616]	; (800c218 <_printf_float+0x2dc>)
 800bfae:	f04f 32ff 	mov.w	r2, #4294967295
 800bfb2:	f7f4 fd9d 	bl	8000af0 <__aeabi_dcmple>
 800bfb6:	bb48      	cbnz	r0, 800c00c <_printf_float+0xd0>
 800bfb8:	2200      	movs	r2, #0
 800bfba:	2300      	movs	r3, #0
 800bfbc:	4640      	mov	r0, r8
 800bfbe:	4649      	mov	r1, r9
 800bfc0:	f7f4 fd8c 	bl	8000adc <__aeabi_dcmplt>
 800bfc4:	b110      	cbz	r0, 800bfcc <_printf_float+0x90>
 800bfc6:	232d      	movs	r3, #45	; 0x2d
 800bfc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bfcc:	4b93      	ldr	r3, [pc, #588]	; (800c21c <_printf_float+0x2e0>)
 800bfce:	4894      	ldr	r0, [pc, #592]	; (800c220 <_printf_float+0x2e4>)
 800bfd0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800bfd4:	bf94      	ite	ls
 800bfd6:	4698      	movls	r8, r3
 800bfd8:	4680      	movhi	r8, r0
 800bfda:	2303      	movs	r3, #3
 800bfdc:	6123      	str	r3, [r4, #16]
 800bfde:	9b05      	ldr	r3, [sp, #20]
 800bfe0:	f023 0204 	bic.w	r2, r3, #4
 800bfe4:	6022      	str	r2, [r4, #0]
 800bfe6:	f04f 0900 	mov.w	r9, #0
 800bfea:	9700      	str	r7, [sp, #0]
 800bfec:	4633      	mov	r3, r6
 800bfee:	aa0b      	add	r2, sp, #44	; 0x2c
 800bff0:	4621      	mov	r1, r4
 800bff2:	4628      	mov	r0, r5
 800bff4:	f000 f9d8 	bl	800c3a8 <_printf_common>
 800bff8:	3001      	adds	r0, #1
 800bffa:	f040 8090 	bne.w	800c11e <_printf_float+0x1e2>
 800bffe:	f04f 30ff 	mov.w	r0, #4294967295
 800c002:	b00d      	add	sp, #52	; 0x34
 800c004:	ecbd 8b02 	vpop	{d8}
 800c008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c00c:	4642      	mov	r2, r8
 800c00e:	464b      	mov	r3, r9
 800c010:	4640      	mov	r0, r8
 800c012:	4649      	mov	r1, r9
 800c014:	f7f4 fd8a 	bl	8000b2c <__aeabi_dcmpun>
 800c018:	b140      	cbz	r0, 800c02c <_printf_float+0xf0>
 800c01a:	464b      	mov	r3, r9
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	bfbc      	itt	lt
 800c020:	232d      	movlt	r3, #45	; 0x2d
 800c022:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c026:	487f      	ldr	r0, [pc, #508]	; (800c224 <_printf_float+0x2e8>)
 800c028:	4b7f      	ldr	r3, [pc, #508]	; (800c228 <_printf_float+0x2ec>)
 800c02a:	e7d1      	b.n	800bfd0 <_printf_float+0x94>
 800c02c:	6863      	ldr	r3, [r4, #4]
 800c02e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800c032:	9206      	str	r2, [sp, #24]
 800c034:	1c5a      	adds	r2, r3, #1
 800c036:	d13f      	bne.n	800c0b8 <_printf_float+0x17c>
 800c038:	2306      	movs	r3, #6
 800c03a:	6063      	str	r3, [r4, #4]
 800c03c:	9b05      	ldr	r3, [sp, #20]
 800c03e:	6861      	ldr	r1, [r4, #4]
 800c040:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800c044:	2300      	movs	r3, #0
 800c046:	9303      	str	r3, [sp, #12]
 800c048:	ab0a      	add	r3, sp, #40	; 0x28
 800c04a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800c04e:	ab09      	add	r3, sp, #36	; 0x24
 800c050:	ec49 8b10 	vmov	d0, r8, r9
 800c054:	9300      	str	r3, [sp, #0]
 800c056:	6022      	str	r2, [r4, #0]
 800c058:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c05c:	4628      	mov	r0, r5
 800c05e:	f7ff fecd 	bl	800bdfc <__cvt>
 800c062:	9b06      	ldr	r3, [sp, #24]
 800c064:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c066:	2b47      	cmp	r3, #71	; 0x47
 800c068:	4680      	mov	r8, r0
 800c06a:	d108      	bne.n	800c07e <_printf_float+0x142>
 800c06c:	1cc8      	adds	r0, r1, #3
 800c06e:	db02      	blt.n	800c076 <_printf_float+0x13a>
 800c070:	6863      	ldr	r3, [r4, #4]
 800c072:	4299      	cmp	r1, r3
 800c074:	dd41      	ble.n	800c0fa <_printf_float+0x1be>
 800c076:	f1ab 0b02 	sub.w	fp, fp, #2
 800c07a:	fa5f fb8b 	uxtb.w	fp, fp
 800c07e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c082:	d820      	bhi.n	800c0c6 <_printf_float+0x18a>
 800c084:	3901      	subs	r1, #1
 800c086:	465a      	mov	r2, fp
 800c088:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c08c:	9109      	str	r1, [sp, #36]	; 0x24
 800c08e:	f7ff ff17 	bl	800bec0 <__exponent>
 800c092:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c094:	1813      	adds	r3, r2, r0
 800c096:	2a01      	cmp	r2, #1
 800c098:	4681      	mov	r9, r0
 800c09a:	6123      	str	r3, [r4, #16]
 800c09c:	dc02      	bgt.n	800c0a4 <_printf_float+0x168>
 800c09e:	6822      	ldr	r2, [r4, #0]
 800c0a0:	07d2      	lsls	r2, r2, #31
 800c0a2:	d501      	bpl.n	800c0a8 <_printf_float+0x16c>
 800c0a4:	3301      	adds	r3, #1
 800c0a6:	6123      	str	r3, [r4, #16]
 800c0a8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d09c      	beq.n	800bfea <_printf_float+0xae>
 800c0b0:	232d      	movs	r3, #45	; 0x2d
 800c0b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c0b6:	e798      	b.n	800bfea <_printf_float+0xae>
 800c0b8:	9a06      	ldr	r2, [sp, #24]
 800c0ba:	2a47      	cmp	r2, #71	; 0x47
 800c0bc:	d1be      	bne.n	800c03c <_printf_float+0x100>
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d1bc      	bne.n	800c03c <_printf_float+0x100>
 800c0c2:	2301      	movs	r3, #1
 800c0c4:	e7b9      	b.n	800c03a <_printf_float+0xfe>
 800c0c6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800c0ca:	d118      	bne.n	800c0fe <_printf_float+0x1c2>
 800c0cc:	2900      	cmp	r1, #0
 800c0ce:	6863      	ldr	r3, [r4, #4]
 800c0d0:	dd0b      	ble.n	800c0ea <_printf_float+0x1ae>
 800c0d2:	6121      	str	r1, [r4, #16]
 800c0d4:	b913      	cbnz	r3, 800c0dc <_printf_float+0x1a0>
 800c0d6:	6822      	ldr	r2, [r4, #0]
 800c0d8:	07d0      	lsls	r0, r2, #31
 800c0da:	d502      	bpl.n	800c0e2 <_printf_float+0x1a6>
 800c0dc:	3301      	adds	r3, #1
 800c0de:	440b      	add	r3, r1
 800c0e0:	6123      	str	r3, [r4, #16]
 800c0e2:	65a1      	str	r1, [r4, #88]	; 0x58
 800c0e4:	f04f 0900 	mov.w	r9, #0
 800c0e8:	e7de      	b.n	800c0a8 <_printf_float+0x16c>
 800c0ea:	b913      	cbnz	r3, 800c0f2 <_printf_float+0x1b6>
 800c0ec:	6822      	ldr	r2, [r4, #0]
 800c0ee:	07d2      	lsls	r2, r2, #31
 800c0f0:	d501      	bpl.n	800c0f6 <_printf_float+0x1ba>
 800c0f2:	3302      	adds	r3, #2
 800c0f4:	e7f4      	b.n	800c0e0 <_printf_float+0x1a4>
 800c0f6:	2301      	movs	r3, #1
 800c0f8:	e7f2      	b.n	800c0e0 <_printf_float+0x1a4>
 800c0fa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800c0fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c100:	4299      	cmp	r1, r3
 800c102:	db05      	blt.n	800c110 <_printf_float+0x1d4>
 800c104:	6823      	ldr	r3, [r4, #0]
 800c106:	6121      	str	r1, [r4, #16]
 800c108:	07d8      	lsls	r0, r3, #31
 800c10a:	d5ea      	bpl.n	800c0e2 <_printf_float+0x1a6>
 800c10c:	1c4b      	adds	r3, r1, #1
 800c10e:	e7e7      	b.n	800c0e0 <_printf_float+0x1a4>
 800c110:	2900      	cmp	r1, #0
 800c112:	bfd4      	ite	le
 800c114:	f1c1 0202 	rsble	r2, r1, #2
 800c118:	2201      	movgt	r2, #1
 800c11a:	4413      	add	r3, r2
 800c11c:	e7e0      	b.n	800c0e0 <_printf_float+0x1a4>
 800c11e:	6823      	ldr	r3, [r4, #0]
 800c120:	055a      	lsls	r2, r3, #21
 800c122:	d407      	bmi.n	800c134 <_printf_float+0x1f8>
 800c124:	6923      	ldr	r3, [r4, #16]
 800c126:	4642      	mov	r2, r8
 800c128:	4631      	mov	r1, r6
 800c12a:	4628      	mov	r0, r5
 800c12c:	47b8      	blx	r7
 800c12e:	3001      	adds	r0, #1
 800c130:	d12c      	bne.n	800c18c <_printf_float+0x250>
 800c132:	e764      	b.n	800bffe <_printf_float+0xc2>
 800c134:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c138:	f240 80e0 	bls.w	800c2fc <_printf_float+0x3c0>
 800c13c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c140:	2200      	movs	r2, #0
 800c142:	2300      	movs	r3, #0
 800c144:	f7f4 fcc0 	bl	8000ac8 <__aeabi_dcmpeq>
 800c148:	2800      	cmp	r0, #0
 800c14a:	d034      	beq.n	800c1b6 <_printf_float+0x27a>
 800c14c:	4a37      	ldr	r2, [pc, #220]	; (800c22c <_printf_float+0x2f0>)
 800c14e:	2301      	movs	r3, #1
 800c150:	4631      	mov	r1, r6
 800c152:	4628      	mov	r0, r5
 800c154:	47b8      	blx	r7
 800c156:	3001      	adds	r0, #1
 800c158:	f43f af51 	beq.w	800bffe <_printf_float+0xc2>
 800c15c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c160:	429a      	cmp	r2, r3
 800c162:	db02      	blt.n	800c16a <_printf_float+0x22e>
 800c164:	6823      	ldr	r3, [r4, #0]
 800c166:	07d8      	lsls	r0, r3, #31
 800c168:	d510      	bpl.n	800c18c <_printf_float+0x250>
 800c16a:	ee18 3a10 	vmov	r3, s16
 800c16e:	4652      	mov	r2, sl
 800c170:	4631      	mov	r1, r6
 800c172:	4628      	mov	r0, r5
 800c174:	47b8      	blx	r7
 800c176:	3001      	adds	r0, #1
 800c178:	f43f af41 	beq.w	800bffe <_printf_float+0xc2>
 800c17c:	f04f 0800 	mov.w	r8, #0
 800c180:	f104 091a 	add.w	r9, r4, #26
 800c184:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c186:	3b01      	subs	r3, #1
 800c188:	4543      	cmp	r3, r8
 800c18a:	dc09      	bgt.n	800c1a0 <_printf_float+0x264>
 800c18c:	6823      	ldr	r3, [r4, #0]
 800c18e:	079b      	lsls	r3, r3, #30
 800c190:	f100 8105 	bmi.w	800c39e <_printf_float+0x462>
 800c194:	68e0      	ldr	r0, [r4, #12]
 800c196:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c198:	4298      	cmp	r0, r3
 800c19a:	bfb8      	it	lt
 800c19c:	4618      	movlt	r0, r3
 800c19e:	e730      	b.n	800c002 <_printf_float+0xc6>
 800c1a0:	2301      	movs	r3, #1
 800c1a2:	464a      	mov	r2, r9
 800c1a4:	4631      	mov	r1, r6
 800c1a6:	4628      	mov	r0, r5
 800c1a8:	47b8      	blx	r7
 800c1aa:	3001      	adds	r0, #1
 800c1ac:	f43f af27 	beq.w	800bffe <_printf_float+0xc2>
 800c1b0:	f108 0801 	add.w	r8, r8, #1
 800c1b4:	e7e6      	b.n	800c184 <_printf_float+0x248>
 800c1b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	dc39      	bgt.n	800c230 <_printf_float+0x2f4>
 800c1bc:	4a1b      	ldr	r2, [pc, #108]	; (800c22c <_printf_float+0x2f0>)
 800c1be:	2301      	movs	r3, #1
 800c1c0:	4631      	mov	r1, r6
 800c1c2:	4628      	mov	r0, r5
 800c1c4:	47b8      	blx	r7
 800c1c6:	3001      	adds	r0, #1
 800c1c8:	f43f af19 	beq.w	800bffe <_printf_float+0xc2>
 800c1cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c1d0:	4313      	orrs	r3, r2
 800c1d2:	d102      	bne.n	800c1da <_printf_float+0x29e>
 800c1d4:	6823      	ldr	r3, [r4, #0]
 800c1d6:	07d9      	lsls	r1, r3, #31
 800c1d8:	d5d8      	bpl.n	800c18c <_printf_float+0x250>
 800c1da:	ee18 3a10 	vmov	r3, s16
 800c1de:	4652      	mov	r2, sl
 800c1e0:	4631      	mov	r1, r6
 800c1e2:	4628      	mov	r0, r5
 800c1e4:	47b8      	blx	r7
 800c1e6:	3001      	adds	r0, #1
 800c1e8:	f43f af09 	beq.w	800bffe <_printf_float+0xc2>
 800c1ec:	f04f 0900 	mov.w	r9, #0
 800c1f0:	f104 0a1a 	add.w	sl, r4, #26
 800c1f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c1f6:	425b      	negs	r3, r3
 800c1f8:	454b      	cmp	r3, r9
 800c1fa:	dc01      	bgt.n	800c200 <_printf_float+0x2c4>
 800c1fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c1fe:	e792      	b.n	800c126 <_printf_float+0x1ea>
 800c200:	2301      	movs	r3, #1
 800c202:	4652      	mov	r2, sl
 800c204:	4631      	mov	r1, r6
 800c206:	4628      	mov	r0, r5
 800c208:	47b8      	blx	r7
 800c20a:	3001      	adds	r0, #1
 800c20c:	f43f aef7 	beq.w	800bffe <_printf_float+0xc2>
 800c210:	f109 0901 	add.w	r9, r9, #1
 800c214:	e7ee      	b.n	800c1f4 <_printf_float+0x2b8>
 800c216:	bf00      	nop
 800c218:	7fefffff 	.word	0x7fefffff
 800c21c:	0800f814 	.word	0x0800f814
 800c220:	0800f818 	.word	0x0800f818
 800c224:	0800f820 	.word	0x0800f820
 800c228:	0800f81c 	.word	0x0800f81c
 800c22c:	0800f824 	.word	0x0800f824
 800c230:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c232:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c234:	429a      	cmp	r2, r3
 800c236:	bfa8      	it	ge
 800c238:	461a      	movge	r2, r3
 800c23a:	2a00      	cmp	r2, #0
 800c23c:	4691      	mov	r9, r2
 800c23e:	dc37      	bgt.n	800c2b0 <_printf_float+0x374>
 800c240:	f04f 0b00 	mov.w	fp, #0
 800c244:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c248:	f104 021a 	add.w	r2, r4, #26
 800c24c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c24e:	9305      	str	r3, [sp, #20]
 800c250:	eba3 0309 	sub.w	r3, r3, r9
 800c254:	455b      	cmp	r3, fp
 800c256:	dc33      	bgt.n	800c2c0 <_printf_float+0x384>
 800c258:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c25c:	429a      	cmp	r2, r3
 800c25e:	db3b      	blt.n	800c2d8 <_printf_float+0x39c>
 800c260:	6823      	ldr	r3, [r4, #0]
 800c262:	07da      	lsls	r2, r3, #31
 800c264:	d438      	bmi.n	800c2d8 <_printf_float+0x39c>
 800c266:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c268:	9b05      	ldr	r3, [sp, #20]
 800c26a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c26c:	1ad3      	subs	r3, r2, r3
 800c26e:	eba2 0901 	sub.w	r9, r2, r1
 800c272:	4599      	cmp	r9, r3
 800c274:	bfa8      	it	ge
 800c276:	4699      	movge	r9, r3
 800c278:	f1b9 0f00 	cmp.w	r9, #0
 800c27c:	dc35      	bgt.n	800c2ea <_printf_float+0x3ae>
 800c27e:	f04f 0800 	mov.w	r8, #0
 800c282:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c286:	f104 0a1a 	add.w	sl, r4, #26
 800c28a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c28e:	1a9b      	subs	r3, r3, r2
 800c290:	eba3 0309 	sub.w	r3, r3, r9
 800c294:	4543      	cmp	r3, r8
 800c296:	f77f af79 	ble.w	800c18c <_printf_float+0x250>
 800c29a:	2301      	movs	r3, #1
 800c29c:	4652      	mov	r2, sl
 800c29e:	4631      	mov	r1, r6
 800c2a0:	4628      	mov	r0, r5
 800c2a2:	47b8      	blx	r7
 800c2a4:	3001      	adds	r0, #1
 800c2a6:	f43f aeaa 	beq.w	800bffe <_printf_float+0xc2>
 800c2aa:	f108 0801 	add.w	r8, r8, #1
 800c2ae:	e7ec      	b.n	800c28a <_printf_float+0x34e>
 800c2b0:	4613      	mov	r3, r2
 800c2b2:	4631      	mov	r1, r6
 800c2b4:	4642      	mov	r2, r8
 800c2b6:	4628      	mov	r0, r5
 800c2b8:	47b8      	blx	r7
 800c2ba:	3001      	adds	r0, #1
 800c2bc:	d1c0      	bne.n	800c240 <_printf_float+0x304>
 800c2be:	e69e      	b.n	800bffe <_printf_float+0xc2>
 800c2c0:	2301      	movs	r3, #1
 800c2c2:	4631      	mov	r1, r6
 800c2c4:	4628      	mov	r0, r5
 800c2c6:	9205      	str	r2, [sp, #20]
 800c2c8:	47b8      	blx	r7
 800c2ca:	3001      	adds	r0, #1
 800c2cc:	f43f ae97 	beq.w	800bffe <_printf_float+0xc2>
 800c2d0:	9a05      	ldr	r2, [sp, #20]
 800c2d2:	f10b 0b01 	add.w	fp, fp, #1
 800c2d6:	e7b9      	b.n	800c24c <_printf_float+0x310>
 800c2d8:	ee18 3a10 	vmov	r3, s16
 800c2dc:	4652      	mov	r2, sl
 800c2de:	4631      	mov	r1, r6
 800c2e0:	4628      	mov	r0, r5
 800c2e2:	47b8      	blx	r7
 800c2e4:	3001      	adds	r0, #1
 800c2e6:	d1be      	bne.n	800c266 <_printf_float+0x32a>
 800c2e8:	e689      	b.n	800bffe <_printf_float+0xc2>
 800c2ea:	9a05      	ldr	r2, [sp, #20]
 800c2ec:	464b      	mov	r3, r9
 800c2ee:	4442      	add	r2, r8
 800c2f0:	4631      	mov	r1, r6
 800c2f2:	4628      	mov	r0, r5
 800c2f4:	47b8      	blx	r7
 800c2f6:	3001      	adds	r0, #1
 800c2f8:	d1c1      	bne.n	800c27e <_printf_float+0x342>
 800c2fa:	e680      	b.n	800bffe <_printf_float+0xc2>
 800c2fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c2fe:	2a01      	cmp	r2, #1
 800c300:	dc01      	bgt.n	800c306 <_printf_float+0x3ca>
 800c302:	07db      	lsls	r3, r3, #31
 800c304:	d538      	bpl.n	800c378 <_printf_float+0x43c>
 800c306:	2301      	movs	r3, #1
 800c308:	4642      	mov	r2, r8
 800c30a:	4631      	mov	r1, r6
 800c30c:	4628      	mov	r0, r5
 800c30e:	47b8      	blx	r7
 800c310:	3001      	adds	r0, #1
 800c312:	f43f ae74 	beq.w	800bffe <_printf_float+0xc2>
 800c316:	ee18 3a10 	vmov	r3, s16
 800c31a:	4652      	mov	r2, sl
 800c31c:	4631      	mov	r1, r6
 800c31e:	4628      	mov	r0, r5
 800c320:	47b8      	blx	r7
 800c322:	3001      	adds	r0, #1
 800c324:	f43f ae6b 	beq.w	800bffe <_printf_float+0xc2>
 800c328:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c32c:	2200      	movs	r2, #0
 800c32e:	2300      	movs	r3, #0
 800c330:	f7f4 fbca 	bl	8000ac8 <__aeabi_dcmpeq>
 800c334:	b9d8      	cbnz	r0, 800c36e <_printf_float+0x432>
 800c336:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c338:	f108 0201 	add.w	r2, r8, #1
 800c33c:	3b01      	subs	r3, #1
 800c33e:	4631      	mov	r1, r6
 800c340:	4628      	mov	r0, r5
 800c342:	47b8      	blx	r7
 800c344:	3001      	adds	r0, #1
 800c346:	d10e      	bne.n	800c366 <_printf_float+0x42a>
 800c348:	e659      	b.n	800bffe <_printf_float+0xc2>
 800c34a:	2301      	movs	r3, #1
 800c34c:	4652      	mov	r2, sl
 800c34e:	4631      	mov	r1, r6
 800c350:	4628      	mov	r0, r5
 800c352:	47b8      	blx	r7
 800c354:	3001      	adds	r0, #1
 800c356:	f43f ae52 	beq.w	800bffe <_printf_float+0xc2>
 800c35a:	f108 0801 	add.w	r8, r8, #1
 800c35e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c360:	3b01      	subs	r3, #1
 800c362:	4543      	cmp	r3, r8
 800c364:	dcf1      	bgt.n	800c34a <_printf_float+0x40e>
 800c366:	464b      	mov	r3, r9
 800c368:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c36c:	e6dc      	b.n	800c128 <_printf_float+0x1ec>
 800c36e:	f04f 0800 	mov.w	r8, #0
 800c372:	f104 0a1a 	add.w	sl, r4, #26
 800c376:	e7f2      	b.n	800c35e <_printf_float+0x422>
 800c378:	2301      	movs	r3, #1
 800c37a:	4642      	mov	r2, r8
 800c37c:	e7df      	b.n	800c33e <_printf_float+0x402>
 800c37e:	2301      	movs	r3, #1
 800c380:	464a      	mov	r2, r9
 800c382:	4631      	mov	r1, r6
 800c384:	4628      	mov	r0, r5
 800c386:	47b8      	blx	r7
 800c388:	3001      	adds	r0, #1
 800c38a:	f43f ae38 	beq.w	800bffe <_printf_float+0xc2>
 800c38e:	f108 0801 	add.w	r8, r8, #1
 800c392:	68e3      	ldr	r3, [r4, #12]
 800c394:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c396:	1a5b      	subs	r3, r3, r1
 800c398:	4543      	cmp	r3, r8
 800c39a:	dcf0      	bgt.n	800c37e <_printf_float+0x442>
 800c39c:	e6fa      	b.n	800c194 <_printf_float+0x258>
 800c39e:	f04f 0800 	mov.w	r8, #0
 800c3a2:	f104 0919 	add.w	r9, r4, #25
 800c3a6:	e7f4      	b.n	800c392 <_printf_float+0x456>

0800c3a8 <_printf_common>:
 800c3a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c3ac:	4616      	mov	r6, r2
 800c3ae:	4699      	mov	r9, r3
 800c3b0:	688a      	ldr	r2, [r1, #8]
 800c3b2:	690b      	ldr	r3, [r1, #16]
 800c3b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c3b8:	4293      	cmp	r3, r2
 800c3ba:	bfb8      	it	lt
 800c3bc:	4613      	movlt	r3, r2
 800c3be:	6033      	str	r3, [r6, #0]
 800c3c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c3c4:	4607      	mov	r7, r0
 800c3c6:	460c      	mov	r4, r1
 800c3c8:	b10a      	cbz	r2, 800c3ce <_printf_common+0x26>
 800c3ca:	3301      	adds	r3, #1
 800c3cc:	6033      	str	r3, [r6, #0]
 800c3ce:	6823      	ldr	r3, [r4, #0]
 800c3d0:	0699      	lsls	r1, r3, #26
 800c3d2:	bf42      	ittt	mi
 800c3d4:	6833      	ldrmi	r3, [r6, #0]
 800c3d6:	3302      	addmi	r3, #2
 800c3d8:	6033      	strmi	r3, [r6, #0]
 800c3da:	6825      	ldr	r5, [r4, #0]
 800c3dc:	f015 0506 	ands.w	r5, r5, #6
 800c3e0:	d106      	bne.n	800c3f0 <_printf_common+0x48>
 800c3e2:	f104 0a19 	add.w	sl, r4, #25
 800c3e6:	68e3      	ldr	r3, [r4, #12]
 800c3e8:	6832      	ldr	r2, [r6, #0]
 800c3ea:	1a9b      	subs	r3, r3, r2
 800c3ec:	42ab      	cmp	r3, r5
 800c3ee:	dc26      	bgt.n	800c43e <_printf_common+0x96>
 800c3f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c3f4:	1e13      	subs	r3, r2, #0
 800c3f6:	6822      	ldr	r2, [r4, #0]
 800c3f8:	bf18      	it	ne
 800c3fa:	2301      	movne	r3, #1
 800c3fc:	0692      	lsls	r2, r2, #26
 800c3fe:	d42b      	bmi.n	800c458 <_printf_common+0xb0>
 800c400:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c404:	4649      	mov	r1, r9
 800c406:	4638      	mov	r0, r7
 800c408:	47c0      	blx	r8
 800c40a:	3001      	adds	r0, #1
 800c40c:	d01e      	beq.n	800c44c <_printf_common+0xa4>
 800c40e:	6823      	ldr	r3, [r4, #0]
 800c410:	68e5      	ldr	r5, [r4, #12]
 800c412:	6832      	ldr	r2, [r6, #0]
 800c414:	f003 0306 	and.w	r3, r3, #6
 800c418:	2b04      	cmp	r3, #4
 800c41a:	bf08      	it	eq
 800c41c:	1aad      	subeq	r5, r5, r2
 800c41e:	68a3      	ldr	r3, [r4, #8]
 800c420:	6922      	ldr	r2, [r4, #16]
 800c422:	bf0c      	ite	eq
 800c424:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c428:	2500      	movne	r5, #0
 800c42a:	4293      	cmp	r3, r2
 800c42c:	bfc4      	itt	gt
 800c42e:	1a9b      	subgt	r3, r3, r2
 800c430:	18ed      	addgt	r5, r5, r3
 800c432:	2600      	movs	r6, #0
 800c434:	341a      	adds	r4, #26
 800c436:	42b5      	cmp	r5, r6
 800c438:	d11a      	bne.n	800c470 <_printf_common+0xc8>
 800c43a:	2000      	movs	r0, #0
 800c43c:	e008      	b.n	800c450 <_printf_common+0xa8>
 800c43e:	2301      	movs	r3, #1
 800c440:	4652      	mov	r2, sl
 800c442:	4649      	mov	r1, r9
 800c444:	4638      	mov	r0, r7
 800c446:	47c0      	blx	r8
 800c448:	3001      	adds	r0, #1
 800c44a:	d103      	bne.n	800c454 <_printf_common+0xac>
 800c44c:	f04f 30ff 	mov.w	r0, #4294967295
 800c450:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c454:	3501      	adds	r5, #1
 800c456:	e7c6      	b.n	800c3e6 <_printf_common+0x3e>
 800c458:	18e1      	adds	r1, r4, r3
 800c45a:	1c5a      	adds	r2, r3, #1
 800c45c:	2030      	movs	r0, #48	; 0x30
 800c45e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c462:	4422      	add	r2, r4
 800c464:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c468:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c46c:	3302      	adds	r3, #2
 800c46e:	e7c7      	b.n	800c400 <_printf_common+0x58>
 800c470:	2301      	movs	r3, #1
 800c472:	4622      	mov	r2, r4
 800c474:	4649      	mov	r1, r9
 800c476:	4638      	mov	r0, r7
 800c478:	47c0      	blx	r8
 800c47a:	3001      	adds	r0, #1
 800c47c:	d0e6      	beq.n	800c44c <_printf_common+0xa4>
 800c47e:	3601      	adds	r6, #1
 800c480:	e7d9      	b.n	800c436 <_printf_common+0x8e>
	...

0800c484 <_printf_i>:
 800c484:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c488:	460c      	mov	r4, r1
 800c48a:	4691      	mov	r9, r2
 800c48c:	7e27      	ldrb	r7, [r4, #24]
 800c48e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c490:	2f78      	cmp	r7, #120	; 0x78
 800c492:	4680      	mov	r8, r0
 800c494:	469a      	mov	sl, r3
 800c496:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c49a:	d807      	bhi.n	800c4ac <_printf_i+0x28>
 800c49c:	2f62      	cmp	r7, #98	; 0x62
 800c49e:	d80a      	bhi.n	800c4b6 <_printf_i+0x32>
 800c4a0:	2f00      	cmp	r7, #0
 800c4a2:	f000 80d8 	beq.w	800c656 <_printf_i+0x1d2>
 800c4a6:	2f58      	cmp	r7, #88	; 0x58
 800c4a8:	f000 80a3 	beq.w	800c5f2 <_printf_i+0x16e>
 800c4ac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c4b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c4b4:	e03a      	b.n	800c52c <_printf_i+0xa8>
 800c4b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c4ba:	2b15      	cmp	r3, #21
 800c4bc:	d8f6      	bhi.n	800c4ac <_printf_i+0x28>
 800c4be:	a001      	add	r0, pc, #4	; (adr r0, 800c4c4 <_printf_i+0x40>)
 800c4c0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800c4c4:	0800c51d 	.word	0x0800c51d
 800c4c8:	0800c531 	.word	0x0800c531
 800c4cc:	0800c4ad 	.word	0x0800c4ad
 800c4d0:	0800c4ad 	.word	0x0800c4ad
 800c4d4:	0800c4ad 	.word	0x0800c4ad
 800c4d8:	0800c4ad 	.word	0x0800c4ad
 800c4dc:	0800c531 	.word	0x0800c531
 800c4e0:	0800c4ad 	.word	0x0800c4ad
 800c4e4:	0800c4ad 	.word	0x0800c4ad
 800c4e8:	0800c4ad 	.word	0x0800c4ad
 800c4ec:	0800c4ad 	.word	0x0800c4ad
 800c4f0:	0800c63d 	.word	0x0800c63d
 800c4f4:	0800c561 	.word	0x0800c561
 800c4f8:	0800c61f 	.word	0x0800c61f
 800c4fc:	0800c4ad 	.word	0x0800c4ad
 800c500:	0800c4ad 	.word	0x0800c4ad
 800c504:	0800c65f 	.word	0x0800c65f
 800c508:	0800c4ad 	.word	0x0800c4ad
 800c50c:	0800c561 	.word	0x0800c561
 800c510:	0800c4ad 	.word	0x0800c4ad
 800c514:	0800c4ad 	.word	0x0800c4ad
 800c518:	0800c627 	.word	0x0800c627
 800c51c:	680b      	ldr	r3, [r1, #0]
 800c51e:	1d1a      	adds	r2, r3, #4
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	600a      	str	r2, [r1, #0]
 800c524:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c528:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c52c:	2301      	movs	r3, #1
 800c52e:	e0a3      	b.n	800c678 <_printf_i+0x1f4>
 800c530:	6825      	ldr	r5, [r4, #0]
 800c532:	6808      	ldr	r0, [r1, #0]
 800c534:	062e      	lsls	r6, r5, #24
 800c536:	f100 0304 	add.w	r3, r0, #4
 800c53a:	d50a      	bpl.n	800c552 <_printf_i+0xce>
 800c53c:	6805      	ldr	r5, [r0, #0]
 800c53e:	600b      	str	r3, [r1, #0]
 800c540:	2d00      	cmp	r5, #0
 800c542:	da03      	bge.n	800c54c <_printf_i+0xc8>
 800c544:	232d      	movs	r3, #45	; 0x2d
 800c546:	426d      	negs	r5, r5
 800c548:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c54c:	485e      	ldr	r0, [pc, #376]	; (800c6c8 <_printf_i+0x244>)
 800c54e:	230a      	movs	r3, #10
 800c550:	e019      	b.n	800c586 <_printf_i+0x102>
 800c552:	f015 0f40 	tst.w	r5, #64	; 0x40
 800c556:	6805      	ldr	r5, [r0, #0]
 800c558:	600b      	str	r3, [r1, #0]
 800c55a:	bf18      	it	ne
 800c55c:	b22d      	sxthne	r5, r5
 800c55e:	e7ef      	b.n	800c540 <_printf_i+0xbc>
 800c560:	680b      	ldr	r3, [r1, #0]
 800c562:	6825      	ldr	r5, [r4, #0]
 800c564:	1d18      	adds	r0, r3, #4
 800c566:	6008      	str	r0, [r1, #0]
 800c568:	0628      	lsls	r0, r5, #24
 800c56a:	d501      	bpl.n	800c570 <_printf_i+0xec>
 800c56c:	681d      	ldr	r5, [r3, #0]
 800c56e:	e002      	b.n	800c576 <_printf_i+0xf2>
 800c570:	0669      	lsls	r1, r5, #25
 800c572:	d5fb      	bpl.n	800c56c <_printf_i+0xe8>
 800c574:	881d      	ldrh	r5, [r3, #0]
 800c576:	4854      	ldr	r0, [pc, #336]	; (800c6c8 <_printf_i+0x244>)
 800c578:	2f6f      	cmp	r7, #111	; 0x6f
 800c57a:	bf0c      	ite	eq
 800c57c:	2308      	moveq	r3, #8
 800c57e:	230a      	movne	r3, #10
 800c580:	2100      	movs	r1, #0
 800c582:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c586:	6866      	ldr	r6, [r4, #4]
 800c588:	60a6      	str	r6, [r4, #8]
 800c58a:	2e00      	cmp	r6, #0
 800c58c:	bfa2      	ittt	ge
 800c58e:	6821      	ldrge	r1, [r4, #0]
 800c590:	f021 0104 	bicge.w	r1, r1, #4
 800c594:	6021      	strge	r1, [r4, #0]
 800c596:	b90d      	cbnz	r5, 800c59c <_printf_i+0x118>
 800c598:	2e00      	cmp	r6, #0
 800c59a:	d04d      	beq.n	800c638 <_printf_i+0x1b4>
 800c59c:	4616      	mov	r6, r2
 800c59e:	fbb5 f1f3 	udiv	r1, r5, r3
 800c5a2:	fb03 5711 	mls	r7, r3, r1, r5
 800c5a6:	5dc7      	ldrb	r7, [r0, r7]
 800c5a8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c5ac:	462f      	mov	r7, r5
 800c5ae:	42bb      	cmp	r3, r7
 800c5b0:	460d      	mov	r5, r1
 800c5b2:	d9f4      	bls.n	800c59e <_printf_i+0x11a>
 800c5b4:	2b08      	cmp	r3, #8
 800c5b6:	d10b      	bne.n	800c5d0 <_printf_i+0x14c>
 800c5b8:	6823      	ldr	r3, [r4, #0]
 800c5ba:	07df      	lsls	r7, r3, #31
 800c5bc:	d508      	bpl.n	800c5d0 <_printf_i+0x14c>
 800c5be:	6923      	ldr	r3, [r4, #16]
 800c5c0:	6861      	ldr	r1, [r4, #4]
 800c5c2:	4299      	cmp	r1, r3
 800c5c4:	bfde      	ittt	le
 800c5c6:	2330      	movle	r3, #48	; 0x30
 800c5c8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c5cc:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c5d0:	1b92      	subs	r2, r2, r6
 800c5d2:	6122      	str	r2, [r4, #16]
 800c5d4:	f8cd a000 	str.w	sl, [sp]
 800c5d8:	464b      	mov	r3, r9
 800c5da:	aa03      	add	r2, sp, #12
 800c5dc:	4621      	mov	r1, r4
 800c5de:	4640      	mov	r0, r8
 800c5e0:	f7ff fee2 	bl	800c3a8 <_printf_common>
 800c5e4:	3001      	adds	r0, #1
 800c5e6:	d14c      	bne.n	800c682 <_printf_i+0x1fe>
 800c5e8:	f04f 30ff 	mov.w	r0, #4294967295
 800c5ec:	b004      	add	sp, #16
 800c5ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5f2:	4835      	ldr	r0, [pc, #212]	; (800c6c8 <_printf_i+0x244>)
 800c5f4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c5f8:	6823      	ldr	r3, [r4, #0]
 800c5fa:	680e      	ldr	r6, [r1, #0]
 800c5fc:	061f      	lsls	r7, r3, #24
 800c5fe:	f856 5b04 	ldr.w	r5, [r6], #4
 800c602:	600e      	str	r6, [r1, #0]
 800c604:	d514      	bpl.n	800c630 <_printf_i+0x1ac>
 800c606:	07d9      	lsls	r1, r3, #31
 800c608:	bf44      	itt	mi
 800c60a:	f043 0320 	orrmi.w	r3, r3, #32
 800c60e:	6023      	strmi	r3, [r4, #0]
 800c610:	b91d      	cbnz	r5, 800c61a <_printf_i+0x196>
 800c612:	6823      	ldr	r3, [r4, #0]
 800c614:	f023 0320 	bic.w	r3, r3, #32
 800c618:	6023      	str	r3, [r4, #0]
 800c61a:	2310      	movs	r3, #16
 800c61c:	e7b0      	b.n	800c580 <_printf_i+0xfc>
 800c61e:	6823      	ldr	r3, [r4, #0]
 800c620:	f043 0320 	orr.w	r3, r3, #32
 800c624:	6023      	str	r3, [r4, #0]
 800c626:	2378      	movs	r3, #120	; 0x78
 800c628:	4828      	ldr	r0, [pc, #160]	; (800c6cc <_printf_i+0x248>)
 800c62a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c62e:	e7e3      	b.n	800c5f8 <_printf_i+0x174>
 800c630:	065e      	lsls	r6, r3, #25
 800c632:	bf48      	it	mi
 800c634:	b2ad      	uxthmi	r5, r5
 800c636:	e7e6      	b.n	800c606 <_printf_i+0x182>
 800c638:	4616      	mov	r6, r2
 800c63a:	e7bb      	b.n	800c5b4 <_printf_i+0x130>
 800c63c:	680b      	ldr	r3, [r1, #0]
 800c63e:	6826      	ldr	r6, [r4, #0]
 800c640:	6960      	ldr	r0, [r4, #20]
 800c642:	1d1d      	adds	r5, r3, #4
 800c644:	600d      	str	r5, [r1, #0]
 800c646:	0635      	lsls	r5, r6, #24
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	d501      	bpl.n	800c650 <_printf_i+0x1cc>
 800c64c:	6018      	str	r0, [r3, #0]
 800c64e:	e002      	b.n	800c656 <_printf_i+0x1d2>
 800c650:	0671      	lsls	r1, r6, #25
 800c652:	d5fb      	bpl.n	800c64c <_printf_i+0x1c8>
 800c654:	8018      	strh	r0, [r3, #0]
 800c656:	2300      	movs	r3, #0
 800c658:	6123      	str	r3, [r4, #16]
 800c65a:	4616      	mov	r6, r2
 800c65c:	e7ba      	b.n	800c5d4 <_printf_i+0x150>
 800c65e:	680b      	ldr	r3, [r1, #0]
 800c660:	1d1a      	adds	r2, r3, #4
 800c662:	600a      	str	r2, [r1, #0]
 800c664:	681e      	ldr	r6, [r3, #0]
 800c666:	6862      	ldr	r2, [r4, #4]
 800c668:	2100      	movs	r1, #0
 800c66a:	4630      	mov	r0, r6
 800c66c:	f7f3 fdb8 	bl	80001e0 <memchr>
 800c670:	b108      	cbz	r0, 800c676 <_printf_i+0x1f2>
 800c672:	1b80      	subs	r0, r0, r6
 800c674:	6060      	str	r0, [r4, #4]
 800c676:	6863      	ldr	r3, [r4, #4]
 800c678:	6123      	str	r3, [r4, #16]
 800c67a:	2300      	movs	r3, #0
 800c67c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c680:	e7a8      	b.n	800c5d4 <_printf_i+0x150>
 800c682:	6923      	ldr	r3, [r4, #16]
 800c684:	4632      	mov	r2, r6
 800c686:	4649      	mov	r1, r9
 800c688:	4640      	mov	r0, r8
 800c68a:	47d0      	blx	sl
 800c68c:	3001      	adds	r0, #1
 800c68e:	d0ab      	beq.n	800c5e8 <_printf_i+0x164>
 800c690:	6823      	ldr	r3, [r4, #0]
 800c692:	079b      	lsls	r3, r3, #30
 800c694:	d413      	bmi.n	800c6be <_printf_i+0x23a>
 800c696:	68e0      	ldr	r0, [r4, #12]
 800c698:	9b03      	ldr	r3, [sp, #12]
 800c69a:	4298      	cmp	r0, r3
 800c69c:	bfb8      	it	lt
 800c69e:	4618      	movlt	r0, r3
 800c6a0:	e7a4      	b.n	800c5ec <_printf_i+0x168>
 800c6a2:	2301      	movs	r3, #1
 800c6a4:	4632      	mov	r2, r6
 800c6a6:	4649      	mov	r1, r9
 800c6a8:	4640      	mov	r0, r8
 800c6aa:	47d0      	blx	sl
 800c6ac:	3001      	adds	r0, #1
 800c6ae:	d09b      	beq.n	800c5e8 <_printf_i+0x164>
 800c6b0:	3501      	adds	r5, #1
 800c6b2:	68e3      	ldr	r3, [r4, #12]
 800c6b4:	9903      	ldr	r1, [sp, #12]
 800c6b6:	1a5b      	subs	r3, r3, r1
 800c6b8:	42ab      	cmp	r3, r5
 800c6ba:	dcf2      	bgt.n	800c6a2 <_printf_i+0x21e>
 800c6bc:	e7eb      	b.n	800c696 <_printf_i+0x212>
 800c6be:	2500      	movs	r5, #0
 800c6c0:	f104 0619 	add.w	r6, r4, #25
 800c6c4:	e7f5      	b.n	800c6b2 <_printf_i+0x22e>
 800c6c6:	bf00      	nop
 800c6c8:	0800f826 	.word	0x0800f826
 800c6cc:	0800f837 	.word	0x0800f837

0800c6d0 <quorem>:
 800c6d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6d4:	6903      	ldr	r3, [r0, #16]
 800c6d6:	690c      	ldr	r4, [r1, #16]
 800c6d8:	42a3      	cmp	r3, r4
 800c6da:	4607      	mov	r7, r0
 800c6dc:	f2c0 8081 	blt.w	800c7e2 <quorem+0x112>
 800c6e0:	3c01      	subs	r4, #1
 800c6e2:	f101 0814 	add.w	r8, r1, #20
 800c6e6:	f100 0514 	add.w	r5, r0, #20
 800c6ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c6ee:	9301      	str	r3, [sp, #4]
 800c6f0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c6f4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c6f8:	3301      	adds	r3, #1
 800c6fa:	429a      	cmp	r2, r3
 800c6fc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c700:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c704:	fbb2 f6f3 	udiv	r6, r2, r3
 800c708:	d331      	bcc.n	800c76e <quorem+0x9e>
 800c70a:	f04f 0e00 	mov.w	lr, #0
 800c70e:	4640      	mov	r0, r8
 800c710:	46ac      	mov	ip, r5
 800c712:	46f2      	mov	sl, lr
 800c714:	f850 2b04 	ldr.w	r2, [r0], #4
 800c718:	b293      	uxth	r3, r2
 800c71a:	fb06 e303 	mla	r3, r6, r3, lr
 800c71e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c722:	b29b      	uxth	r3, r3
 800c724:	ebaa 0303 	sub.w	r3, sl, r3
 800c728:	0c12      	lsrs	r2, r2, #16
 800c72a:	f8dc a000 	ldr.w	sl, [ip]
 800c72e:	fb06 e202 	mla	r2, r6, r2, lr
 800c732:	fa13 f38a 	uxtah	r3, r3, sl
 800c736:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c73a:	fa1f fa82 	uxth.w	sl, r2
 800c73e:	f8dc 2000 	ldr.w	r2, [ip]
 800c742:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800c746:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c74a:	b29b      	uxth	r3, r3
 800c74c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c750:	4581      	cmp	r9, r0
 800c752:	f84c 3b04 	str.w	r3, [ip], #4
 800c756:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c75a:	d2db      	bcs.n	800c714 <quorem+0x44>
 800c75c:	f855 300b 	ldr.w	r3, [r5, fp]
 800c760:	b92b      	cbnz	r3, 800c76e <quorem+0x9e>
 800c762:	9b01      	ldr	r3, [sp, #4]
 800c764:	3b04      	subs	r3, #4
 800c766:	429d      	cmp	r5, r3
 800c768:	461a      	mov	r2, r3
 800c76a:	d32e      	bcc.n	800c7ca <quorem+0xfa>
 800c76c:	613c      	str	r4, [r7, #16]
 800c76e:	4638      	mov	r0, r7
 800c770:	f001 f8be 	bl	800d8f0 <__mcmp>
 800c774:	2800      	cmp	r0, #0
 800c776:	db24      	blt.n	800c7c2 <quorem+0xf2>
 800c778:	3601      	adds	r6, #1
 800c77a:	4628      	mov	r0, r5
 800c77c:	f04f 0c00 	mov.w	ip, #0
 800c780:	f858 2b04 	ldr.w	r2, [r8], #4
 800c784:	f8d0 e000 	ldr.w	lr, [r0]
 800c788:	b293      	uxth	r3, r2
 800c78a:	ebac 0303 	sub.w	r3, ip, r3
 800c78e:	0c12      	lsrs	r2, r2, #16
 800c790:	fa13 f38e 	uxtah	r3, r3, lr
 800c794:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c798:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c79c:	b29b      	uxth	r3, r3
 800c79e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c7a2:	45c1      	cmp	r9, r8
 800c7a4:	f840 3b04 	str.w	r3, [r0], #4
 800c7a8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c7ac:	d2e8      	bcs.n	800c780 <quorem+0xb0>
 800c7ae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c7b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c7b6:	b922      	cbnz	r2, 800c7c2 <quorem+0xf2>
 800c7b8:	3b04      	subs	r3, #4
 800c7ba:	429d      	cmp	r5, r3
 800c7bc:	461a      	mov	r2, r3
 800c7be:	d30a      	bcc.n	800c7d6 <quorem+0x106>
 800c7c0:	613c      	str	r4, [r7, #16]
 800c7c2:	4630      	mov	r0, r6
 800c7c4:	b003      	add	sp, #12
 800c7c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7ca:	6812      	ldr	r2, [r2, #0]
 800c7cc:	3b04      	subs	r3, #4
 800c7ce:	2a00      	cmp	r2, #0
 800c7d0:	d1cc      	bne.n	800c76c <quorem+0x9c>
 800c7d2:	3c01      	subs	r4, #1
 800c7d4:	e7c7      	b.n	800c766 <quorem+0x96>
 800c7d6:	6812      	ldr	r2, [r2, #0]
 800c7d8:	3b04      	subs	r3, #4
 800c7da:	2a00      	cmp	r2, #0
 800c7dc:	d1f0      	bne.n	800c7c0 <quorem+0xf0>
 800c7de:	3c01      	subs	r4, #1
 800c7e0:	e7eb      	b.n	800c7ba <quorem+0xea>
 800c7e2:	2000      	movs	r0, #0
 800c7e4:	e7ee      	b.n	800c7c4 <quorem+0xf4>
	...

0800c7e8 <_dtoa_r>:
 800c7e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7ec:	ed2d 8b02 	vpush	{d8}
 800c7f0:	ec57 6b10 	vmov	r6, r7, d0
 800c7f4:	b095      	sub	sp, #84	; 0x54
 800c7f6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c7f8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c7fc:	9105      	str	r1, [sp, #20]
 800c7fe:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800c802:	4604      	mov	r4, r0
 800c804:	9209      	str	r2, [sp, #36]	; 0x24
 800c806:	930f      	str	r3, [sp, #60]	; 0x3c
 800c808:	b975      	cbnz	r5, 800c828 <_dtoa_r+0x40>
 800c80a:	2010      	movs	r0, #16
 800c80c:	f000 fddc 	bl	800d3c8 <malloc>
 800c810:	4602      	mov	r2, r0
 800c812:	6260      	str	r0, [r4, #36]	; 0x24
 800c814:	b920      	cbnz	r0, 800c820 <_dtoa_r+0x38>
 800c816:	4bb2      	ldr	r3, [pc, #712]	; (800cae0 <_dtoa_r+0x2f8>)
 800c818:	21ea      	movs	r1, #234	; 0xea
 800c81a:	48b2      	ldr	r0, [pc, #712]	; (800cae4 <_dtoa_r+0x2fc>)
 800c81c:	f001 fa32 	bl	800dc84 <__assert_func>
 800c820:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c824:	6005      	str	r5, [r0, #0]
 800c826:	60c5      	str	r5, [r0, #12]
 800c828:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c82a:	6819      	ldr	r1, [r3, #0]
 800c82c:	b151      	cbz	r1, 800c844 <_dtoa_r+0x5c>
 800c82e:	685a      	ldr	r2, [r3, #4]
 800c830:	604a      	str	r2, [r1, #4]
 800c832:	2301      	movs	r3, #1
 800c834:	4093      	lsls	r3, r2
 800c836:	608b      	str	r3, [r1, #8]
 800c838:	4620      	mov	r0, r4
 800c83a:	f000 fe1b 	bl	800d474 <_Bfree>
 800c83e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c840:	2200      	movs	r2, #0
 800c842:	601a      	str	r2, [r3, #0]
 800c844:	1e3b      	subs	r3, r7, #0
 800c846:	bfb9      	ittee	lt
 800c848:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c84c:	9303      	strlt	r3, [sp, #12]
 800c84e:	2300      	movge	r3, #0
 800c850:	f8c8 3000 	strge.w	r3, [r8]
 800c854:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800c858:	4ba3      	ldr	r3, [pc, #652]	; (800cae8 <_dtoa_r+0x300>)
 800c85a:	bfbc      	itt	lt
 800c85c:	2201      	movlt	r2, #1
 800c85e:	f8c8 2000 	strlt.w	r2, [r8]
 800c862:	ea33 0309 	bics.w	r3, r3, r9
 800c866:	d11b      	bne.n	800c8a0 <_dtoa_r+0xb8>
 800c868:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c86a:	f242 730f 	movw	r3, #9999	; 0x270f
 800c86e:	6013      	str	r3, [r2, #0]
 800c870:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c874:	4333      	orrs	r3, r6
 800c876:	f000 857a 	beq.w	800d36e <_dtoa_r+0xb86>
 800c87a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c87c:	b963      	cbnz	r3, 800c898 <_dtoa_r+0xb0>
 800c87e:	4b9b      	ldr	r3, [pc, #620]	; (800caec <_dtoa_r+0x304>)
 800c880:	e024      	b.n	800c8cc <_dtoa_r+0xe4>
 800c882:	4b9b      	ldr	r3, [pc, #620]	; (800caf0 <_dtoa_r+0x308>)
 800c884:	9300      	str	r3, [sp, #0]
 800c886:	3308      	adds	r3, #8
 800c888:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c88a:	6013      	str	r3, [r2, #0]
 800c88c:	9800      	ldr	r0, [sp, #0]
 800c88e:	b015      	add	sp, #84	; 0x54
 800c890:	ecbd 8b02 	vpop	{d8}
 800c894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c898:	4b94      	ldr	r3, [pc, #592]	; (800caec <_dtoa_r+0x304>)
 800c89a:	9300      	str	r3, [sp, #0]
 800c89c:	3303      	adds	r3, #3
 800c89e:	e7f3      	b.n	800c888 <_dtoa_r+0xa0>
 800c8a0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c8a4:	2200      	movs	r2, #0
 800c8a6:	ec51 0b17 	vmov	r0, r1, d7
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800c8b0:	f7f4 f90a 	bl	8000ac8 <__aeabi_dcmpeq>
 800c8b4:	4680      	mov	r8, r0
 800c8b6:	b158      	cbz	r0, 800c8d0 <_dtoa_r+0xe8>
 800c8b8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c8ba:	2301      	movs	r3, #1
 800c8bc:	6013      	str	r3, [r2, #0]
 800c8be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	f000 8551 	beq.w	800d368 <_dtoa_r+0xb80>
 800c8c6:	488b      	ldr	r0, [pc, #556]	; (800caf4 <_dtoa_r+0x30c>)
 800c8c8:	6018      	str	r0, [r3, #0]
 800c8ca:	1e43      	subs	r3, r0, #1
 800c8cc:	9300      	str	r3, [sp, #0]
 800c8ce:	e7dd      	b.n	800c88c <_dtoa_r+0xa4>
 800c8d0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800c8d4:	aa12      	add	r2, sp, #72	; 0x48
 800c8d6:	a913      	add	r1, sp, #76	; 0x4c
 800c8d8:	4620      	mov	r0, r4
 800c8da:	f001 f8ad 	bl	800da38 <__d2b>
 800c8de:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c8e2:	4683      	mov	fp, r0
 800c8e4:	2d00      	cmp	r5, #0
 800c8e6:	d07c      	beq.n	800c9e2 <_dtoa_r+0x1fa>
 800c8e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c8ea:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800c8ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c8f2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800c8f6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800c8fa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800c8fe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c902:	4b7d      	ldr	r3, [pc, #500]	; (800caf8 <_dtoa_r+0x310>)
 800c904:	2200      	movs	r2, #0
 800c906:	4630      	mov	r0, r6
 800c908:	4639      	mov	r1, r7
 800c90a:	f7f3 fcbd 	bl	8000288 <__aeabi_dsub>
 800c90e:	a36e      	add	r3, pc, #440	; (adr r3, 800cac8 <_dtoa_r+0x2e0>)
 800c910:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c914:	f7f3 fe70 	bl	80005f8 <__aeabi_dmul>
 800c918:	a36d      	add	r3, pc, #436	; (adr r3, 800cad0 <_dtoa_r+0x2e8>)
 800c91a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c91e:	f7f3 fcb5 	bl	800028c <__adddf3>
 800c922:	4606      	mov	r6, r0
 800c924:	4628      	mov	r0, r5
 800c926:	460f      	mov	r7, r1
 800c928:	f7f3 fdfc 	bl	8000524 <__aeabi_i2d>
 800c92c:	a36a      	add	r3, pc, #424	; (adr r3, 800cad8 <_dtoa_r+0x2f0>)
 800c92e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c932:	f7f3 fe61 	bl	80005f8 <__aeabi_dmul>
 800c936:	4602      	mov	r2, r0
 800c938:	460b      	mov	r3, r1
 800c93a:	4630      	mov	r0, r6
 800c93c:	4639      	mov	r1, r7
 800c93e:	f7f3 fca5 	bl	800028c <__adddf3>
 800c942:	4606      	mov	r6, r0
 800c944:	460f      	mov	r7, r1
 800c946:	f7f4 f907 	bl	8000b58 <__aeabi_d2iz>
 800c94a:	2200      	movs	r2, #0
 800c94c:	4682      	mov	sl, r0
 800c94e:	2300      	movs	r3, #0
 800c950:	4630      	mov	r0, r6
 800c952:	4639      	mov	r1, r7
 800c954:	f7f4 f8c2 	bl	8000adc <__aeabi_dcmplt>
 800c958:	b148      	cbz	r0, 800c96e <_dtoa_r+0x186>
 800c95a:	4650      	mov	r0, sl
 800c95c:	f7f3 fde2 	bl	8000524 <__aeabi_i2d>
 800c960:	4632      	mov	r2, r6
 800c962:	463b      	mov	r3, r7
 800c964:	f7f4 f8b0 	bl	8000ac8 <__aeabi_dcmpeq>
 800c968:	b908      	cbnz	r0, 800c96e <_dtoa_r+0x186>
 800c96a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c96e:	f1ba 0f16 	cmp.w	sl, #22
 800c972:	d854      	bhi.n	800ca1e <_dtoa_r+0x236>
 800c974:	4b61      	ldr	r3, [pc, #388]	; (800cafc <_dtoa_r+0x314>)
 800c976:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c97a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c97e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c982:	f7f4 f8ab 	bl	8000adc <__aeabi_dcmplt>
 800c986:	2800      	cmp	r0, #0
 800c988:	d04b      	beq.n	800ca22 <_dtoa_r+0x23a>
 800c98a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c98e:	2300      	movs	r3, #0
 800c990:	930e      	str	r3, [sp, #56]	; 0x38
 800c992:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c994:	1b5d      	subs	r5, r3, r5
 800c996:	1e6b      	subs	r3, r5, #1
 800c998:	9304      	str	r3, [sp, #16]
 800c99a:	bf43      	ittte	mi
 800c99c:	2300      	movmi	r3, #0
 800c99e:	f1c5 0801 	rsbmi	r8, r5, #1
 800c9a2:	9304      	strmi	r3, [sp, #16]
 800c9a4:	f04f 0800 	movpl.w	r8, #0
 800c9a8:	f1ba 0f00 	cmp.w	sl, #0
 800c9ac:	db3b      	blt.n	800ca26 <_dtoa_r+0x23e>
 800c9ae:	9b04      	ldr	r3, [sp, #16]
 800c9b0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800c9b4:	4453      	add	r3, sl
 800c9b6:	9304      	str	r3, [sp, #16]
 800c9b8:	2300      	movs	r3, #0
 800c9ba:	9306      	str	r3, [sp, #24]
 800c9bc:	9b05      	ldr	r3, [sp, #20]
 800c9be:	2b09      	cmp	r3, #9
 800c9c0:	d869      	bhi.n	800ca96 <_dtoa_r+0x2ae>
 800c9c2:	2b05      	cmp	r3, #5
 800c9c4:	bfc4      	itt	gt
 800c9c6:	3b04      	subgt	r3, #4
 800c9c8:	9305      	strgt	r3, [sp, #20]
 800c9ca:	9b05      	ldr	r3, [sp, #20]
 800c9cc:	f1a3 0302 	sub.w	r3, r3, #2
 800c9d0:	bfcc      	ite	gt
 800c9d2:	2500      	movgt	r5, #0
 800c9d4:	2501      	movle	r5, #1
 800c9d6:	2b03      	cmp	r3, #3
 800c9d8:	d869      	bhi.n	800caae <_dtoa_r+0x2c6>
 800c9da:	e8df f003 	tbb	[pc, r3]
 800c9de:	4e2c      	.short	0x4e2c
 800c9e0:	5a4c      	.short	0x5a4c
 800c9e2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800c9e6:	441d      	add	r5, r3
 800c9e8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c9ec:	2b20      	cmp	r3, #32
 800c9ee:	bfc1      	itttt	gt
 800c9f0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c9f4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800c9f8:	fa09 f303 	lslgt.w	r3, r9, r3
 800c9fc:	fa26 f000 	lsrgt.w	r0, r6, r0
 800ca00:	bfda      	itte	le
 800ca02:	f1c3 0320 	rsble	r3, r3, #32
 800ca06:	fa06 f003 	lslle.w	r0, r6, r3
 800ca0a:	4318      	orrgt	r0, r3
 800ca0c:	f7f3 fd7a 	bl	8000504 <__aeabi_ui2d>
 800ca10:	2301      	movs	r3, #1
 800ca12:	4606      	mov	r6, r0
 800ca14:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800ca18:	3d01      	subs	r5, #1
 800ca1a:	9310      	str	r3, [sp, #64]	; 0x40
 800ca1c:	e771      	b.n	800c902 <_dtoa_r+0x11a>
 800ca1e:	2301      	movs	r3, #1
 800ca20:	e7b6      	b.n	800c990 <_dtoa_r+0x1a8>
 800ca22:	900e      	str	r0, [sp, #56]	; 0x38
 800ca24:	e7b5      	b.n	800c992 <_dtoa_r+0x1aa>
 800ca26:	f1ca 0300 	rsb	r3, sl, #0
 800ca2a:	9306      	str	r3, [sp, #24]
 800ca2c:	2300      	movs	r3, #0
 800ca2e:	eba8 080a 	sub.w	r8, r8, sl
 800ca32:	930d      	str	r3, [sp, #52]	; 0x34
 800ca34:	e7c2      	b.n	800c9bc <_dtoa_r+0x1d4>
 800ca36:	2300      	movs	r3, #0
 800ca38:	9308      	str	r3, [sp, #32]
 800ca3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	dc39      	bgt.n	800cab4 <_dtoa_r+0x2cc>
 800ca40:	f04f 0901 	mov.w	r9, #1
 800ca44:	f8cd 9004 	str.w	r9, [sp, #4]
 800ca48:	464b      	mov	r3, r9
 800ca4a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800ca4e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ca50:	2200      	movs	r2, #0
 800ca52:	6042      	str	r2, [r0, #4]
 800ca54:	2204      	movs	r2, #4
 800ca56:	f102 0614 	add.w	r6, r2, #20
 800ca5a:	429e      	cmp	r6, r3
 800ca5c:	6841      	ldr	r1, [r0, #4]
 800ca5e:	d92f      	bls.n	800cac0 <_dtoa_r+0x2d8>
 800ca60:	4620      	mov	r0, r4
 800ca62:	f000 fcc7 	bl	800d3f4 <_Balloc>
 800ca66:	9000      	str	r0, [sp, #0]
 800ca68:	2800      	cmp	r0, #0
 800ca6a:	d14b      	bne.n	800cb04 <_dtoa_r+0x31c>
 800ca6c:	4b24      	ldr	r3, [pc, #144]	; (800cb00 <_dtoa_r+0x318>)
 800ca6e:	4602      	mov	r2, r0
 800ca70:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ca74:	e6d1      	b.n	800c81a <_dtoa_r+0x32>
 800ca76:	2301      	movs	r3, #1
 800ca78:	e7de      	b.n	800ca38 <_dtoa_r+0x250>
 800ca7a:	2300      	movs	r3, #0
 800ca7c:	9308      	str	r3, [sp, #32]
 800ca7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca80:	eb0a 0903 	add.w	r9, sl, r3
 800ca84:	f109 0301 	add.w	r3, r9, #1
 800ca88:	2b01      	cmp	r3, #1
 800ca8a:	9301      	str	r3, [sp, #4]
 800ca8c:	bfb8      	it	lt
 800ca8e:	2301      	movlt	r3, #1
 800ca90:	e7dd      	b.n	800ca4e <_dtoa_r+0x266>
 800ca92:	2301      	movs	r3, #1
 800ca94:	e7f2      	b.n	800ca7c <_dtoa_r+0x294>
 800ca96:	2501      	movs	r5, #1
 800ca98:	2300      	movs	r3, #0
 800ca9a:	9305      	str	r3, [sp, #20]
 800ca9c:	9508      	str	r5, [sp, #32]
 800ca9e:	f04f 39ff 	mov.w	r9, #4294967295
 800caa2:	2200      	movs	r2, #0
 800caa4:	f8cd 9004 	str.w	r9, [sp, #4]
 800caa8:	2312      	movs	r3, #18
 800caaa:	9209      	str	r2, [sp, #36]	; 0x24
 800caac:	e7cf      	b.n	800ca4e <_dtoa_r+0x266>
 800caae:	2301      	movs	r3, #1
 800cab0:	9308      	str	r3, [sp, #32]
 800cab2:	e7f4      	b.n	800ca9e <_dtoa_r+0x2b6>
 800cab4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800cab8:	f8cd 9004 	str.w	r9, [sp, #4]
 800cabc:	464b      	mov	r3, r9
 800cabe:	e7c6      	b.n	800ca4e <_dtoa_r+0x266>
 800cac0:	3101      	adds	r1, #1
 800cac2:	6041      	str	r1, [r0, #4]
 800cac4:	0052      	lsls	r2, r2, #1
 800cac6:	e7c6      	b.n	800ca56 <_dtoa_r+0x26e>
 800cac8:	636f4361 	.word	0x636f4361
 800cacc:	3fd287a7 	.word	0x3fd287a7
 800cad0:	8b60c8b3 	.word	0x8b60c8b3
 800cad4:	3fc68a28 	.word	0x3fc68a28
 800cad8:	509f79fb 	.word	0x509f79fb
 800cadc:	3fd34413 	.word	0x3fd34413
 800cae0:	0800f855 	.word	0x0800f855
 800cae4:	0800f86c 	.word	0x0800f86c
 800cae8:	7ff00000 	.word	0x7ff00000
 800caec:	0800f851 	.word	0x0800f851
 800caf0:	0800f848 	.word	0x0800f848
 800caf4:	0800f825 	.word	0x0800f825
 800caf8:	3ff80000 	.word	0x3ff80000
 800cafc:	0800f968 	.word	0x0800f968
 800cb00:	0800f8cb 	.word	0x0800f8cb
 800cb04:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cb06:	9a00      	ldr	r2, [sp, #0]
 800cb08:	601a      	str	r2, [r3, #0]
 800cb0a:	9b01      	ldr	r3, [sp, #4]
 800cb0c:	2b0e      	cmp	r3, #14
 800cb0e:	f200 80ad 	bhi.w	800cc6c <_dtoa_r+0x484>
 800cb12:	2d00      	cmp	r5, #0
 800cb14:	f000 80aa 	beq.w	800cc6c <_dtoa_r+0x484>
 800cb18:	f1ba 0f00 	cmp.w	sl, #0
 800cb1c:	dd36      	ble.n	800cb8c <_dtoa_r+0x3a4>
 800cb1e:	4ac3      	ldr	r2, [pc, #780]	; (800ce2c <_dtoa_r+0x644>)
 800cb20:	f00a 030f 	and.w	r3, sl, #15
 800cb24:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800cb28:	ed93 7b00 	vldr	d7, [r3]
 800cb2c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800cb30:	ea4f 172a 	mov.w	r7, sl, asr #4
 800cb34:	eeb0 8a47 	vmov.f32	s16, s14
 800cb38:	eef0 8a67 	vmov.f32	s17, s15
 800cb3c:	d016      	beq.n	800cb6c <_dtoa_r+0x384>
 800cb3e:	4bbc      	ldr	r3, [pc, #752]	; (800ce30 <_dtoa_r+0x648>)
 800cb40:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800cb44:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cb48:	f7f3 fe80 	bl	800084c <__aeabi_ddiv>
 800cb4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cb50:	f007 070f 	and.w	r7, r7, #15
 800cb54:	2503      	movs	r5, #3
 800cb56:	4eb6      	ldr	r6, [pc, #728]	; (800ce30 <_dtoa_r+0x648>)
 800cb58:	b957      	cbnz	r7, 800cb70 <_dtoa_r+0x388>
 800cb5a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cb5e:	ec53 2b18 	vmov	r2, r3, d8
 800cb62:	f7f3 fe73 	bl	800084c <__aeabi_ddiv>
 800cb66:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cb6a:	e029      	b.n	800cbc0 <_dtoa_r+0x3d8>
 800cb6c:	2502      	movs	r5, #2
 800cb6e:	e7f2      	b.n	800cb56 <_dtoa_r+0x36e>
 800cb70:	07f9      	lsls	r1, r7, #31
 800cb72:	d508      	bpl.n	800cb86 <_dtoa_r+0x39e>
 800cb74:	ec51 0b18 	vmov	r0, r1, d8
 800cb78:	e9d6 2300 	ldrd	r2, r3, [r6]
 800cb7c:	f7f3 fd3c 	bl	80005f8 <__aeabi_dmul>
 800cb80:	ec41 0b18 	vmov	d8, r0, r1
 800cb84:	3501      	adds	r5, #1
 800cb86:	107f      	asrs	r7, r7, #1
 800cb88:	3608      	adds	r6, #8
 800cb8a:	e7e5      	b.n	800cb58 <_dtoa_r+0x370>
 800cb8c:	f000 80a6 	beq.w	800ccdc <_dtoa_r+0x4f4>
 800cb90:	f1ca 0600 	rsb	r6, sl, #0
 800cb94:	4ba5      	ldr	r3, [pc, #660]	; (800ce2c <_dtoa_r+0x644>)
 800cb96:	4fa6      	ldr	r7, [pc, #664]	; (800ce30 <_dtoa_r+0x648>)
 800cb98:	f006 020f 	and.w	r2, r6, #15
 800cb9c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cba4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800cba8:	f7f3 fd26 	bl	80005f8 <__aeabi_dmul>
 800cbac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cbb0:	1136      	asrs	r6, r6, #4
 800cbb2:	2300      	movs	r3, #0
 800cbb4:	2502      	movs	r5, #2
 800cbb6:	2e00      	cmp	r6, #0
 800cbb8:	f040 8085 	bne.w	800ccc6 <_dtoa_r+0x4de>
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d1d2      	bne.n	800cb66 <_dtoa_r+0x37e>
 800cbc0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	f000 808c 	beq.w	800cce0 <_dtoa_r+0x4f8>
 800cbc8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800cbcc:	4b99      	ldr	r3, [pc, #612]	; (800ce34 <_dtoa_r+0x64c>)
 800cbce:	2200      	movs	r2, #0
 800cbd0:	4630      	mov	r0, r6
 800cbd2:	4639      	mov	r1, r7
 800cbd4:	f7f3 ff82 	bl	8000adc <__aeabi_dcmplt>
 800cbd8:	2800      	cmp	r0, #0
 800cbda:	f000 8081 	beq.w	800cce0 <_dtoa_r+0x4f8>
 800cbde:	9b01      	ldr	r3, [sp, #4]
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d07d      	beq.n	800cce0 <_dtoa_r+0x4f8>
 800cbe4:	f1b9 0f00 	cmp.w	r9, #0
 800cbe8:	dd3c      	ble.n	800cc64 <_dtoa_r+0x47c>
 800cbea:	f10a 33ff 	add.w	r3, sl, #4294967295
 800cbee:	9307      	str	r3, [sp, #28]
 800cbf0:	2200      	movs	r2, #0
 800cbf2:	4b91      	ldr	r3, [pc, #580]	; (800ce38 <_dtoa_r+0x650>)
 800cbf4:	4630      	mov	r0, r6
 800cbf6:	4639      	mov	r1, r7
 800cbf8:	f7f3 fcfe 	bl	80005f8 <__aeabi_dmul>
 800cbfc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cc00:	3501      	adds	r5, #1
 800cc02:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800cc06:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800cc0a:	4628      	mov	r0, r5
 800cc0c:	f7f3 fc8a 	bl	8000524 <__aeabi_i2d>
 800cc10:	4632      	mov	r2, r6
 800cc12:	463b      	mov	r3, r7
 800cc14:	f7f3 fcf0 	bl	80005f8 <__aeabi_dmul>
 800cc18:	4b88      	ldr	r3, [pc, #544]	; (800ce3c <_dtoa_r+0x654>)
 800cc1a:	2200      	movs	r2, #0
 800cc1c:	f7f3 fb36 	bl	800028c <__adddf3>
 800cc20:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800cc24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cc28:	9303      	str	r3, [sp, #12]
 800cc2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d15c      	bne.n	800ccea <_dtoa_r+0x502>
 800cc30:	4b83      	ldr	r3, [pc, #524]	; (800ce40 <_dtoa_r+0x658>)
 800cc32:	2200      	movs	r2, #0
 800cc34:	4630      	mov	r0, r6
 800cc36:	4639      	mov	r1, r7
 800cc38:	f7f3 fb26 	bl	8000288 <__aeabi_dsub>
 800cc3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cc40:	4606      	mov	r6, r0
 800cc42:	460f      	mov	r7, r1
 800cc44:	f7f3 ff68 	bl	8000b18 <__aeabi_dcmpgt>
 800cc48:	2800      	cmp	r0, #0
 800cc4a:	f040 8296 	bne.w	800d17a <_dtoa_r+0x992>
 800cc4e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800cc52:	4630      	mov	r0, r6
 800cc54:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cc58:	4639      	mov	r1, r7
 800cc5a:	f7f3 ff3f 	bl	8000adc <__aeabi_dcmplt>
 800cc5e:	2800      	cmp	r0, #0
 800cc60:	f040 8288 	bne.w	800d174 <_dtoa_r+0x98c>
 800cc64:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800cc68:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cc6c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	f2c0 8158 	blt.w	800cf24 <_dtoa_r+0x73c>
 800cc74:	f1ba 0f0e 	cmp.w	sl, #14
 800cc78:	f300 8154 	bgt.w	800cf24 <_dtoa_r+0x73c>
 800cc7c:	4b6b      	ldr	r3, [pc, #428]	; (800ce2c <_dtoa_r+0x644>)
 800cc7e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800cc82:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cc86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	f280 80e3 	bge.w	800ce54 <_dtoa_r+0x66c>
 800cc8e:	9b01      	ldr	r3, [sp, #4]
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	f300 80df 	bgt.w	800ce54 <_dtoa_r+0x66c>
 800cc96:	f040 826d 	bne.w	800d174 <_dtoa_r+0x98c>
 800cc9a:	4b69      	ldr	r3, [pc, #420]	; (800ce40 <_dtoa_r+0x658>)
 800cc9c:	2200      	movs	r2, #0
 800cc9e:	4640      	mov	r0, r8
 800cca0:	4649      	mov	r1, r9
 800cca2:	f7f3 fca9 	bl	80005f8 <__aeabi_dmul>
 800cca6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ccaa:	f7f3 ff2b 	bl	8000b04 <__aeabi_dcmpge>
 800ccae:	9e01      	ldr	r6, [sp, #4]
 800ccb0:	4637      	mov	r7, r6
 800ccb2:	2800      	cmp	r0, #0
 800ccb4:	f040 8243 	bne.w	800d13e <_dtoa_r+0x956>
 800ccb8:	9d00      	ldr	r5, [sp, #0]
 800ccba:	2331      	movs	r3, #49	; 0x31
 800ccbc:	f805 3b01 	strb.w	r3, [r5], #1
 800ccc0:	f10a 0a01 	add.w	sl, sl, #1
 800ccc4:	e23f      	b.n	800d146 <_dtoa_r+0x95e>
 800ccc6:	07f2      	lsls	r2, r6, #31
 800ccc8:	d505      	bpl.n	800ccd6 <_dtoa_r+0x4ee>
 800ccca:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ccce:	f7f3 fc93 	bl	80005f8 <__aeabi_dmul>
 800ccd2:	3501      	adds	r5, #1
 800ccd4:	2301      	movs	r3, #1
 800ccd6:	1076      	asrs	r6, r6, #1
 800ccd8:	3708      	adds	r7, #8
 800ccda:	e76c      	b.n	800cbb6 <_dtoa_r+0x3ce>
 800ccdc:	2502      	movs	r5, #2
 800ccde:	e76f      	b.n	800cbc0 <_dtoa_r+0x3d8>
 800cce0:	9b01      	ldr	r3, [sp, #4]
 800cce2:	f8cd a01c 	str.w	sl, [sp, #28]
 800cce6:	930c      	str	r3, [sp, #48]	; 0x30
 800cce8:	e78d      	b.n	800cc06 <_dtoa_r+0x41e>
 800ccea:	9900      	ldr	r1, [sp, #0]
 800ccec:	980c      	ldr	r0, [sp, #48]	; 0x30
 800ccee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ccf0:	4b4e      	ldr	r3, [pc, #312]	; (800ce2c <_dtoa_r+0x644>)
 800ccf2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ccf6:	4401      	add	r1, r0
 800ccf8:	9102      	str	r1, [sp, #8]
 800ccfa:	9908      	ldr	r1, [sp, #32]
 800ccfc:	eeb0 8a47 	vmov.f32	s16, s14
 800cd00:	eef0 8a67 	vmov.f32	s17, s15
 800cd04:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cd08:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800cd0c:	2900      	cmp	r1, #0
 800cd0e:	d045      	beq.n	800cd9c <_dtoa_r+0x5b4>
 800cd10:	494c      	ldr	r1, [pc, #304]	; (800ce44 <_dtoa_r+0x65c>)
 800cd12:	2000      	movs	r0, #0
 800cd14:	f7f3 fd9a 	bl	800084c <__aeabi_ddiv>
 800cd18:	ec53 2b18 	vmov	r2, r3, d8
 800cd1c:	f7f3 fab4 	bl	8000288 <__aeabi_dsub>
 800cd20:	9d00      	ldr	r5, [sp, #0]
 800cd22:	ec41 0b18 	vmov	d8, r0, r1
 800cd26:	4639      	mov	r1, r7
 800cd28:	4630      	mov	r0, r6
 800cd2a:	f7f3 ff15 	bl	8000b58 <__aeabi_d2iz>
 800cd2e:	900c      	str	r0, [sp, #48]	; 0x30
 800cd30:	f7f3 fbf8 	bl	8000524 <__aeabi_i2d>
 800cd34:	4602      	mov	r2, r0
 800cd36:	460b      	mov	r3, r1
 800cd38:	4630      	mov	r0, r6
 800cd3a:	4639      	mov	r1, r7
 800cd3c:	f7f3 faa4 	bl	8000288 <__aeabi_dsub>
 800cd40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cd42:	3330      	adds	r3, #48	; 0x30
 800cd44:	f805 3b01 	strb.w	r3, [r5], #1
 800cd48:	ec53 2b18 	vmov	r2, r3, d8
 800cd4c:	4606      	mov	r6, r0
 800cd4e:	460f      	mov	r7, r1
 800cd50:	f7f3 fec4 	bl	8000adc <__aeabi_dcmplt>
 800cd54:	2800      	cmp	r0, #0
 800cd56:	d165      	bne.n	800ce24 <_dtoa_r+0x63c>
 800cd58:	4632      	mov	r2, r6
 800cd5a:	463b      	mov	r3, r7
 800cd5c:	4935      	ldr	r1, [pc, #212]	; (800ce34 <_dtoa_r+0x64c>)
 800cd5e:	2000      	movs	r0, #0
 800cd60:	f7f3 fa92 	bl	8000288 <__aeabi_dsub>
 800cd64:	ec53 2b18 	vmov	r2, r3, d8
 800cd68:	f7f3 feb8 	bl	8000adc <__aeabi_dcmplt>
 800cd6c:	2800      	cmp	r0, #0
 800cd6e:	f040 80b9 	bne.w	800cee4 <_dtoa_r+0x6fc>
 800cd72:	9b02      	ldr	r3, [sp, #8]
 800cd74:	429d      	cmp	r5, r3
 800cd76:	f43f af75 	beq.w	800cc64 <_dtoa_r+0x47c>
 800cd7a:	4b2f      	ldr	r3, [pc, #188]	; (800ce38 <_dtoa_r+0x650>)
 800cd7c:	ec51 0b18 	vmov	r0, r1, d8
 800cd80:	2200      	movs	r2, #0
 800cd82:	f7f3 fc39 	bl	80005f8 <__aeabi_dmul>
 800cd86:	4b2c      	ldr	r3, [pc, #176]	; (800ce38 <_dtoa_r+0x650>)
 800cd88:	ec41 0b18 	vmov	d8, r0, r1
 800cd8c:	2200      	movs	r2, #0
 800cd8e:	4630      	mov	r0, r6
 800cd90:	4639      	mov	r1, r7
 800cd92:	f7f3 fc31 	bl	80005f8 <__aeabi_dmul>
 800cd96:	4606      	mov	r6, r0
 800cd98:	460f      	mov	r7, r1
 800cd9a:	e7c4      	b.n	800cd26 <_dtoa_r+0x53e>
 800cd9c:	ec51 0b17 	vmov	r0, r1, d7
 800cda0:	f7f3 fc2a 	bl	80005f8 <__aeabi_dmul>
 800cda4:	9b02      	ldr	r3, [sp, #8]
 800cda6:	9d00      	ldr	r5, [sp, #0]
 800cda8:	930c      	str	r3, [sp, #48]	; 0x30
 800cdaa:	ec41 0b18 	vmov	d8, r0, r1
 800cdae:	4639      	mov	r1, r7
 800cdb0:	4630      	mov	r0, r6
 800cdb2:	f7f3 fed1 	bl	8000b58 <__aeabi_d2iz>
 800cdb6:	9011      	str	r0, [sp, #68]	; 0x44
 800cdb8:	f7f3 fbb4 	bl	8000524 <__aeabi_i2d>
 800cdbc:	4602      	mov	r2, r0
 800cdbe:	460b      	mov	r3, r1
 800cdc0:	4630      	mov	r0, r6
 800cdc2:	4639      	mov	r1, r7
 800cdc4:	f7f3 fa60 	bl	8000288 <__aeabi_dsub>
 800cdc8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cdca:	3330      	adds	r3, #48	; 0x30
 800cdcc:	f805 3b01 	strb.w	r3, [r5], #1
 800cdd0:	9b02      	ldr	r3, [sp, #8]
 800cdd2:	429d      	cmp	r5, r3
 800cdd4:	4606      	mov	r6, r0
 800cdd6:	460f      	mov	r7, r1
 800cdd8:	f04f 0200 	mov.w	r2, #0
 800cddc:	d134      	bne.n	800ce48 <_dtoa_r+0x660>
 800cdde:	4b19      	ldr	r3, [pc, #100]	; (800ce44 <_dtoa_r+0x65c>)
 800cde0:	ec51 0b18 	vmov	r0, r1, d8
 800cde4:	f7f3 fa52 	bl	800028c <__adddf3>
 800cde8:	4602      	mov	r2, r0
 800cdea:	460b      	mov	r3, r1
 800cdec:	4630      	mov	r0, r6
 800cdee:	4639      	mov	r1, r7
 800cdf0:	f7f3 fe92 	bl	8000b18 <__aeabi_dcmpgt>
 800cdf4:	2800      	cmp	r0, #0
 800cdf6:	d175      	bne.n	800cee4 <_dtoa_r+0x6fc>
 800cdf8:	ec53 2b18 	vmov	r2, r3, d8
 800cdfc:	4911      	ldr	r1, [pc, #68]	; (800ce44 <_dtoa_r+0x65c>)
 800cdfe:	2000      	movs	r0, #0
 800ce00:	f7f3 fa42 	bl	8000288 <__aeabi_dsub>
 800ce04:	4602      	mov	r2, r0
 800ce06:	460b      	mov	r3, r1
 800ce08:	4630      	mov	r0, r6
 800ce0a:	4639      	mov	r1, r7
 800ce0c:	f7f3 fe66 	bl	8000adc <__aeabi_dcmplt>
 800ce10:	2800      	cmp	r0, #0
 800ce12:	f43f af27 	beq.w	800cc64 <_dtoa_r+0x47c>
 800ce16:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ce18:	1e6b      	subs	r3, r5, #1
 800ce1a:	930c      	str	r3, [sp, #48]	; 0x30
 800ce1c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ce20:	2b30      	cmp	r3, #48	; 0x30
 800ce22:	d0f8      	beq.n	800ce16 <_dtoa_r+0x62e>
 800ce24:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800ce28:	e04a      	b.n	800cec0 <_dtoa_r+0x6d8>
 800ce2a:	bf00      	nop
 800ce2c:	0800f968 	.word	0x0800f968
 800ce30:	0800f940 	.word	0x0800f940
 800ce34:	3ff00000 	.word	0x3ff00000
 800ce38:	40240000 	.word	0x40240000
 800ce3c:	401c0000 	.word	0x401c0000
 800ce40:	40140000 	.word	0x40140000
 800ce44:	3fe00000 	.word	0x3fe00000
 800ce48:	4baf      	ldr	r3, [pc, #700]	; (800d108 <_dtoa_r+0x920>)
 800ce4a:	f7f3 fbd5 	bl	80005f8 <__aeabi_dmul>
 800ce4e:	4606      	mov	r6, r0
 800ce50:	460f      	mov	r7, r1
 800ce52:	e7ac      	b.n	800cdae <_dtoa_r+0x5c6>
 800ce54:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ce58:	9d00      	ldr	r5, [sp, #0]
 800ce5a:	4642      	mov	r2, r8
 800ce5c:	464b      	mov	r3, r9
 800ce5e:	4630      	mov	r0, r6
 800ce60:	4639      	mov	r1, r7
 800ce62:	f7f3 fcf3 	bl	800084c <__aeabi_ddiv>
 800ce66:	f7f3 fe77 	bl	8000b58 <__aeabi_d2iz>
 800ce6a:	9002      	str	r0, [sp, #8]
 800ce6c:	f7f3 fb5a 	bl	8000524 <__aeabi_i2d>
 800ce70:	4642      	mov	r2, r8
 800ce72:	464b      	mov	r3, r9
 800ce74:	f7f3 fbc0 	bl	80005f8 <__aeabi_dmul>
 800ce78:	4602      	mov	r2, r0
 800ce7a:	460b      	mov	r3, r1
 800ce7c:	4630      	mov	r0, r6
 800ce7e:	4639      	mov	r1, r7
 800ce80:	f7f3 fa02 	bl	8000288 <__aeabi_dsub>
 800ce84:	9e02      	ldr	r6, [sp, #8]
 800ce86:	9f01      	ldr	r7, [sp, #4]
 800ce88:	3630      	adds	r6, #48	; 0x30
 800ce8a:	f805 6b01 	strb.w	r6, [r5], #1
 800ce8e:	9e00      	ldr	r6, [sp, #0]
 800ce90:	1bae      	subs	r6, r5, r6
 800ce92:	42b7      	cmp	r7, r6
 800ce94:	4602      	mov	r2, r0
 800ce96:	460b      	mov	r3, r1
 800ce98:	d137      	bne.n	800cf0a <_dtoa_r+0x722>
 800ce9a:	f7f3 f9f7 	bl	800028c <__adddf3>
 800ce9e:	4642      	mov	r2, r8
 800cea0:	464b      	mov	r3, r9
 800cea2:	4606      	mov	r6, r0
 800cea4:	460f      	mov	r7, r1
 800cea6:	f7f3 fe37 	bl	8000b18 <__aeabi_dcmpgt>
 800ceaa:	b9c8      	cbnz	r0, 800cee0 <_dtoa_r+0x6f8>
 800ceac:	4642      	mov	r2, r8
 800ceae:	464b      	mov	r3, r9
 800ceb0:	4630      	mov	r0, r6
 800ceb2:	4639      	mov	r1, r7
 800ceb4:	f7f3 fe08 	bl	8000ac8 <__aeabi_dcmpeq>
 800ceb8:	b110      	cbz	r0, 800cec0 <_dtoa_r+0x6d8>
 800ceba:	9b02      	ldr	r3, [sp, #8]
 800cebc:	07d9      	lsls	r1, r3, #31
 800cebe:	d40f      	bmi.n	800cee0 <_dtoa_r+0x6f8>
 800cec0:	4620      	mov	r0, r4
 800cec2:	4659      	mov	r1, fp
 800cec4:	f000 fad6 	bl	800d474 <_Bfree>
 800cec8:	2300      	movs	r3, #0
 800ceca:	702b      	strb	r3, [r5, #0]
 800cecc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cece:	f10a 0001 	add.w	r0, sl, #1
 800ced2:	6018      	str	r0, [r3, #0]
 800ced4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	f43f acd8 	beq.w	800c88c <_dtoa_r+0xa4>
 800cedc:	601d      	str	r5, [r3, #0]
 800cede:	e4d5      	b.n	800c88c <_dtoa_r+0xa4>
 800cee0:	f8cd a01c 	str.w	sl, [sp, #28]
 800cee4:	462b      	mov	r3, r5
 800cee6:	461d      	mov	r5, r3
 800cee8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ceec:	2a39      	cmp	r2, #57	; 0x39
 800ceee:	d108      	bne.n	800cf02 <_dtoa_r+0x71a>
 800cef0:	9a00      	ldr	r2, [sp, #0]
 800cef2:	429a      	cmp	r2, r3
 800cef4:	d1f7      	bne.n	800cee6 <_dtoa_r+0x6fe>
 800cef6:	9a07      	ldr	r2, [sp, #28]
 800cef8:	9900      	ldr	r1, [sp, #0]
 800cefa:	3201      	adds	r2, #1
 800cefc:	9207      	str	r2, [sp, #28]
 800cefe:	2230      	movs	r2, #48	; 0x30
 800cf00:	700a      	strb	r2, [r1, #0]
 800cf02:	781a      	ldrb	r2, [r3, #0]
 800cf04:	3201      	adds	r2, #1
 800cf06:	701a      	strb	r2, [r3, #0]
 800cf08:	e78c      	b.n	800ce24 <_dtoa_r+0x63c>
 800cf0a:	4b7f      	ldr	r3, [pc, #508]	; (800d108 <_dtoa_r+0x920>)
 800cf0c:	2200      	movs	r2, #0
 800cf0e:	f7f3 fb73 	bl	80005f8 <__aeabi_dmul>
 800cf12:	2200      	movs	r2, #0
 800cf14:	2300      	movs	r3, #0
 800cf16:	4606      	mov	r6, r0
 800cf18:	460f      	mov	r7, r1
 800cf1a:	f7f3 fdd5 	bl	8000ac8 <__aeabi_dcmpeq>
 800cf1e:	2800      	cmp	r0, #0
 800cf20:	d09b      	beq.n	800ce5a <_dtoa_r+0x672>
 800cf22:	e7cd      	b.n	800cec0 <_dtoa_r+0x6d8>
 800cf24:	9a08      	ldr	r2, [sp, #32]
 800cf26:	2a00      	cmp	r2, #0
 800cf28:	f000 80c4 	beq.w	800d0b4 <_dtoa_r+0x8cc>
 800cf2c:	9a05      	ldr	r2, [sp, #20]
 800cf2e:	2a01      	cmp	r2, #1
 800cf30:	f300 80a8 	bgt.w	800d084 <_dtoa_r+0x89c>
 800cf34:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800cf36:	2a00      	cmp	r2, #0
 800cf38:	f000 80a0 	beq.w	800d07c <_dtoa_r+0x894>
 800cf3c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800cf40:	9e06      	ldr	r6, [sp, #24]
 800cf42:	4645      	mov	r5, r8
 800cf44:	9a04      	ldr	r2, [sp, #16]
 800cf46:	2101      	movs	r1, #1
 800cf48:	441a      	add	r2, r3
 800cf4a:	4620      	mov	r0, r4
 800cf4c:	4498      	add	r8, r3
 800cf4e:	9204      	str	r2, [sp, #16]
 800cf50:	f000 fb4c 	bl	800d5ec <__i2b>
 800cf54:	4607      	mov	r7, r0
 800cf56:	2d00      	cmp	r5, #0
 800cf58:	dd0b      	ble.n	800cf72 <_dtoa_r+0x78a>
 800cf5a:	9b04      	ldr	r3, [sp, #16]
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	dd08      	ble.n	800cf72 <_dtoa_r+0x78a>
 800cf60:	42ab      	cmp	r3, r5
 800cf62:	9a04      	ldr	r2, [sp, #16]
 800cf64:	bfa8      	it	ge
 800cf66:	462b      	movge	r3, r5
 800cf68:	eba8 0803 	sub.w	r8, r8, r3
 800cf6c:	1aed      	subs	r5, r5, r3
 800cf6e:	1ad3      	subs	r3, r2, r3
 800cf70:	9304      	str	r3, [sp, #16]
 800cf72:	9b06      	ldr	r3, [sp, #24]
 800cf74:	b1fb      	cbz	r3, 800cfb6 <_dtoa_r+0x7ce>
 800cf76:	9b08      	ldr	r3, [sp, #32]
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	f000 809f 	beq.w	800d0bc <_dtoa_r+0x8d4>
 800cf7e:	2e00      	cmp	r6, #0
 800cf80:	dd11      	ble.n	800cfa6 <_dtoa_r+0x7be>
 800cf82:	4639      	mov	r1, r7
 800cf84:	4632      	mov	r2, r6
 800cf86:	4620      	mov	r0, r4
 800cf88:	f000 fbec 	bl	800d764 <__pow5mult>
 800cf8c:	465a      	mov	r2, fp
 800cf8e:	4601      	mov	r1, r0
 800cf90:	4607      	mov	r7, r0
 800cf92:	4620      	mov	r0, r4
 800cf94:	f000 fb40 	bl	800d618 <__multiply>
 800cf98:	4659      	mov	r1, fp
 800cf9a:	9007      	str	r0, [sp, #28]
 800cf9c:	4620      	mov	r0, r4
 800cf9e:	f000 fa69 	bl	800d474 <_Bfree>
 800cfa2:	9b07      	ldr	r3, [sp, #28]
 800cfa4:	469b      	mov	fp, r3
 800cfa6:	9b06      	ldr	r3, [sp, #24]
 800cfa8:	1b9a      	subs	r2, r3, r6
 800cfaa:	d004      	beq.n	800cfb6 <_dtoa_r+0x7ce>
 800cfac:	4659      	mov	r1, fp
 800cfae:	4620      	mov	r0, r4
 800cfb0:	f000 fbd8 	bl	800d764 <__pow5mult>
 800cfb4:	4683      	mov	fp, r0
 800cfb6:	2101      	movs	r1, #1
 800cfb8:	4620      	mov	r0, r4
 800cfba:	f000 fb17 	bl	800d5ec <__i2b>
 800cfbe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	4606      	mov	r6, r0
 800cfc4:	dd7c      	ble.n	800d0c0 <_dtoa_r+0x8d8>
 800cfc6:	461a      	mov	r2, r3
 800cfc8:	4601      	mov	r1, r0
 800cfca:	4620      	mov	r0, r4
 800cfcc:	f000 fbca 	bl	800d764 <__pow5mult>
 800cfd0:	9b05      	ldr	r3, [sp, #20]
 800cfd2:	2b01      	cmp	r3, #1
 800cfd4:	4606      	mov	r6, r0
 800cfd6:	dd76      	ble.n	800d0c6 <_dtoa_r+0x8de>
 800cfd8:	2300      	movs	r3, #0
 800cfda:	9306      	str	r3, [sp, #24]
 800cfdc:	6933      	ldr	r3, [r6, #16]
 800cfde:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800cfe2:	6918      	ldr	r0, [r3, #16]
 800cfe4:	f000 fab2 	bl	800d54c <__hi0bits>
 800cfe8:	f1c0 0020 	rsb	r0, r0, #32
 800cfec:	9b04      	ldr	r3, [sp, #16]
 800cfee:	4418      	add	r0, r3
 800cff0:	f010 001f 	ands.w	r0, r0, #31
 800cff4:	f000 8086 	beq.w	800d104 <_dtoa_r+0x91c>
 800cff8:	f1c0 0320 	rsb	r3, r0, #32
 800cffc:	2b04      	cmp	r3, #4
 800cffe:	dd7f      	ble.n	800d100 <_dtoa_r+0x918>
 800d000:	f1c0 001c 	rsb	r0, r0, #28
 800d004:	9b04      	ldr	r3, [sp, #16]
 800d006:	4403      	add	r3, r0
 800d008:	4480      	add	r8, r0
 800d00a:	4405      	add	r5, r0
 800d00c:	9304      	str	r3, [sp, #16]
 800d00e:	f1b8 0f00 	cmp.w	r8, #0
 800d012:	dd05      	ble.n	800d020 <_dtoa_r+0x838>
 800d014:	4659      	mov	r1, fp
 800d016:	4642      	mov	r2, r8
 800d018:	4620      	mov	r0, r4
 800d01a:	f000 fbfd 	bl	800d818 <__lshift>
 800d01e:	4683      	mov	fp, r0
 800d020:	9b04      	ldr	r3, [sp, #16]
 800d022:	2b00      	cmp	r3, #0
 800d024:	dd05      	ble.n	800d032 <_dtoa_r+0x84a>
 800d026:	4631      	mov	r1, r6
 800d028:	461a      	mov	r2, r3
 800d02a:	4620      	mov	r0, r4
 800d02c:	f000 fbf4 	bl	800d818 <__lshift>
 800d030:	4606      	mov	r6, r0
 800d032:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d034:	2b00      	cmp	r3, #0
 800d036:	d069      	beq.n	800d10c <_dtoa_r+0x924>
 800d038:	4631      	mov	r1, r6
 800d03a:	4658      	mov	r0, fp
 800d03c:	f000 fc58 	bl	800d8f0 <__mcmp>
 800d040:	2800      	cmp	r0, #0
 800d042:	da63      	bge.n	800d10c <_dtoa_r+0x924>
 800d044:	2300      	movs	r3, #0
 800d046:	4659      	mov	r1, fp
 800d048:	220a      	movs	r2, #10
 800d04a:	4620      	mov	r0, r4
 800d04c:	f000 fa34 	bl	800d4b8 <__multadd>
 800d050:	9b08      	ldr	r3, [sp, #32]
 800d052:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d056:	4683      	mov	fp, r0
 800d058:	2b00      	cmp	r3, #0
 800d05a:	f000 818f 	beq.w	800d37c <_dtoa_r+0xb94>
 800d05e:	4639      	mov	r1, r7
 800d060:	2300      	movs	r3, #0
 800d062:	220a      	movs	r2, #10
 800d064:	4620      	mov	r0, r4
 800d066:	f000 fa27 	bl	800d4b8 <__multadd>
 800d06a:	f1b9 0f00 	cmp.w	r9, #0
 800d06e:	4607      	mov	r7, r0
 800d070:	f300 808e 	bgt.w	800d190 <_dtoa_r+0x9a8>
 800d074:	9b05      	ldr	r3, [sp, #20]
 800d076:	2b02      	cmp	r3, #2
 800d078:	dc50      	bgt.n	800d11c <_dtoa_r+0x934>
 800d07a:	e089      	b.n	800d190 <_dtoa_r+0x9a8>
 800d07c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d07e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d082:	e75d      	b.n	800cf40 <_dtoa_r+0x758>
 800d084:	9b01      	ldr	r3, [sp, #4]
 800d086:	1e5e      	subs	r6, r3, #1
 800d088:	9b06      	ldr	r3, [sp, #24]
 800d08a:	42b3      	cmp	r3, r6
 800d08c:	bfbf      	itttt	lt
 800d08e:	9b06      	ldrlt	r3, [sp, #24]
 800d090:	9606      	strlt	r6, [sp, #24]
 800d092:	1af2      	sublt	r2, r6, r3
 800d094:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800d096:	bfb6      	itet	lt
 800d098:	189b      	addlt	r3, r3, r2
 800d09a:	1b9e      	subge	r6, r3, r6
 800d09c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800d09e:	9b01      	ldr	r3, [sp, #4]
 800d0a0:	bfb8      	it	lt
 800d0a2:	2600      	movlt	r6, #0
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	bfb5      	itete	lt
 800d0a8:	eba8 0503 	sublt.w	r5, r8, r3
 800d0ac:	9b01      	ldrge	r3, [sp, #4]
 800d0ae:	2300      	movlt	r3, #0
 800d0b0:	4645      	movge	r5, r8
 800d0b2:	e747      	b.n	800cf44 <_dtoa_r+0x75c>
 800d0b4:	9e06      	ldr	r6, [sp, #24]
 800d0b6:	9f08      	ldr	r7, [sp, #32]
 800d0b8:	4645      	mov	r5, r8
 800d0ba:	e74c      	b.n	800cf56 <_dtoa_r+0x76e>
 800d0bc:	9a06      	ldr	r2, [sp, #24]
 800d0be:	e775      	b.n	800cfac <_dtoa_r+0x7c4>
 800d0c0:	9b05      	ldr	r3, [sp, #20]
 800d0c2:	2b01      	cmp	r3, #1
 800d0c4:	dc18      	bgt.n	800d0f8 <_dtoa_r+0x910>
 800d0c6:	9b02      	ldr	r3, [sp, #8]
 800d0c8:	b9b3      	cbnz	r3, 800d0f8 <_dtoa_r+0x910>
 800d0ca:	9b03      	ldr	r3, [sp, #12]
 800d0cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d0d0:	b9a3      	cbnz	r3, 800d0fc <_dtoa_r+0x914>
 800d0d2:	9b03      	ldr	r3, [sp, #12]
 800d0d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d0d8:	0d1b      	lsrs	r3, r3, #20
 800d0da:	051b      	lsls	r3, r3, #20
 800d0dc:	b12b      	cbz	r3, 800d0ea <_dtoa_r+0x902>
 800d0de:	9b04      	ldr	r3, [sp, #16]
 800d0e0:	3301      	adds	r3, #1
 800d0e2:	9304      	str	r3, [sp, #16]
 800d0e4:	f108 0801 	add.w	r8, r8, #1
 800d0e8:	2301      	movs	r3, #1
 800d0ea:	9306      	str	r3, [sp, #24]
 800d0ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	f47f af74 	bne.w	800cfdc <_dtoa_r+0x7f4>
 800d0f4:	2001      	movs	r0, #1
 800d0f6:	e779      	b.n	800cfec <_dtoa_r+0x804>
 800d0f8:	2300      	movs	r3, #0
 800d0fa:	e7f6      	b.n	800d0ea <_dtoa_r+0x902>
 800d0fc:	9b02      	ldr	r3, [sp, #8]
 800d0fe:	e7f4      	b.n	800d0ea <_dtoa_r+0x902>
 800d100:	d085      	beq.n	800d00e <_dtoa_r+0x826>
 800d102:	4618      	mov	r0, r3
 800d104:	301c      	adds	r0, #28
 800d106:	e77d      	b.n	800d004 <_dtoa_r+0x81c>
 800d108:	40240000 	.word	0x40240000
 800d10c:	9b01      	ldr	r3, [sp, #4]
 800d10e:	2b00      	cmp	r3, #0
 800d110:	dc38      	bgt.n	800d184 <_dtoa_r+0x99c>
 800d112:	9b05      	ldr	r3, [sp, #20]
 800d114:	2b02      	cmp	r3, #2
 800d116:	dd35      	ble.n	800d184 <_dtoa_r+0x99c>
 800d118:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800d11c:	f1b9 0f00 	cmp.w	r9, #0
 800d120:	d10d      	bne.n	800d13e <_dtoa_r+0x956>
 800d122:	4631      	mov	r1, r6
 800d124:	464b      	mov	r3, r9
 800d126:	2205      	movs	r2, #5
 800d128:	4620      	mov	r0, r4
 800d12a:	f000 f9c5 	bl	800d4b8 <__multadd>
 800d12e:	4601      	mov	r1, r0
 800d130:	4606      	mov	r6, r0
 800d132:	4658      	mov	r0, fp
 800d134:	f000 fbdc 	bl	800d8f0 <__mcmp>
 800d138:	2800      	cmp	r0, #0
 800d13a:	f73f adbd 	bgt.w	800ccb8 <_dtoa_r+0x4d0>
 800d13e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d140:	9d00      	ldr	r5, [sp, #0]
 800d142:	ea6f 0a03 	mvn.w	sl, r3
 800d146:	f04f 0800 	mov.w	r8, #0
 800d14a:	4631      	mov	r1, r6
 800d14c:	4620      	mov	r0, r4
 800d14e:	f000 f991 	bl	800d474 <_Bfree>
 800d152:	2f00      	cmp	r7, #0
 800d154:	f43f aeb4 	beq.w	800cec0 <_dtoa_r+0x6d8>
 800d158:	f1b8 0f00 	cmp.w	r8, #0
 800d15c:	d005      	beq.n	800d16a <_dtoa_r+0x982>
 800d15e:	45b8      	cmp	r8, r7
 800d160:	d003      	beq.n	800d16a <_dtoa_r+0x982>
 800d162:	4641      	mov	r1, r8
 800d164:	4620      	mov	r0, r4
 800d166:	f000 f985 	bl	800d474 <_Bfree>
 800d16a:	4639      	mov	r1, r7
 800d16c:	4620      	mov	r0, r4
 800d16e:	f000 f981 	bl	800d474 <_Bfree>
 800d172:	e6a5      	b.n	800cec0 <_dtoa_r+0x6d8>
 800d174:	2600      	movs	r6, #0
 800d176:	4637      	mov	r7, r6
 800d178:	e7e1      	b.n	800d13e <_dtoa_r+0x956>
 800d17a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800d17c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800d180:	4637      	mov	r7, r6
 800d182:	e599      	b.n	800ccb8 <_dtoa_r+0x4d0>
 800d184:	9b08      	ldr	r3, [sp, #32]
 800d186:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	f000 80fd 	beq.w	800d38a <_dtoa_r+0xba2>
 800d190:	2d00      	cmp	r5, #0
 800d192:	dd05      	ble.n	800d1a0 <_dtoa_r+0x9b8>
 800d194:	4639      	mov	r1, r7
 800d196:	462a      	mov	r2, r5
 800d198:	4620      	mov	r0, r4
 800d19a:	f000 fb3d 	bl	800d818 <__lshift>
 800d19e:	4607      	mov	r7, r0
 800d1a0:	9b06      	ldr	r3, [sp, #24]
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d05c      	beq.n	800d260 <_dtoa_r+0xa78>
 800d1a6:	6879      	ldr	r1, [r7, #4]
 800d1a8:	4620      	mov	r0, r4
 800d1aa:	f000 f923 	bl	800d3f4 <_Balloc>
 800d1ae:	4605      	mov	r5, r0
 800d1b0:	b928      	cbnz	r0, 800d1be <_dtoa_r+0x9d6>
 800d1b2:	4b80      	ldr	r3, [pc, #512]	; (800d3b4 <_dtoa_r+0xbcc>)
 800d1b4:	4602      	mov	r2, r0
 800d1b6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800d1ba:	f7ff bb2e 	b.w	800c81a <_dtoa_r+0x32>
 800d1be:	693a      	ldr	r2, [r7, #16]
 800d1c0:	3202      	adds	r2, #2
 800d1c2:	0092      	lsls	r2, r2, #2
 800d1c4:	f107 010c 	add.w	r1, r7, #12
 800d1c8:	300c      	adds	r0, #12
 800d1ca:	f000 f905 	bl	800d3d8 <memcpy>
 800d1ce:	2201      	movs	r2, #1
 800d1d0:	4629      	mov	r1, r5
 800d1d2:	4620      	mov	r0, r4
 800d1d4:	f000 fb20 	bl	800d818 <__lshift>
 800d1d8:	9b00      	ldr	r3, [sp, #0]
 800d1da:	3301      	adds	r3, #1
 800d1dc:	9301      	str	r3, [sp, #4]
 800d1de:	9b00      	ldr	r3, [sp, #0]
 800d1e0:	444b      	add	r3, r9
 800d1e2:	9307      	str	r3, [sp, #28]
 800d1e4:	9b02      	ldr	r3, [sp, #8]
 800d1e6:	f003 0301 	and.w	r3, r3, #1
 800d1ea:	46b8      	mov	r8, r7
 800d1ec:	9306      	str	r3, [sp, #24]
 800d1ee:	4607      	mov	r7, r0
 800d1f0:	9b01      	ldr	r3, [sp, #4]
 800d1f2:	4631      	mov	r1, r6
 800d1f4:	3b01      	subs	r3, #1
 800d1f6:	4658      	mov	r0, fp
 800d1f8:	9302      	str	r3, [sp, #8]
 800d1fa:	f7ff fa69 	bl	800c6d0 <quorem>
 800d1fe:	4603      	mov	r3, r0
 800d200:	3330      	adds	r3, #48	; 0x30
 800d202:	9004      	str	r0, [sp, #16]
 800d204:	4641      	mov	r1, r8
 800d206:	4658      	mov	r0, fp
 800d208:	9308      	str	r3, [sp, #32]
 800d20a:	f000 fb71 	bl	800d8f0 <__mcmp>
 800d20e:	463a      	mov	r2, r7
 800d210:	4681      	mov	r9, r0
 800d212:	4631      	mov	r1, r6
 800d214:	4620      	mov	r0, r4
 800d216:	f000 fb87 	bl	800d928 <__mdiff>
 800d21a:	68c2      	ldr	r2, [r0, #12]
 800d21c:	9b08      	ldr	r3, [sp, #32]
 800d21e:	4605      	mov	r5, r0
 800d220:	bb02      	cbnz	r2, 800d264 <_dtoa_r+0xa7c>
 800d222:	4601      	mov	r1, r0
 800d224:	4658      	mov	r0, fp
 800d226:	f000 fb63 	bl	800d8f0 <__mcmp>
 800d22a:	9b08      	ldr	r3, [sp, #32]
 800d22c:	4602      	mov	r2, r0
 800d22e:	4629      	mov	r1, r5
 800d230:	4620      	mov	r0, r4
 800d232:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800d236:	f000 f91d 	bl	800d474 <_Bfree>
 800d23a:	9b05      	ldr	r3, [sp, #20]
 800d23c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d23e:	9d01      	ldr	r5, [sp, #4]
 800d240:	ea43 0102 	orr.w	r1, r3, r2
 800d244:	9b06      	ldr	r3, [sp, #24]
 800d246:	430b      	orrs	r3, r1
 800d248:	9b08      	ldr	r3, [sp, #32]
 800d24a:	d10d      	bne.n	800d268 <_dtoa_r+0xa80>
 800d24c:	2b39      	cmp	r3, #57	; 0x39
 800d24e:	d029      	beq.n	800d2a4 <_dtoa_r+0xabc>
 800d250:	f1b9 0f00 	cmp.w	r9, #0
 800d254:	dd01      	ble.n	800d25a <_dtoa_r+0xa72>
 800d256:	9b04      	ldr	r3, [sp, #16]
 800d258:	3331      	adds	r3, #49	; 0x31
 800d25a:	9a02      	ldr	r2, [sp, #8]
 800d25c:	7013      	strb	r3, [r2, #0]
 800d25e:	e774      	b.n	800d14a <_dtoa_r+0x962>
 800d260:	4638      	mov	r0, r7
 800d262:	e7b9      	b.n	800d1d8 <_dtoa_r+0x9f0>
 800d264:	2201      	movs	r2, #1
 800d266:	e7e2      	b.n	800d22e <_dtoa_r+0xa46>
 800d268:	f1b9 0f00 	cmp.w	r9, #0
 800d26c:	db06      	blt.n	800d27c <_dtoa_r+0xa94>
 800d26e:	9905      	ldr	r1, [sp, #20]
 800d270:	ea41 0909 	orr.w	r9, r1, r9
 800d274:	9906      	ldr	r1, [sp, #24]
 800d276:	ea59 0101 	orrs.w	r1, r9, r1
 800d27a:	d120      	bne.n	800d2be <_dtoa_r+0xad6>
 800d27c:	2a00      	cmp	r2, #0
 800d27e:	ddec      	ble.n	800d25a <_dtoa_r+0xa72>
 800d280:	4659      	mov	r1, fp
 800d282:	2201      	movs	r2, #1
 800d284:	4620      	mov	r0, r4
 800d286:	9301      	str	r3, [sp, #4]
 800d288:	f000 fac6 	bl	800d818 <__lshift>
 800d28c:	4631      	mov	r1, r6
 800d28e:	4683      	mov	fp, r0
 800d290:	f000 fb2e 	bl	800d8f0 <__mcmp>
 800d294:	2800      	cmp	r0, #0
 800d296:	9b01      	ldr	r3, [sp, #4]
 800d298:	dc02      	bgt.n	800d2a0 <_dtoa_r+0xab8>
 800d29a:	d1de      	bne.n	800d25a <_dtoa_r+0xa72>
 800d29c:	07da      	lsls	r2, r3, #31
 800d29e:	d5dc      	bpl.n	800d25a <_dtoa_r+0xa72>
 800d2a0:	2b39      	cmp	r3, #57	; 0x39
 800d2a2:	d1d8      	bne.n	800d256 <_dtoa_r+0xa6e>
 800d2a4:	9a02      	ldr	r2, [sp, #8]
 800d2a6:	2339      	movs	r3, #57	; 0x39
 800d2a8:	7013      	strb	r3, [r2, #0]
 800d2aa:	462b      	mov	r3, r5
 800d2ac:	461d      	mov	r5, r3
 800d2ae:	3b01      	subs	r3, #1
 800d2b0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d2b4:	2a39      	cmp	r2, #57	; 0x39
 800d2b6:	d050      	beq.n	800d35a <_dtoa_r+0xb72>
 800d2b8:	3201      	adds	r2, #1
 800d2ba:	701a      	strb	r2, [r3, #0]
 800d2bc:	e745      	b.n	800d14a <_dtoa_r+0x962>
 800d2be:	2a00      	cmp	r2, #0
 800d2c0:	dd03      	ble.n	800d2ca <_dtoa_r+0xae2>
 800d2c2:	2b39      	cmp	r3, #57	; 0x39
 800d2c4:	d0ee      	beq.n	800d2a4 <_dtoa_r+0xabc>
 800d2c6:	3301      	adds	r3, #1
 800d2c8:	e7c7      	b.n	800d25a <_dtoa_r+0xa72>
 800d2ca:	9a01      	ldr	r2, [sp, #4]
 800d2cc:	9907      	ldr	r1, [sp, #28]
 800d2ce:	f802 3c01 	strb.w	r3, [r2, #-1]
 800d2d2:	428a      	cmp	r2, r1
 800d2d4:	d02a      	beq.n	800d32c <_dtoa_r+0xb44>
 800d2d6:	4659      	mov	r1, fp
 800d2d8:	2300      	movs	r3, #0
 800d2da:	220a      	movs	r2, #10
 800d2dc:	4620      	mov	r0, r4
 800d2de:	f000 f8eb 	bl	800d4b8 <__multadd>
 800d2e2:	45b8      	cmp	r8, r7
 800d2e4:	4683      	mov	fp, r0
 800d2e6:	f04f 0300 	mov.w	r3, #0
 800d2ea:	f04f 020a 	mov.w	r2, #10
 800d2ee:	4641      	mov	r1, r8
 800d2f0:	4620      	mov	r0, r4
 800d2f2:	d107      	bne.n	800d304 <_dtoa_r+0xb1c>
 800d2f4:	f000 f8e0 	bl	800d4b8 <__multadd>
 800d2f8:	4680      	mov	r8, r0
 800d2fa:	4607      	mov	r7, r0
 800d2fc:	9b01      	ldr	r3, [sp, #4]
 800d2fe:	3301      	adds	r3, #1
 800d300:	9301      	str	r3, [sp, #4]
 800d302:	e775      	b.n	800d1f0 <_dtoa_r+0xa08>
 800d304:	f000 f8d8 	bl	800d4b8 <__multadd>
 800d308:	4639      	mov	r1, r7
 800d30a:	4680      	mov	r8, r0
 800d30c:	2300      	movs	r3, #0
 800d30e:	220a      	movs	r2, #10
 800d310:	4620      	mov	r0, r4
 800d312:	f000 f8d1 	bl	800d4b8 <__multadd>
 800d316:	4607      	mov	r7, r0
 800d318:	e7f0      	b.n	800d2fc <_dtoa_r+0xb14>
 800d31a:	f1b9 0f00 	cmp.w	r9, #0
 800d31e:	9a00      	ldr	r2, [sp, #0]
 800d320:	bfcc      	ite	gt
 800d322:	464d      	movgt	r5, r9
 800d324:	2501      	movle	r5, #1
 800d326:	4415      	add	r5, r2
 800d328:	f04f 0800 	mov.w	r8, #0
 800d32c:	4659      	mov	r1, fp
 800d32e:	2201      	movs	r2, #1
 800d330:	4620      	mov	r0, r4
 800d332:	9301      	str	r3, [sp, #4]
 800d334:	f000 fa70 	bl	800d818 <__lshift>
 800d338:	4631      	mov	r1, r6
 800d33a:	4683      	mov	fp, r0
 800d33c:	f000 fad8 	bl	800d8f0 <__mcmp>
 800d340:	2800      	cmp	r0, #0
 800d342:	dcb2      	bgt.n	800d2aa <_dtoa_r+0xac2>
 800d344:	d102      	bne.n	800d34c <_dtoa_r+0xb64>
 800d346:	9b01      	ldr	r3, [sp, #4]
 800d348:	07db      	lsls	r3, r3, #31
 800d34a:	d4ae      	bmi.n	800d2aa <_dtoa_r+0xac2>
 800d34c:	462b      	mov	r3, r5
 800d34e:	461d      	mov	r5, r3
 800d350:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d354:	2a30      	cmp	r2, #48	; 0x30
 800d356:	d0fa      	beq.n	800d34e <_dtoa_r+0xb66>
 800d358:	e6f7      	b.n	800d14a <_dtoa_r+0x962>
 800d35a:	9a00      	ldr	r2, [sp, #0]
 800d35c:	429a      	cmp	r2, r3
 800d35e:	d1a5      	bne.n	800d2ac <_dtoa_r+0xac4>
 800d360:	f10a 0a01 	add.w	sl, sl, #1
 800d364:	2331      	movs	r3, #49	; 0x31
 800d366:	e779      	b.n	800d25c <_dtoa_r+0xa74>
 800d368:	4b13      	ldr	r3, [pc, #76]	; (800d3b8 <_dtoa_r+0xbd0>)
 800d36a:	f7ff baaf 	b.w	800c8cc <_dtoa_r+0xe4>
 800d36e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d370:	2b00      	cmp	r3, #0
 800d372:	f47f aa86 	bne.w	800c882 <_dtoa_r+0x9a>
 800d376:	4b11      	ldr	r3, [pc, #68]	; (800d3bc <_dtoa_r+0xbd4>)
 800d378:	f7ff baa8 	b.w	800c8cc <_dtoa_r+0xe4>
 800d37c:	f1b9 0f00 	cmp.w	r9, #0
 800d380:	dc03      	bgt.n	800d38a <_dtoa_r+0xba2>
 800d382:	9b05      	ldr	r3, [sp, #20]
 800d384:	2b02      	cmp	r3, #2
 800d386:	f73f aec9 	bgt.w	800d11c <_dtoa_r+0x934>
 800d38a:	9d00      	ldr	r5, [sp, #0]
 800d38c:	4631      	mov	r1, r6
 800d38e:	4658      	mov	r0, fp
 800d390:	f7ff f99e 	bl	800c6d0 <quorem>
 800d394:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800d398:	f805 3b01 	strb.w	r3, [r5], #1
 800d39c:	9a00      	ldr	r2, [sp, #0]
 800d39e:	1aaa      	subs	r2, r5, r2
 800d3a0:	4591      	cmp	r9, r2
 800d3a2:	ddba      	ble.n	800d31a <_dtoa_r+0xb32>
 800d3a4:	4659      	mov	r1, fp
 800d3a6:	2300      	movs	r3, #0
 800d3a8:	220a      	movs	r2, #10
 800d3aa:	4620      	mov	r0, r4
 800d3ac:	f000 f884 	bl	800d4b8 <__multadd>
 800d3b0:	4683      	mov	fp, r0
 800d3b2:	e7eb      	b.n	800d38c <_dtoa_r+0xba4>
 800d3b4:	0800f8cb 	.word	0x0800f8cb
 800d3b8:	0800f824 	.word	0x0800f824
 800d3bc:	0800f848 	.word	0x0800f848

0800d3c0 <_localeconv_r>:
 800d3c0:	4800      	ldr	r0, [pc, #0]	; (800d3c4 <_localeconv_r+0x4>)
 800d3c2:	4770      	bx	lr
 800d3c4:	200002ec 	.word	0x200002ec

0800d3c8 <malloc>:
 800d3c8:	4b02      	ldr	r3, [pc, #8]	; (800d3d4 <malloc+0xc>)
 800d3ca:	4601      	mov	r1, r0
 800d3cc:	6818      	ldr	r0, [r3, #0]
 800d3ce:	f000 bbef 	b.w	800dbb0 <_malloc_r>
 800d3d2:	bf00      	nop
 800d3d4:	20000198 	.word	0x20000198

0800d3d8 <memcpy>:
 800d3d8:	440a      	add	r2, r1
 800d3da:	4291      	cmp	r1, r2
 800d3dc:	f100 33ff 	add.w	r3, r0, #4294967295
 800d3e0:	d100      	bne.n	800d3e4 <memcpy+0xc>
 800d3e2:	4770      	bx	lr
 800d3e4:	b510      	push	{r4, lr}
 800d3e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d3ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d3ee:	4291      	cmp	r1, r2
 800d3f0:	d1f9      	bne.n	800d3e6 <memcpy+0xe>
 800d3f2:	bd10      	pop	{r4, pc}

0800d3f4 <_Balloc>:
 800d3f4:	b570      	push	{r4, r5, r6, lr}
 800d3f6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d3f8:	4604      	mov	r4, r0
 800d3fa:	460d      	mov	r5, r1
 800d3fc:	b976      	cbnz	r6, 800d41c <_Balloc+0x28>
 800d3fe:	2010      	movs	r0, #16
 800d400:	f7ff ffe2 	bl	800d3c8 <malloc>
 800d404:	4602      	mov	r2, r0
 800d406:	6260      	str	r0, [r4, #36]	; 0x24
 800d408:	b920      	cbnz	r0, 800d414 <_Balloc+0x20>
 800d40a:	4b18      	ldr	r3, [pc, #96]	; (800d46c <_Balloc+0x78>)
 800d40c:	4818      	ldr	r0, [pc, #96]	; (800d470 <_Balloc+0x7c>)
 800d40e:	2166      	movs	r1, #102	; 0x66
 800d410:	f000 fc38 	bl	800dc84 <__assert_func>
 800d414:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d418:	6006      	str	r6, [r0, #0]
 800d41a:	60c6      	str	r6, [r0, #12]
 800d41c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d41e:	68f3      	ldr	r3, [r6, #12]
 800d420:	b183      	cbz	r3, 800d444 <_Balloc+0x50>
 800d422:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d424:	68db      	ldr	r3, [r3, #12]
 800d426:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d42a:	b9b8      	cbnz	r0, 800d45c <_Balloc+0x68>
 800d42c:	2101      	movs	r1, #1
 800d42e:	fa01 f605 	lsl.w	r6, r1, r5
 800d432:	1d72      	adds	r2, r6, #5
 800d434:	0092      	lsls	r2, r2, #2
 800d436:	4620      	mov	r0, r4
 800d438:	f000 fb5a 	bl	800daf0 <_calloc_r>
 800d43c:	b160      	cbz	r0, 800d458 <_Balloc+0x64>
 800d43e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d442:	e00e      	b.n	800d462 <_Balloc+0x6e>
 800d444:	2221      	movs	r2, #33	; 0x21
 800d446:	2104      	movs	r1, #4
 800d448:	4620      	mov	r0, r4
 800d44a:	f000 fb51 	bl	800daf0 <_calloc_r>
 800d44e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d450:	60f0      	str	r0, [r6, #12]
 800d452:	68db      	ldr	r3, [r3, #12]
 800d454:	2b00      	cmp	r3, #0
 800d456:	d1e4      	bne.n	800d422 <_Balloc+0x2e>
 800d458:	2000      	movs	r0, #0
 800d45a:	bd70      	pop	{r4, r5, r6, pc}
 800d45c:	6802      	ldr	r2, [r0, #0]
 800d45e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d462:	2300      	movs	r3, #0
 800d464:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d468:	e7f7      	b.n	800d45a <_Balloc+0x66>
 800d46a:	bf00      	nop
 800d46c:	0800f855 	.word	0x0800f855
 800d470:	0800f8dc 	.word	0x0800f8dc

0800d474 <_Bfree>:
 800d474:	b570      	push	{r4, r5, r6, lr}
 800d476:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d478:	4605      	mov	r5, r0
 800d47a:	460c      	mov	r4, r1
 800d47c:	b976      	cbnz	r6, 800d49c <_Bfree+0x28>
 800d47e:	2010      	movs	r0, #16
 800d480:	f7ff ffa2 	bl	800d3c8 <malloc>
 800d484:	4602      	mov	r2, r0
 800d486:	6268      	str	r0, [r5, #36]	; 0x24
 800d488:	b920      	cbnz	r0, 800d494 <_Bfree+0x20>
 800d48a:	4b09      	ldr	r3, [pc, #36]	; (800d4b0 <_Bfree+0x3c>)
 800d48c:	4809      	ldr	r0, [pc, #36]	; (800d4b4 <_Bfree+0x40>)
 800d48e:	218a      	movs	r1, #138	; 0x8a
 800d490:	f000 fbf8 	bl	800dc84 <__assert_func>
 800d494:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d498:	6006      	str	r6, [r0, #0]
 800d49a:	60c6      	str	r6, [r0, #12]
 800d49c:	b13c      	cbz	r4, 800d4ae <_Bfree+0x3a>
 800d49e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d4a0:	6862      	ldr	r2, [r4, #4]
 800d4a2:	68db      	ldr	r3, [r3, #12]
 800d4a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d4a8:	6021      	str	r1, [r4, #0]
 800d4aa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d4ae:	bd70      	pop	{r4, r5, r6, pc}
 800d4b0:	0800f855 	.word	0x0800f855
 800d4b4:	0800f8dc 	.word	0x0800f8dc

0800d4b8 <__multadd>:
 800d4b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4bc:	690e      	ldr	r6, [r1, #16]
 800d4be:	4607      	mov	r7, r0
 800d4c0:	4698      	mov	r8, r3
 800d4c2:	460c      	mov	r4, r1
 800d4c4:	f101 0014 	add.w	r0, r1, #20
 800d4c8:	2300      	movs	r3, #0
 800d4ca:	6805      	ldr	r5, [r0, #0]
 800d4cc:	b2a9      	uxth	r1, r5
 800d4ce:	fb02 8101 	mla	r1, r2, r1, r8
 800d4d2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800d4d6:	0c2d      	lsrs	r5, r5, #16
 800d4d8:	fb02 c505 	mla	r5, r2, r5, ip
 800d4dc:	b289      	uxth	r1, r1
 800d4de:	3301      	adds	r3, #1
 800d4e0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800d4e4:	429e      	cmp	r6, r3
 800d4e6:	f840 1b04 	str.w	r1, [r0], #4
 800d4ea:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800d4ee:	dcec      	bgt.n	800d4ca <__multadd+0x12>
 800d4f0:	f1b8 0f00 	cmp.w	r8, #0
 800d4f4:	d022      	beq.n	800d53c <__multadd+0x84>
 800d4f6:	68a3      	ldr	r3, [r4, #8]
 800d4f8:	42b3      	cmp	r3, r6
 800d4fa:	dc19      	bgt.n	800d530 <__multadd+0x78>
 800d4fc:	6861      	ldr	r1, [r4, #4]
 800d4fe:	4638      	mov	r0, r7
 800d500:	3101      	adds	r1, #1
 800d502:	f7ff ff77 	bl	800d3f4 <_Balloc>
 800d506:	4605      	mov	r5, r0
 800d508:	b928      	cbnz	r0, 800d516 <__multadd+0x5e>
 800d50a:	4602      	mov	r2, r0
 800d50c:	4b0d      	ldr	r3, [pc, #52]	; (800d544 <__multadd+0x8c>)
 800d50e:	480e      	ldr	r0, [pc, #56]	; (800d548 <__multadd+0x90>)
 800d510:	21b5      	movs	r1, #181	; 0xb5
 800d512:	f000 fbb7 	bl	800dc84 <__assert_func>
 800d516:	6922      	ldr	r2, [r4, #16]
 800d518:	3202      	adds	r2, #2
 800d51a:	f104 010c 	add.w	r1, r4, #12
 800d51e:	0092      	lsls	r2, r2, #2
 800d520:	300c      	adds	r0, #12
 800d522:	f7ff ff59 	bl	800d3d8 <memcpy>
 800d526:	4621      	mov	r1, r4
 800d528:	4638      	mov	r0, r7
 800d52a:	f7ff ffa3 	bl	800d474 <_Bfree>
 800d52e:	462c      	mov	r4, r5
 800d530:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800d534:	3601      	adds	r6, #1
 800d536:	f8c3 8014 	str.w	r8, [r3, #20]
 800d53a:	6126      	str	r6, [r4, #16]
 800d53c:	4620      	mov	r0, r4
 800d53e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d542:	bf00      	nop
 800d544:	0800f8cb 	.word	0x0800f8cb
 800d548:	0800f8dc 	.word	0x0800f8dc

0800d54c <__hi0bits>:
 800d54c:	0c03      	lsrs	r3, r0, #16
 800d54e:	041b      	lsls	r3, r3, #16
 800d550:	b9d3      	cbnz	r3, 800d588 <__hi0bits+0x3c>
 800d552:	0400      	lsls	r0, r0, #16
 800d554:	2310      	movs	r3, #16
 800d556:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d55a:	bf04      	itt	eq
 800d55c:	0200      	lsleq	r0, r0, #8
 800d55e:	3308      	addeq	r3, #8
 800d560:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d564:	bf04      	itt	eq
 800d566:	0100      	lsleq	r0, r0, #4
 800d568:	3304      	addeq	r3, #4
 800d56a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d56e:	bf04      	itt	eq
 800d570:	0080      	lsleq	r0, r0, #2
 800d572:	3302      	addeq	r3, #2
 800d574:	2800      	cmp	r0, #0
 800d576:	db05      	blt.n	800d584 <__hi0bits+0x38>
 800d578:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d57c:	f103 0301 	add.w	r3, r3, #1
 800d580:	bf08      	it	eq
 800d582:	2320      	moveq	r3, #32
 800d584:	4618      	mov	r0, r3
 800d586:	4770      	bx	lr
 800d588:	2300      	movs	r3, #0
 800d58a:	e7e4      	b.n	800d556 <__hi0bits+0xa>

0800d58c <__lo0bits>:
 800d58c:	6803      	ldr	r3, [r0, #0]
 800d58e:	f013 0207 	ands.w	r2, r3, #7
 800d592:	4601      	mov	r1, r0
 800d594:	d00b      	beq.n	800d5ae <__lo0bits+0x22>
 800d596:	07da      	lsls	r2, r3, #31
 800d598:	d424      	bmi.n	800d5e4 <__lo0bits+0x58>
 800d59a:	0798      	lsls	r0, r3, #30
 800d59c:	bf49      	itett	mi
 800d59e:	085b      	lsrmi	r3, r3, #1
 800d5a0:	089b      	lsrpl	r3, r3, #2
 800d5a2:	2001      	movmi	r0, #1
 800d5a4:	600b      	strmi	r3, [r1, #0]
 800d5a6:	bf5c      	itt	pl
 800d5a8:	600b      	strpl	r3, [r1, #0]
 800d5aa:	2002      	movpl	r0, #2
 800d5ac:	4770      	bx	lr
 800d5ae:	b298      	uxth	r0, r3
 800d5b0:	b9b0      	cbnz	r0, 800d5e0 <__lo0bits+0x54>
 800d5b2:	0c1b      	lsrs	r3, r3, #16
 800d5b4:	2010      	movs	r0, #16
 800d5b6:	f013 0fff 	tst.w	r3, #255	; 0xff
 800d5ba:	bf04      	itt	eq
 800d5bc:	0a1b      	lsreq	r3, r3, #8
 800d5be:	3008      	addeq	r0, #8
 800d5c0:	071a      	lsls	r2, r3, #28
 800d5c2:	bf04      	itt	eq
 800d5c4:	091b      	lsreq	r3, r3, #4
 800d5c6:	3004      	addeq	r0, #4
 800d5c8:	079a      	lsls	r2, r3, #30
 800d5ca:	bf04      	itt	eq
 800d5cc:	089b      	lsreq	r3, r3, #2
 800d5ce:	3002      	addeq	r0, #2
 800d5d0:	07da      	lsls	r2, r3, #31
 800d5d2:	d403      	bmi.n	800d5dc <__lo0bits+0x50>
 800d5d4:	085b      	lsrs	r3, r3, #1
 800d5d6:	f100 0001 	add.w	r0, r0, #1
 800d5da:	d005      	beq.n	800d5e8 <__lo0bits+0x5c>
 800d5dc:	600b      	str	r3, [r1, #0]
 800d5de:	4770      	bx	lr
 800d5e0:	4610      	mov	r0, r2
 800d5e2:	e7e8      	b.n	800d5b6 <__lo0bits+0x2a>
 800d5e4:	2000      	movs	r0, #0
 800d5e6:	4770      	bx	lr
 800d5e8:	2020      	movs	r0, #32
 800d5ea:	4770      	bx	lr

0800d5ec <__i2b>:
 800d5ec:	b510      	push	{r4, lr}
 800d5ee:	460c      	mov	r4, r1
 800d5f0:	2101      	movs	r1, #1
 800d5f2:	f7ff feff 	bl	800d3f4 <_Balloc>
 800d5f6:	4602      	mov	r2, r0
 800d5f8:	b928      	cbnz	r0, 800d606 <__i2b+0x1a>
 800d5fa:	4b05      	ldr	r3, [pc, #20]	; (800d610 <__i2b+0x24>)
 800d5fc:	4805      	ldr	r0, [pc, #20]	; (800d614 <__i2b+0x28>)
 800d5fe:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d602:	f000 fb3f 	bl	800dc84 <__assert_func>
 800d606:	2301      	movs	r3, #1
 800d608:	6144      	str	r4, [r0, #20]
 800d60a:	6103      	str	r3, [r0, #16]
 800d60c:	bd10      	pop	{r4, pc}
 800d60e:	bf00      	nop
 800d610:	0800f8cb 	.word	0x0800f8cb
 800d614:	0800f8dc 	.word	0x0800f8dc

0800d618 <__multiply>:
 800d618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d61c:	4614      	mov	r4, r2
 800d61e:	690a      	ldr	r2, [r1, #16]
 800d620:	6923      	ldr	r3, [r4, #16]
 800d622:	429a      	cmp	r2, r3
 800d624:	bfb8      	it	lt
 800d626:	460b      	movlt	r3, r1
 800d628:	460d      	mov	r5, r1
 800d62a:	bfbc      	itt	lt
 800d62c:	4625      	movlt	r5, r4
 800d62e:	461c      	movlt	r4, r3
 800d630:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800d634:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800d638:	68ab      	ldr	r3, [r5, #8]
 800d63a:	6869      	ldr	r1, [r5, #4]
 800d63c:	eb0a 0709 	add.w	r7, sl, r9
 800d640:	42bb      	cmp	r3, r7
 800d642:	b085      	sub	sp, #20
 800d644:	bfb8      	it	lt
 800d646:	3101      	addlt	r1, #1
 800d648:	f7ff fed4 	bl	800d3f4 <_Balloc>
 800d64c:	b930      	cbnz	r0, 800d65c <__multiply+0x44>
 800d64e:	4602      	mov	r2, r0
 800d650:	4b42      	ldr	r3, [pc, #264]	; (800d75c <__multiply+0x144>)
 800d652:	4843      	ldr	r0, [pc, #268]	; (800d760 <__multiply+0x148>)
 800d654:	f240 115d 	movw	r1, #349	; 0x15d
 800d658:	f000 fb14 	bl	800dc84 <__assert_func>
 800d65c:	f100 0614 	add.w	r6, r0, #20
 800d660:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800d664:	4633      	mov	r3, r6
 800d666:	2200      	movs	r2, #0
 800d668:	4543      	cmp	r3, r8
 800d66a:	d31e      	bcc.n	800d6aa <__multiply+0x92>
 800d66c:	f105 0c14 	add.w	ip, r5, #20
 800d670:	f104 0314 	add.w	r3, r4, #20
 800d674:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800d678:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800d67c:	9202      	str	r2, [sp, #8]
 800d67e:	ebac 0205 	sub.w	r2, ip, r5
 800d682:	3a15      	subs	r2, #21
 800d684:	f022 0203 	bic.w	r2, r2, #3
 800d688:	3204      	adds	r2, #4
 800d68a:	f105 0115 	add.w	r1, r5, #21
 800d68e:	458c      	cmp	ip, r1
 800d690:	bf38      	it	cc
 800d692:	2204      	movcc	r2, #4
 800d694:	9201      	str	r2, [sp, #4]
 800d696:	9a02      	ldr	r2, [sp, #8]
 800d698:	9303      	str	r3, [sp, #12]
 800d69a:	429a      	cmp	r2, r3
 800d69c:	d808      	bhi.n	800d6b0 <__multiply+0x98>
 800d69e:	2f00      	cmp	r7, #0
 800d6a0:	dc55      	bgt.n	800d74e <__multiply+0x136>
 800d6a2:	6107      	str	r7, [r0, #16]
 800d6a4:	b005      	add	sp, #20
 800d6a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6aa:	f843 2b04 	str.w	r2, [r3], #4
 800d6ae:	e7db      	b.n	800d668 <__multiply+0x50>
 800d6b0:	f8b3 a000 	ldrh.w	sl, [r3]
 800d6b4:	f1ba 0f00 	cmp.w	sl, #0
 800d6b8:	d020      	beq.n	800d6fc <__multiply+0xe4>
 800d6ba:	f105 0e14 	add.w	lr, r5, #20
 800d6be:	46b1      	mov	r9, r6
 800d6c0:	2200      	movs	r2, #0
 800d6c2:	f85e 4b04 	ldr.w	r4, [lr], #4
 800d6c6:	f8d9 b000 	ldr.w	fp, [r9]
 800d6ca:	b2a1      	uxth	r1, r4
 800d6cc:	fa1f fb8b 	uxth.w	fp, fp
 800d6d0:	fb0a b101 	mla	r1, sl, r1, fp
 800d6d4:	4411      	add	r1, r2
 800d6d6:	f8d9 2000 	ldr.w	r2, [r9]
 800d6da:	0c24      	lsrs	r4, r4, #16
 800d6dc:	0c12      	lsrs	r2, r2, #16
 800d6de:	fb0a 2404 	mla	r4, sl, r4, r2
 800d6e2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800d6e6:	b289      	uxth	r1, r1
 800d6e8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800d6ec:	45f4      	cmp	ip, lr
 800d6ee:	f849 1b04 	str.w	r1, [r9], #4
 800d6f2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800d6f6:	d8e4      	bhi.n	800d6c2 <__multiply+0xaa>
 800d6f8:	9901      	ldr	r1, [sp, #4]
 800d6fa:	5072      	str	r2, [r6, r1]
 800d6fc:	9a03      	ldr	r2, [sp, #12]
 800d6fe:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d702:	3304      	adds	r3, #4
 800d704:	f1b9 0f00 	cmp.w	r9, #0
 800d708:	d01f      	beq.n	800d74a <__multiply+0x132>
 800d70a:	6834      	ldr	r4, [r6, #0]
 800d70c:	f105 0114 	add.w	r1, r5, #20
 800d710:	46b6      	mov	lr, r6
 800d712:	f04f 0a00 	mov.w	sl, #0
 800d716:	880a      	ldrh	r2, [r1, #0]
 800d718:	f8be b002 	ldrh.w	fp, [lr, #2]
 800d71c:	fb09 b202 	mla	r2, r9, r2, fp
 800d720:	4492      	add	sl, r2
 800d722:	b2a4      	uxth	r4, r4
 800d724:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800d728:	f84e 4b04 	str.w	r4, [lr], #4
 800d72c:	f851 4b04 	ldr.w	r4, [r1], #4
 800d730:	f8be 2000 	ldrh.w	r2, [lr]
 800d734:	0c24      	lsrs	r4, r4, #16
 800d736:	fb09 2404 	mla	r4, r9, r4, r2
 800d73a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800d73e:	458c      	cmp	ip, r1
 800d740:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800d744:	d8e7      	bhi.n	800d716 <__multiply+0xfe>
 800d746:	9a01      	ldr	r2, [sp, #4]
 800d748:	50b4      	str	r4, [r6, r2]
 800d74a:	3604      	adds	r6, #4
 800d74c:	e7a3      	b.n	800d696 <__multiply+0x7e>
 800d74e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d752:	2b00      	cmp	r3, #0
 800d754:	d1a5      	bne.n	800d6a2 <__multiply+0x8a>
 800d756:	3f01      	subs	r7, #1
 800d758:	e7a1      	b.n	800d69e <__multiply+0x86>
 800d75a:	bf00      	nop
 800d75c:	0800f8cb 	.word	0x0800f8cb
 800d760:	0800f8dc 	.word	0x0800f8dc

0800d764 <__pow5mult>:
 800d764:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d768:	4615      	mov	r5, r2
 800d76a:	f012 0203 	ands.w	r2, r2, #3
 800d76e:	4606      	mov	r6, r0
 800d770:	460f      	mov	r7, r1
 800d772:	d007      	beq.n	800d784 <__pow5mult+0x20>
 800d774:	4c25      	ldr	r4, [pc, #148]	; (800d80c <__pow5mult+0xa8>)
 800d776:	3a01      	subs	r2, #1
 800d778:	2300      	movs	r3, #0
 800d77a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d77e:	f7ff fe9b 	bl	800d4b8 <__multadd>
 800d782:	4607      	mov	r7, r0
 800d784:	10ad      	asrs	r5, r5, #2
 800d786:	d03d      	beq.n	800d804 <__pow5mult+0xa0>
 800d788:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d78a:	b97c      	cbnz	r4, 800d7ac <__pow5mult+0x48>
 800d78c:	2010      	movs	r0, #16
 800d78e:	f7ff fe1b 	bl	800d3c8 <malloc>
 800d792:	4602      	mov	r2, r0
 800d794:	6270      	str	r0, [r6, #36]	; 0x24
 800d796:	b928      	cbnz	r0, 800d7a4 <__pow5mult+0x40>
 800d798:	4b1d      	ldr	r3, [pc, #116]	; (800d810 <__pow5mult+0xac>)
 800d79a:	481e      	ldr	r0, [pc, #120]	; (800d814 <__pow5mult+0xb0>)
 800d79c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d7a0:	f000 fa70 	bl	800dc84 <__assert_func>
 800d7a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d7a8:	6004      	str	r4, [r0, #0]
 800d7aa:	60c4      	str	r4, [r0, #12]
 800d7ac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d7b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d7b4:	b94c      	cbnz	r4, 800d7ca <__pow5mult+0x66>
 800d7b6:	f240 2171 	movw	r1, #625	; 0x271
 800d7ba:	4630      	mov	r0, r6
 800d7bc:	f7ff ff16 	bl	800d5ec <__i2b>
 800d7c0:	2300      	movs	r3, #0
 800d7c2:	f8c8 0008 	str.w	r0, [r8, #8]
 800d7c6:	4604      	mov	r4, r0
 800d7c8:	6003      	str	r3, [r0, #0]
 800d7ca:	f04f 0900 	mov.w	r9, #0
 800d7ce:	07eb      	lsls	r3, r5, #31
 800d7d0:	d50a      	bpl.n	800d7e8 <__pow5mult+0x84>
 800d7d2:	4639      	mov	r1, r7
 800d7d4:	4622      	mov	r2, r4
 800d7d6:	4630      	mov	r0, r6
 800d7d8:	f7ff ff1e 	bl	800d618 <__multiply>
 800d7dc:	4639      	mov	r1, r7
 800d7de:	4680      	mov	r8, r0
 800d7e0:	4630      	mov	r0, r6
 800d7e2:	f7ff fe47 	bl	800d474 <_Bfree>
 800d7e6:	4647      	mov	r7, r8
 800d7e8:	106d      	asrs	r5, r5, #1
 800d7ea:	d00b      	beq.n	800d804 <__pow5mult+0xa0>
 800d7ec:	6820      	ldr	r0, [r4, #0]
 800d7ee:	b938      	cbnz	r0, 800d800 <__pow5mult+0x9c>
 800d7f0:	4622      	mov	r2, r4
 800d7f2:	4621      	mov	r1, r4
 800d7f4:	4630      	mov	r0, r6
 800d7f6:	f7ff ff0f 	bl	800d618 <__multiply>
 800d7fa:	6020      	str	r0, [r4, #0]
 800d7fc:	f8c0 9000 	str.w	r9, [r0]
 800d800:	4604      	mov	r4, r0
 800d802:	e7e4      	b.n	800d7ce <__pow5mult+0x6a>
 800d804:	4638      	mov	r0, r7
 800d806:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d80a:	bf00      	nop
 800d80c:	0800fa30 	.word	0x0800fa30
 800d810:	0800f855 	.word	0x0800f855
 800d814:	0800f8dc 	.word	0x0800f8dc

0800d818 <__lshift>:
 800d818:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d81c:	460c      	mov	r4, r1
 800d81e:	6849      	ldr	r1, [r1, #4]
 800d820:	6923      	ldr	r3, [r4, #16]
 800d822:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d826:	68a3      	ldr	r3, [r4, #8]
 800d828:	4607      	mov	r7, r0
 800d82a:	4691      	mov	r9, r2
 800d82c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d830:	f108 0601 	add.w	r6, r8, #1
 800d834:	42b3      	cmp	r3, r6
 800d836:	db0b      	blt.n	800d850 <__lshift+0x38>
 800d838:	4638      	mov	r0, r7
 800d83a:	f7ff fddb 	bl	800d3f4 <_Balloc>
 800d83e:	4605      	mov	r5, r0
 800d840:	b948      	cbnz	r0, 800d856 <__lshift+0x3e>
 800d842:	4602      	mov	r2, r0
 800d844:	4b28      	ldr	r3, [pc, #160]	; (800d8e8 <__lshift+0xd0>)
 800d846:	4829      	ldr	r0, [pc, #164]	; (800d8ec <__lshift+0xd4>)
 800d848:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d84c:	f000 fa1a 	bl	800dc84 <__assert_func>
 800d850:	3101      	adds	r1, #1
 800d852:	005b      	lsls	r3, r3, #1
 800d854:	e7ee      	b.n	800d834 <__lshift+0x1c>
 800d856:	2300      	movs	r3, #0
 800d858:	f100 0114 	add.w	r1, r0, #20
 800d85c:	f100 0210 	add.w	r2, r0, #16
 800d860:	4618      	mov	r0, r3
 800d862:	4553      	cmp	r3, sl
 800d864:	db33      	blt.n	800d8ce <__lshift+0xb6>
 800d866:	6920      	ldr	r0, [r4, #16]
 800d868:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d86c:	f104 0314 	add.w	r3, r4, #20
 800d870:	f019 091f 	ands.w	r9, r9, #31
 800d874:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d878:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d87c:	d02b      	beq.n	800d8d6 <__lshift+0xbe>
 800d87e:	f1c9 0e20 	rsb	lr, r9, #32
 800d882:	468a      	mov	sl, r1
 800d884:	2200      	movs	r2, #0
 800d886:	6818      	ldr	r0, [r3, #0]
 800d888:	fa00 f009 	lsl.w	r0, r0, r9
 800d88c:	4302      	orrs	r2, r0
 800d88e:	f84a 2b04 	str.w	r2, [sl], #4
 800d892:	f853 2b04 	ldr.w	r2, [r3], #4
 800d896:	459c      	cmp	ip, r3
 800d898:	fa22 f20e 	lsr.w	r2, r2, lr
 800d89c:	d8f3      	bhi.n	800d886 <__lshift+0x6e>
 800d89e:	ebac 0304 	sub.w	r3, ip, r4
 800d8a2:	3b15      	subs	r3, #21
 800d8a4:	f023 0303 	bic.w	r3, r3, #3
 800d8a8:	3304      	adds	r3, #4
 800d8aa:	f104 0015 	add.w	r0, r4, #21
 800d8ae:	4584      	cmp	ip, r0
 800d8b0:	bf38      	it	cc
 800d8b2:	2304      	movcc	r3, #4
 800d8b4:	50ca      	str	r2, [r1, r3]
 800d8b6:	b10a      	cbz	r2, 800d8bc <__lshift+0xa4>
 800d8b8:	f108 0602 	add.w	r6, r8, #2
 800d8bc:	3e01      	subs	r6, #1
 800d8be:	4638      	mov	r0, r7
 800d8c0:	612e      	str	r6, [r5, #16]
 800d8c2:	4621      	mov	r1, r4
 800d8c4:	f7ff fdd6 	bl	800d474 <_Bfree>
 800d8c8:	4628      	mov	r0, r5
 800d8ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8ce:	f842 0f04 	str.w	r0, [r2, #4]!
 800d8d2:	3301      	adds	r3, #1
 800d8d4:	e7c5      	b.n	800d862 <__lshift+0x4a>
 800d8d6:	3904      	subs	r1, #4
 800d8d8:	f853 2b04 	ldr.w	r2, [r3], #4
 800d8dc:	f841 2f04 	str.w	r2, [r1, #4]!
 800d8e0:	459c      	cmp	ip, r3
 800d8e2:	d8f9      	bhi.n	800d8d8 <__lshift+0xc0>
 800d8e4:	e7ea      	b.n	800d8bc <__lshift+0xa4>
 800d8e6:	bf00      	nop
 800d8e8:	0800f8cb 	.word	0x0800f8cb
 800d8ec:	0800f8dc 	.word	0x0800f8dc

0800d8f0 <__mcmp>:
 800d8f0:	b530      	push	{r4, r5, lr}
 800d8f2:	6902      	ldr	r2, [r0, #16]
 800d8f4:	690c      	ldr	r4, [r1, #16]
 800d8f6:	1b12      	subs	r2, r2, r4
 800d8f8:	d10e      	bne.n	800d918 <__mcmp+0x28>
 800d8fa:	f100 0314 	add.w	r3, r0, #20
 800d8fe:	3114      	adds	r1, #20
 800d900:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d904:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d908:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d90c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d910:	42a5      	cmp	r5, r4
 800d912:	d003      	beq.n	800d91c <__mcmp+0x2c>
 800d914:	d305      	bcc.n	800d922 <__mcmp+0x32>
 800d916:	2201      	movs	r2, #1
 800d918:	4610      	mov	r0, r2
 800d91a:	bd30      	pop	{r4, r5, pc}
 800d91c:	4283      	cmp	r3, r0
 800d91e:	d3f3      	bcc.n	800d908 <__mcmp+0x18>
 800d920:	e7fa      	b.n	800d918 <__mcmp+0x28>
 800d922:	f04f 32ff 	mov.w	r2, #4294967295
 800d926:	e7f7      	b.n	800d918 <__mcmp+0x28>

0800d928 <__mdiff>:
 800d928:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d92c:	460c      	mov	r4, r1
 800d92e:	4606      	mov	r6, r0
 800d930:	4611      	mov	r1, r2
 800d932:	4620      	mov	r0, r4
 800d934:	4617      	mov	r7, r2
 800d936:	f7ff ffdb 	bl	800d8f0 <__mcmp>
 800d93a:	1e05      	subs	r5, r0, #0
 800d93c:	d110      	bne.n	800d960 <__mdiff+0x38>
 800d93e:	4629      	mov	r1, r5
 800d940:	4630      	mov	r0, r6
 800d942:	f7ff fd57 	bl	800d3f4 <_Balloc>
 800d946:	b930      	cbnz	r0, 800d956 <__mdiff+0x2e>
 800d948:	4b39      	ldr	r3, [pc, #228]	; (800da30 <__mdiff+0x108>)
 800d94a:	4602      	mov	r2, r0
 800d94c:	f240 2132 	movw	r1, #562	; 0x232
 800d950:	4838      	ldr	r0, [pc, #224]	; (800da34 <__mdiff+0x10c>)
 800d952:	f000 f997 	bl	800dc84 <__assert_func>
 800d956:	2301      	movs	r3, #1
 800d958:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d95c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d960:	bfa4      	itt	ge
 800d962:	463b      	movge	r3, r7
 800d964:	4627      	movge	r7, r4
 800d966:	4630      	mov	r0, r6
 800d968:	6879      	ldr	r1, [r7, #4]
 800d96a:	bfa6      	itte	ge
 800d96c:	461c      	movge	r4, r3
 800d96e:	2500      	movge	r5, #0
 800d970:	2501      	movlt	r5, #1
 800d972:	f7ff fd3f 	bl	800d3f4 <_Balloc>
 800d976:	b920      	cbnz	r0, 800d982 <__mdiff+0x5a>
 800d978:	4b2d      	ldr	r3, [pc, #180]	; (800da30 <__mdiff+0x108>)
 800d97a:	4602      	mov	r2, r0
 800d97c:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d980:	e7e6      	b.n	800d950 <__mdiff+0x28>
 800d982:	693e      	ldr	r6, [r7, #16]
 800d984:	60c5      	str	r5, [r0, #12]
 800d986:	6925      	ldr	r5, [r4, #16]
 800d988:	f107 0114 	add.w	r1, r7, #20
 800d98c:	f104 0914 	add.w	r9, r4, #20
 800d990:	f100 0e14 	add.w	lr, r0, #20
 800d994:	f107 0210 	add.w	r2, r7, #16
 800d998:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800d99c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800d9a0:	46f2      	mov	sl, lr
 800d9a2:	2700      	movs	r7, #0
 800d9a4:	f859 3b04 	ldr.w	r3, [r9], #4
 800d9a8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d9ac:	fa1f f883 	uxth.w	r8, r3
 800d9b0:	fa17 f78b 	uxtah	r7, r7, fp
 800d9b4:	0c1b      	lsrs	r3, r3, #16
 800d9b6:	eba7 0808 	sub.w	r8, r7, r8
 800d9ba:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d9be:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d9c2:	fa1f f888 	uxth.w	r8, r8
 800d9c6:	141f      	asrs	r7, r3, #16
 800d9c8:	454d      	cmp	r5, r9
 800d9ca:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d9ce:	f84a 3b04 	str.w	r3, [sl], #4
 800d9d2:	d8e7      	bhi.n	800d9a4 <__mdiff+0x7c>
 800d9d4:	1b2b      	subs	r3, r5, r4
 800d9d6:	3b15      	subs	r3, #21
 800d9d8:	f023 0303 	bic.w	r3, r3, #3
 800d9dc:	3304      	adds	r3, #4
 800d9de:	3415      	adds	r4, #21
 800d9e0:	42a5      	cmp	r5, r4
 800d9e2:	bf38      	it	cc
 800d9e4:	2304      	movcc	r3, #4
 800d9e6:	4419      	add	r1, r3
 800d9e8:	4473      	add	r3, lr
 800d9ea:	469e      	mov	lr, r3
 800d9ec:	460d      	mov	r5, r1
 800d9ee:	4565      	cmp	r5, ip
 800d9f0:	d30e      	bcc.n	800da10 <__mdiff+0xe8>
 800d9f2:	f10c 0203 	add.w	r2, ip, #3
 800d9f6:	1a52      	subs	r2, r2, r1
 800d9f8:	f022 0203 	bic.w	r2, r2, #3
 800d9fc:	3903      	subs	r1, #3
 800d9fe:	458c      	cmp	ip, r1
 800da00:	bf38      	it	cc
 800da02:	2200      	movcc	r2, #0
 800da04:	441a      	add	r2, r3
 800da06:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800da0a:	b17b      	cbz	r3, 800da2c <__mdiff+0x104>
 800da0c:	6106      	str	r6, [r0, #16]
 800da0e:	e7a5      	b.n	800d95c <__mdiff+0x34>
 800da10:	f855 8b04 	ldr.w	r8, [r5], #4
 800da14:	fa17 f488 	uxtah	r4, r7, r8
 800da18:	1422      	asrs	r2, r4, #16
 800da1a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800da1e:	b2a4      	uxth	r4, r4
 800da20:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800da24:	f84e 4b04 	str.w	r4, [lr], #4
 800da28:	1417      	asrs	r7, r2, #16
 800da2a:	e7e0      	b.n	800d9ee <__mdiff+0xc6>
 800da2c:	3e01      	subs	r6, #1
 800da2e:	e7ea      	b.n	800da06 <__mdiff+0xde>
 800da30:	0800f8cb 	.word	0x0800f8cb
 800da34:	0800f8dc 	.word	0x0800f8dc

0800da38 <__d2b>:
 800da38:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800da3c:	4689      	mov	r9, r1
 800da3e:	2101      	movs	r1, #1
 800da40:	ec57 6b10 	vmov	r6, r7, d0
 800da44:	4690      	mov	r8, r2
 800da46:	f7ff fcd5 	bl	800d3f4 <_Balloc>
 800da4a:	4604      	mov	r4, r0
 800da4c:	b930      	cbnz	r0, 800da5c <__d2b+0x24>
 800da4e:	4602      	mov	r2, r0
 800da50:	4b25      	ldr	r3, [pc, #148]	; (800dae8 <__d2b+0xb0>)
 800da52:	4826      	ldr	r0, [pc, #152]	; (800daec <__d2b+0xb4>)
 800da54:	f240 310a 	movw	r1, #778	; 0x30a
 800da58:	f000 f914 	bl	800dc84 <__assert_func>
 800da5c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800da60:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800da64:	bb35      	cbnz	r5, 800dab4 <__d2b+0x7c>
 800da66:	2e00      	cmp	r6, #0
 800da68:	9301      	str	r3, [sp, #4]
 800da6a:	d028      	beq.n	800dabe <__d2b+0x86>
 800da6c:	4668      	mov	r0, sp
 800da6e:	9600      	str	r6, [sp, #0]
 800da70:	f7ff fd8c 	bl	800d58c <__lo0bits>
 800da74:	9900      	ldr	r1, [sp, #0]
 800da76:	b300      	cbz	r0, 800daba <__d2b+0x82>
 800da78:	9a01      	ldr	r2, [sp, #4]
 800da7a:	f1c0 0320 	rsb	r3, r0, #32
 800da7e:	fa02 f303 	lsl.w	r3, r2, r3
 800da82:	430b      	orrs	r3, r1
 800da84:	40c2      	lsrs	r2, r0
 800da86:	6163      	str	r3, [r4, #20]
 800da88:	9201      	str	r2, [sp, #4]
 800da8a:	9b01      	ldr	r3, [sp, #4]
 800da8c:	61a3      	str	r3, [r4, #24]
 800da8e:	2b00      	cmp	r3, #0
 800da90:	bf14      	ite	ne
 800da92:	2202      	movne	r2, #2
 800da94:	2201      	moveq	r2, #1
 800da96:	6122      	str	r2, [r4, #16]
 800da98:	b1d5      	cbz	r5, 800dad0 <__d2b+0x98>
 800da9a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800da9e:	4405      	add	r5, r0
 800daa0:	f8c9 5000 	str.w	r5, [r9]
 800daa4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800daa8:	f8c8 0000 	str.w	r0, [r8]
 800daac:	4620      	mov	r0, r4
 800daae:	b003      	add	sp, #12
 800dab0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dab4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dab8:	e7d5      	b.n	800da66 <__d2b+0x2e>
 800daba:	6161      	str	r1, [r4, #20]
 800dabc:	e7e5      	b.n	800da8a <__d2b+0x52>
 800dabe:	a801      	add	r0, sp, #4
 800dac0:	f7ff fd64 	bl	800d58c <__lo0bits>
 800dac4:	9b01      	ldr	r3, [sp, #4]
 800dac6:	6163      	str	r3, [r4, #20]
 800dac8:	2201      	movs	r2, #1
 800daca:	6122      	str	r2, [r4, #16]
 800dacc:	3020      	adds	r0, #32
 800dace:	e7e3      	b.n	800da98 <__d2b+0x60>
 800dad0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800dad4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800dad8:	f8c9 0000 	str.w	r0, [r9]
 800dadc:	6918      	ldr	r0, [r3, #16]
 800dade:	f7ff fd35 	bl	800d54c <__hi0bits>
 800dae2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800dae6:	e7df      	b.n	800daa8 <__d2b+0x70>
 800dae8:	0800f8cb 	.word	0x0800f8cb
 800daec:	0800f8dc 	.word	0x0800f8dc

0800daf0 <_calloc_r>:
 800daf0:	b513      	push	{r0, r1, r4, lr}
 800daf2:	434a      	muls	r2, r1
 800daf4:	4611      	mov	r1, r2
 800daf6:	9201      	str	r2, [sp, #4]
 800daf8:	f000 f85a 	bl	800dbb0 <_malloc_r>
 800dafc:	4604      	mov	r4, r0
 800dafe:	b118      	cbz	r0, 800db08 <_calloc_r+0x18>
 800db00:	9a01      	ldr	r2, [sp, #4]
 800db02:	2100      	movs	r1, #0
 800db04:	f7fe f972 	bl	800bdec <memset>
 800db08:	4620      	mov	r0, r4
 800db0a:	b002      	add	sp, #8
 800db0c:	bd10      	pop	{r4, pc}
	...

0800db10 <_free_r>:
 800db10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800db12:	2900      	cmp	r1, #0
 800db14:	d048      	beq.n	800dba8 <_free_r+0x98>
 800db16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800db1a:	9001      	str	r0, [sp, #4]
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	f1a1 0404 	sub.w	r4, r1, #4
 800db22:	bfb8      	it	lt
 800db24:	18e4      	addlt	r4, r4, r3
 800db26:	f000 f8ef 	bl	800dd08 <__malloc_lock>
 800db2a:	4a20      	ldr	r2, [pc, #128]	; (800dbac <_free_r+0x9c>)
 800db2c:	9801      	ldr	r0, [sp, #4]
 800db2e:	6813      	ldr	r3, [r2, #0]
 800db30:	4615      	mov	r5, r2
 800db32:	b933      	cbnz	r3, 800db42 <_free_r+0x32>
 800db34:	6063      	str	r3, [r4, #4]
 800db36:	6014      	str	r4, [r2, #0]
 800db38:	b003      	add	sp, #12
 800db3a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800db3e:	f000 b8e9 	b.w	800dd14 <__malloc_unlock>
 800db42:	42a3      	cmp	r3, r4
 800db44:	d90b      	bls.n	800db5e <_free_r+0x4e>
 800db46:	6821      	ldr	r1, [r4, #0]
 800db48:	1862      	adds	r2, r4, r1
 800db4a:	4293      	cmp	r3, r2
 800db4c:	bf04      	itt	eq
 800db4e:	681a      	ldreq	r2, [r3, #0]
 800db50:	685b      	ldreq	r3, [r3, #4]
 800db52:	6063      	str	r3, [r4, #4]
 800db54:	bf04      	itt	eq
 800db56:	1852      	addeq	r2, r2, r1
 800db58:	6022      	streq	r2, [r4, #0]
 800db5a:	602c      	str	r4, [r5, #0]
 800db5c:	e7ec      	b.n	800db38 <_free_r+0x28>
 800db5e:	461a      	mov	r2, r3
 800db60:	685b      	ldr	r3, [r3, #4]
 800db62:	b10b      	cbz	r3, 800db68 <_free_r+0x58>
 800db64:	42a3      	cmp	r3, r4
 800db66:	d9fa      	bls.n	800db5e <_free_r+0x4e>
 800db68:	6811      	ldr	r1, [r2, #0]
 800db6a:	1855      	adds	r5, r2, r1
 800db6c:	42a5      	cmp	r5, r4
 800db6e:	d10b      	bne.n	800db88 <_free_r+0x78>
 800db70:	6824      	ldr	r4, [r4, #0]
 800db72:	4421      	add	r1, r4
 800db74:	1854      	adds	r4, r2, r1
 800db76:	42a3      	cmp	r3, r4
 800db78:	6011      	str	r1, [r2, #0]
 800db7a:	d1dd      	bne.n	800db38 <_free_r+0x28>
 800db7c:	681c      	ldr	r4, [r3, #0]
 800db7e:	685b      	ldr	r3, [r3, #4]
 800db80:	6053      	str	r3, [r2, #4]
 800db82:	4421      	add	r1, r4
 800db84:	6011      	str	r1, [r2, #0]
 800db86:	e7d7      	b.n	800db38 <_free_r+0x28>
 800db88:	d902      	bls.n	800db90 <_free_r+0x80>
 800db8a:	230c      	movs	r3, #12
 800db8c:	6003      	str	r3, [r0, #0]
 800db8e:	e7d3      	b.n	800db38 <_free_r+0x28>
 800db90:	6825      	ldr	r5, [r4, #0]
 800db92:	1961      	adds	r1, r4, r5
 800db94:	428b      	cmp	r3, r1
 800db96:	bf04      	itt	eq
 800db98:	6819      	ldreq	r1, [r3, #0]
 800db9a:	685b      	ldreq	r3, [r3, #4]
 800db9c:	6063      	str	r3, [r4, #4]
 800db9e:	bf04      	itt	eq
 800dba0:	1949      	addeq	r1, r1, r5
 800dba2:	6021      	streq	r1, [r4, #0]
 800dba4:	6054      	str	r4, [r2, #4]
 800dba6:	e7c7      	b.n	800db38 <_free_r+0x28>
 800dba8:	b003      	add	sp, #12
 800dbaa:	bd30      	pop	{r4, r5, pc}
 800dbac:	200003d4 	.word	0x200003d4

0800dbb0 <_malloc_r>:
 800dbb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbb2:	1ccd      	adds	r5, r1, #3
 800dbb4:	f025 0503 	bic.w	r5, r5, #3
 800dbb8:	3508      	adds	r5, #8
 800dbba:	2d0c      	cmp	r5, #12
 800dbbc:	bf38      	it	cc
 800dbbe:	250c      	movcc	r5, #12
 800dbc0:	2d00      	cmp	r5, #0
 800dbc2:	4606      	mov	r6, r0
 800dbc4:	db01      	blt.n	800dbca <_malloc_r+0x1a>
 800dbc6:	42a9      	cmp	r1, r5
 800dbc8:	d903      	bls.n	800dbd2 <_malloc_r+0x22>
 800dbca:	230c      	movs	r3, #12
 800dbcc:	6033      	str	r3, [r6, #0]
 800dbce:	2000      	movs	r0, #0
 800dbd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dbd2:	f000 f899 	bl	800dd08 <__malloc_lock>
 800dbd6:	4921      	ldr	r1, [pc, #132]	; (800dc5c <_malloc_r+0xac>)
 800dbd8:	680a      	ldr	r2, [r1, #0]
 800dbda:	4614      	mov	r4, r2
 800dbdc:	b99c      	cbnz	r4, 800dc06 <_malloc_r+0x56>
 800dbde:	4f20      	ldr	r7, [pc, #128]	; (800dc60 <_malloc_r+0xb0>)
 800dbe0:	683b      	ldr	r3, [r7, #0]
 800dbe2:	b923      	cbnz	r3, 800dbee <_malloc_r+0x3e>
 800dbe4:	4621      	mov	r1, r4
 800dbe6:	4630      	mov	r0, r6
 800dbe8:	f000 f83c 	bl	800dc64 <_sbrk_r>
 800dbec:	6038      	str	r0, [r7, #0]
 800dbee:	4629      	mov	r1, r5
 800dbf0:	4630      	mov	r0, r6
 800dbf2:	f000 f837 	bl	800dc64 <_sbrk_r>
 800dbf6:	1c43      	adds	r3, r0, #1
 800dbf8:	d123      	bne.n	800dc42 <_malloc_r+0x92>
 800dbfa:	230c      	movs	r3, #12
 800dbfc:	6033      	str	r3, [r6, #0]
 800dbfe:	4630      	mov	r0, r6
 800dc00:	f000 f888 	bl	800dd14 <__malloc_unlock>
 800dc04:	e7e3      	b.n	800dbce <_malloc_r+0x1e>
 800dc06:	6823      	ldr	r3, [r4, #0]
 800dc08:	1b5b      	subs	r3, r3, r5
 800dc0a:	d417      	bmi.n	800dc3c <_malloc_r+0x8c>
 800dc0c:	2b0b      	cmp	r3, #11
 800dc0e:	d903      	bls.n	800dc18 <_malloc_r+0x68>
 800dc10:	6023      	str	r3, [r4, #0]
 800dc12:	441c      	add	r4, r3
 800dc14:	6025      	str	r5, [r4, #0]
 800dc16:	e004      	b.n	800dc22 <_malloc_r+0x72>
 800dc18:	6863      	ldr	r3, [r4, #4]
 800dc1a:	42a2      	cmp	r2, r4
 800dc1c:	bf0c      	ite	eq
 800dc1e:	600b      	streq	r3, [r1, #0]
 800dc20:	6053      	strne	r3, [r2, #4]
 800dc22:	4630      	mov	r0, r6
 800dc24:	f000 f876 	bl	800dd14 <__malloc_unlock>
 800dc28:	f104 000b 	add.w	r0, r4, #11
 800dc2c:	1d23      	adds	r3, r4, #4
 800dc2e:	f020 0007 	bic.w	r0, r0, #7
 800dc32:	1ac2      	subs	r2, r0, r3
 800dc34:	d0cc      	beq.n	800dbd0 <_malloc_r+0x20>
 800dc36:	1a1b      	subs	r3, r3, r0
 800dc38:	50a3      	str	r3, [r4, r2]
 800dc3a:	e7c9      	b.n	800dbd0 <_malloc_r+0x20>
 800dc3c:	4622      	mov	r2, r4
 800dc3e:	6864      	ldr	r4, [r4, #4]
 800dc40:	e7cc      	b.n	800dbdc <_malloc_r+0x2c>
 800dc42:	1cc4      	adds	r4, r0, #3
 800dc44:	f024 0403 	bic.w	r4, r4, #3
 800dc48:	42a0      	cmp	r0, r4
 800dc4a:	d0e3      	beq.n	800dc14 <_malloc_r+0x64>
 800dc4c:	1a21      	subs	r1, r4, r0
 800dc4e:	4630      	mov	r0, r6
 800dc50:	f000 f808 	bl	800dc64 <_sbrk_r>
 800dc54:	3001      	adds	r0, #1
 800dc56:	d1dd      	bne.n	800dc14 <_malloc_r+0x64>
 800dc58:	e7cf      	b.n	800dbfa <_malloc_r+0x4a>
 800dc5a:	bf00      	nop
 800dc5c:	200003d4 	.word	0x200003d4
 800dc60:	200003d8 	.word	0x200003d8

0800dc64 <_sbrk_r>:
 800dc64:	b538      	push	{r3, r4, r5, lr}
 800dc66:	4d06      	ldr	r5, [pc, #24]	; (800dc80 <_sbrk_r+0x1c>)
 800dc68:	2300      	movs	r3, #0
 800dc6a:	4604      	mov	r4, r0
 800dc6c:	4608      	mov	r0, r1
 800dc6e:	602b      	str	r3, [r5, #0]
 800dc70:	f7f3 fefe 	bl	8001a70 <_sbrk>
 800dc74:	1c43      	adds	r3, r0, #1
 800dc76:	d102      	bne.n	800dc7e <_sbrk_r+0x1a>
 800dc78:	682b      	ldr	r3, [r5, #0]
 800dc7a:	b103      	cbz	r3, 800dc7e <_sbrk_r+0x1a>
 800dc7c:	6023      	str	r3, [r4, #0]
 800dc7e:	bd38      	pop	{r3, r4, r5, pc}
 800dc80:	200010f8 	.word	0x200010f8

0800dc84 <__assert_func>:
 800dc84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dc86:	4614      	mov	r4, r2
 800dc88:	461a      	mov	r2, r3
 800dc8a:	4b09      	ldr	r3, [pc, #36]	; (800dcb0 <__assert_func+0x2c>)
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	4605      	mov	r5, r0
 800dc90:	68d8      	ldr	r0, [r3, #12]
 800dc92:	b14c      	cbz	r4, 800dca8 <__assert_func+0x24>
 800dc94:	4b07      	ldr	r3, [pc, #28]	; (800dcb4 <__assert_func+0x30>)
 800dc96:	9100      	str	r1, [sp, #0]
 800dc98:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800dc9c:	4906      	ldr	r1, [pc, #24]	; (800dcb8 <__assert_func+0x34>)
 800dc9e:	462b      	mov	r3, r5
 800dca0:	f000 f80e 	bl	800dcc0 <fiprintf>
 800dca4:	f000 fa64 	bl	800e170 <abort>
 800dca8:	4b04      	ldr	r3, [pc, #16]	; (800dcbc <__assert_func+0x38>)
 800dcaa:	461c      	mov	r4, r3
 800dcac:	e7f3      	b.n	800dc96 <__assert_func+0x12>
 800dcae:	bf00      	nop
 800dcb0:	20000198 	.word	0x20000198
 800dcb4:	0800fa3c 	.word	0x0800fa3c
 800dcb8:	0800fa49 	.word	0x0800fa49
 800dcbc:	0800fa77 	.word	0x0800fa77

0800dcc0 <fiprintf>:
 800dcc0:	b40e      	push	{r1, r2, r3}
 800dcc2:	b503      	push	{r0, r1, lr}
 800dcc4:	4601      	mov	r1, r0
 800dcc6:	ab03      	add	r3, sp, #12
 800dcc8:	4805      	ldr	r0, [pc, #20]	; (800dce0 <fiprintf+0x20>)
 800dcca:	f853 2b04 	ldr.w	r2, [r3], #4
 800dcce:	6800      	ldr	r0, [r0, #0]
 800dcd0:	9301      	str	r3, [sp, #4]
 800dcd2:	f000 f84f 	bl	800dd74 <_vfiprintf_r>
 800dcd6:	b002      	add	sp, #8
 800dcd8:	f85d eb04 	ldr.w	lr, [sp], #4
 800dcdc:	b003      	add	sp, #12
 800dcde:	4770      	bx	lr
 800dce0:	20000198 	.word	0x20000198

0800dce4 <__ascii_mbtowc>:
 800dce4:	b082      	sub	sp, #8
 800dce6:	b901      	cbnz	r1, 800dcea <__ascii_mbtowc+0x6>
 800dce8:	a901      	add	r1, sp, #4
 800dcea:	b142      	cbz	r2, 800dcfe <__ascii_mbtowc+0x1a>
 800dcec:	b14b      	cbz	r3, 800dd02 <__ascii_mbtowc+0x1e>
 800dcee:	7813      	ldrb	r3, [r2, #0]
 800dcf0:	600b      	str	r3, [r1, #0]
 800dcf2:	7812      	ldrb	r2, [r2, #0]
 800dcf4:	1e10      	subs	r0, r2, #0
 800dcf6:	bf18      	it	ne
 800dcf8:	2001      	movne	r0, #1
 800dcfa:	b002      	add	sp, #8
 800dcfc:	4770      	bx	lr
 800dcfe:	4610      	mov	r0, r2
 800dd00:	e7fb      	b.n	800dcfa <__ascii_mbtowc+0x16>
 800dd02:	f06f 0001 	mvn.w	r0, #1
 800dd06:	e7f8      	b.n	800dcfa <__ascii_mbtowc+0x16>

0800dd08 <__malloc_lock>:
 800dd08:	4801      	ldr	r0, [pc, #4]	; (800dd10 <__malloc_lock+0x8>)
 800dd0a:	f000 bbf1 	b.w	800e4f0 <__retarget_lock_acquire_recursive>
 800dd0e:	bf00      	nop
 800dd10:	20001100 	.word	0x20001100

0800dd14 <__malloc_unlock>:
 800dd14:	4801      	ldr	r0, [pc, #4]	; (800dd1c <__malloc_unlock+0x8>)
 800dd16:	f000 bbec 	b.w	800e4f2 <__retarget_lock_release_recursive>
 800dd1a:	bf00      	nop
 800dd1c:	20001100 	.word	0x20001100

0800dd20 <__sfputc_r>:
 800dd20:	6893      	ldr	r3, [r2, #8]
 800dd22:	3b01      	subs	r3, #1
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	b410      	push	{r4}
 800dd28:	6093      	str	r3, [r2, #8]
 800dd2a:	da08      	bge.n	800dd3e <__sfputc_r+0x1e>
 800dd2c:	6994      	ldr	r4, [r2, #24]
 800dd2e:	42a3      	cmp	r3, r4
 800dd30:	db01      	blt.n	800dd36 <__sfputc_r+0x16>
 800dd32:	290a      	cmp	r1, #10
 800dd34:	d103      	bne.n	800dd3e <__sfputc_r+0x1e>
 800dd36:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dd3a:	f000 b94b 	b.w	800dfd4 <__swbuf_r>
 800dd3e:	6813      	ldr	r3, [r2, #0]
 800dd40:	1c58      	adds	r0, r3, #1
 800dd42:	6010      	str	r0, [r2, #0]
 800dd44:	7019      	strb	r1, [r3, #0]
 800dd46:	4608      	mov	r0, r1
 800dd48:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dd4c:	4770      	bx	lr

0800dd4e <__sfputs_r>:
 800dd4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd50:	4606      	mov	r6, r0
 800dd52:	460f      	mov	r7, r1
 800dd54:	4614      	mov	r4, r2
 800dd56:	18d5      	adds	r5, r2, r3
 800dd58:	42ac      	cmp	r4, r5
 800dd5a:	d101      	bne.n	800dd60 <__sfputs_r+0x12>
 800dd5c:	2000      	movs	r0, #0
 800dd5e:	e007      	b.n	800dd70 <__sfputs_r+0x22>
 800dd60:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd64:	463a      	mov	r2, r7
 800dd66:	4630      	mov	r0, r6
 800dd68:	f7ff ffda 	bl	800dd20 <__sfputc_r>
 800dd6c:	1c43      	adds	r3, r0, #1
 800dd6e:	d1f3      	bne.n	800dd58 <__sfputs_r+0xa>
 800dd70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800dd74 <_vfiprintf_r>:
 800dd74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd78:	460d      	mov	r5, r1
 800dd7a:	b09d      	sub	sp, #116	; 0x74
 800dd7c:	4614      	mov	r4, r2
 800dd7e:	4698      	mov	r8, r3
 800dd80:	4606      	mov	r6, r0
 800dd82:	b118      	cbz	r0, 800dd8c <_vfiprintf_r+0x18>
 800dd84:	6983      	ldr	r3, [r0, #24]
 800dd86:	b90b      	cbnz	r3, 800dd8c <_vfiprintf_r+0x18>
 800dd88:	f000 fb14 	bl	800e3b4 <__sinit>
 800dd8c:	4b89      	ldr	r3, [pc, #548]	; (800dfb4 <_vfiprintf_r+0x240>)
 800dd8e:	429d      	cmp	r5, r3
 800dd90:	d11b      	bne.n	800ddca <_vfiprintf_r+0x56>
 800dd92:	6875      	ldr	r5, [r6, #4]
 800dd94:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dd96:	07d9      	lsls	r1, r3, #31
 800dd98:	d405      	bmi.n	800dda6 <_vfiprintf_r+0x32>
 800dd9a:	89ab      	ldrh	r3, [r5, #12]
 800dd9c:	059a      	lsls	r2, r3, #22
 800dd9e:	d402      	bmi.n	800dda6 <_vfiprintf_r+0x32>
 800dda0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dda2:	f000 fba5 	bl	800e4f0 <__retarget_lock_acquire_recursive>
 800dda6:	89ab      	ldrh	r3, [r5, #12]
 800dda8:	071b      	lsls	r3, r3, #28
 800ddaa:	d501      	bpl.n	800ddb0 <_vfiprintf_r+0x3c>
 800ddac:	692b      	ldr	r3, [r5, #16]
 800ddae:	b9eb      	cbnz	r3, 800ddec <_vfiprintf_r+0x78>
 800ddb0:	4629      	mov	r1, r5
 800ddb2:	4630      	mov	r0, r6
 800ddb4:	f000 f96e 	bl	800e094 <__swsetup_r>
 800ddb8:	b1c0      	cbz	r0, 800ddec <_vfiprintf_r+0x78>
 800ddba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ddbc:	07dc      	lsls	r4, r3, #31
 800ddbe:	d50e      	bpl.n	800ddde <_vfiprintf_r+0x6a>
 800ddc0:	f04f 30ff 	mov.w	r0, #4294967295
 800ddc4:	b01d      	add	sp, #116	; 0x74
 800ddc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddca:	4b7b      	ldr	r3, [pc, #492]	; (800dfb8 <_vfiprintf_r+0x244>)
 800ddcc:	429d      	cmp	r5, r3
 800ddce:	d101      	bne.n	800ddd4 <_vfiprintf_r+0x60>
 800ddd0:	68b5      	ldr	r5, [r6, #8]
 800ddd2:	e7df      	b.n	800dd94 <_vfiprintf_r+0x20>
 800ddd4:	4b79      	ldr	r3, [pc, #484]	; (800dfbc <_vfiprintf_r+0x248>)
 800ddd6:	429d      	cmp	r5, r3
 800ddd8:	bf08      	it	eq
 800ddda:	68f5      	ldreq	r5, [r6, #12]
 800dddc:	e7da      	b.n	800dd94 <_vfiprintf_r+0x20>
 800ddde:	89ab      	ldrh	r3, [r5, #12]
 800dde0:	0598      	lsls	r0, r3, #22
 800dde2:	d4ed      	bmi.n	800ddc0 <_vfiprintf_r+0x4c>
 800dde4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dde6:	f000 fb84 	bl	800e4f2 <__retarget_lock_release_recursive>
 800ddea:	e7e9      	b.n	800ddc0 <_vfiprintf_r+0x4c>
 800ddec:	2300      	movs	r3, #0
 800ddee:	9309      	str	r3, [sp, #36]	; 0x24
 800ddf0:	2320      	movs	r3, #32
 800ddf2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ddf6:	f8cd 800c 	str.w	r8, [sp, #12]
 800ddfa:	2330      	movs	r3, #48	; 0x30
 800ddfc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800dfc0 <_vfiprintf_r+0x24c>
 800de00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800de04:	f04f 0901 	mov.w	r9, #1
 800de08:	4623      	mov	r3, r4
 800de0a:	469a      	mov	sl, r3
 800de0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800de10:	b10a      	cbz	r2, 800de16 <_vfiprintf_r+0xa2>
 800de12:	2a25      	cmp	r2, #37	; 0x25
 800de14:	d1f9      	bne.n	800de0a <_vfiprintf_r+0x96>
 800de16:	ebba 0b04 	subs.w	fp, sl, r4
 800de1a:	d00b      	beq.n	800de34 <_vfiprintf_r+0xc0>
 800de1c:	465b      	mov	r3, fp
 800de1e:	4622      	mov	r2, r4
 800de20:	4629      	mov	r1, r5
 800de22:	4630      	mov	r0, r6
 800de24:	f7ff ff93 	bl	800dd4e <__sfputs_r>
 800de28:	3001      	adds	r0, #1
 800de2a:	f000 80aa 	beq.w	800df82 <_vfiprintf_r+0x20e>
 800de2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800de30:	445a      	add	r2, fp
 800de32:	9209      	str	r2, [sp, #36]	; 0x24
 800de34:	f89a 3000 	ldrb.w	r3, [sl]
 800de38:	2b00      	cmp	r3, #0
 800de3a:	f000 80a2 	beq.w	800df82 <_vfiprintf_r+0x20e>
 800de3e:	2300      	movs	r3, #0
 800de40:	f04f 32ff 	mov.w	r2, #4294967295
 800de44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800de48:	f10a 0a01 	add.w	sl, sl, #1
 800de4c:	9304      	str	r3, [sp, #16]
 800de4e:	9307      	str	r3, [sp, #28]
 800de50:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800de54:	931a      	str	r3, [sp, #104]	; 0x68
 800de56:	4654      	mov	r4, sl
 800de58:	2205      	movs	r2, #5
 800de5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de5e:	4858      	ldr	r0, [pc, #352]	; (800dfc0 <_vfiprintf_r+0x24c>)
 800de60:	f7f2 f9be 	bl	80001e0 <memchr>
 800de64:	9a04      	ldr	r2, [sp, #16]
 800de66:	b9d8      	cbnz	r0, 800dea0 <_vfiprintf_r+0x12c>
 800de68:	06d1      	lsls	r1, r2, #27
 800de6a:	bf44      	itt	mi
 800de6c:	2320      	movmi	r3, #32
 800de6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800de72:	0713      	lsls	r3, r2, #28
 800de74:	bf44      	itt	mi
 800de76:	232b      	movmi	r3, #43	; 0x2b
 800de78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800de7c:	f89a 3000 	ldrb.w	r3, [sl]
 800de80:	2b2a      	cmp	r3, #42	; 0x2a
 800de82:	d015      	beq.n	800deb0 <_vfiprintf_r+0x13c>
 800de84:	9a07      	ldr	r2, [sp, #28]
 800de86:	4654      	mov	r4, sl
 800de88:	2000      	movs	r0, #0
 800de8a:	f04f 0c0a 	mov.w	ip, #10
 800de8e:	4621      	mov	r1, r4
 800de90:	f811 3b01 	ldrb.w	r3, [r1], #1
 800de94:	3b30      	subs	r3, #48	; 0x30
 800de96:	2b09      	cmp	r3, #9
 800de98:	d94e      	bls.n	800df38 <_vfiprintf_r+0x1c4>
 800de9a:	b1b0      	cbz	r0, 800deca <_vfiprintf_r+0x156>
 800de9c:	9207      	str	r2, [sp, #28]
 800de9e:	e014      	b.n	800deca <_vfiprintf_r+0x156>
 800dea0:	eba0 0308 	sub.w	r3, r0, r8
 800dea4:	fa09 f303 	lsl.w	r3, r9, r3
 800dea8:	4313      	orrs	r3, r2
 800deaa:	9304      	str	r3, [sp, #16]
 800deac:	46a2      	mov	sl, r4
 800deae:	e7d2      	b.n	800de56 <_vfiprintf_r+0xe2>
 800deb0:	9b03      	ldr	r3, [sp, #12]
 800deb2:	1d19      	adds	r1, r3, #4
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	9103      	str	r1, [sp, #12]
 800deb8:	2b00      	cmp	r3, #0
 800deba:	bfbb      	ittet	lt
 800debc:	425b      	neglt	r3, r3
 800debe:	f042 0202 	orrlt.w	r2, r2, #2
 800dec2:	9307      	strge	r3, [sp, #28]
 800dec4:	9307      	strlt	r3, [sp, #28]
 800dec6:	bfb8      	it	lt
 800dec8:	9204      	strlt	r2, [sp, #16]
 800deca:	7823      	ldrb	r3, [r4, #0]
 800decc:	2b2e      	cmp	r3, #46	; 0x2e
 800dece:	d10c      	bne.n	800deea <_vfiprintf_r+0x176>
 800ded0:	7863      	ldrb	r3, [r4, #1]
 800ded2:	2b2a      	cmp	r3, #42	; 0x2a
 800ded4:	d135      	bne.n	800df42 <_vfiprintf_r+0x1ce>
 800ded6:	9b03      	ldr	r3, [sp, #12]
 800ded8:	1d1a      	adds	r2, r3, #4
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	9203      	str	r2, [sp, #12]
 800dede:	2b00      	cmp	r3, #0
 800dee0:	bfb8      	it	lt
 800dee2:	f04f 33ff 	movlt.w	r3, #4294967295
 800dee6:	3402      	adds	r4, #2
 800dee8:	9305      	str	r3, [sp, #20]
 800deea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800dfd0 <_vfiprintf_r+0x25c>
 800deee:	7821      	ldrb	r1, [r4, #0]
 800def0:	2203      	movs	r2, #3
 800def2:	4650      	mov	r0, sl
 800def4:	f7f2 f974 	bl	80001e0 <memchr>
 800def8:	b140      	cbz	r0, 800df0c <_vfiprintf_r+0x198>
 800defa:	2340      	movs	r3, #64	; 0x40
 800defc:	eba0 000a 	sub.w	r0, r0, sl
 800df00:	fa03 f000 	lsl.w	r0, r3, r0
 800df04:	9b04      	ldr	r3, [sp, #16]
 800df06:	4303      	orrs	r3, r0
 800df08:	3401      	adds	r4, #1
 800df0a:	9304      	str	r3, [sp, #16]
 800df0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df10:	482c      	ldr	r0, [pc, #176]	; (800dfc4 <_vfiprintf_r+0x250>)
 800df12:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800df16:	2206      	movs	r2, #6
 800df18:	f7f2 f962 	bl	80001e0 <memchr>
 800df1c:	2800      	cmp	r0, #0
 800df1e:	d03f      	beq.n	800dfa0 <_vfiprintf_r+0x22c>
 800df20:	4b29      	ldr	r3, [pc, #164]	; (800dfc8 <_vfiprintf_r+0x254>)
 800df22:	bb1b      	cbnz	r3, 800df6c <_vfiprintf_r+0x1f8>
 800df24:	9b03      	ldr	r3, [sp, #12]
 800df26:	3307      	adds	r3, #7
 800df28:	f023 0307 	bic.w	r3, r3, #7
 800df2c:	3308      	adds	r3, #8
 800df2e:	9303      	str	r3, [sp, #12]
 800df30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df32:	443b      	add	r3, r7
 800df34:	9309      	str	r3, [sp, #36]	; 0x24
 800df36:	e767      	b.n	800de08 <_vfiprintf_r+0x94>
 800df38:	fb0c 3202 	mla	r2, ip, r2, r3
 800df3c:	460c      	mov	r4, r1
 800df3e:	2001      	movs	r0, #1
 800df40:	e7a5      	b.n	800de8e <_vfiprintf_r+0x11a>
 800df42:	2300      	movs	r3, #0
 800df44:	3401      	adds	r4, #1
 800df46:	9305      	str	r3, [sp, #20]
 800df48:	4619      	mov	r1, r3
 800df4a:	f04f 0c0a 	mov.w	ip, #10
 800df4e:	4620      	mov	r0, r4
 800df50:	f810 2b01 	ldrb.w	r2, [r0], #1
 800df54:	3a30      	subs	r2, #48	; 0x30
 800df56:	2a09      	cmp	r2, #9
 800df58:	d903      	bls.n	800df62 <_vfiprintf_r+0x1ee>
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d0c5      	beq.n	800deea <_vfiprintf_r+0x176>
 800df5e:	9105      	str	r1, [sp, #20]
 800df60:	e7c3      	b.n	800deea <_vfiprintf_r+0x176>
 800df62:	fb0c 2101 	mla	r1, ip, r1, r2
 800df66:	4604      	mov	r4, r0
 800df68:	2301      	movs	r3, #1
 800df6a:	e7f0      	b.n	800df4e <_vfiprintf_r+0x1da>
 800df6c:	ab03      	add	r3, sp, #12
 800df6e:	9300      	str	r3, [sp, #0]
 800df70:	462a      	mov	r2, r5
 800df72:	4b16      	ldr	r3, [pc, #88]	; (800dfcc <_vfiprintf_r+0x258>)
 800df74:	a904      	add	r1, sp, #16
 800df76:	4630      	mov	r0, r6
 800df78:	f7fd ffe0 	bl	800bf3c <_printf_float>
 800df7c:	4607      	mov	r7, r0
 800df7e:	1c78      	adds	r0, r7, #1
 800df80:	d1d6      	bne.n	800df30 <_vfiprintf_r+0x1bc>
 800df82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800df84:	07d9      	lsls	r1, r3, #31
 800df86:	d405      	bmi.n	800df94 <_vfiprintf_r+0x220>
 800df88:	89ab      	ldrh	r3, [r5, #12]
 800df8a:	059a      	lsls	r2, r3, #22
 800df8c:	d402      	bmi.n	800df94 <_vfiprintf_r+0x220>
 800df8e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800df90:	f000 faaf 	bl	800e4f2 <__retarget_lock_release_recursive>
 800df94:	89ab      	ldrh	r3, [r5, #12]
 800df96:	065b      	lsls	r3, r3, #25
 800df98:	f53f af12 	bmi.w	800ddc0 <_vfiprintf_r+0x4c>
 800df9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800df9e:	e711      	b.n	800ddc4 <_vfiprintf_r+0x50>
 800dfa0:	ab03      	add	r3, sp, #12
 800dfa2:	9300      	str	r3, [sp, #0]
 800dfa4:	462a      	mov	r2, r5
 800dfa6:	4b09      	ldr	r3, [pc, #36]	; (800dfcc <_vfiprintf_r+0x258>)
 800dfa8:	a904      	add	r1, sp, #16
 800dfaa:	4630      	mov	r0, r6
 800dfac:	f7fe fa6a 	bl	800c484 <_printf_i>
 800dfb0:	e7e4      	b.n	800df7c <_vfiprintf_r+0x208>
 800dfb2:	bf00      	nop
 800dfb4:	0800fbb4 	.word	0x0800fbb4
 800dfb8:	0800fbd4 	.word	0x0800fbd4
 800dfbc:	0800fb94 	.word	0x0800fb94
 800dfc0:	0800fa82 	.word	0x0800fa82
 800dfc4:	0800fa8c 	.word	0x0800fa8c
 800dfc8:	0800bf3d 	.word	0x0800bf3d
 800dfcc:	0800dd4f 	.word	0x0800dd4f
 800dfd0:	0800fa88 	.word	0x0800fa88

0800dfd4 <__swbuf_r>:
 800dfd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfd6:	460e      	mov	r6, r1
 800dfd8:	4614      	mov	r4, r2
 800dfda:	4605      	mov	r5, r0
 800dfdc:	b118      	cbz	r0, 800dfe6 <__swbuf_r+0x12>
 800dfde:	6983      	ldr	r3, [r0, #24]
 800dfe0:	b90b      	cbnz	r3, 800dfe6 <__swbuf_r+0x12>
 800dfe2:	f000 f9e7 	bl	800e3b4 <__sinit>
 800dfe6:	4b21      	ldr	r3, [pc, #132]	; (800e06c <__swbuf_r+0x98>)
 800dfe8:	429c      	cmp	r4, r3
 800dfea:	d12b      	bne.n	800e044 <__swbuf_r+0x70>
 800dfec:	686c      	ldr	r4, [r5, #4]
 800dfee:	69a3      	ldr	r3, [r4, #24]
 800dff0:	60a3      	str	r3, [r4, #8]
 800dff2:	89a3      	ldrh	r3, [r4, #12]
 800dff4:	071a      	lsls	r2, r3, #28
 800dff6:	d52f      	bpl.n	800e058 <__swbuf_r+0x84>
 800dff8:	6923      	ldr	r3, [r4, #16]
 800dffa:	b36b      	cbz	r3, 800e058 <__swbuf_r+0x84>
 800dffc:	6923      	ldr	r3, [r4, #16]
 800dffe:	6820      	ldr	r0, [r4, #0]
 800e000:	1ac0      	subs	r0, r0, r3
 800e002:	6963      	ldr	r3, [r4, #20]
 800e004:	b2f6      	uxtb	r6, r6
 800e006:	4283      	cmp	r3, r0
 800e008:	4637      	mov	r7, r6
 800e00a:	dc04      	bgt.n	800e016 <__swbuf_r+0x42>
 800e00c:	4621      	mov	r1, r4
 800e00e:	4628      	mov	r0, r5
 800e010:	f000 f93c 	bl	800e28c <_fflush_r>
 800e014:	bb30      	cbnz	r0, 800e064 <__swbuf_r+0x90>
 800e016:	68a3      	ldr	r3, [r4, #8]
 800e018:	3b01      	subs	r3, #1
 800e01a:	60a3      	str	r3, [r4, #8]
 800e01c:	6823      	ldr	r3, [r4, #0]
 800e01e:	1c5a      	adds	r2, r3, #1
 800e020:	6022      	str	r2, [r4, #0]
 800e022:	701e      	strb	r6, [r3, #0]
 800e024:	6963      	ldr	r3, [r4, #20]
 800e026:	3001      	adds	r0, #1
 800e028:	4283      	cmp	r3, r0
 800e02a:	d004      	beq.n	800e036 <__swbuf_r+0x62>
 800e02c:	89a3      	ldrh	r3, [r4, #12]
 800e02e:	07db      	lsls	r3, r3, #31
 800e030:	d506      	bpl.n	800e040 <__swbuf_r+0x6c>
 800e032:	2e0a      	cmp	r6, #10
 800e034:	d104      	bne.n	800e040 <__swbuf_r+0x6c>
 800e036:	4621      	mov	r1, r4
 800e038:	4628      	mov	r0, r5
 800e03a:	f000 f927 	bl	800e28c <_fflush_r>
 800e03e:	b988      	cbnz	r0, 800e064 <__swbuf_r+0x90>
 800e040:	4638      	mov	r0, r7
 800e042:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e044:	4b0a      	ldr	r3, [pc, #40]	; (800e070 <__swbuf_r+0x9c>)
 800e046:	429c      	cmp	r4, r3
 800e048:	d101      	bne.n	800e04e <__swbuf_r+0x7a>
 800e04a:	68ac      	ldr	r4, [r5, #8]
 800e04c:	e7cf      	b.n	800dfee <__swbuf_r+0x1a>
 800e04e:	4b09      	ldr	r3, [pc, #36]	; (800e074 <__swbuf_r+0xa0>)
 800e050:	429c      	cmp	r4, r3
 800e052:	bf08      	it	eq
 800e054:	68ec      	ldreq	r4, [r5, #12]
 800e056:	e7ca      	b.n	800dfee <__swbuf_r+0x1a>
 800e058:	4621      	mov	r1, r4
 800e05a:	4628      	mov	r0, r5
 800e05c:	f000 f81a 	bl	800e094 <__swsetup_r>
 800e060:	2800      	cmp	r0, #0
 800e062:	d0cb      	beq.n	800dffc <__swbuf_r+0x28>
 800e064:	f04f 37ff 	mov.w	r7, #4294967295
 800e068:	e7ea      	b.n	800e040 <__swbuf_r+0x6c>
 800e06a:	bf00      	nop
 800e06c:	0800fbb4 	.word	0x0800fbb4
 800e070:	0800fbd4 	.word	0x0800fbd4
 800e074:	0800fb94 	.word	0x0800fb94

0800e078 <__ascii_wctomb>:
 800e078:	b149      	cbz	r1, 800e08e <__ascii_wctomb+0x16>
 800e07a:	2aff      	cmp	r2, #255	; 0xff
 800e07c:	bf85      	ittet	hi
 800e07e:	238a      	movhi	r3, #138	; 0x8a
 800e080:	6003      	strhi	r3, [r0, #0]
 800e082:	700a      	strbls	r2, [r1, #0]
 800e084:	f04f 30ff 	movhi.w	r0, #4294967295
 800e088:	bf98      	it	ls
 800e08a:	2001      	movls	r0, #1
 800e08c:	4770      	bx	lr
 800e08e:	4608      	mov	r0, r1
 800e090:	4770      	bx	lr
	...

0800e094 <__swsetup_r>:
 800e094:	4b32      	ldr	r3, [pc, #200]	; (800e160 <__swsetup_r+0xcc>)
 800e096:	b570      	push	{r4, r5, r6, lr}
 800e098:	681d      	ldr	r5, [r3, #0]
 800e09a:	4606      	mov	r6, r0
 800e09c:	460c      	mov	r4, r1
 800e09e:	b125      	cbz	r5, 800e0aa <__swsetup_r+0x16>
 800e0a0:	69ab      	ldr	r3, [r5, #24]
 800e0a2:	b913      	cbnz	r3, 800e0aa <__swsetup_r+0x16>
 800e0a4:	4628      	mov	r0, r5
 800e0a6:	f000 f985 	bl	800e3b4 <__sinit>
 800e0aa:	4b2e      	ldr	r3, [pc, #184]	; (800e164 <__swsetup_r+0xd0>)
 800e0ac:	429c      	cmp	r4, r3
 800e0ae:	d10f      	bne.n	800e0d0 <__swsetup_r+0x3c>
 800e0b0:	686c      	ldr	r4, [r5, #4]
 800e0b2:	89a3      	ldrh	r3, [r4, #12]
 800e0b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e0b8:	0719      	lsls	r1, r3, #28
 800e0ba:	d42c      	bmi.n	800e116 <__swsetup_r+0x82>
 800e0bc:	06dd      	lsls	r5, r3, #27
 800e0be:	d411      	bmi.n	800e0e4 <__swsetup_r+0x50>
 800e0c0:	2309      	movs	r3, #9
 800e0c2:	6033      	str	r3, [r6, #0]
 800e0c4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e0c8:	81a3      	strh	r3, [r4, #12]
 800e0ca:	f04f 30ff 	mov.w	r0, #4294967295
 800e0ce:	e03e      	b.n	800e14e <__swsetup_r+0xba>
 800e0d0:	4b25      	ldr	r3, [pc, #148]	; (800e168 <__swsetup_r+0xd4>)
 800e0d2:	429c      	cmp	r4, r3
 800e0d4:	d101      	bne.n	800e0da <__swsetup_r+0x46>
 800e0d6:	68ac      	ldr	r4, [r5, #8]
 800e0d8:	e7eb      	b.n	800e0b2 <__swsetup_r+0x1e>
 800e0da:	4b24      	ldr	r3, [pc, #144]	; (800e16c <__swsetup_r+0xd8>)
 800e0dc:	429c      	cmp	r4, r3
 800e0de:	bf08      	it	eq
 800e0e0:	68ec      	ldreq	r4, [r5, #12]
 800e0e2:	e7e6      	b.n	800e0b2 <__swsetup_r+0x1e>
 800e0e4:	0758      	lsls	r0, r3, #29
 800e0e6:	d512      	bpl.n	800e10e <__swsetup_r+0x7a>
 800e0e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e0ea:	b141      	cbz	r1, 800e0fe <__swsetup_r+0x6a>
 800e0ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e0f0:	4299      	cmp	r1, r3
 800e0f2:	d002      	beq.n	800e0fa <__swsetup_r+0x66>
 800e0f4:	4630      	mov	r0, r6
 800e0f6:	f7ff fd0b 	bl	800db10 <_free_r>
 800e0fa:	2300      	movs	r3, #0
 800e0fc:	6363      	str	r3, [r4, #52]	; 0x34
 800e0fe:	89a3      	ldrh	r3, [r4, #12]
 800e100:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e104:	81a3      	strh	r3, [r4, #12]
 800e106:	2300      	movs	r3, #0
 800e108:	6063      	str	r3, [r4, #4]
 800e10a:	6923      	ldr	r3, [r4, #16]
 800e10c:	6023      	str	r3, [r4, #0]
 800e10e:	89a3      	ldrh	r3, [r4, #12]
 800e110:	f043 0308 	orr.w	r3, r3, #8
 800e114:	81a3      	strh	r3, [r4, #12]
 800e116:	6923      	ldr	r3, [r4, #16]
 800e118:	b94b      	cbnz	r3, 800e12e <__swsetup_r+0x9a>
 800e11a:	89a3      	ldrh	r3, [r4, #12]
 800e11c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e120:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e124:	d003      	beq.n	800e12e <__swsetup_r+0x9a>
 800e126:	4621      	mov	r1, r4
 800e128:	4630      	mov	r0, r6
 800e12a:	f000 fa07 	bl	800e53c <__smakebuf_r>
 800e12e:	89a0      	ldrh	r0, [r4, #12]
 800e130:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e134:	f010 0301 	ands.w	r3, r0, #1
 800e138:	d00a      	beq.n	800e150 <__swsetup_r+0xbc>
 800e13a:	2300      	movs	r3, #0
 800e13c:	60a3      	str	r3, [r4, #8]
 800e13e:	6963      	ldr	r3, [r4, #20]
 800e140:	425b      	negs	r3, r3
 800e142:	61a3      	str	r3, [r4, #24]
 800e144:	6923      	ldr	r3, [r4, #16]
 800e146:	b943      	cbnz	r3, 800e15a <__swsetup_r+0xc6>
 800e148:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e14c:	d1ba      	bne.n	800e0c4 <__swsetup_r+0x30>
 800e14e:	bd70      	pop	{r4, r5, r6, pc}
 800e150:	0781      	lsls	r1, r0, #30
 800e152:	bf58      	it	pl
 800e154:	6963      	ldrpl	r3, [r4, #20]
 800e156:	60a3      	str	r3, [r4, #8]
 800e158:	e7f4      	b.n	800e144 <__swsetup_r+0xb0>
 800e15a:	2000      	movs	r0, #0
 800e15c:	e7f7      	b.n	800e14e <__swsetup_r+0xba>
 800e15e:	bf00      	nop
 800e160:	20000198 	.word	0x20000198
 800e164:	0800fbb4 	.word	0x0800fbb4
 800e168:	0800fbd4 	.word	0x0800fbd4
 800e16c:	0800fb94 	.word	0x0800fb94

0800e170 <abort>:
 800e170:	b508      	push	{r3, lr}
 800e172:	2006      	movs	r0, #6
 800e174:	f000 fa4a 	bl	800e60c <raise>
 800e178:	2001      	movs	r0, #1
 800e17a:	f7f3 fc01 	bl	8001980 <_exit>
	...

0800e180 <__sflush_r>:
 800e180:	898a      	ldrh	r2, [r1, #12]
 800e182:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e186:	4605      	mov	r5, r0
 800e188:	0710      	lsls	r0, r2, #28
 800e18a:	460c      	mov	r4, r1
 800e18c:	d458      	bmi.n	800e240 <__sflush_r+0xc0>
 800e18e:	684b      	ldr	r3, [r1, #4]
 800e190:	2b00      	cmp	r3, #0
 800e192:	dc05      	bgt.n	800e1a0 <__sflush_r+0x20>
 800e194:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e196:	2b00      	cmp	r3, #0
 800e198:	dc02      	bgt.n	800e1a0 <__sflush_r+0x20>
 800e19a:	2000      	movs	r0, #0
 800e19c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e1a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e1a2:	2e00      	cmp	r6, #0
 800e1a4:	d0f9      	beq.n	800e19a <__sflush_r+0x1a>
 800e1a6:	2300      	movs	r3, #0
 800e1a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e1ac:	682f      	ldr	r7, [r5, #0]
 800e1ae:	602b      	str	r3, [r5, #0]
 800e1b0:	d032      	beq.n	800e218 <__sflush_r+0x98>
 800e1b2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e1b4:	89a3      	ldrh	r3, [r4, #12]
 800e1b6:	075a      	lsls	r2, r3, #29
 800e1b8:	d505      	bpl.n	800e1c6 <__sflush_r+0x46>
 800e1ba:	6863      	ldr	r3, [r4, #4]
 800e1bc:	1ac0      	subs	r0, r0, r3
 800e1be:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e1c0:	b10b      	cbz	r3, 800e1c6 <__sflush_r+0x46>
 800e1c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e1c4:	1ac0      	subs	r0, r0, r3
 800e1c6:	2300      	movs	r3, #0
 800e1c8:	4602      	mov	r2, r0
 800e1ca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e1cc:	6a21      	ldr	r1, [r4, #32]
 800e1ce:	4628      	mov	r0, r5
 800e1d0:	47b0      	blx	r6
 800e1d2:	1c43      	adds	r3, r0, #1
 800e1d4:	89a3      	ldrh	r3, [r4, #12]
 800e1d6:	d106      	bne.n	800e1e6 <__sflush_r+0x66>
 800e1d8:	6829      	ldr	r1, [r5, #0]
 800e1da:	291d      	cmp	r1, #29
 800e1dc:	d82c      	bhi.n	800e238 <__sflush_r+0xb8>
 800e1de:	4a2a      	ldr	r2, [pc, #168]	; (800e288 <__sflush_r+0x108>)
 800e1e0:	40ca      	lsrs	r2, r1
 800e1e2:	07d6      	lsls	r6, r2, #31
 800e1e4:	d528      	bpl.n	800e238 <__sflush_r+0xb8>
 800e1e6:	2200      	movs	r2, #0
 800e1e8:	6062      	str	r2, [r4, #4]
 800e1ea:	04d9      	lsls	r1, r3, #19
 800e1ec:	6922      	ldr	r2, [r4, #16]
 800e1ee:	6022      	str	r2, [r4, #0]
 800e1f0:	d504      	bpl.n	800e1fc <__sflush_r+0x7c>
 800e1f2:	1c42      	adds	r2, r0, #1
 800e1f4:	d101      	bne.n	800e1fa <__sflush_r+0x7a>
 800e1f6:	682b      	ldr	r3, [r5, #0]
 800e1f8:	b903      	cbnz	r3, 800e1fc <__sflush_r+0x7c>
 800e1fa:	6560      	str	r0, [r4, #84]	; 0x54
 800e1fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e1fe:	602f      	str	r7, [r5, #0]
 800e200:	2900      	cmp	r1, #0
 800e202:	d0ca      	beq.n	800e19a <__sflush_r+0x1a>
 800e204:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e208:	4299      	cmp	r1, r3
 800e20a:	d002      	beq.n	800e212 <__sflush_r+0x92>
 800e20c:	4628      	mov	r0, r5
 800e20e:	f7ff fc7f 	bl	800db10 <_free_r>
 800e212:	2000      	movs	r0, #0
 800e214:	6360      	str	r0, [r4, #52]	; 0x34
 800e216:	e7c1      	b.n	800e19c <__sflush_r+0x1c>
 800e218:	6a21      	ldr	r1, [r4, #32]
 800e21a:	2301      	movs	r3, #1
 800e21c:	4628      	mov	r0, r5
 800e21e:	47b0      	blx	r6
 800e220:	1c41      	adds	r1, r0, #1
 800e222:	d1c7      	bne.n	800e1b4 <__sflush_r+0x34>
 800e224:	682b      	ldr	r3, [r5, #0]
 800e226:	2b00      	cmp	r3, #0
 800e228:	d0c4      	beq.n	800e1b4 <__sflush_r+0x34>
 800e22a:	2b1d      	cmp	r3, #29
 800e22c:	d001      	beq.n	800e232 <__sflush_r+0xb2>
 800e22e:	2b16      	cmp	r3, #22
 800e230:	d101      	bne.n	800e236 <__sflush_r+0xb6>
 800e232:	602f      	str	r7, [r5, #0]
 800e234:	e7b1      	b.n	800e19a <__sflush_r+0x1a>
 800e236:	89a3      	ldrh	r3, [r4, #12]
 800e238:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e23c:	81a3      	strh	r3, [r4, #12]
 800e23e:	e7ad      	b.n	800e19c <__sflush_r+0x1c>
 800e240:	690f      	ldr	r7, [r1, #16]
 800e242:	2f00      	cmp	r7, #0
 800e244:	d0a9      	beq.n	800e19a <__sflush_r+0x1a>
 800e246:	0793      	lsls	r3, r2, #30
 800e248:	680e      	ldr	r6, [r1, #0]
 800e24a:	bf08      	it	eq
 800e24c:	694b      	ldreq	r3, [r1, #20]
 800e24e:	600f      	str	r7, [r1, #0]
 800e250:	bf18      	it	ne
 800e252:	2300      	movne	r3, #0
 800e254:	eba6 0807 	sub.w	r8, r6, r7
 800e258:	608b      	str	r3, [r1, #8]
 800e25a:	f1b8 0f00 	cmp.w	r8, #0
 800e25e:	dd9c      	ble.n	800e19a <__sflush_r+0x1a>
 800e260:	6a21      	ldr	r1, [r4, #32]
 800e262:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e264:	4643      	mov	r3, r8
 800e266:	463a      	mov	r2, r7
 800e268:	4628      	mov	r0, r5
 800e26a:	47b0      	blx	r6
 800e26c:	2800      	cmp	r0, #0
 800e26e:	dc06      	bgt.n	800e27e <__sflush_r+0xfe>
 800e270:	89a3      	ldrh	r3, [r4, #12]
 800e272:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e276:	81a3      	strh	r3, [r4, #12]
 800e278:	f04f 30ff 	mov.w	r0, #4294967295
 800e27c:	e78e      	b.n	800e19c <__sflush_r+0x1c>
 800e27e:	4407      	add	r7, r0
 800e280:	eba8 0800 	sub.w	r8, r8, r0
 800e284:	e7e9      	b.n	800e25a <__sflush_r+0xda>
 800e286:	bf00      	nop
 800e288:	20400001 	.word	0x20400001

0800e28c <_fflush_r>:
 800e28c:	b538      	push	{r3, r4, r5, lr}
 800e28e:	690b      	ldr	r3, [r1, #16]
 800e290:	4605      	mov	r5, r0
 800e292:	460c      	mov	r4, r1
 800e294:	b913      	cbnz	r3, 800e29c <_fflush_r+0x10>
 800e296:	2500      	movs	r5, #0
 800e298:	4628      	mov	r0, r5
 800e29a:	bd38      	pop	{r3, r4, r5, pc}
 800e29c:	b118      	cbz	r0, 800e2a6 <_fflush_r+0x1a>
 800e29e:	6983      	ldr	r3, [r0, #24]
 800e2a0:	b90b      	cbnz	r3, 800e2a6 <_fflush_r+0x1a>
 800e2a2:	f000 f887 	bl	800e3b4 <__sinit>
 800e2a6:	4b14      	ldr	r3, [pc, #80]	; (800e2f8 <_fflush_r+0x6c>)
 800e2a8:	429c      	cmp	r4, r3
 800e2aa:	d11b      	bne.n	800e2e4 <_fflush_r+0x58>
 800e2ac:	686c      	ldr	r4, [r5, #4]
 800e2ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d0ef      	beq.n	800e296 <_fflush_r+0xa>
 800e2b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e2b8:	07d0      	lsls	r0, r2, #31
 800e2ba:	d404      	bmi.n	800e2c6 <_fflush_r+0x3a>
 800e2bc:	0599      	lsls	r1, r3, #22
 800e2be:	d402      	bmi.n	800e2c6 <_fflush_r+0x3a>
 800e2c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e2c2:	f000 f915 	bl	800e4f0 <__retarget_lock_acquire_recursive>
 800e2c6:	4628      	mov	r0, r5
 800e2c8:	4621      	mov	r1, r4
 800e2ca:	f7ff ff59 	bl	800e180 <__sflush_r>
 800e2ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e2d0:	07da      	lsls	r2, r3, #31
 800e2d2:	4605      	mov	r5, r0
 800e2d4:	d4e0      	bmi.n	800e298 <_fflush_r+0xc>
 800e2d6:	89a3      	ldrh	r3, [r4, #12]
 800e2d8:	059b      	lsls	r3, r3, #22
 800e2da:	d4dd      	bmi.n	800e298 <_fflush_r+0xc>
 800e2dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e2de:	f000 f908 	bl	800e4f2 <__retarget_lock_release_recursive>
 800e2e2:	e7d9      	b.n	800e298 <_fflush_r+0xc>
 800e2e4:	4b05      	ldr	r3, [pc, #20]	; (800e2fc <_fflush_r+0x70>)
 800e2e6:	429c      	cmp	r4, r3
 800e2e8:	d101      	bne.n	800e2ee <_fflush_r+0x62>
 800e2ea:	68ac      	ldr	r4, [r5, #8]
 800e2ec:	e7df      	b.n	800e2ae <_fflush_r+0x22>
 800e2ee:	4b04      	ldr	r3, [pc, #16]	; (800e300 <_fflush_r+0x74>)
 800e2f0:	429c      	cmp	r4, r3
 800e2f2:	bf08      	it	eq
 800e2f4:	68ec      	ldreq	r4, [r5, #12]
 800e2f6:	e7da      	b.n	800e2ae <_fflush_r+0x22>
 800e2f8:	0800fbb4 	.word	0x0800fbb4
 800e2fc:	0800fbd4 	.word	0x0800fbd4
 800e300:	0800fb94 	.word	0x0800fb94

0800e304 <std>:
 800e304:	2300      	movs	r3, #0
 800e306:	b510      	push	{r4, lr}
 800e308:	4604      	mov	r4, r0
 800e30a:	e9c0 3300 	strd	r3, r3, [r0]
 800e30e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e312:	6083      	str	r3, [r0, #8]
 800e314:	8181      	strh	r1, [r0, #12]
 800e316:	6643      	str	r3, [r0, #100]	; 0x64
 800e318:	81c2      	strh	r2, [r0, #14]
 800e31a:	6183      	str	r3, [r0, #24]
 800e31c:	4619      	mov	r1, r3
 800e31e:	2208      	movs	r2, #8
 800e320:	305c      	adds	r0, #92	; 0x5c
 800e322:	f7fd fd63 	bl	800bdec <memset>
 800e326:	4b05      	ldr	r3, [pc, #20]	; (800e33c <std+0x38>)
 800e328:	6263      	str	r3, [r4, #36]	; 0x24
 800e32a:	4b05      	ldr	r3, [pc, #20]	; (800e340 <std+0x3c>)
 800e32c:	62a3      	str	r3, [r4, #40]	; 0x28
 800e32e:	4b05      	ldr	r3, [pc, #20]	; (800e344 <std+0x40>)
 800e330:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e332:	4b05      	ldr	r3, [pc, #20]	; (800e348 <std+0x44>)
 800e334:	6224      	str	r4, [r4, #32]
 800e336:	6323      	str	r3, [r4, #48]	; 0x30
 800e338:	bd10      	pop	{r4, pc}
 800e33a:	bf00      	nop
 800e33c:	0800e645 	.word	0x0800e645
 800e340:	0800e667 	.word	0x0800e667
 800e344:	0800e69f 	.word	0x0800e69f
 800e348:	0800e6c3 	.word	0x0800e6c3

0800e34c <_cleanup_r>:
 800e34c:	4901      	ldr	r1, [pc, #4]	; (800e354 <_cleanup_r+0x8>)
 800e34e:	f000 b8af 	b.w	800e4b0 <_fwalk_reent>
 800e352:	bf00      	nop
 800e354:	0800e28d 	.word	0x0800e28d

0800e358 <__sfmoreglue>:
 800e358:	b570      	push	{r4, r5, r6, lr}
 800e35a:	1e4a      	subs	r2, r1, #1
 800e35c:	2568      	movs	r5, #104	; 0x68
 800e35e:	4355      	muls	r5, r2
 800e360:	460e      	mov	r6, r1
 800e362:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e366:	f7ff fc23 	bl	800dbb0 <_malloc_r>
 800e36a:	4604      	mov	r4, r0
 800e36c:	b140      	cbz	r0, 800e380 <__sfmoreglue+0x28>
 800e36e:	2100      	movs	r1, #0
 800e370:	e9c0 1600 	strd	r1, r6, [r0]
 800e374:	300c      	adds	r0, #12
 800e376:	60a0      	str	r0, [r4, #8]
 800e378:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e37c:	f7fd fd36 	bl	800bdec <memset>
 800e380:	4620      	mov	r0, r4
 800e382:	bd70      	pop	{r4, r5, r6, pc}

0800e384 <__sfp_lock_acquire>:
 800e384:	4801      	ldr	r0, [pc, #4]	; (800e38c <__sfp_lock_acquire+0x8>)
 800e386:	f000 b8b3 	b.w	800e4f0 <__retarget_lock_acquire_recursive>
 800e38a:	bf00      	nop
 800e38c:	20001104 	.word	0x20001104

0800e390 <__sfp_lock_release>:
 800e390:	4801      	ldr	r0, [pc, #4]	; (800e398 <__sfp_lock_release+0x8>)
 800e392:	f000 b8ae 	b.w	800e4f2 <__retarget_lock_release_recursive>
 800e396:	bf00      	nop
 800e398:	20001104 	.word	0x20001104

0800e39c <__sinit_lock_acquire>:
 800e39c:	4801      	ldr	r0, [pc, #4]	; (800e3a4 <__sinit_lock_acquire+0x8>)
 800e39e:	f000 b8a7 	b.w	800e4f0 <__retarget_lock_acquire_recursive>
 800e3a2:	bf00      	nop
 800e3a4:	200010ff 	.word	0x200010ff

0800e3a8 <__sinit_lock_release>:
 800e3a8:	4801      	ldr	r0, [pc, #4]	; (800e3b0 <__sinit_lock_release+0x8>)
 800e3aa:	f000 b8a2 	b.w	800e4f2 <__retarget_lock_release_recursive>
 800e3ae:	bf00      	nop
 800e3b0:	200010ff 	.word	0x200010ff

0800e3b4 <__sinit>:
 800e3b4:	b510      	push	{r4, lr}
 800e3b6:	4604      	mov	r4, r0
 800e3b8:	f7ff fff0 	bl	800e39c <__sinit_lock_acquire>
 800e3bc:	69a3      	ldr	r3, [r4, #24]
 800e3be:	b11b      	cbz	r3, 800e3c8 <__sinit+0x14>
 800e3c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e3c4:	f7ff bff0 	b.w	800e3a8 <__sinit_lock_release>
 800e3c8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e3cc:	6523      	str	r3, [r4, #80]	; 0x50
 800e3ce:	4b13      	ldr	r3, [pc, #76]	; (800e41c <__sinit+0x68>)
 800e3d0:	4a13      	ldr	r2, [pc, #76]	; (800e420 <__sinit+0x6c>)
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	62a2      	str	r2, [r4, #40]	; 0x28
 800e3d6:	42a3      	cmp	r3, r4
 800e3d8:	bf04      	itt	eq
 800e3da:	2301      	moveq	r3, #1
 800e3dc:	61a3      	streq	r3, [r4, #24]
 800e3de:	4620      	mov	r0, r4
 800e3e0:	f000 f820 	bl	800e424 <__sfp>
 800e3e4:	6060      	str	r0, [r4, #4]
 800e3e6:	4620      	mov	r0, r4
 800e3e8:	f000 f81c 	bl	800e424 <__sfp>
 800e3ec:	60a0      	str	r0, [r4, #8]
 800e3ee:	4620      	mov	r0, r4
 800e3f0:	f000 f818 	bl	800e424 <__sfp>
 800e3f4:	2200      	movs	r2, #0
 800e3f6:	60e0      	str	r0, [r4, #12]
 800e3f8:	2104      	movs	r1, #4
 800e3fa:	6860      	ldr	r0, [r4, #4]
 800e3fc:	f7ff ff82 	bl	800e304 <std>
 800e400:	68a0      	ldr	r0, [r4, #8]
 800e402:	2201      	movs	r2, #1
 800e404:	2109      	movs	r1, #9
 800e406:	f7ff ff7d 	bl	800e304 <std>
 800e40a:	68e0      	ldr	r0, [r4, #12]
 800e40c:	2202      	movs	r2, #2
 800e40e:	2112      	movs	r1, #18
 800e410:	f7ff ff78 	bl	800e304 <std>
 800e414:	2301      	movs	r3, #1
 800e416:	61a3      	str	r3, [r4, #24]
 800e418:	e7d2      	b.n	800e3c0 <__sinit+0xc>
 800e41a:	bf00      	nop
 800e41c:	0800f810 	.word	0x0800f810
 800e420:	0800e34d 	.word	0x0800e34d

0800e424 <__sfp>:
 800e424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e426:	4607      	mov	r7, r0
 800e428:	f7ff ffac 	bl	800e384 <__sfp_lock_acquire>
 800e42c:	4b1e      	ldr	r3, [pc, #120]	; (800e4a8 <__sfp+0x84>)
 800e42e:	681e      	ldr	r6, [r3, #0]
 800e430:	69b3      	ldr	r3, [r6, #24]
 800e432:	b913      	cbnz	r3, 800e43a <__sfp+0x16>
 800e434:	4630      	mov	r0, r6
 800e436:	f7ff ffbd 	bl	800e3b4 <__sinit>
 800e43a:	3648      	adds	r6, #72	; 0x48
 800e43c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e440:	3b01      	subs	r3, #1
 800e442:	d503      	bpl.n	800e44c <__sfp+0x28>
 800e444:	6833      	ldr	r3, [r6, #0]
 800e446:	b30b      	cbz	r3, 800e48c <__sfp+0x68>
 800e448:	6836      	ldr	r6, [r6, #0]
 800e44a:	e7f7      	b.n	800e43c <__sfp+0x18>
 800e44c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e450:	b9d5      	cbnz	r5, 800e488 <__sfp+0x64>
 800e452:	4b16      	ldr	r3, [pc, #88]	; (800e4ac <__sfp+0x88>)
 800e454:	60e3      	str	r3, [r4, #12]
 800e456:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e45a:	6665      	str	r5, [r4, #100]	; 0x64
 800e45c:	f000 f847 	bl	800e4ee <__retarget_lock_init_recursive>
 800e460:	f7ff ff96 	bl	800e390 <__sfp_lock_release>
 800e464:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e468:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e46c:	6025      	str	r5, [r4, #0]
 800e46e:	61a5      	str	r5, [r4, #24]
 800e470:	2208      	movs	r2, #8
 800e472:	4629      	mov	r1, r5
 800e474:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e478:	f7fd fcb8 	bl	800bdec <memset>
 800e47c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e480:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e484:	4620      	mov	r0, r4
 800e486:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e488:	3468      	adds	r4, #104	; 0x68
 800e48a:	e7d9      	b.n	800e440 <__sfp+0x1c>
 800e48c:	2104      	movs	r1, #4
 800e48e:	4638      	mov	r0, r7
 800e490:	f7ff ff62 	bl	800e358 <__sfmoreglue>
 800e494:	4604      	mov	r4, r0
 800e496:	6030      	str	r0, [r6, #0]
 800e498:	2800      	cmp	r0, #0
 800e49a:	d1d5      	bne.n	800e448 <__sfp+0x24>
 800e49c:	f7ff ff78 	bl	800e390 <__sfp_lock_release>
 800e4a0:	230c      	movs	r3, #12
 800e4a2:	603b      	str	r3, [r7, #0]
 800e4a4:	e7ee      	b.n	800e484 <__sfp+0x60>
 800e4a6:	bf00      	nop
 800e4a8:	0800f810 	.word	0x0800f810
 800e4ac:	ffff0001 	.word	0xffff0001

0800e4b0 <_fwalk_reent>:
 800e4b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e4b4:	4606      	mov	r6, r0
 800e4b6:	4688      	mov	r8, r1
 800e4b8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e4bc:	2700      	movs	r7, #0
 800e4be:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e4c2:	f1b9 0901 	subs.w	r9, r9, #1
 800e4c6:	d505      	bpl.n	800e4d4 <_fwalk_reent+0x24>
 800e4c8:	6824      	ldr	r4, [r4, #0]
 800e4ca:	2c00      	cmp	r4, #0
 800e4cc:	d1f7      	bne.n	800e4be <_fwalk_reent+0xe>
 800e4ce:	4638      	mov	r0, r7
 800e4d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e4d4:	89ab      	ldrh	r3, [r5, #12]
 800e4d6:	2b01      	cmp	r3, #1
 800e4d8:	d907      	bls.n	800e4ea <_fwalk_reent+0x3a>
 800e4da:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e4de:	3301      	adds	r3, #1
 800e4e0:	d003      	beq.n	800e4ea <_fwalk_reent+0x3a>
 800e4e2:	4629      	mov	r1, r5
 800e4e4:	4630      	mov	r0, r6
 800e4e6:	47c0      	blx	r8
 800e4e8:	4307      	orrs	r7, r0
 800e4ea:	3568      	adds	r5, #104	; 0x68
 800e4ec:	e7e9      	b.n	800e4c2 <_fwalk_reent+0x12>

0800e4ee <__retarget_lock_init_recursive>:
 800e4ee:	4770      	bx	lr

0800e4f0 <__retarget_lock_acquire_recursive>:
 800e4f0:	4770      	bx	lr

0800e4f2 <__retarget_lock_release_recursive>:
 800e4f2:	4770      	bx	lr

0800e4f4 <__swhatbuf_r>:
 800e4f4:	b570      	push	{r4, r5, r6, lr}
 800e4f6:	460e      	mov	r6, r1
 800e4f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e4fc:	2900      	cmp	r1, #0
 800e4fe:	b096      	sub	sp, #88	; 0x58
 800e500:	4614      	mov	r4, r2
 800e502:	461d      	mov	r5, r3
 800e504:	da07      	bge.n	800e516 <__swhatbuf_r+0x22>
 800e506:	2300      	movs	r3, #0
 800e508:	602b      	str	r3, [r5, #0]
 800e50a:	89b3      	ldrh	r3, [r6, #12]
 800e50c:	061a      	lsls	r2, r3, #24
 800e50e:	d410      	bmi.n	800e532 <__swhatbuf_r+0x3e>
 800e510:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e514:	e00e      	b.n	800e534 <__swhatbuf_r+0x40>
 800e516:	466a      	mov	r2, sp
 800e518:	f000 f8fa 	bl	800e710 <_fstat_r>
 800e51c:	2800      	cmp	r0, #0
 800e51e:	dbf2      	blt.n	800e506 <__swhatbuf_r+0x12>
 800e520:	9a01      	ldr	r2, [sp, #4]
 800e522:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e526:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e52a:	425a      	negs	r2, r3
 800e52c:	415a      	adcs	r2, r3
 800e52e:	602a      	str	r2, [r5, #0]
 800e530:	e7ee      	b.n	800e510 <__swhatbuf_r+0x1c>
 800e532:	2340      	movs	r3, #64	; 0x40
 800e534:	2000      	movs	r0, #0
 800e536:	6023      	str	r3, [r4, #0]
 800e538:	b016      	add	sp, #88	; 0x58
 800e53a:	bd70      	pop	{r4, r5, r6, pc}

0800e53c <__smakebuf_r>:
 800e53c:	898b      	ldrh	r3, [r1, #12]
 800e53e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e540:	079d      	lsls	r5, r3, #30
 800e542:	4606      	mov	r6, r0
 800e544:	460c      	mov	r4, r1
 800e546:	d507      	bpl.n	800e558 <__smakebuf_r+0x1c>
 800e548:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e54c:	6023      	str	r3, [r4, #0]
 800e54e:	6123      	str	r3, [r4, #16]
 800e550:	2301      	movs	r3, #1
 800e552:	6163      	str	r3, [r4, #20]
 800e554:	b002      	add	sp, #8
 800e556:	bd70      	pop	{r4, r5, r6, pc}
 800e558:	ab01      	add	r3, sp, #4
 800e55a:	466a      	mov	r2, sp
 800e55c:	f7ff ffca 	bl	800e4f4 <__swhatbuf_r>
 800e560:	9900      	ldr	r1, [sp, #0]
 800e562:	4605      	mov	r5, r0
 800e564:	4630      	mov	r0, r6
 800e566:	f7ff fb23 	bl	800dbb0 <_malloc_r>
 800e56a:	b948      	cbnz	r0, 800e580 <__smakebuf_r+0x44>
 800e56c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e570:	059a      	lsls	r2, r3, #22
 800e572:	d4ef      	bmi.n	800e554 <__smakebuf_r+0x18>
 800e574:	f023 0303 	bic.w	r3, r3, #3
 800e578:	f043 0302 	orr.w	r3, r3, #2
 800e57c:	81a3      	strh	r3, [r4, #12]
 800e57e:	e7e3      	b.n	800e548 <__smakebuf_r+0xc>
 800e580:	4b0d      	ldr	r3, [pc, #52]	; (800e5b8 <__smakebuf_r+0x7c>)
 800e582:	62b3      	str	r3, [r6, #40]	; 0x28
 800e584:	89a3      	ldrh	r3, [r4, #12]
 800e586:	6020      	str	r0, [r4, #0]
 800e588:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e58c:	81a3      	strh	r3, [r4, #12]
 800e58e:	9b00      	ldr	r3, [sp, #0]
 800e590:	6163      	str	r3, [r4, #20]
 800e592:	9b01      	ldr	r3, [sp, #4]
 800e594:	6120      	str	r0, [r4, #16]
 800e596:	b15b      	cbz	r3, 800e5b0 <__smakebuf_r+0x74>
 800e598:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e59c:	4630      	mov	r0, r6
 800e59e:	f000 f8c9 	bl	800e734 <_isatty_r>
 800e5a2:	b128      	cbz	r0, 800e5b0 <__smakebuf_r+0x74>
 800e5a4:	89a3      	ldrh	r3, [r4, #12]
 800e5a6:	f023 0303 	bic.w	r3, r3, #3
 800e5aa:	f043 0301 	orr.w	r3, r3, #1
 800e5ae:	81a3      	strh	r3, [r4, #12]
 800e5b0:	89a0      	ldrh	r0, [r4, #12]
 800e5b2:	4305      	orrs	r5, r0
 800e5b4:	81a5      	strh	r5, [r4, #12]
 800e5b6:	e7cd      	b.n	800e554 <__smakebuf_r+0x18>
 800e5b8:	0800e34d 	.word	0x0800e34d

0800e5bc <_raise_r>:
 800e5bc:	291f      	cmp	r1, #31
 800e5be:	b538      	push	{r3, r4, r5, lr}
 800e5c0:	4604      	mov	r4, r0
 800e5c2:	460d      	mov	r5, r1
 800e5c4:	d904      	bls.n	800e5d0 <_raise_r+0x14>
 800e5c6:	2316      	movs	r3, #22
 800e5c8:	6003      	str	r3, [r0, #0]
 800e5ca:	f04f 30ff 	mov.w	r0, #4294967295
 800e5ce:	bd38      	pop	{r3, r4, r5, pc}
 800e5d0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e5d2:	b112      	cbz	r2, 800e5da <_raise_r+0x1e>
 800e5d4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e5d8:	b94b      	cbnz	r3, 800e5ee <_raise_r+0x32>
 800e5da:	4620      	mov	r0, r4
 800e5dc:	f000 f830 	bl	800e640 <_getpid_r>
 800e5e0:	462a      	mov	r2, r5
 800e5e2:	4601      	mov	r1, r0
 800e5e4:	4620      	mov	r0, r4
 800e5e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e5ea:	f000 b817 	b.w	800e61c <_kill_r>
 800e5ee:	2b01      	cmp	r3, #1
 800e5f0:	d00a      	beq.n	800e608 <_raise_r+0x4c>
 800e5f2:	1c59      	adds	r1, r3, #1
 800e5f4:	d103      	bne.n	800e5fe <_raise_r+0x42>
 800e5f6:	2316      	movs	r3, #22
 800e5f8:	6003      	str	r3, [r0, #0]
 800e5fa:	2001      	movs	r0, #1
 800e5fc:	e7e7      	b.n	800e5ce <_raise_r+0x12>
 800e5fe:	2400      	movs	r4, #0
 800e600:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e604:	4628      	mov	r0, r5
 800e606:	4798      	blx	r3
 800e608:	2000      	movs	r0, #0
 800e60a:	e7e0      	b.n	800e5ce <_raise_r+0x12>

0800e60c <raise>:
 800e60c:	4b02      	ldr	r3, [pc, #8]	; (800e618 <raise+0xc>)
 800e60e:	4601      	mov	r1, r0
 800e610:	6818      	ldr	r0, [r3, #0]
 800e612:	f7ff bfd3 	b.w	800e5bc <_raise_r>
 800e616:	bf00      	nop
 800e618:	20000198 	.word	0x20000198

0800e61c <_kill_r>:
 800e61c:	b538      	push	{r3, r4, r5, lr}
 800e61e:	4d07      	ldr	r5, [pc, #28]	; (800e63c <_kill_r+0x20>)
 800e620:	2300      	movs	r3, #0
 800e622:	4604      	mov	r4, r0
 800e624:	4608      	mov	r0, r1
 800e626:	4611      	mov	r1, r2
 800e628:	602b      	str	r3, [r5, #0]
 800e62a:	f7f3 f999 	bl	8001960 <_kill>
 800e62e:	1c43      	adds	r3, r0, #1
 800e630:	d102      	bne.n	800e638 <_kill_r+0x1c>
 800e632:	682b      	ldr	r3, [r5, #0]
 800e634:	b103      	cbz	r3, 800e638 <_kill_r+0x1c>
 800e636:	6023      	str	r3, [r4, #0]
 800e638:	bd38      	pop	{r3, r4, r5, pc}
 800e63a:	bf00      	nop
 800e63c:	200010f8 	.word	0x200010f8

0800e640 <_getpid_r>:
 800e640:	f7f3 b986 	b.w	8001950 <_getpid>

0800e644 <__sread>:
 800e644:	b510      	push	{r4, lr}
 800e646:	460c      	mov	r4, r1
 800e648:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e64c:	f000 f894 	bl	800e778 <_read_r>
 800e650:	2800      	cmp	r0, #0
 800e652:	bfab      	itete	ge
 800e654:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e656:	89a3      	ldrhlt	r3, [r4, #12]
 800e658:	181b      	addge	r3, r3, r0
 800e65a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e65e:	bfac      	ite	ge
 800e660:	6563      	strge	r3, [r4, #84]	; 0x54
 800e662:	81a3      	strhlt	r3, [r4, #12]
 800e664:	bd10      	pop	{r4, pc}

0800e666 <__swrite>:
 800e666:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e66a:	461f      	mov	r7, r3
 800e66c:	898b      	ldrh	r3, [r1, #12]
 800e66e:	05db      	lsls	r3, r3, #23
 800e670:	4605      	mov	r5, r0
 800e672:	460c      	mov	r4, r1
 800e674:	4616      	mov	r6, r2
 800e676:	d505      	bpl.n	800e684 <__swrite+0x1e>
 800e678:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e67c:	2302      	movs	r3, #2
 800e67e:	2200      	movs	r2, #0
 800e680:	f000 f868 	bl	800e754 <_lseek_r>
 800e684:	89a3      	ldrh	r3, [r4, #12]
 800e686:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e68a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e68e:	81a3      	strh	r3, [r4, #12]
 800e690:	4632      	mov	r2, r6
 800e692:	463b      	mov	r3, r7
 800e694:	4628      	mov	r0, r5
 800e696:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e69a:	f000 b817 	b.w	800e6cc <_write_r>

0800e69e <__sseek>:
 800e69e:	b510      	push	{r4, lr}
 800e6a0:	460c      	mov	r4, r1
 800e6a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e6a6:	f000 f855 	bl	800e754 <_lseek_r>
 800e6aa:	1c43      	adds	r3, r0, #1
 800e6ac:	89a3      	ldrh	r3, [r4, #12]
 800e6ae:	bf15      	itete	ne
 800e6b0:	6560      	strne	r0, [r4, #84]	; 0x54
 800e6b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e6b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e6ba:	81a3      	strheq	r3, [r4, #12]
 800e6bc:	bf18      	it	ne
 800e6be:	81a3      	strhne	r3, [r4, #12]
 800e6c0:	bd10      	pop	{r4, pc}

0800e6c2 <__sclose>:
 800e6c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e6c6:	f000 b813 	b.w	800e6f0 <_close_r>
	...

0800e6cc <_write_r>:
 800e6cc:	b538      	push	{r3, r4, r5, lr}
 800e6ce:	4d07      	ldr	r5, [pc, #28]	; (800e6ec <_write_r+0x20>)
 800e6d0:	4604      	mov	r4, r0
 800e6d2:	4608      	mov	r0, r1
 800e6d4:	4611      	mov	r1, r2
 800e6d6:	2200      	movs	r2, #0
 800e6d8:	602a      	str	r2, [r5, #0]
 800e6da:	461a      	mov	r2, r3
 800e6dc:	f7f3 f977 	bl	80019ce <_write>
 800e6e0:	1c43      	adds	r3, r0, #1
 800e6e2:	d102      	bne.n	800e6ea <_write_r+0x1e>
 800e6e4:	682b      	ldr	r3, [r5, #0]
 800e6e6:	b103      	cbz	r3, 800e6ea <_write_r+0x1e>
 800e6e8:	6023      	str	r3, [r4, #0]
 800e6ea:	bd38      	pop	{r3, r4, r5, pc}
 800e6ec:	200010f8 	.word	0x200010f8

0800e6f0 <_close_r>:
 800e6f0:	b538      	push	{r3, r4, r5, lr}
 800e6f2:	4d06      	ldr	r5, [pc, #24]	; (800e70c <_close_r+0x1c>)
 800e6f4:	2300      	movs	r3, #0
 800e6f6:	4604      	mov	r4, r0
 800e6f8:	4608      	mov	r0, r1
 800e6fa:	602b      	str	r3, [r5, #0]
 800e6fc:	f7f3 f983 	bl	8001a06 <_close>
 800e700:	1c43      	adds	r3, r0, #1
 800e702:	d102      	bne.n	800e70a <_close_r+0x1a>
 800e704:	682b      	ldr	r3, [r5, #0]
 800e706:	b103      	cbz	r3, 800e70a <_close_r+0x1a>
 800e708:	6023      	str	r3, [r4, #0]
 800e70a:	bd38      	pop	{r3, r4, r5, pc}
 800e70c:	200010f8 	.word	0x200010f8

0800e710 <_fstat_r>:
 800e710:	b538      	push	{r3, r4, r5, lr}
 800e712:	4d07      	ldr	r5, [pc, #28]	; (800e730 <_fstat_r+0x20>)
 800e714:	2300      	movs	r3, #0
 800e716:	4604      	mov	r4, r0
 800e718:	4608      	mov	r0, r1
 800e71a:	4611      	mov	r1, r2
 800e71c:	602b      	str	r3, [r5, #0]
 800e71e:	f7f3 f97e 	bl	8001a1e <_fstat>
 800e722:	1c43      	adds	r3, r0, #1
 800e724:	d102      	bne.n	800e72c <_fstat_r+0x1c>
 800e726:	682b      	ldr	r3, [r5, #0]
 800e728:	b103      	cbz	r3, 800e72c <_fstat_r+0x1c>
 800e72a:	6023      	str	r3, [r4, #0]
 800e72c:	bd38      	pop	{r3, r4, r5, pc}
 800e72e:	bf00      	nop
 800e730:	200010f8 	.word	0x200010f8

0800e734 <_isatty_r>:
 800e734:	b538      	push	{r3, r4, r5, lr}
 800e736:	4d06      	ldr	r5, [pc, #24]	; (800e750 <_isatty_r+0x1c>)
 800e738:	2300      	movs	r3, #0
 800e73a:	4604      	mov	r4, r0
 800e73c:	4608      	mov	r0, r1
 800e73e:	602b      	str	r3, [r5, #0]
 800e740:	f7f3 f97d 	bl	8001a3e <_isatty>
 800e744:	1c43      	adds	r3, r0, #1
 800e746:	d102      	bne.n	800e74e <_isatty_r+0x1a>
 800e748:	682b      	ldr	r3, [r5, #0]
 800e74a:	b103      	cbz	r3, 800e74e <_isatty_r+0x1a>
 800e74c:	6023      	str	r3, [r4, #0]
 800e74e:	bd38      	pop	{r3, r4, r5, pc}
 800e750:	200010f8 	.word	0x200010f8

0800e754 <_lseek_r>:
 800e754:	b538      	push	{r3, r4, r5, lr}
 800e756:	4d07      	ldr	r5, [pc, #28]	; (800e774 <_lseek_r+0x20>)
 800e758:	4604      	mov	r4, r0
 800e75a:	4608      	mov	r0, r1
 800e75c:	4611      	mov	r1, r2
 800e75e:	2200      	movs	r2, #0
 800e760:	602a      	str	r2, [r5, #0]
 800e762:	461a      	mov	r2, r3
 800e764:	f7f3 f976 	bl	8001a54 <_lseek>
 800e768:	1c43      	adds	r3, r0, #1
 800e76a:	d102      	bne.n	800e772 <_lseek_r+0x1e>
 800e76c:	682b      	ldr	r3, [r5, #0]
 800e76e:	b103      	cbz	r3, 800e772 <_lseek_r+0x1e>
 800e770:	6023      	str	r3, [r4, #0]
 800e772:	bd38      	pop	{r3, r4, r5, pc}
 800e774:	200010f8 	.word	0x200010f8

0800e778 <_read_r>:
 800e778:	b538      	push	{r3, r4, r5, lr}
 800e77a:	4d07      	ldr	r5, [pc, #28]	; (800e798 <_read_r+0x20>)
 800e77c:	4604      	mov	r4, r0
 800e77e:	4608      	mov	r0, r1
 800e780:	4611      	mov	r1, r2
 800e782:	2200      	movs	r2, #0
 800e784:	602a      	str	r2, [r5, #0]
 800e786:	461a      	mov	r2, r3
 800e788:	f7f3 f904 	bl	8001994 <_read>
 800e78c:	1c43      	adds	r3, r0, #1
 800e78e:	d102      	bne.n	800e796 <_read_r+0x1e>
 800e790:	682b      	ldr	r3, [r5, #0]
 800e792:	b103      	cbz	r3, 800e796 <_read_r+0x1e>
 800e794:	6023      	str	r3, [r4, #0]
 800e796:	bd38      	pop	{r3, r4, r5, pc}
 800e798:	200010f8 	.word	0x200010f8

0800e79c <pow>:
 800e79c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e7a0:	ec59 8b10 	vmov	r8, r9, d0
 800e7a4:	ec57 6b11 	vmov	r6, r7, d1
 800e7a8:	f000 f8da 	bl	800e960 <__ieee754_pow>
 800e7ac:	4b4e      	ldr	r3, [pc, #312]	; (800e8e8 <pow+0x14c>)
 800e7ae:	f993 3000 	ldrsb.w	r3, [r3]
 800e7b2:	3301      	adds	r3, #1
 800e7b4:	ec55 4b10 	vmov	r4, r5, d0
 800e7b8:	d015      	beq.n	800e7e6 <pow+0x4a>
 800e7ba:	4632      	mov	r2, r6
 800e7bc:	463b      	mov	r3, r7
 800e7be:	4630      	mov	r0, r6
 800e7c0:	4639      	mov	r1, r7
 800e7c2:	f7f2 f9b3 	bl	8000b2c <__aeabi_dcmpun>
 800e7c6:	b970      	cbnz	r0, 800e7e6 <pow+0x4a>
 800e7c8:	4642      	mov	r2, r8
 800e7ca:	464b      	mov	r3, r9
 800e7cc:	4640      	mov	r0, r8
 800e7ce:	4649      	mov	r1, r9
 800e7d0:	f7f2 f9ac 	bl	8000b2c <__aeabi_dcmpun>
 800e7d4:	2200      	movs	r2, #0
 800e7d6:	2300      	movs	r3, #0
 800e7d8:	b148      	cbz	r0, 800e7ee <pow+0x52>
 800e7da:	4630      	mov	r0, r6
 800e7dc:	4639      	mov	r1, r7
 800e7de:	f7f2 f973 	bl	8000ac8 <__aeabi_dcmpeq>
 800e7e2:	2800      	cmp	r0, #0
 800e7e4:	d17d      	bne.n	800e8e2 <pow+0x146>
 800e7e6:	ec45 4b10 	vmov	d0, r4, r5
 800e7ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e7ee:	4640      	mov	r0, r8
 800e7f0:	4649      	mov	r1, r9
 800e7f2:	f7f2 f969 	bl	8000ac8 <__aeabi_dcmpeq>
 800e7f6:	b1e0      	cbz	r0, 800e832 <pow+0x96>
 800e7f8:	2200      	movs	r2, #0
 800e7fa:	2300      	movs	r3, #0
 800e7fc:	4630      	mov	r0, r6
 800e7fe:	4639      	mov	r1, r7
 800e800:	f7f2 f962 	bl	8000ac8 <__aeabi_dcmpeq>
 800e804:	2800      	cmp	r0, #0
 800e806:	d16c      	bne.n	800e8e2 <pow+0x146>
 800e808:	ec47 6b10 	vmov	d0, r6, r7
 800e80c:	f000 fe87 	bl	800f51e <finite>
 800e810:	2800      	cmp	r0, #0
 800e812:	d0e8      	beq.n	800e7e6 <pow+0x4a>
 800e814:	2200      	movs	r2, #0
 800e816:	2300      	movs	r3, #0
 800e818:	4630      	mov	r0, r6
 800e81a:	4639      	mov	r1, r7
 800e81c:	f7f2 f95e 	bl	8000adc <__aeabi_dcmplt>
 800e820:	2800      	cmp	r0, #0
 800e822:	d0e0      	beq.n	800e7e6 <pow+0x4a>
 800e824:	f7fd fab8 	bl	800bd98 <__errno>
 800e828:	2321      	movs	r3, #33	; 0x21
 800e82a:	6003      	str	r3, [r0, #0]
 800e82c:	2400      	movs	r4, #0
 800e82e:	4d2f      	ldr	r5, [pc, #188]	; (800e8ec <pow+0x150>)
 800e830:	e7d9      	b.n	800e7e6 <pow+0x4a>
 800e832:	ec45 4b10 	vmov	d0, r4, r5
 800e836:	f000 fe72 	bl	800f51e <finite>
 800e83a:	bbb8      	cbnz	r0, 800e8ac <pow+0x110>
 800e83c:	ec49 8b10 	vmov	d0, r8, r9
 800e840:	f000 fe6d 	bl	800f51e <finite>
 800e844:	b390      	cbz	r0, 800e8ac <pow+0x110>
 800e846:	ec47 6b10 	vmov	d0, r6, r7
 800e84a:	f000 fe68 	bl	800f51e <finite>
 800e84e:	b368      	cbz	r0, 800e8ac <pow+0x110>
 800e850:	4622      	mov	r2, r4
 800e852:	462b      	mov	r3, r5
 800e854:	4620      	mov	r0, r4
 800e856:	4629      	mov	r1, r5
 800e858:	f7f2 f968 	bl	8000b2c <__aeabi_dcmpun>
 800e85c:	b160      	cbz	r0, 800e878 <pow+0xdc>
 800e85e:	f7fd fa9b 	bl	800bd98 <__errno>
 800e862:	2321      	movs	r3, #33	; 0x21
 800e864:	6003      	str	r3, [r0, #0]
 800e866:	2200      	movs	r2, #0
 800e868:	2300      	movs	r3, #0
 800e86a:	4610      	mov	r0, r2
 800e86c:	4619      	mov	r1, r3
 800e86e:	f7f1 ffed 	bl	800084c <__aeabi_ddiv>
 800e872:	4604      	mov	r4, r0
 800e874:	460d      	mov	r5, r1
 800e876:	e7b6      	b.n	800e7e6 <pow+0x4a>
 800e878:	f7fd fa8e 	bl	800bd98 <__errno>
 800e87c:	2322      	movs	r3, #34	; 0x22
 800e87e:	6003      	str	r3, [r0, #0]
 800e880:	2200      	movs	r2, #0
 800e882:	2300      	movs	r3, #0
 800e884:	4640      	mov	r0, r8
 800e886:	4649      	mov	r1, r9
 800e888:	f7f2 f928 	bl	8000adc <__aeabi_dcmplt>
 800e88c:	2400      	movs	r4, #0
 800e88e:	b158      	cbz	r0, 800e8a8 <pow+0x10c>
 800e890:	ec47 6b10 	vmov	d0, r6, r7
 800e894:	f000 fe58 	bl	800f548 <rint>
 800e898:	4632      	mov	r2, r6
 800e89a:	ec51 0b10 	vmov	r0, r1, d0
 800e89e:	463b      	mov	r3, r7
 800e8a0:	f7f2 f912 	bl	8000ac8 <__aeabi_dcmpeq>
 800e8a4:	2800      	cmp	r0, #0
 800e8a6:	d0c2      	beq.n	800e82e <pow+0x92>
 800e8a8:	4d11      	ldr	r5, [pc, #68]	; (800e8f0 <pow+0x154>)
 800e8aa:	e79c      	b.n	800e7e6 <pow+0x4a>
 800e8ac:	2200      	movs	r2, #0
 800e8ae:	2300      	movs	r3, #0
 800e8b0:	4620      	mov	r0, r4
 800e8b2:	4629      	mov	r1, r5
 800e8b4:	f7f2 f908 	bl	8000ac8 <__aeabi_dcmpeq>
 800e8b8:	2800      	cmp	r0, #0
 800e8ba:	d094      	beq.n	800e7e6 <pow+0x4a>
 800e8bc:	ec49 8b10 	vmov	d0, r8, r9
 800e8c0:	f000 fe2d 	bl	800f51e <finite>
 800e8c4:	2800      	cmp	r0, #0
 800e8c6:	d08e      	beq.n	800e7e6 <pow+0x4a>
 800e8c8:	ec47 6b10 	vmov	d0, r6, r7
 800e8cc:	f000 fe27 	bl	800f51e <finite>
 800e8d0:	2800      	cmp	r0, #0
 800e8d2:	d088      	beq.n	800e7e6 <pow+0x4a>
 800e8d4:	f7fd fa60 	bl	800bd98 <__errno>
 800e8d8:	2322      	movs	r3, #34	; 0x22
 800e8da:	6003      	str	r3, [r0, #0]
 800e8dc:	2400      	movs	r4, #0
 800e8de:	2500      	movs	r5, #0
 800e8e0:	e781      	b.n	800e7e6 <pow+0x4a>
 800e8e2:	4d04      	ldr	r5, [pc, #16]	; (800e8f4 <pow+0x158>)
 800e8e4:	2400      	movs	r4, #0
 800e8e6:	e77e      	b.n	800e7e6 <pow+0x4a>
 800e8e8:	20000368 	.word	0x20000368
 800e8ec:	fff00000 	.word	0xfff00000
 800e8f0:	7ff00000 	.word	0x7ff00000
 800e8f4:	3ff00000 	.word	0x3ff00000

0800e8f8 <sqrt>:
 800e8f8:	b538      	push	{r3, r4, r5, lr}
 800e8fa:	ed2d 8b02 	vpush	{d8}
 800e8fe:	ec55 4b10 	vmov	r4, r5, d0
 800e902:	f000 fd4f 	bl	800f3a4 <__ieee754_sqrt>
 800e906:	4b15      	ldr	r3, [pc, #84]	; (800e95c <sqrt+0x64>)
 800e908:	eeb0 8a40 	vmov.f32	s16, s0
 800e90c:	eef0 8a60 	vmov.f32	s17, s1
 800e910:	f993 3000 	ldrsb.w	r3, [r3]
 800e914:	3301      	adds	r3, #1
 800e916:	d019      	beq.n	800e94c <sqrt+0x54>
 800e918:	4622      	mov	r2, r4
 800e91a:	462b      	mov	r3, r5
 800e91c:	4620      	mov	r0, r4
 800e91e:	4629      	mov	r1, r5
 800e920:	f7f2 f904 	bl	8000b2c <__aeabi_dcmpun>
 800e924:	b990      	cbnz	r0, 800e94c <sqrt+0x54>
 800e926:	2200      	movs	r2, #0
 800e928:	2300      	movs	r3, #0
 800e92a:	4620      	mov	r0, r4
 800e92c:	4629      	mov	r1, r5
 800e92e:	f7f2 f8d5 	bl	8000adc <__aeabi_dcmplt>
 800e932:	b158      	cbz	r0, 800e94c <sqrt+0x54>
 800e934:	f7fd fa30 	bl	800bd98 <__errno>
 800e938:	2321      	movs	r3, #33	; 0x21
 800e93a:	6003      	str	r3, [r0, #0]
 800e93c:	2200      	movs	r2, #0
 800e93e:	2300      	movs	r3, #0
 800e940:	4610      	mov	r0, r2
 800e942:	4619      	mov	r1, r3
 800e944:	f7f1 ff82 	bl	800084c <__aeabi_ddiv>
 800e948:	ec41 0b18 	vmov	d8, r0, r1
 800e94c:	eeb0 0a48 	vmov.f32	s0, s16
 800e950:	eef0 0a68 	vmov.f32	s1, s17
 800e954:	ecbd 8b02 	vpop	{d8}
 800e958:	bd38      	pop	{r3, r4, r5, pc}
 800e95a:	bf00      	nop
 800e95c:	20000368 	.word	0x20000368

0800e960 <__ieee754_pow>:
 800e960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e964:	ed2d 8b06 	vpush	{d8-d10}
 800e968:	b08d      	sub	sp, #52	; 0x34
 800e96a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800e96e:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 800e972:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800e976:	ea56 0100 	orrs.w	r1, r6, r0
 800e97a:	ec53 2b10 	vmov	r2, r3, d0
 800e97e:	f000 84d1 	beq.w	800f324 <__ieee754_pow+0x9c4>
 800e982:	497f      	ldr	r1, [pc, #508]	; (800eb80 <__ieee754_pow+0x220>)
 800e984:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800e988:	428c      	cmp	r4, r1
 800e98a:	ee10 8a10 	vmov	r8, s0
 800e98e:	4699      	mov	r9, r3
 800e990:	dc09      	bgt.n	800e9a6 <__ieee754_pow+0x46>
 800e992:	d103      	bne.n	800e99c <__ieee754_pow+0x3c>
 800e994:	b97a      	cbnz	r2, 800e9b6 <__ieee754_pow+0x56>
 800e996:	42a6      	cmp	r6, r4
 800e998:	dd02      	ble.n	800e9a0 <__ieee754_pow+0x40>
 800e99a:	e00c      	b.n	800e9b6 <__ieee754_pow+0x56>
 800e99c:	428e      	cmp	r6, r1
 800e99e:	dc02      	bgt.n	800e9a6 <__ieee754_pow+0x46>
 800e9a0:	428e      	cmp	r6, r1
 800e9a2:	d110      	bne.n	800e9c6 <__ieee754_pow+0x66>
 800e9a4:	b178      	cbz	r0, 800e9c6 <__ieee754_pow+0x66>
 800e9a6:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800e9aa:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800e9ae:	ea54 0308 	orrs.w	r3, r4, r8
 800e9b2:	f000 84b7 	beq.w	800f324 <__ieee754_pow+0x9c4>
 800e9b6:	4873      	ldr	r0, [pc, #460]	; (800eb84 <__ieee754_pow+0x224>)
 800e9b8:	b00d      	add	sp, #52	; 0x34
 800e9ba:	ecbd 8b06 	vpop	{d8-d10}
 800e9be:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9c2:	f000 bdb9 	b.w	800f538 <nan>
 800e9c6:	f1b9 0f00 	cmp.w	r9, #0
 800e9ca:	da36      	bge.n	800ea3a <__ieee754_pow+0xda>
 800e9cc:	496e      	ldr	r1, [pc, #440]	; (800eb88 <__ieee754_pow+0x228>)
 800e9ce:	428e      	cmp	r6, r1
 800e9d0:	dc51      	bgt.n	800ea76 <__ieee754_pow+0x116>
 800e9d2:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 800e9d6:	428e      	cmp	r6, r1
 800e9d8:	f340 84af 	ble.w	800f33a <__ieee754_pow+0x9da>
 800e9dc:	1531      	asrs	r1, r6, #20
 800e9de:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800e9e2:	2914      	cmp	r1, #20
 800e9e4:	dd0f      	ble.n	800ea06 <__ieee754_pow+0xa6>
 800e9e6:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 800e9ea:	fa20 fc01 	lsr.w	ip, r0, r1
 800e9ee:	fa0c f101 	lsl.w	r1, ip, r1
 800e9f2:	4281      	cmp	r1, r0
 800e9f4:	f040 84a1 	bne.w	800f33a <__ieee754_pow+0x9da>
 800e9f8:	f00c 0c01 	and.w	ip, ip, #1
 800e9fc:	f1cc 0102 	rsb	r1, ip, #2
 800ea00:	9100      	str	r1, [sp, #0]
 800ea02:	b180      	cbz	r0, 800ea26 <__ieee754_pow+0xc6>
 800ea04:	e059      	b.n	800eaba <__ieee754_pow+0x15a>
 800ea06:	2800      	cmp	r0, #0
 800ea08:	d155      	bne.n	800eab6 <__ieee754_pow+0x156>
 800ea0a:	f1c1 0114 	rsb	r1, r1, #20
 800ea0e:	fa46 fc01 	asr.w	ip, r6, r1
 800ea12:	fa0c f101 	lsl.w	r1, ip, r1
 800ea16:	42b1      	cmp	r1, r6
 800ea18:	f040 848c 	bne.w	800f334 <__ieee754_pow+0x9d4>
 800ea1c:	f00c 0c01 	and.w	ip, ip, #1
 800ea20:	f1cc 0102 	rsb	r1, ip, #2
 800ea24:	9100      	str	r1, [sp, #0]
 800ea26:	4959      	ldr	r1, [pc, #356]	; (800eb8c <__ieee754_pow+0x22c>)
 800ea28:	428e      	cmp	r6, r1
 800ea2a:	d12d      	bne.n	800ea88 <__ieee754_pow+0x128>
 800ea2c:	2f00      	cmp	r7, #0
 800ea2e:	da79      	bge.n	800eb24 <__ieee754_pow+0x1c4>
 800ea30:	4956      	ldr	r1, [pc, #344]	; (800eb8c <__ieee754_pow+0x22c>)
 800ea32:	2000      	movs	r0, #0
 800ea34:	f7f1 ff0a 	bl	800084c <__aeabi_ddiv>
 800ea38:	e016      	b.n	800ea68 <__ieee754_pow+0x108>
 800ea3a:	2100      	movs	r1, #0
 800ea3c:	9100      	str	r1, [sp, #0]
 800ea3e:	2800      	cmp	r0, #0
 800ea40:	d13b      	bne.n	800eaba <__ieee754_pow+0x15a>
 800ea42:	494f      	ldr	r1, [pc, #316]	; (800eb80 <__ieee754_pow+0x220>)
 800ea44:	428e      	cmp	r6, r1
 800ea46:	d1ee      	bne.n	800ea26 <__ieee754_pow+0xc6>
 800ea48:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800ea4c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800ea50:	ea53 0308 	orrs.w	r3, r3, r8
 800ea54:	f000 8466 	beq.w	800f324 <__ieee754_pow+0x9c4>
 800ea58:	4b4d      	ldr	r3, [pc, #308]	; (800eb90 <__ieee754_pow+0x230>)
 800ea5a:	429c      	cmp	r4, r3
 800ea5c:	dd0d      	ble.n	800ea7a <__ieee754_pow+0x11a>
 800ea5e:	2f00      	cmp	r7, #0
 800ea60:	f280 8464 	bge.w	800f32c <__ieee754_pow+0x9cc>
 800ea64:	2000      	movs	r0, #0
 800ea66:	2100      	movs	r1, #0
 800ea68:	ec41 0b10 	vmov	d0, r0, r1
 800ea6c:	b00d      	add	sp, #52	; 0x34
 800ea6e:	ecbd 8b06 	vpop	{d8-d10}
 800ea72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea76:	2102      	movs	r1, #2
 800ea78:	e7e0      	b.n	800ea3c <__ieee754_pow+0xdc>
 800ea7a:	2f00      	cmp	r7, #0
 800ea7c:	daf2      	bge.n	800ea64 <__ieee754_pow+0x104>
 800ea7e:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 800ea82:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800ea86:	e7ef      	b.n	800ea68 <__ieee754_pow+0x108>
 800ea88:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800ea8c:	d104      	bne.n	800ea98 <__ieee754_pow+0x138>
 800ea8e:	4610      	mov	r0, r2
 800ea90:	4619      	mov	r1, r3
 800ea92:	f7f1 fdb1 	bl	80005f8 <__aeabi_dmul>
 800ea96:	e7e7      	b.n	800ea68 <__ieee754_pow+0x108>
 800ea98:	493e      	ldr	r1, [pc, #248]	; (800eb94 <__ieee754_pow+0x234>)
 800ea9a:	428f      	cmp	r7, r1
 800ea9c:	d10d      	bne.n	800eaba <__ieee754_pow+0x15a>
 800ea9e:	f1b9 0f00 	cmp.w	r9, #0
 800eaa2:	db0a      	blt.n	800eaba <__ieee754_pow+0x15a>
 800eaa4:	ec43 2b10 	vmov	d0, r2, r3
 800eaa8:	b00d      	add	sp, #52	; 0x34
 800eaaa:	ecbd 8b06 	vpop	{d8-d10}
 800eaae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eab2:	f000 bc77 	b.w	800f3a4 <__ieee754_sqrt>
 800eab6:	2100      	movs	r1, #0
 800eab8:	9100      	str	r1, [sp, #0]
 800eaba:	ec43 2b10 	vmov	d0, r2, r3
 800eabe:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800eac2:	f000 fd23 	bl	800f50c <fabs>
 800eac6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800eaca:	ec51 0b10 	vmov	r0, r1, d0
 800eace:	f1b8 0f00 	cmp.w	r8, #0
 800ead2:	d12a      	bne.n	800eb2a <__ieee754_pow+0x1ca>
 800ead4:	b12c      	cbz	r4, 800eae2 <__ieee754_pow+0x182>
 800ead6:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800eb8c <__ieee754_pow+0x22c>
 800eada:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 800eade:	45e6      	cmp	lr, ip
 800eae0:	d123      	bne.n	800eb2a <__ieee754_pow+0x1ca>
 800eae2:	2f00      	cmp	r7, #0
 800eae4:	da05      	bge.n	800eaf2 <__ieee754_pow+0x192>
 800eae6:	4602      	mov	r2, r0
 800eae8:	460b      	mov	r3, r1
 800eaea:	2000      	movs	r0, #0
 800eaec:	4927      	ldr	r1, [pc, #156]	; (800eb8c <__ieee754_pow+0x22c>)
 800eaee:	f7f1 fead 	bl	800084c <__aeabi_ddiv>
 800eaf2:	f1b9 0f00 	cmp.w	r9, #0
 800eaf6:	dab7      	bge.n	800ea68 <__ieee754_pow+0x108>
 800eaf8:	9b00      	ldr	r3, [sp, #0]
 800eafa:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800eafe:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800eb02:	4323      	orrs	r3, r4
 800eb04:	d108      	bne.n	800eb18 <__ieee754_pow+0x1b8>
 800eb06:	4602      	mov	r2, r0
 800eb08:	460b      	mov	r3, r1
 800eb0a:	4610      	mov	r0, r2
 800eb0c:	4619      	mov	r1, r3
 800eb0e:	f7f1 fbbb 	bl	8000288 <__aeabi_dsub>
 800eb12:	4602      	mov	r2, r0
 800eb14:	460b      	mov	r3, r1
 800eb16:	e78d      	b.n	800ea34 <__ieee754_pow+0xd4>
 800eb18:	9b00      	ldr	r3, [sp, #0]
 800eb1a:	2b01      	cmp	r3, #1
 800eb1c:	d1a4      	bne.n	800ea68 <__ieee754_pow+0x108>
 800eb1e:	4602      	mov	r2, r0
 800eb20:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800eb24:	4610      	mov	r0, r2
 800eb26:	4619      	mov	r1, r3
 800eb28:	e79e      	b.n	800ea68 <__ieee754_pow+0x108>
 800eb2a:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 800eb2e:	f10c 35ff 	add.w	r5, ip, #4294967295
 800eb32:	950a      	str	r5, [sp, #40]	; 0x28
 800eb34:	9d00      	ldr	r5, [sp, #0]
 800eb36:	46ac      	mov	ip, r5
 800eb38:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800eb3a:	ea5c 0505 	orrs.w	r5, ip, r5
 800eb3e:	d0e4      	beq.n	800eb0a <__ieee754_pow+0x1aa>
 800eb40:	4b15      	ldr	r3, [pc, #84]	; (800eb98 <__ieee754_pow+0x238>)
 800eb42:	429e      	cmp	r6, r3
 800eb44:	f340 80fc 	ble.w	800ed40 <__ieee754_pow+0x3e0>
 800eb48:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800eb4c:	429e      	cmp	r6, r3
 800eb4e:	4b10      	ldr	r3, [pc, #64]	; (800eb90 <__ieee754_pow+0x230>)
 800eb50:	dd07      	ble.n	800eb62 <__ieee754_pow+0x202>
 800eb52:	429c      	cmp	r4, r3
 800eb54:	dc0a      	bgt.n	800eb6c <__ieee754_pow+0x20c>
 800eb56:	2f00      	cmp	r7, #0
 800eb58:	da84      	bge.n	800ea64 <__ieee754_pow+0x104>
 800eb5a:	a307      	add	r3, pc, #28	; (adr r3, 800eb78 <__ieee754_pow+0x218>)
 800eb5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb60:	e795      	b.n	800ea8e <__ieee754_pow+0x12e>
 800eb62:	429c      	cmp	r4, r3
 800eb64:	dbf7      	blt.n	800eb56 <__ieee754_pow+0x1f6>
 800eb66:	4b09      	ldr	r3, [pc, #36]	; (800eb8c <__ieee754_pow+0x22c>)
 800eb68:	429c      	cmp	r4, r3
 800eb6a:	dd17      	ble.n	800eb9c <__ieee754_pow+0x23c>
 800eb6c:	2f00      	cmp	r7, #0
 800eb6e:	dcf4      	bgt.n	800eb5a <__ieee754_pow+0x1fa>
 800eb70:	e778      	b.n	800ea64 <__ieee754_pow+0x104>
 800eb72:	bf00      	nop
 800eb74:	f3af 8000 	nop.w
 800eb78:	8800759c 	.word	0x8800759c
 800eb7c:	7e37e43c 	.word	0x7e37e43c
 800eb80:	7ff00000 	.word	0x7ff00000
 800eb84:	0800fa77 	.word	0x0800fa77
 800eb88:	433fffff 	.word	0x433fffff
 800eb8c:	3ff00000 	.word	0x3ff00000
 800eb90:	3fefffff 	.word	0x3fefffff
 800eb94:	3fe00000 	.word	0x3fe00000
 800eb98:	41e00000 	.word	0x41e00000
 800eb9c:	4b64      	ldr	r3, [pc, #400]	; (800ed30 <__ieee754_pow+0x3d0>)
 800eb9e:	2200      	movs	r2, #0
 800eba0:	f7f1 fb72 	bl	8000288 <__aeabi_dsub>
 800eba4:	a356      	add	r3, pc, #344	; (adr r3, 800ed00 <__ieee754_pow+0x3a0>)
 800eba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebaa:	4604      	mov	r4, r0
 800ebac:	460d      	mov	r5, r1
 800ebae:	f7f1 fd23 	bl	80005f8 <__aeabi_dmul>
 800ebb2:	a355      	add	r3, pc, #340	; (adr r3, 800ed08 <__ieee754_pow+0x3a8>)
 800ebb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebb8:	4606      	mov	r6, r0
 800ebba:	460f      	mov	r7, r1
 800ebbc:	4620      	mov	r0, r4
 800ebbe:	4629      	mov	r1, r5
 800ebc0:	f7f1 fd1a 	bl	80005f8 <__aeabi_dmul>
 800ebc4:	4b5b      	ldr	r3, [pc, #364]	; (800ed34 <__ieee754_pow+0x3d4>)
 800ebc6:	4682      	mov	sl, r0
 800ebc8:	468b      	mov	fp, r1
 800ebca:	2200      	movs	r2, #0
 800ebcc:	4620      	mov	r0, r4
 800ebce:	4629      	mov	r1, r5
 800ebd0:	f7f1 fd12 	bl	80005f8 <__aeabi_dmul>
 800ebd4:	4602      	mov	r2, r0
 800ebd6:	460b      	mov	r3, r1
 800ebd8:	a14d      	add	r1, pc, #308	; (adr r1, 800ed10 <__ieee754_pow+0x3b0>)
 800ebda:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ebde:	f7f1 fb53 	bl	8000288 <__aeabi_dsub>
 800ebe2:	4622      	mov	r2, r4
 800ebe4:	462b      	mov	r3, r5
 800ebe6:	f7f1 fd07 	bl	80005f8 <__aeabi_dmul>
 800ebea:	4602      	mov	r2, r0
 800ebec:	460b      	mov	r3, r1
 800ebee:	2000      	movs	r0, #0
 800ebf0:	4951      	ldr	r1, [pc, #324]	; (800ed38 <__ieee754_pow+0x3d8>)
 800ebf2:	f7f1 fb49 	bl	8000288 <__aeabi_dsub>
 800ebf6:	4622      	mov	r2, r4
 800ebf8:	4680      	mov	r8, r0
 800ebfa:	4689      	mov	r9, r1
 800ebfc:	462b      	mov	r3, r5
 800ebfe:	4620      	mov	r0, r4
 800ec00:	4629      	mov	r1, r5
 800ec02:	f7f1 fcf9 	bl	80005f8 <__aeabi_dmul>
 800ec06:	4602      	mov	r2, r0
 800ec08:	460b      	mov	r3, r1
 800ec0a:	4640      	mov	r0, r8
 800ec0c:	4649      	mov	r1, r9
 800ec0e:	f7f1 fcf3 	bl	80005f8 <__aeabi_dmul>
 800ec12:	a341      	add	r3, pc, #260	; (adr r3, 800ed18 <__ieee754_pow+0x3b8>)
 800ec14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec18:	f7f1 fcee 	bl	80005f8 <__aeabi_dmul>
 800ec1c:	4602      	mov	r2, r0
 800ec1e:	460b      	mov	r3, r1
 800ec20:	4650      	mov	r0, sl
 800ec22:	4659      	mov	r1, fp
 800ec24:	f7f1 fb30 	bl	8000288 <__aeabi_dsub>
 800ec28:	4602      	mov	r2, r0
 800ec2a:	460b      	mov	r3, r1
 800ec2c:	4680      	mov	r8, r0
 800ec2e:	4689      	mov	r9, r1
 800ec30:	4630      	mov	r0, r6
 800ec32:	4639      	mov	r1, r7
 800ec34:	f7f1 fb2a 	bl	800028c <__adddf3>
 800ec38:	2400      	movs	r4, #0
 800ec3a:	4632      	mov	r2, r6
 800ec3c:	463b      	mov	r3, r7
 800ec3e:	4620      	mov	r0, r4
 800ec40:	460d      	mov	r5, r1
 800ec42:	f7f1 fb21 	bl	8000288 <__aeabi_dsub>
 800ec46:	4602      	mov	r2, r0
 800ec48:	460b      	mov	r3, r1
 800ec4a:	4640      	mov	r0, r8
 800ec4c:	4649      	mov	r1, r9
 800ec4e:	f7f1 fb1b 	bl	8000288 <__aeabi_dsub>
 800ec52:	9b00      	ldr	r3, [sp, #0]
 800ec54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ec56:	3b01      	subs	r3, #1
 800ec58:	4313      	orrs	r3, r2
 800ec5a:	4682      	mov	sl, r0
 800ec5c:	468b      	mov	fp, r1
 800ec5e:	f040 81f1 	bne.w	800f044 <__ieee754_pow+0x6e4>
 800ec62:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800ed20 <__ieee754_pow+0x3c0>
 800ec66:	eeb0 8a47 	vmov.f32	s16, s14
 800ec6a:	eef0 8a67 	vmov.f32	s17, s15
 800ec6e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ec72:	2600      	movs	r6, #0
 800ec74:	4632      	mov	r2, r6
 800ec76:	463b      	mov	r3, r7
 800ec78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ec7c:	f7f1 fb04 	bl	8000288 <__aeabi_dsub>
 800ec80:	4622      	mov	r2, r4
 800ec82:	462b      	mov	r3, r5
 800ec84:	f7f1 fcb8 	bl	80005f8 <__aeabi_dmul>
 800ec88:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ec8c:	4680      	mov	r8, r0
 800ec8e:	4689      	mov	r9, r1
 800ec90:	4650      	mov	r0, sl
 800ec92:	4659      	mov	r1, fp
 800ec94:	f7f1 fcb0 	bl	80005f8 <__aeabi_dmul>
 800ec98:	4602      	mov	r2, r0
 800ec9a:	460b      	mov	r3, r1
 800ec9c:	4640      	mov	r0, r8
 800ec9e:	4649      	mov	r1, r9
 800eca0:	f7f1 faf4 	bl	800028c <__adddf3>
 800eca4:	4632      	mov	r2, r6
 800eca6:	463b      	mov	r3, r7
 800eca8:	4680      	mov	r8, r0
 800ecaa:	4689      	mov	r9, r1
 800ecac:	4620      	mov	r0, r4
 800ecae:	4629      	mov	r1, r5
 800ecb0:	f7f1 fca2 	bl	80005f8 <__aeabi_dmul>
 800ecb4:	460b      	mov	r3, r1
 800ecb6:	4604      	mov	r4, r0
 800ecb8:	460d      	mov	r5, r1
 800ecba:	4602      	mov	r2, r0
 800ecbc:	4649      	mov	r1, r9
 800ecbe:	4640      	mov	r0, r8
 800ecc0:	f7f1 fae4 	bl	800028c <__adddf3>
 800ecc4:	4b1d      	ldr	r3, [pc, #116]	; (800ed3c <__ieee754_pow+0x3dc>)
 800ecc6:	4299      	cmp	r1, r3
 800ecc8:	ec45 4b19 	vmov	d9, r4, r5
 800eccc:	4606      	mov	r6, r0
 800ecce:	460f      	mov	r7, r1
 800ecd0:	468b      	mov	fp, r1
 800ecd2:	f340 82fe 	ble.w	800f2d2 <__ieee754_pow+0x972>
 800ecd6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800ecda:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800ecde:	4303      	orrs	r3, r0
 800ece0:	f000 81f0 	beq.w	800f0c4 <__ieee754_pow+0x764>
 800ece4:	a310      	add	r3, pc, #64	; (adr r3, 800ed28 <__ieee754_pow+0x3c8>)
 800ece6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecea:	ec51 0b18 	vmov	r0, r1, d8
 800ecee:	f7f1 fc83 	bl	80005f8 <__aeabi_dmul>
 800ecf2:	a30d      	add	r3, pc, #52	; (adr r3, 800ed28 <__ieee754_pow+0x3c8>)
 800ecf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecf8:	e6cb      	b.n	800ea92 <__ieee754_pow+0x132>
 800ecfa:	bf00      	nop
 800ecfc:	f3af 8000 	nop.w
 800ed00:	60000000 	.word	0x60000000
 800ed04:	3ff71547 	.word	0x3ff71547
 800ed08:	f85ddf44 	.word	0xf85ddf44
 800ed0c:	3e54ae0b 	.word	0x3e54ae0b
 800ed10:	55555555 	.word	0x55555555
 800ed14:	3fd55555 	.word	0x3fd55555
 800ed18:	652b82fe 	.word	0x652b82fe
 800ed1c:	3ff71547 	.word	0x3ff71547
 800ed20:	00000000 	.word	0x00000000
 800ed24:	bff00000 	.word	0xbff00000
 800ed28:	8800759c 	.word	0x8800759c
 800ed2c:	7e37e43c 	.word	0x7e37e43c
 800ed30:	3ff00000 	.word	0x3ff00000
 800ed34:	3fd00000 	.word	0x3fd00000
 800ed38:	3fe00000 	.word	0x3fe00000
 800ed3c:	408fffff 	.word	0x408fffff
 800ed40:	4bd7      	ldr	r3, [pc, #860]	; (800f0a0 <__ieee754_pow+0x740>)
 800ed42:	ea03 0309 	and.w	r3, r3, r9
 800ed46:	2200      	movs	r2, #0
 800ed48:	b92b      	cbnz	r3, 800ed56 <__ieee754_pow+0x3f6>
 800ed4a:	4bd6      	ldr	r3, [pc, #856]	; (800f0a4 <__ieee754_pow+0x744>)
 800ed4c:	f7f1 fc54 	bl	80005f8 <__aeabi_dmul>
 800ed50:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800ed54:	460c      	mov	r4, r1
 800ed56:	1523      	asrs	r3, r4, #20
 800ed58:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800ed5c:	4413      	add	r3, r2
 800ed5e:	9309      	str	r3, [sp, #36]	; 0x24
 800ed60:	4bd1      	ldr	r3, [pc, #836]	; (800f0a8 <__ieee754_pow+0x748>)
 800ed62:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800ed66:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800ed6a:	429c      	cmp	r4, r3
 800ed6c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800ed70:	dd08      	ble.n	800ed84 <__ieee754_pow+0x424>
 800ed72:	4bce      	ldr	r3, [pc, #824]	; (800f0ac <__ieee754_pow+0x74c>)
 800ed74:	429c      	cmp	r4, r3
 800ed76:	f340 8163 	ble.w	800f040 <__ieee754_pow+0x6e0>
 800ed7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ed7c:	3301      	adds	r3, #1
 800ed7e:	9309      	str	r3, [sp, #36]	; 0x24
 800ed80:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800ed84:	2400      	movs	r4, #0
 800ed86:	00e3      	lsls	r3, r4, #3
 800ed88:	930b      	str	r3, [sp, #44]	; 0x2c
 800ed8a:	4bc9      	ldr	r3, [pc, #804]	; (800f0b0 <__ieee754_pow+0x750>)
 800ed8c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ed90:	ed93 7b00 	vldr	d7, [r3]
 800ed94:	4629      	mov	r1, r5
 800ed96:	ec53 2b17 	vmov	r2, r3, d7
 800ed9a:	eeb0 8a47 	vmov.f32	s16, s14
 800ed9e:	eef0 8a67 	vmov.f32	s17, s15
 800eda2:	4682      	mov	sl, r0
 800eda4:	f7f1 fa70 	bl	8000288 <__aeabi_dsub>
 800eda8:	4652      	mov	r2, sl
 800edaa:	4606      	mov	r6, r0
 800edac:	460f      	mov	r7, r1
 800edae:	462b      	mov	r3, r5
 800edb0:	ec51 0b18 	vmov	r0, r1, d8
 800edb4:	f7f1 fa6a 	bl	800028c <__adddf3>
 800edb8:	4602      	mov	r2, r0
 800edba:	460b      	mov	r3, r1
 800edbc:	2000      	movs	r0, #0
 800edbe:	49bd      	ldr	r1, [pc, #756]	; (800f0b4 <__ieee754_pow+0x754>)
 800edc0:	f7f1 fd44 	bl	800084c <__aeabi_ddiv>
 800edc4:	ec41 0b19 	vmov	d9, r0, r1
 800edc8:	4602      	mov	r2, r0
 800edca:	460b      	mov	r3, r1
 800edcc:	4630      	mov	r0, r6
 800edce:	4639      	mov	r1, r7
 800edd0:	f7f1 fc12 	bl	80005f8 <__aeabi_dmul>
 800edd4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800edd8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800eddc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ede0:	2300      	movs	r3, #0
 800ede2:	9304      	str	r3, [sp, #16]
 800ede4:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800ede8:	46ab      	mov	fp, r5
 800edea:	106d      	asrs	r5, r5, #1
 800edec:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800edf0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800edf4:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800edf8:	2200      	movs	r2, #0
 800edfa:	4640      	mov	r0, r8
 800edfc:	4649      	mov	r1, r9
 800edfe:	4614      	mov	r4, r2
 800ee00:	461d      	mov	r5, r3
 800ee02:	f7f1 fbf9 	bl	80005f8 <__aeabi_dmul>
 800ee06:	4602      	mov	r2, r0
 800ee08:	460b      	mov	r3, r1
 800ee0a:	4630      	mov	r0, r6
 800ee0c:	4639      	mov	r1, r7
 800ee0e:	f7f1 fa3b 	bl	8000288 <__aeabi_dsub>
 800ee12:	ec53 2b18 	vmov	r2, r3, d8
 800ee16:	4606      	mov	r6, r0
 800ee18:	460f      	mov	r7, r1
 800ee1a:	4620      	mov	r0, r4
 800ee1c:	4629      	mov	r1, r5
 800ee1e:	f7f1 fa33 	bl	8000288 <__aeabi_dsub>
 800ee22:	4602      	mov	r2, r0
 800ee24:	460b      	mov	r3, r1
 800ee26:	4650      	mov	r0, sl
 800ee28:	4659      	mov	r1, fp
 800ee2a:	f7f1 fa2d 	bl	8000288 <__aeabi_dsub>
 800ee2e:	4642      	mov	r2, r8
 800ee30:	464b      	mov	r3, r9
 800ee32:	f7f1 fbe1 	bl	80005f8 <__aeabi_dmul>
 800ee36:	4602      	mov	r2, r0
 800ee38:	460b      	mov	r3, r1
 800ee3a:	4630      	mov	r0, r6
 800ee3c:	4639      	mov	r1, r7
 800ee3e:	f7f1 fa23 	bl	8000288 <__aeabi_dsub>
 800ee42:	ec53 2b19 	vmov	r2, r3, d9
 800ee46:	f7f1 fbd7 	bl	80005f8 <__aeabi_dmul>
 800ee4a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ee4e:	ec41 0b18 	vmov	d8, r0, r1
 800ee52:	4610      	mov	r0, r2
 800ee54:	4619      	mov	r1, r3
 800ee56:	f7f1 fbcf 	bl	80005f8 <__aeabi_dmul>
 800ee5a:	a37d      	add	r3, pc, #500	; (adr r3, 800f050 <__ieee754_pow+0x6f0>)
 800ee5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee60:	4604      	mov	r4, r0
 800ee62:	460d      	mov	r5, r1
 800ee64:	f7f1 fbc8 	bl	80005f8 <__aeabi_dmul>
 800ee68:	a37b      	add	r3, pc, #492	; (adr r3, 800f058 <__ieee754_pow+0x6f8>)
 800ee6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee6e:	f7f1 fa0d 	bl	800028c <__adddf3>
 800ee72:	4622      	mov	r2, r4
 800ee74:	462b      	mov	r3, r5
 800ee76:	f7f1 fbbf 	bl	80005f8 <__aeabi_dmul>
 800ee7a:	a379      	add	r3, pc, #484	; (adr r3, 800f060 <__ieee754_pow+0x700>)
 800ee7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee80:	f7f1 fa04 	bl	800028c <__adddf3>
 800ee84:	4622      	mov	r2, r4
 800ee86:	462b      	mov	r3, r5
 800ee88:	f7f1 fbb6 	bl	80005f8 <__aeabi_dmul>
 800ee8c:	a376      	add	r3, pc, #472	; (adr r3, 800f068 <__ieee754_pow+0x708>)
 800ee8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee92:	f7f1 f9fb 	bl	800028c <__adddf3>
 800ee96:	4622      	mov	r2, r4
 800ee98:	462b      	mov	r3, r5
 800ee9a:	f7f1 fbad 	bl	80005f8 <__aeabi_dmul>
 800ee9e:	a374      	add	r3, pc, #464	; (adr r3, 800f070 <__ieee754_pow+0x710>)
 800eea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eea4:	f7f1 f9f2 	bl	800028c <__adddf3>
 800eea8:	4622      	mov	r2, r4
 800eeaa:	462b      	mov	r3, r5
 800eeac:	f7f1 fba4 	bl	80005f8 <__aeabi_dmul>
 800eeb0:	a371      	add	r3, pc, #452	; (adr r3, 800f078 <__ieee754_pow+0x718>)
 800eeb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eeb6:	f7f1 f9e9 	bl	800028c <__adddf3>
 800eeba:	4622      	mov	r2, r4
 800eebc:	4606      	mov	r6, r0
 800eebe:	460f      	mov	r7, r1
 800eec0:	462b      	mov	r3, r5
 800eec2:	4620      	mov	r0, r4
 800eec4:	4629      	mov	r1, r5
 800eec6:	f7f1 fb97 	bl	80005f8 <__aeabi_dmul>
 800eeca:	4602      	mov	r2, r0
 800eecc:	460b      	mov	r3, r1
 800eece:	4630      	mov	r0, r6
 800eed0:	4639      	mov	r1, r7
 800eed2:	f7f1 fb91 	bl	80005f8 <__aeabi_dmul>
 800eed6:	4642      	mov	r2, r8
 800eed8:	4604      	mov	r4, r0
 800eeda:	460d      	mov	r5, r1
 800eedc:	464b      	mov	r3, r9
 800eede:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800eee2:	f7f1 f9d3 	bl	800028c <__adddf3>
 800eee6:	ec53 2b18 	vmov	r2, r3, d8
 800eeea:	f7f1 fb85 	bl	80005f8 <__aeabi_dmul>
 800eeee:	4622      	mov	r2, r4
 800eef0:	462b      	mov	r3, r5
 800eef2:	f7f1 f9cb 	bl	800028c <__adddf3>
 800eef6:	4642      	mov	r2, r8
 800eef8:	4682      	mov	sl, r0
 800eefa:	468b      	mov	fp, r1
 800eefc:	464b      	mov	r3, r9
 800eefe:	4640      	mov	r0, r8
 800ef00:	4649      	mov	r1, r9
 800ef02:	f7f1 fb79 	bl	80005f8 <__aeabi_dmul>
 800ef06:	4b6c      	ldr	r3, [pc, #432]	; (800f0b8 <__ieee754_pow+0x758>)
 800ef08:	2200      	movs	r2, #0
 800ef0a:	4606      	mov	r6, r0
 800ef0c:	460f      	mov	r7, r1
 800ef0e:	f7f1 f9bd 	bl	800028c <__adddf3>
 800ef12:	4652      	mov	r2, sl
 800ef14:	465b      	mov	r3, fp
 800ef16:	f7f1 f9b9 	bl	800028c <__adddf3>
 800ef1a:	9c04      	ldr	r4, [sp, #16]
 800ef1c:	460d      	mov	r5, r1
 800ef1e:	4622      	mov	r2, r4
 800ef20:	460b      	mov	r3, r1
 800ef22:	4640      	mov	r0, r8
 800ef24:	4649      	mov	r1, r9
 800ef26:	f7f1 fb67 	bl	80005f8 <__aeabi_dmul>
 800ef2a:	4b63      	ldr	r3, [pc, #396]	; (800f0b8 <__ieee754_pow+0x758>)
 800ef2c:	4680      	mov	r8, r0
 800ef2e:	4689      	mov	r9, r1
 800ef30:	2200      	movs	r2, #0
 800ef32:	4620      	mov	r0, r4
 800ef34:	4629      	mov	r1, r5
 800ef36:	f7f1 f9a7 	bl	8000288 <__aeabi_dsub>
 800ef3a:	4632      	mov	r2, r6
 800ef3c:	463b      	mov	r3, r7
 800ef3e:	f7f1 f9a3 	bl	8000288 <__aeabi_dsub>
 800ef42:	4602      	mov	r2, r0
 800ef44:	460b      	mov	r3, r1
 800ef46:	4650      	mov	r0, sl
 800ef48:	4659      	mov	r1, fp
 800ef4a:	f7f1 f99d 	bl	8000288 <__aeabi_dsub>
 800ef4e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ef52:	f7f1 fb51 	bl	80005f8 <__aeabi_dmul>
 800ef56:	4622      	mov	r2, r4
 800ef58:	4606      	mov	r6, r0
 800ef5a:	460f      	mov	r7, r1
 800ef5c:	462b      	mov	r3, r5
 800ef5e:	ec51 0b18 	vmov	r0, r1, d8
 800ef62:	f7f1 fb49 	bl	80005f8 <__aeabi_dmul>
 800ef66:	4602      	mov	r2, r0
 800ef68:	460b      	mov	r3, r1
 800ef6a:	4630      	mov	r0, r6
 800ef6c:	4639      	mov	r1, r7
 800ef6e:	f7f1 f98d 	bl	800028c <__adddf3>
 800ef72:	4606      	mov	r6, r0
 800ef74:	460f      	mov	r7, r1
 800ef76:	4602      	mov	r2, r0
 800ef78:	460b      	mov	r3, r1
 800ef7a:	4640      	mov	r0, r8
 800ef7c:	4649      	mov	r1, r9
 800ef7e:	f7f1 f985 	bl	800028c <__adddf3>
 800ef82:	9c04      	ldr	r4, [sp, #16]
 800ef84:	a33e      	add	r3, pc, #248	; (adr r3, 800f080 <__ieee754_pow+0x720>)
 800ef86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef8a:	4620      	mov	r0, r4
 800ef8c:	460d      	mov	r5, r1
 800ef8e:	f7f1 fb33 	bl	80005f8 <__aeabi_dmul>
 800ef92:	4642      	mov	r2, r8
 800ef94:	ec41 0b18 	vmov	d8, r0, r1
 800ef98:	464b      	mov	r3, r9
 800ef9a:	4620      	mov	r0, r4
 800ef9c:	4629      	mov	r1, r5
 800ef9e:	f7f1 f973 	bl	8000288 <__aeabi_dsub>
 800efa2:	4602      	mov	r2, r0
 800efa4:	460b      	mov	r3, r1
 800efa6:	4630      	mov	r0, r6
 800efa8:	4639      	mov	r1, r7
 800efaa:	f7f1 f96d 	bl	8000288 <__aeabi_dsub>
 800efae:	a336      	add	r3, pc, #216	; (adr r3, 800f088 <__ieee754_pow+0x728>)
 800efb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efb4:	f7f1 fb20 	bl	80005f8 <__aeabi_dmul>
 800efb8:	a335      	add	r3, pc, #212	; (adr r3, 800f090 <__ieee754_pow+0x730>)
 800efba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efbe:	4606      	mov	r6, r0
 800efc0:	460f      	mov	r7, r1
 800efc2:	4620      	mov	r0, r4
 800efc4:	4629      	mov	r1, r5
 800efc6:	f7f1 fb17 	bl	80005f8 <__aeabi_dmul>
 800efca:	4602      	mov	r2, r0
 800efcc:	460b      	mov	r3, r1
 800efce:	4630      	mov	r0, r6
 800efd0:	4639      	mov	r1, r7
 800efd2:	f7f1 f95b 	bl	800028c <__adddf3>
 800efd6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800efd8:	4b38      	ldr	r3, [pc, #224]	; (800f0bc <__ieee754_pow+0x75c>)
 800efda:	4413      	add	r3, r2
 800efdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efe0:	f7f1 f954 	bl	800028c <__adddf3>
 800efe4:	4682      	mov	sl, r0
 800efe6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800efe8:	468b      	mov	fp, r1
 800efea:	f7f1 fa9b 	bl	8000524 <__aeabi_i2d>
 800efee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800eff0:	4b33      	ldr	r3, [pc, #204]	; (800f0c0 <__ieee754_pow+0x760>)
 800eff2:	4413      	add	r3, r2
 800eff4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800eff8:	4606      	mov	r6, r0
 800effa:	460f      	mov	r7, r1
 800effc:	4652      	mov	r2, sl
 800effe:	465b      	mov	r3, fp
 800f000:	ec51 0b18 	vmov	r0, r1, d8
 800f004:	f7f1 f942 	bl	800028c <__adddf3>
 800f008:	4642      	mov	r2, r8
 800f00a:	464b      	mov	r3, r9
 800f00c:	f7f1 f93e 	bl	800028c <__adddf3>
 800f010:	4632      	mov	r2, r6
 800f012:	463b      	mov	r3, r7
 800f014:	f7f1 f93a 	bl	800028c <__adddf3>
 800f018:	9c04      	ldr	r4, [sp, #16]
 800f01a:	4632      	mov	r2, r6
 800f01c:	463b      	mov	r3, r7
 800f01e:	4620      	mov	r0, r4
 800f020:	460d      	mov	r5, r1
 800f022:	f7f1 f931 	bl	8000288 <__aeabi_dsub>
 800f026:	4642      	mov	r2, r8
 800f028:	464b      	mov	r3, r9
 800f02a:	f7f1 f92d 	bl	8000288 <__aeabi_dsub>
 800f02e:	ec53 2b18 	vmov	r2, r3, d8
 800f032:	f7f1 f929 	bl	8000288 <__aeabi_dsub>
 800f036:	4602      	mov	r2, r0
 800f038:	460b      	mov	r3, r1
 800f03a:	4650      	mov	r0, sl
 800f03c:	4659      	mov	r1, fp
 800f03e:	e606      	b.n	800ec4e <__ieee754_pow+0x2ee>
 800f040:	2401      	movs	r4, #1
 800f042:	e6a0      	b.n	800ed86 <__ieee754_pow+0x426>
 800f044:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800f098 <__ieee754_pow+0x738>
 800f048:	e60d      	b.n	800ec66 <__ieee754_pow+0x306>
 800f04a:	bf00      	nop
 800f04c:	f3af 8000 	nop.w
 800f050:	4a454eef 	.word	0x4a454eef
 800f054:	3fca7e28 	.word	0x3fca7e28
 800f058:	93c9db65 	.word	0x93c9db65
 800f05c:	3fcd864a 	.word	0x3fcd864a
 800f060:	a91d4101 	.word	0xa91d4101
 800f064:	3fd17460 	.word	0x3fd17460
 800f068:	518f264d 	.word	0x518f264d
 800f06c:	3fd55555 	.word	0x3fd55555
 800f070:	db6fabff 	.word	0xdb6fabff
 800f074:	3fdb6db6 	.word	0x3fdb6db6
 800f078:	33333303 	.word	0x33333303
 800f07c:	3fe33333 	.word	0x3fe33333
 800f080:	e0000000 	.word	0xe0000000
 800f084:	3feec709 	.word	0x3feec709
 800f088:	dc3a03fd 	.word	0xdc3a03fd
 800f08c:	3feec709 	.word	0x3feec709
 800f090:	145b01f5 	.word	0x145b01f5
 800f094:	be3e2fe0 	.word	0xbe3e2fe0
 800f098:	00000000 	.word	0x00000000
 800f09c:	3ff00000 	.word	0x3ff00000
 800f0a0:	7ff00000 	.word	0x7ff00000
 800f0a4:	43400000 	.word	0x43400000
 800f0a8:	0003988e 	.word	0x0003988e
 800f0ac:	000bb679 	.word	0x000bb679
 800f0b0:	0800fbf8 	.word	0x0800fbf8
 800f0b4:	3ff00000 	.word	0x3ff00000
 800f0b8:	40080000 	.word	0x40080000
 800f0bc:	0800fc18 	.word	0x0800fc18
 800f0c0:	0800fc08 	.word	0x0800fc08
 800f0c4:	a3b5      	add	r3, pc, #724	; (adr r3, 800f39c <__ieee754_pow+0xa3c>)
 800f0c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0ca:	4640      	mov	r0, r8
 800f0cc:	4649      	mov	r1, r9
 800f0ce:	f7f1 f8dd 	bl	800028c <__adddf3>
 800f0d2:	4622      	mov	r2, r4
 800f0d4:	ec41 0b1a 	vmov	d10, r0, r1
 800f0d8:	462b      	mov	r3, r5
 800f0da:	4630      	mov	r0, r6
 800f0dc:	4639      	mov	r1, r7
 800f0de:	f7f1 f8d3 	bl	8000288 <__aeabi_dsub>
 800f0e2:	4602      	mov	r2, r0
 800f0e4:	460b      	mov	r3, r1
 800f0e6:	ec51 0b1a 	vmov	r0, r1, d10
 800f0ea:	f7f1 fd15 	bl	8000b18 <__aeabi_dcmpgt>
 800f0ee:	2800      	cmp	r0, #0
 800f0f0:	f47f adf8 	bne.w	800ece4 <__ieee754_pow+0x384>
 800f0f4:	4aa4      	ldr	r2, [pc, #656]	; (800f388 <__ieee754_pow+0xa28>)
 800f0f6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f0fa:	4293      	cmp	r3, r2
 800f0fc:	f340 810b 	ble.w	800f316 <__ieee754_pow+0x9b6>
 800f100:	151b      	asrs	r3, r3, #20
 800f102:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800f106:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800f10a:	fa4a f303 	asr.w	r3, sl, r3
 800f10e:	445b      	add	r3, fp
 800f110:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800f114:	4e9d      	ldr	r6, [pc, #628]	; (800f38c <__ieee754_pow+0xa2c>)
 800f116:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800f11a:	4116      	asrs	r6, r2
 800f11c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800f120:	2000      	movs	r0, #0
 800f122:	ea23 0106 	bic.w	r1, r3, r6
 800f126:	f1c2 0214 	rsb	r2, r2, #20
 800f12a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800f12e:	fa4a fa02 	asr.w	sl, sl, r2
 800f132:	f1bb 0f00 	cmp.w	fp, #0
 800f136:	4602      	mov	r2, r0
 800f138:	460b      	mov	r3, r1
 800f13a:	4620      	mov	r0, r4
 800f13c:	4629      	mov	r1, r5
 800f13e:	bfb8      	it	lt
 800f140:	f1ca 0a00 	rsblt	sl, sl, #0
 800f144:	f7f1 f8a0 	bl	8000288 <__aeabi_dsub>
 800f148:	ec41 0b19 	vmov	d9, r0, r1
 800f14c:	4642      	mov	r2, r8
 800f14e:	464b      	mov	r3, r9
 800f150:	ec51 0b19 	vmov	r0, r1, d9
 800f154:	f7f1 f89a 	bl	800028c <__adddf3>
 800f158:	2400      	movs	r4, #0
 800f15a:	a379      	add	r3, pc, #484	; (adr r3, 800f340 <__ieee754_pow+0x9e0>)
 800f15c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f160:	4620      	mov	r0, r4
 800f162:	460d      	mov	r5, r1
 800f164:	f7f1 fa48 	bl	80005f8 <__aeabi_dmul>
 800f168:	ec53 2b19 	vmov	r2, r3, d9
 800f16c:	4606      	mov	r6, r0
 800f16e:	460f      	mov	r7, r1
 800f170:	4620      	mov	r0, r4
 800f172:	4629      	mov	r1, r5
 800f174:	f7f1 f888 	bl	8000288 <__aeabi_dsub>
 800f178:	4602      	mov	r2, r0
 800f17a:	460b      	mov	r3, r1
 800f17c:	4640      	mov	r0, r8
 800f17e:	4649      	mov	r1, r9
 800f180:	f7f1 f882 	bl	8000288 <__aeabi_dsub>
 800f184:	a370      	add	r3, pc, #448	; (adr r3, 800f348 <__ieee754_pow+0x9e8>)
 800f186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f18a:	f7f1 fa35 	bl	80005f8 <__aeabi_dmul>
 800f18e:	a370      	add	r3, pc, #448	; (adr r3, 800f350 <__ieee754_pow+0x9f0>)
 800f190:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f194:	4680      	mov	r8, r0
 800f196:	4689      	mov	r9, r1
 800f198:	4620      	mov	r0, r4
 800f19a:	4629      	mov	r1, r5
 800f19c:	f7f1 fa2c 	bl	80005f8 <__aeabi_dmul>
 800f1a0:	4602      	mov	r2, r0
 800f1a2:	460b      	mov	r3, r1
 800f1a4:	4640      	mov	r0, r8
 800f1a6:	4649      	mov	r1, r9
 800f1a8:	f7f1 f870 	bl	800028c <__adddf3>
 800f1ac:	4604      	mov	r4, r0
 800f1ae:	460d      	mov	r5, r1
 800f1b0:	4602      	mov	r2, r0
 800f1b2:	460b      	mov	r3, r1
 800f1b4:	4630      	mov	r0, r6
 800f1b6:	4639      	mov	r1, r7
 800f1b8:	f7f1 f868 	bl	800028c <__adddf3>
 800f1bc:	4632      	mov	r2, r6
 800f1be:	463b      	mov	r3, r7
 800f1c0:	4680      	mov	r8, r0
 800f1c2:	4689      	mov	r9, r1
 800f1c4:	f7f1 f860 	bl	8000288 <__aeabi_dsub>
 800f1c8:	4602      	mov	r2, r0
 800f1ca:	460b      	mov	r3, r1
 800f1cc:	4620      	mov	r0, r4
 800f1ce:	4629      	mov	r1, r5
 800f1d0:	f7f1 f85a 	bl	8000288 <__aeabi_dsub>
 800f1d4:	4642      	mov	r2, r8
 800f1d6:	4606      	mov	r6, r0
 800f1d8:	460f      	mov	r7, r1
 800f1da:	464b      	mov	r3, r9
 800f1dc:	4640      	mov	r0, r8
 800f1de:	4649      	mov	r1, r9
 800f1e0:	f7f1 fa0a 	bl	80005f8 <__aeabi_dmul>
 800f1e4:	a35c      	add	r3, pc, #368	; (adr r3, 800f358 <__ieee754_pow+0x9f8>)
 800f1e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1ea:	4604      	mov	r4, r0
 800f1ec:	460d      	mov	r5, r1
 800f1ee:	f7f1 fa03 	bl	80005f8 <__aeabi_dmul>
 800f1f2:	a35b      	add	r3, pc, #364	; (adr r3, 800f360 <__ieee754_pow+0xa00>)
 800f1f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1f8:	f7f1 f846 	bl	8000288 <__aeabi_dsub>
 800f1fc:	4622      	mov	r2, r4
 800f1fe:	462b      	mov	r3, r5
 800f200:	f7f1 f9fa 	bl	80005f8 <__aeabi_dmul>
 800f204:	a358      	add	r3, pc, #352	; (adr r3, 800f368 <__ieee754_pow+0xa08>)
 800f206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f20a:	f7f1 f83f 	bl	800028c <__adddf3>
 800f20e:	4622      	mov	r2, r4
 800f210:	462b      	mov	r3, r5
 800f212:	f7f1 f9f1 	bl	80005f8 <__aeabi_dmul>
 800f216:	a356      	add	r3, pc, #344	; (adr r3, 800f370 <__ieee754_pow+0xa10>)
 800f218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f21c:	f7f1 f834 	bl	8000288 <__aeabi_dsub>
 800f220:	4622      	mov	r2, r4
 800f222:	462b      	mov	r3, r5
 800f224:	f7f1 f9e8 	bl	80005f8 <__aeabi_dmul>
 800f228:	a353      	add	r3, pc, #332	; (adr r3, 800f378 <__ieee754_pow+0xa18>)
 800f22a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f22e:	f7f1 f82d 	bl	800028c <__adddf3>
 800f232:	4622      	mov	r2, r4
 800f234:	462b      	mov	r3, r5
 800f236:	f7f1 f9df 	bl	80005f8 <__aeabi_dmul>
 800f23a:	4602      	mov	r2, r0
 800f23c:	460b      	mov	r3, r1
 800f23e:	4640      	mov	r0, r8
 800f240:	4649      	mov	r1, r9
 800f242:	f7f1 f821 	bl	8000288 <__aeabi_dsub>
 800f246:	4604      	mov	r4, r0
 800f248:	460d      	mov	r5, r1
 800f24a:	4602      	mov	r2, r0
 800f24c:	460b      	mov	r3, r1
 800f24e:	4640      	mov	r0, r8
 800f250:	4649      	mov	r1, r9
 800f252:	f7f1 f9d1 	bl	80005f8 <__aeabi_dmul>
 800f256:	2200      	movs	r2, #0
 800f258:	ec41 0b19 	vmov	d9, r0, r1
 800f25c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f260:	4620      	mov	r0, r4
 800f262:	4629      	mov	r1, r5
 800f264:	f7f1 f810 	bl	8000288 <__aeabi_dsub>
 800f268:	4602      	mov	r2, r0
 800f26a:	460b      	mov	r3, r1
 800f26c:	ec51 0b19 	vmov	r0, r1, d9
 800f270:	f7f1 faec 	bl	800084c <__aeabi_ddiv>
 800f274:	4632      	mov	r2, r6
 800f276:	4604      	mov	r4, r0
 800f278:	460d      	mov	r5, r1
 800f27a:	463b      	mov	r3, r7
 800f27c:	4640      	mov	r0, r8
 800f27e:	4649      	mov	r1, r9
 800f280:	f7f1 f9ba 	bl	80005f8 <__aeabi_dmul>
 800f284:	4632      	mov	r2, r6
 800f286:	463b      	mov	r3, r7
 800f288:	f7f1 f800 	bl	800028c <__adddf3>
 800f28c:	4602      	mov	r2, r0
 800f28e:	460b      	mov	r3, r1
 800f290:	4620      	mov	r0, r4
 800f292:	4629      	mov	r1, r5
 800f294:	f7f0 fff8 	bl	8000288 <__aeabi_dsub>
 800f298:	4642      	mov	r2, r8
 800f29a:	464b      	mov	r3, r9
 800f29c:	f7f0 fff4 	bl	8000288 <__aeabi_dsub>
 800f2a0:	460b      	mov	r3, r1
 800f2a2:	4602      	mov	r2, r0
 800f2a4:	493a      	ldr	r1, [pc, #232]	; (800f390 <__ieee754_pow+0xa30>)
 800f2a6:	2000      	movs	r0, #0
 800f2a8:	f7f0 ffee 	bl	8000288 <__aeabi_dsub>
 800f2ac:	e9cd 0100 	strd	r0, r1, [sp]
 800f2b0:	9b01      	ldr	r3, [sp, #4]
 800f2b2:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800f2b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f2ba:	da2f      	bge.n	800f31c <__ieee754_pow+0x9bc>
 800f2bc:	4650      	mov	r0, sl
 800f2be:	ed9d 0b00 	vldr	d0, [sp]
 800f2c2:	f000 f9cd 	bl	800f660 <scalbn>
 800f2c6:	ec51 0b10 	vmov	r0, r1, d0
 800f2ca:	ec53 2b18 	vmov	r2, r3, d8
 800f2ce:	f7ff bbe0 	b.w	800ea92 <__ieee754_pow+0x132>
 800f2d2:	4b30      	ldr	r3, [pc, #192]	; (800f394 <__ieee754_pow+0xa34>)
 800f2d4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800f2d8:	429e      	cmp	r6, r3
 800f2da:	f77f af0b 	ble.w	800f0f4 <__ieee754_pow+0x794>
 800f2de:	4b2e      	ldr	r3, [pc, #184]	; (800f398 <__ieee754_pow+0xa38>)
 800f2e0:	440b      	add	r3, r1
 800f2e2:	4303      	orrs	r3, r0
 800f2e4:	d00b      	beq.n	800f2fe <__ieee754_pow+0x99e>
 800f2e6:	a326      	add	r3, pc, #152	; (adr r3, 800f380 <__ieee754_pow+0xa20>)
 800f2e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2ec:	ec51 0b18 	vmov	r0, r1, d8
 800f2f0:	f7f1 f982 	bl	80005f8 <__aeabi_dmul>
 800f2f4:	a322      	add	r3, pc, #136	; (adr r3, 800f380 <__ieee754_pow+0xa20>)
 800f2f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2fa:	f7ff bbca 	b.w	800ea92 <__ieee754_pow+0x132>
 800f2fe:	4622      	mov	r2, r4
 800f300:	462b      	mov	r3, r5
 800f302:	f7f0 ffc1 	bl	8000288 <__aeabi_dsub>
 800f306:	4642      	mov	r2, r8
 800f308:	464b      	mov	r3, r9
 800f30a:	f7f1 fbfb 	bl	8000b04 <__aeabi_dcmpge>
 800f30e:	2800      	cmp	r0, #0
 800f310:	f43f aef0 	beq.w	800f0f4 <__ieee754_pow+0x794>
 800f314:	e7e7      	b.n	800f2e6 <__ieee754_pow+0x986>
 800f316:	f04f 0a00 	mov.w	sl, #0
 800f31a:	e717      	b.n	800f14c <__ieee754_pow+0x7ec>
 800f31c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f320:	4619      	mov	r1, r3
 800f322:	e7d2      	b.n	800f2ca <__ieee754_pow+0x96a>
 800f324:	491a      	ldr	r1, [pc, #104]	; (800f390 <__ieee754_pow+0xa30>)
 800f326:	2000      	movs	r0, #0
 800f328:	f7ff bb9e 	b.w	800ea68 <__ieee754_pow+0x108>
 800f32c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f330:	f7ff bb9a 	b.w	800ea68 <__ieee754_pow+0x108>
 800f334:	9000      	str	r0, [sp, #0]
 800f336:	f7ff bb76 	b.w	800ea26 <__ieee754_pow+0xc6>
 800f33a:	2100      	movs	r1, #0
 800f33c:	f7ff bb60 	b.w	800ea00 <__ieee754_pow+0xa0>
 800f340:	00000000 	.word	0x00000000
 800f344:	3fe62e43 	.word	0x3fe62e43
 800f348:	fefa39ef 	.word	0xfefa39ef
 800f34c:	3fe62e42 	.word	0x3fe62e42
 800f350:	0ca86c39 	.word	0x0ca86c39
 800f354:	be205c61 	.word	0xbe205c61
 800f358:	72bea4d0 	.word	0x72bea4d0
 800f35c:	3e663769 	.word	0x3e663769
 800f360:	c5d26bf1 	.word	0xc5d26bf1
 800f364:	3ebbbd41 	.word	0x3ebbbd41
 800f368:	af25de2c 	.word	0xaf25de2c
 800f36c:	3f11566a 	.word	0x3f11566a
 800f370:	16bebd93 	.word	0x16bebd93
 800f374:	3f66c16c 	.word	0x3f66c16c
 800f378:	5555553e 	.word	0x5555553e
 800f37c:	3fc55555 	.word	0x3fc55555
 800f380:	c2f8f359 	.word	0xc2f8f359
 800f384:	01a56e1f 	.word	0x01a56e1f
 800f388:	3fe00000 	.word	0x3fe00000
 800f38c:	000fffff 	.word	0x000fffff
 800f390:	3ff00000 	.word	0x3ff00000
 800f394:	4090cbff 	.word	0x4090cbff
 800f398:	3f6f3400 	.word	0x3f6f3400
 800f39c:	652b82fe 	.word	0x652b82fe
 800f3a0:	3c971547 	.word	0x3c971547

0800f3a4 <__ieee754_sqrt>:
 800f3a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f3a8:	ec55 4b10 	vmov	r4, r5, d0
 800f3ac:	4e56      	ldr	r6, [pc, #344]	; (800f508 <__ieee754_sqrt+0x164>)
 800f3ae:	43ae      	bics	r6, r5
 800f3b0:	ee10 0a10 	vmov	r0, s0
 800f3b4:	ee10 3a10 	vmov	r3, s0
 800f3b8:	4629      	mov	r1, r5
 800f3ba:	462a      	mov	r2, r5
 800f3bc:	d110      	bne.n	800f3e0 <__ieee754_sqrt+0x3c>
 800f3be:	ee10 2a10 	vmov	r2, s0
 800f3c2:	462b      	mov	r3, r5
 800f3c4:	f7f1 f918 	bl	80005f8 <__aeabi_dmul>
 800f3c8:	4602      	mov	r2, r0
 800f3ca:	460b      	mov	r3, r1
 800f3cc:	4620      	mov	r0, r4
 800f3ce:	4629      	mov	r1, r5
 800f3d0:	f7f0 ff5c 	bl	800028c <__adddf3>
 800f3d4:	4604      	mov	r4, r0
 800f3d6:	460d      	mov	r5, r1
 800f3d8:	ec45 4b10 	vmov	d0, r4, r5
 800f3dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f3e0:	2d00      	cmp	r5, #0
 800f3e2:	dc10      	bgt.n	800f406 <__ieee754_sqrt+0x62>
 800f3e4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800f3e8:	4330      	orrs	r0, r6
 800f3ea:	d0f5      	beq.n	800f3d8 <__ieee754_sqrt+0x34>
 800f3ec:	b15d      	cbz	r5, 800f406 <__ieee754_sqrt+0x62>
 800f3ee:	ee10 2a10 	vmov	r2, s0
 800f3f2:	462b      	mov	r3, r5
 800f3f4:	ee10 0a10 	vmov	r0, s0
 800f3f8:	f7f0 ff46 	bl	8000288 <__aeabi_dsub>
 800f3fc:	4602      	mov	r2, r0
 800f3fe:	460b      	mov	r3, r1
 800f400:	f7f1 fa24 	bl	800084c <__aeabi_ddiv>
 800f404:	e7e6      	b.n	800f3d4 <__ieee754_sqrt+0x30>
 800f406:	1509      	asrs	r1, r1, #20
 800f408:	d076      	beq.n	800f4f8 <__ieee754_sqrt+0x154>
 800f40a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800f40e:	07ce      	lsls	r6, r1, #31
 800f410:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800f414:	bf5e      	ittt	pl
 800f416:	0fda      	lsrpl	r2, r3, #31
 800f418:	005b      	lslpl	r3, r3, #1
 800f41a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800f41e:	0fda      	lsrs	r2, r3, #31
 800f420:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800f424:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800f428:	2000      	movs	r0, #0
 800f42a:	106d      	asrs	r5, r5, #1
 800f42c:	005b      	lsls	r3, r3, #1
 800f42e:	f04f 0e16 	mov.w	lr, #22
 800f432:	4684      	mov	ip, r0
 800f434:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f438:	eb0c 0401 	add.w	r4, ip, r1
 800f43c:	4294      	cmp	r4, r2
 800f43e:	bfde      	ittt	le
 800f440:	1b12      	suble	r2, r2, r4
 800f442:	eb04 0c01 	addle.w	ip, r4, r1
 800f446:	1840      	addle	r0, r0, r1
 800f448:	0052      	lsls	r2, r2, #1
 800f44a:	f1be 0e01 	subs.w	lr, lr, #1
 800f44e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800f452:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800f456:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f45a:	d1ed      	bne.n	800f438 <__ieee754_sqrt+0x94>
 800f45c:	4671      	mov	r1, lr
 800f45e:	2720      	movs	r7, #32
 800f460:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800f464:	4562      	cmp	r2, ip
 800f466:	eb04 060e 	add.w	r6, r4, lr
 800f46a:	dc02      	bgt.n	800f472 <__ieee754_sqrt+0xce>
 800f46c:	d113      	bne.n	800f496 <__ieee754_sqrt+0xf2>
 800f46e:	429e      	cmp	r6, r3
 800f470:	d811      	bhi.n	800f496 <__ieee754_sqrt+0xf2>
 800f472:	2e00      	cmp	r6, #0
 800f474:	eb06 0e04 	add.w	lr, r6, r4
 800f478:	da43      	bge.n	800f502 <__ieee754_sqrt+0x15e>
 800f47a:	f1be 0f00 	cmp.w	lr, #0
 800f47e:	db40      	blt.n	800f502 <__ieee754_sqrt+0x15e>
 800f480:	f10c 0801 	add.w	r8, ip, #1
 800f484:	eba2 020c 	sub.w	r2, r2, ip
 800f488:	429e      	cmp	r6, r3
 800f48a:	bf88      	it	hi
 800f48c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800f490:	1b9b      	subs	r3, r3, r6
 800f492:	4421      	add	r1, r4
 800f494:	46c4      	mov	ip, r8
 800f496:	0052      	lsls	r2, r2, #1
 800f498:	3f01      	subs	r7, #1
 800f49a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800f49e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800f4a2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f4a6:	d1dd      	bne.n	800f464 <__ieee754_sqrt+0xc0>
 800f4a8:	4313      	orrs	r3, r2
 800f4aa:	d006      	beq.n	800f4ba <__ieee754_sqrt+0x116>
 800f4ac:	1c4c      	adds	r4, r1, #1
 800f4ae:	bf13      	iteet	ne
 800f4b0:	3101      	addne	r1, #1
 800f4b2:	3001      	addeq	r0, #1
 800f4b4:	4639      	moveq	r1, r7
 800f4b6:	f021 0101 	bicne.w	r1, r1, #1
 800f4ba:	1043      	asrs	r3, r0, #1
 800f4bc:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800f4c0:	0849      	lsrs	r1, r1, #1
 800f4c2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800f4c6:	07c2      	lsls	r2, r0, #31
 800f4c8:	bf48      	it	mi
 800f4ca:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800f4ce:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800f4d2:	460c      	mov	r4, r1
 800f4d4:	463d      	mov	r5, r7
 800f4d6:	e77f      	b.n	800f3d8 <__ieee754_sqrt+0x34>
 800f4d8:	0ada      	lsrs	r2, r3, #11
 800f4da:	3815      	subs	r0, #21
 800f4dc:	055b      	lsls	r3, r3, #21
 800f4de:	2a00      	cmp	r2, #0
 800f4e0:	d0fa      	beq.n	800f4d8 <__ieee754_sqrt+0x134>
 800f4e2:	02d7      	lsls	r7, r2, #11
 800f4e4:	d50a      	bpl.n	800f4fc <__ieee754_sqrt+0x158>
 800f4e6:	f1c1 0420 	rsb	r4, r1, #32
 800f4ea:	fa23 f404 	lsr.w	r4, r3, r4
 800f4ee:	1e4d      	subs	r5, r1, #1
 800f4f0:	408b      	lsls	r3, r1
 800f4f2:	4322      	orrs	r2, r4
 800f4f4:	1b41      	subs	r1, r0, r5
 800f4f6:	e788      	b.n	800f40a <__ieee754_sqrt+0x66>
 800f4f8:	4608      	mov	r0, r1
 800f4fa:	e7f0      	b.n	800f4de <__ieee754_sqrt+0x13a>
 800f4fc:	0052      	lsls	r2, r2, #1
 800f4fe:	3101      	adds	r1, #1
 800f500:	e7ef      	b.n	800f4e2 <__ieee754_sqrt+0x13e>
 800f502:	46e0      	mov	r8, ip
 800f504:	e7be      	b.n	800f484 <__ieee754_sqrt+0xe0>
 800f506:	bf00      	nop
 800f508:	7ff00000 	.word	0x7ff00000

0800f50c <fabs>:
 800f50c:	ec51 0b10 	vmov	r0, r1, d0
 800f510:	ee10 2a10 	vmov	r2, s0
 800f514:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f518:	ec43 2b10 	vmov	d0, r2, r3
 800f51c:	4770      	bx	lr

0800f51e <finite>:
 800f51e:	b082      	sub	sp, #8
 800f520:	ed8d 0b00 	vstr	d0, [sp]
 800f524:	9801      	ldr	r0, [sp, #4]
 800f526:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800f52a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800f52e:	0fc0      	lsrs	r0, r0, #31
 800f530:	b002      	add	sp, #8
 800f532:	4770      	bx	lr
 800f534:	0000      	movs	r0, r0
	...

0800f538 <nan>:
 800f538:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800f540 <nan+0x8>
 800f53c:	4770      	bx	lr
 800f53e:	bf00      	nop
 800f540:	00000000 	.word	0x00000000
 800f544:	7ff80000 	.word	0x7ff80000

0800f548 <rint>:
 800f548:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f54a:	ec51 0b10 	vmov	r0, r1, d0
 800f54e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800f552:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800f556:	2e13      	cmp	r6, #19
 800f558:	ee10 4a10 	vmov	r4, s0
 800f55c:	460b      	mov	r3, r1
 800f55e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800f562:	dc58      	bgt.n	800f616 <rint+0xce>
 800f564:	2e00      	cmp	r6, #0
 800f566:	da2b      	bge.n	800f5c0 <rint+0x78>
 800f568:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800f56c:	4302      	orrs	r2, r0
 800f56e:	d023      	beq.n	800f5b8 <rint+0x70>
 800f570:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800f574:	4302      	orrs	r2, r0
 800f576:	4254      	negs	r4, r2
 800f578:	4314      	orrs	r4, r2
 800f57a:	0c4b      	lsrs	r3, r1, #17
 800f57c:	0b24      	lsrs	r4, r4, #12
 800f57e:	045b      	lsls	r3, r3, #17
 800f580:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800f584:	ea44 0103 	orr.w	r1, r4, r3
 800f588:	4b32      	ldr	r3, [pc, #200]	; (800f654 <rint+0x10c>)
 800f58a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800f58e:	e9d3 6700 	ldrd	r6, r7, [r3]
 800f592:	4602      	mov	r2, r0
 800f594:	460b      	mov	r3, r1
 800f596:	4630      	mov	r0, r6
 800f598:	4639      	mov	r1, r7
 800f59a:	f7f0 fe77 	bl	800028c <__adddf3>
 800f59e:	e9cd 0100 	strd	r0, r1, [sp]
 800f5a2:	463b      	mov	r3, r7
 800f5a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f5a8:	4632      	mov	r2, r6
 800f5aa:	f7f0 fe6d 	bl	8000288 <__aeabi_dsub>
 800f5ae:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f5b2:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800f5b6:	4639      	mov	r1, r7
 800f5b8:	ec41 0b10 	vmov	d0, r0, r1
 800f5bc:	b003      	add	sp, #12
 800f5be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f5c0:	4a25      	ldr	r2, [pc, #148]	; (800f658 <rint+0x110>)
 800f5c2:	4132      	asrs	r2, r6
 800f5c4:	ea01 0702 	and.w	r7, r1, r2
 800f5c8:	4307      	orrs	r7, r0
 800f5ca:	d0f5      	beq.n	800f5b8 <rint+0x70>
 800f5cc:	0851      	lsrs	r1, r2, #1
 800f5ce:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800f5d2:	4314      	orrs	r4, r2
 800f5d4:	d00c      	beq.n	800f5f0 <rint+0xa8>
 800f5d6:	ea23 0201 	bic.w	r2, r3, r1
 800f5da:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800f5de:	2e13      	cmp	r6, #19
 800f5e0:	fa43 f606 	asr.w	r6, r3, r6
 800f5e4:	bf0c      	ite	eq
 800f5e6:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800f5ea:	2400      	movne	r4, #0
 800f5ec:	ea42 0306 	orr.w	r3, r2, r6
 800f5f0:	4918      	ldr	r1, [pc, #96]	; (800f654 <rint+0x10c>)
 800f5f2:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800f5f6:	4622      	mov	r2, r4
 800f5f8:	e9d5 4500 	ldrd	r4, r5, [r5]
 800f5fc:	4620      	mov	r0, r4
 800f5fe:	4629      	mov	r1, r5
 800f600:	f7f0 fe44 	bl	800028c <__adddf3>
 800f604:	e9cd 0100 	strd	r0, r1, [sp]
 800f608:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f60c:	4622      	mov	r2, r4
 800f60e:	462b      	mov	r3, r5
 800f610:	f7f0 fe3a 	bl	8000288 <__aeabi_dsub>
 800f614:	e7d0      	b.n	800f5b8 <rint+0x70>
 800f616:	2e33      	cmp	r6, #51	; 0x33
 800f618:	dd07      	ble.n	800f62a <rint+0xe2>
 800f61a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800f61e:	d1cb      	bne.n	800f5b8 <rint+0x70>
 800f620:	ee10 2a10 	vmov	r2, s0
 800f624:	f7f0 fe32 	bl	800028c <__adddf3>
 800f628:	e7c6      	b.n	800f5b8 <rint+0x70>
 800f62a:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800f62e:	f04f 36ff 	mov.w	r6, #4294967295
 800f632:	40d6      	lsrs	r6, r2
 800f634:	4230      	tst	r0, r6
 800f636:	d0bf      	beq.n	800f5b8 <rint+0x70>
 800f638:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 800f63c:	ea4f 0156 	mov.w	r1, r6, lsr #1
 800f640:	bf1f      	itttt	ne
 800f642:	ea24 0101 	bicne.w	r1, r4, r1
 800f646:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800f64a:	fa44 f202 	asrne.w	r2, r4, r2
 800f64e:	ea41 0402 	orrne.w	r4, r1, r2
 800f652:	e7cd      	b.n	800f5f0 <rint+0xa8>
 800f654:	0800fc28 	.word	0x0800fc28
 800f658:	000fffff 	.word	0x000fffff
 800f65c:	00000000 	.word	0x00000000

0800f660 <scalbn>:
 800f660:	b570      	push	{r4, r5, r6, lr}
 800f662:	ec55 4b10 	vmov	r4, r5, d0
 800f666:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800f66a:	4606      	mov	r6, r0
 800f66c:	462b      	mov	r3, r5
 800f66e:	b99a      	cbnz	r2, 800f698 <scalbn+0x38>
 800f670:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f674:	4323      	orrs	r3, r4
 800f676:	d036      	beq.n	800f6e6 <scalbn+0x86>
 800f678:	4b39      	ldr	r3, [pc, #228]	; (800f760 <scalbn+0x100>)
 800f67a:	4629      	mov	r1, r5
 800f67c:	ee10 0a10 	vmov	r0, s0
 800f680:	2200      	movs	r2, #0
 800f682:	f7f0 ffb9 	bl	80005f8 <__aeabi_dmul>
 800f686:	4b37      	ldr	r3, [pc, #220]	; (800f764 <scalbn+0x104>)
 800f688:	429e      	cmp	r6, r3
 800f68a:	4604      	mov	r4, r0
 800f68c:	460d      	mov	r5, r1
 800f68e:	da10      	bge.n	800f6b2 <scalbn+0x52>
 800f690:	a32b      	add	r3, pc, #172	; (adr r3, 800f740 <scalbn+0xe0>)
 800f692:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f696:	e03a      	b.n	800f70e <scalbn+0xae>
 800f698:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800f69c:	428a      	cmp	r2, r1
 800f69e:	d10c      	bne.n	800f6ba <scalbn+0x5a>
 800f6a0:	ee10 2a10 	vmov	r2, s0
 800f6a4:	4620      	mov	r0, r4
 800f6a6:	4629      	mov	r1, r5
 800f6a8:	f7f0 fdf0 	bl	800028c <__adddf3>
 800f6ac:	4604      	mov	r4, r0
 800f6ae:	460d      	mov	r5, r1
 800f6b0:	e019      	b.n	800f6e6 <scalbn+0x86>
 800f6b2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800f6b6:	460b      	mov	r3, r1
 800f6b8:	3a36      	subs	r2, #54	; 0x36
 800f6ba:	4432      	add	r2, r6
 800f6bc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800f6c0:	428a      	cmp	r2, r1
 800f6c2:	dd08      	ble.n	800f6d6 <scalbn+0x76>
 800f6c4:	2d00      	cmp	r5, #0
 800f6c6:	a120      	add	r1, pc, #128	; (adr r1, 800f748 <scalbn+0xe8>)
 800f6c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f6cc:	da1c      	bge.n	800f708 <scalbn+0xa8>
 800f6ce:	a120      	add	r1, pc, #128	; (adr r1, 800f750 <scalbn+0xf0>)
 800f6d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f6d4:	e018      	b.n	800f708 <scalbn+0xa8>
 800f6d6:	2a00      	cmp	r2, #0
 800f6d8:	dd08      	ble.n	800f6ec <scalbn+0x8c>
 800f6da:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f6de:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f6e2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f6e6:	ec45 4b10 	vmov	d0, r4, r5
 800f6ea:	bd70      	pop	{r4, r5, r6, pc}
 800f6ec:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800f6f0:	da19      	bge.n	800f726 <scalbn+0xc6>
 800f6f2:	f24c 3350 	movw	r3, #50000	; 0xc350
 800f6f6:	429e      	cmp	r6, r3
 800f6f8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800f6fc:	dd0a      	ble.n	800f714 <scalbn+0xb4>
 800f6fe:	a112      	add	r1, pc, #72	; (adr r1, 800f748 <scalbn+0xe8>)
 800f700:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f704:	2b00      	cmp	r3, #0
 800f706:	d1e2      	bne.n	800f6ce <scalbn+0x6e>
 800f708:	a30f      	add	r3, pc, #60	; (adr r3, 800f748 <scalbn+0xe8>)
 800f70a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f70e:	f7f0 ff73 	bl	80005f8 <__aeabi_dmul>
 800f712:	e7cb      	b.n	800f6ac <scalbn+0x4c>
 800f714:	a10a      	add	r1, pc, #40	; (adr r1, 800f740 <scalbn+0xe0>)
 800f716:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	d0b8      	beq.n	800f690 <scalbn+0x30>
 800f71e:	a10e      	add	r1, pc, #56	; (adr r1, 800f758 <scalbn+0xf8>)
 800f720:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f724:	e7b4      	b.n	800f690 <scalbn+0x30>
 800f726:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f72a:	3236      	adds	r2, #54	; 0x36
 800f72c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f730:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800f734:	4620      	mov	r0, r4
 800f736:	4b0c      	ldr	r3, [pc, #48]	; (800f768 <scalbn+0x108>)
 800f738:	2200      	movs	r2, #0
 800f73a:	e7e8      	b.n	800f70e <scalbn+0xae>
 800f73c:	f3af 8000 	nop.w
 800f740:	c2f8f359 	.word	0xc2f8f359
 800f744:	01a56e1f 	.word	0x01a56e1f
 800f748:	8800759c 	.word	0x8800759c
 800f74c:	7e37e43c 	.word	0x7e37e43c
 800f750:	8800759c 	.word	0x8800759c
 800f754:	fe37e43c 	.word	0xfe37e43c
 800f758:	c2f8f359 	.word	0xc2f8f359
 800f75c:	81a56e1f 	.word	0x81a56e1f
 800f760:	43500000 	.word	0x43500000
 800f764:	ffff3cb0 	.word	0xffff3cb0
 800f768:	3c900000 	.word	0x3c900000

0800f76c <_init>:
 800f76c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f76e:	bf00      	nop
 800f770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f772:	bc08      	pop	{r3}
 800f774:	469e      	mov	lr, r3
 800f776:	4770      	bx	lr

0800f778 <_fini>:
 800f778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f77a:	bf00      	nop
 800f77c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f77e:	bc08      	pop	{r3}
 800f780:	469e      	mov	lr, r3
 800f782:	4770      	bx	lr
