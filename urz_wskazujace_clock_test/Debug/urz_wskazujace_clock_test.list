
urz_wskazujace_clock_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f020  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000047c  0800f1b0  0800f1b0  0001f1b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f62c  0800f62c  0002035c  2**0
                  CONTENTS
  4 .ARM          00000000  0800f62c  0800f62c  0002035c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800f62c  0800f62c  0002035c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f62c  0800f62c  0001f62c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f630  0800f630  0001f630  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000035c  20000000  0800f634  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d80  2000035c  0800f990  0002035c  2**2
                  ALLOC
 10 ._user_heap_stack 00001404  200010dc  0800f990  000210dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002035c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000265a1  00000000  00000000  0002038c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004a96  00000000  00000000  0004692d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019d8  00000000  00000000  0004b3c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017b0  00000000  00000000  0004cda0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000274fb  00000000  00000000  0004e550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000204c6  00000000  00000000  00075a4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000def21  00000000  00000000  00095f11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00174e32  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007cd4  00000000  00000000  00174e88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000035c 	.word	0x2000035c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f198 	.word	0x0800f198

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000360 	.word	0x20000360
 80001cc:	0800f198 	.word	0x0800f198

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b086      	sub	sp, #24
 8000c4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c4e:	463b      	mov	r3, r7
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	605a      	str	r2, [r3, #4]
 8000c56:	609a      	str	r2, [r3, #8]
 8000c58:	60da      	str	r2, [r3, #12]
 8000c5a:	611a      	str	r2, [r3, #16]
 8000c5c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c5e:	4b2a      	ldr	r3, [pc, #168]	; (8000d08 <MX_ADC1_Init+0xc0>)
 8000c60:	4a2a      	ldr	r2, [pc, #168]	; (8000d0c <MX_ADC1_Init+0xc4>)
 8000c62:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000c64:	4b28      	ldr	r3, [pc, #160]	; (8000d08 <MX_ADC1_Init+0xc0>)
 8000c66:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000c6a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c6c:	4b26      	ldr	r3, [pc, #152]	; (8000d08 <MX_ADC1_Init+0xc0>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c72:	4b25      	ldr	r3, [pc, #148]	; (8000d08 <MX_ADC1_Init+0xc0>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c78:	4b23      	ldr	r3, [pc, #140]	; (8000d08 <MX_ADC1_Init+0xc0>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c7e:	4b22      	ldr	r3, [pc, #136]	; (8000d08 <MX_ADC1_Init+0xc0>)
 8000c80:	2204      	movs	r2, #4
 8000c82:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000c84:	4b20      	ldr	r3, [pc, #128]	; (8000d08 <MX_ADC1_Init+0xc0>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000c8a:	4b1f      	ldr	r3, [pc, #124]	; (8000d08 <MX_ADC1_Init+0xc0>)
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000c90:	4b1d      	ldr	r3, [pc, #116]	; (8000d08 <MX_ADC1_Init+0xc0>)
 8000c92:	2201      	movs	r2, #1
 8000c94:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c96:	4b1c      	ldr	r3, [pc, #112]	; (8000d08 <MX_ADC1_Init+0xc0>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8000c9e:	4b1a      	ldr	r3, [pc, #104]	; (8000d08 <MX_ADC1_Init+0xc0>)
 8000ca0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8000ca4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000ca6:	4b18      	ldr	r3, [pc, #96]	; (8000d08 <MX_ADC1_Init+0xc0>)
 8000ca8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cac:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000cae:	4b16      	ldr	r3, [pc, #88]	; (8000d08 <MX_ADC1_Init+0xc0>)
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000cb6:	4b14      	ldr	r3, [pc, #80]	; (8000d08 <MX_ADC1_Init+0xc0>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000cbc:	4b12      	ldr	r3, [pc, #72]	; (8000d08 <MX_ADC1_Init+0xc0>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cc4:	4810      	ldr	r0, [pc, #64]	; (8000d08 <MX_ADC1_Init+0xc0>)
 8000cc6:	f001 fabf 	bl	8002248 <HAL_ADC_Init>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000cd0:	f000 fdf0 	bl	80018b4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000cd4:	4b0e      	ldr	r3, [pc, #56]	; (8000d10 <MX_ADC1_Init+0xc8>)
 8000cd6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000cd8:	2306      	movs	r3, #6
 8000cda:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8000cdc:	2305      	movs	r3, #5
 8000cde:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ce0:	237f      	movs	r3, #127	; 0x7f
 8000ce2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ce4:	2304      	movs	r3, #4
 8000ce6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cec:	463b      	mov	r3, r7
 8000cee:	4619      	mov	r1, r3
 8000cf0:	4805      	ldr	r0, [pc, #20]	; (8000d08 <MX_ADC1_Init+0xc0>)
 8000cf2:	f001 fc89 	bl	8002608 <HAL_ADC_ConfigChannel>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 8000cfc:	f000 fdda 	bl	80018b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d00:	bf00      	nop
 8000d02:	3718      	adds	r7, #24
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	200003b8 	.word	0x200003b8
 8000d0c:	50040000 	.word	0x50040000
 8000d10:	25b00200 	.word	0x25b00200

08000d14 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b08a      	sub	sp, #40	; 0x28
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d1c:	f107 0314 	add.w	r3, r7, #20
 8000d20:	2200      	movs	r2, #0
 8000d22:	601a      	str	r2, [r3, #0]
 8000d24:	605a      	str	r2, [r3, #4]
 8000d26:	609a      	str	r2, [r3, #8]
 8000d28:	60da      	str	r2, [r3, #12]
 8000d2a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a2b      	ldr	r2, [pc, #172]	; (8000de0 <HAL_ADC_MspInit+0xcc>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d14f      	bne.n	8000dd6 <HAL_ADC_MspInit+0xc2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000d36:	4b2b      	ldr	r3, [pc, #172]	; (8000de4 <HAL_ADC_MspInit+0xd0>)
 8000d38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d3a:	4a2a      	ldr	r2, [pc, #168]	; (8000de4 <HAL_ADC_MspInit+0xd0>)
 8000d3c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000d40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d42:	4b28      	ldr	r3, [pc, #160]	; (8000de4 <HAL_ADC_MspInit+0xd0>)
 8000d44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d4a:	613b      	str	r3, [r7, #16]
 8000d4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d4e:	4b25      	ldr	r3, [pc, #148]	; (8000de4 <HAL_ADC_MspInit+0xd0>)
 8000d50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d52:	4a24      	ldr	r2, [pc, #144]	; (8000de4 <HAL_ADC_MspInit+0xd0>)
 8000d54:	f043 0301 	orr.w	r3, r3, #1
 8000d58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d5a:	4b22      	ldr	r3, [pc, #136]	; (8000de4 <HAL_ADC_MspInit+0xd0>)
 8000d5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d5e:	f003 0301 	and.w	r3, r3, #1
 8000d62:	60fb      	str	r3, [r7, #12]
 8000d64:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000d66:	2310      	movs	r3, #16
 8000d68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000d6a:	230b      	movs	r3, #11
 8000d6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d72:	f107 0314 	add.w	r3, r7, #20
 8000d76:	4619      	mov	r1, r3
 8000d78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d7c:	f002 fc50 	bl	8003620 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000d80:	4b19      	ldr	r3, [pc, #100]	; (8000de8 <HAL_ADC_MspInit+0xd4>)
 8000d82:	4a1a      	ldr	r2, [pc, #104]	; (8000dec <HAL_ADC_MspInit+0xd8>)
 8000d84:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000d86:	4b18      	ldr	r3, [pc, #96]	; (8000de8 <HAL_ADC_MspInit+0xd4>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d8c:	4b16      	ldr	r3, [pc, #88]	; (8000de8 <HAL_ADC_MspInit+0xd4>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d92:	4b15      	ldr	r3, [pc, #84]	; (8000de8 <HAL_ADC_MspInit+0xd4>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000d98:	4b13      	ldr	r3, [pc, #76]	; (8000de8 <HAL_ADC_MspInit+0xd4>)
 8000d9a:	2280      	movs	r2, #128	; 0x80
 8000d9c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d9e:	4b12      	ldr	r3, [pc, #72]	; (8000de8 <HAL_ADC_MspInit+0xd4>)
 8000da0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000da4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000da6:	4b10      	ldr	r3, [pc, #64]	; (8000de8 <HAL_ADC_MspInit+0xd4>)
 8000da8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000dac:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000dae:	4b0e      	ldr	r3, [pc, #56]	; (8000de8 <HAL_ADC_MspInit+0xd4>)
 8000db0:	2220      	movs	r2, #32
 8000db2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000db4:	4b0c      	ldr	r3, [pc, #48]	; (8000de8 <HAL_ADC_MspInit+0xd4>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000dba:	480b      	ldr	r0, [pc, #44]	; (8000de8 <HAL_ADC_MspInit+0xd4>)
 8000dbc:	f002 fa38 	bl	8003230 <HAL_DMA_Init>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 8000dc6:	f000 fd75 	bl	80018b4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	4a06      	ldr	r2, [pc, #24]	; (8000de8 <HAL_ADC_MspInit+0xd4>)
 8000dce:	64da      	str	r2, [r3, #76]	; 0x4c
 8000dd0:	4a05      	ldr	r2, [pc, #20]	; (8000de8 <HAL_ADC_MspInit+0xd4>)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000dd6:	bf00      	nop
 8000dd8:	3728      	adds	r7, #40	; 0x28
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	50040000 	.word	0x50040000
 8000de4:	40021000 	.word	0x40021000
 8000de8:	2000041c 	.word	0x2000041c
 8000dec:	40020008 	.word	0x40020008

08000df0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000df6:	4b0c      	ldr	r3, [pc, #48]	; (8000e28 <MX_DMA_Init+0x38>)
 8000df8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000dfa:	4a0b      	ldr	r2, [pc, #44]	; (8000e28 <MX_DMA_Init+0x38>)
 8000dfc:	f043 0301 	orr.w	r3, r3, #1
 8000e00:	6493      	str	r3, [r2, #72]	; 0x48
 8000e02:	4b09      	ldr	r3, [pc, #36]	; (8000e28 <MX_DMA_Init+0x38>)
 8000e04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e06:	f003 0301 	and.w	r3, r3, #1
 8000e0a:	607b      	str	r3, [r7, #4]
 8000e0c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8000e0e:	2200      	movs	r2, #0
 8000e10:	2101      	movs	r1, #1
 8000e12:	200b      	movs	r0, #11
 8000e14:	f002 f9c7 	bl	80031a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000e18:	200b      	movs	r0, #11
 8000e1a:	f002 f9e0 	bl	80031de <HAL_NVIC_EnableIRQ>

}
 8000e1e:	bf00      	nop
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	40021000 	.word	0x40021000

08000e2c <MX_GPIO_Init>:
        * the Code Generation settings)
     PA2   ------> USART2_TX
     PA15 (JTDI)   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b08a      	sub	sp, #40	; 0x28
 8000e30:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e32:	f107 0314 	add.w	r3, r7, #20
 8000e36:	2200      	movs	r2, #0
 8000e38:	601a      	str	r2, [r3, #0]
 8000e3a:	605a      	str	r2, [r3, #4]
 8000e3c:	609a      	str	r2, [r3, #8]
 8000e3e:	60da      	str	r2, [r3, #12]
 8000e40:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e42:	4b60      	ldr	r3, [pc, #384]	; (8000fc4 <MX_GPIO_Init+0x198>)
 8000e44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e46:	4a5f      	ldr	r2, [pc, #380]	; (8000fc4 <MX_GPIO_Init+0x198>)
 8000e48:	f043 0304 	orr.w	r3, r3, #4
 8000e4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e4e:	4b5d      	ldr	r3, [pc, #372]	; (8000fc4 <MX_GPIO_Init+0x198>)
 8000e50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e52:	f003 0304 	and.w	r3, r3, #4
 8000e56:	613b      	str	r3, [r7, #16]
 8000e58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e5a:	4b5a      	ldr	r3, [pc, #360]	; (8000fc4 <MX_GPIO_Init+0x198>)
 8000e5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e5e:	4a59      	ldr	r2, [pc, #356]	; (8000fc4 <MX_GPIO_Init+0x198>)
 8000e60:	f043 0301 	orr.w	r3, r3, #1
 8000e64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e66:	4b57      	ldr	r3, [pc, #348]	; (8000fc4 <MX_GPIO_Init+0x198>)
 8000e68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e6a:	f003 0301 	and.w	r3, r3, #1
 8000e6e:	60fb      	str	r3, [r7, #12]
 8000e70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e72:	4b54      	ldr	r3, [pc, #336]	; (8000fc4 <MX_GPIO_Init+0x198>)
 8000e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e76:	4a53      	ldr	r2, [pc, #332]	; (8000fc4 <MX_GPIO_Init+0x198>)
 8000e78:	f043 0302 	orr.w	r3, r3, #2
 8000e7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e7e:	4b51      	ldr	r3, [pc, #324]	; (8000fc4 <MX_GPIO_Init+0x198>)
 8000e80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e82:	f003 0302 	and.w	r3, r3, #2
 8000e86:	60bb      	str	r3, [r7, #8]
 8000e88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e8a:	4b4e      	ldr	r3, [pc, #312]	; (8000fc4 <MX_GPIO_Init+0x198>)
 8000e8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e8e:	4a4d      	ldr	r2, [pc, #308]	; (8000fc4 <MX_GPIO_Init+0x198>)
 8000e90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e96:	4b4b      	ldr	r3, [pc, #300]	; (8000fc4 <MX_GPIO_Init+0x198>)
 8000e98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e9e:	607b      	str	r3, [r7, #4]
 8000ea0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BNO_RST_GPIO_Port, BNO_RST_Pin, GPIO_PIN_SET);
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	2102      	movs	r1, #2
 8000ea6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eaa:	f002 fd23 	bl	80038f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, INFO_LED_2_Pin|INFO_LED_1_Pin, GPIO_PIN_RESET);
 8000eae:	2200      	movs	r2, #0
 8000eb0:	21a0      	movs	r1, #160	; 0xa0
 8000eb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eb6:	f002 fd1d 	bl	80038f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|BNO_INT_Pin, GPIO_PIN_RESET);
 8000eba:	2200      	movs	r2, #0
 8000ebc:	2148      	movs	r1, #72	; 0x48
 8000ebe:	4842      	ldr	r0, [pc, #264]	; (8000fc8 <MX_GPIO_Init+0x19c>)
 8000ec0:	f002 fd18 	bl	80038f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = BNO_RST_Pin|INFO_LED_2_Pin|INFO_LED_1_Pin;
 8000ec4:	23a2      	movs	r3, #162	; 0xa2
 8000ec6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed4:	f107 0314 	add.w	r3, r7, #20
 8000ed8:	4619      	mov	r1, r3
 8000eda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ede:	f002 fb9f 	bl	8003620 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000ee2:	2304      	movs	r3, #4
 8000ee4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eea:	2300      	movs	r3, #0
 8000eec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eee:	2303      	movs	r3, #3
 8000ef0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ef2:	2307      	movs	r3, #7
 8000ef4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000ef6:	f107 0314 	add.w	r3, r7, #20
 8000efa:	4619      	mov	r1, r3
 8000efc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f00:	f002 fb8e 	bl	8003620 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_8;
 8000f04:	f44f 7384 	mov.w	r3, #264	; 0x108
 8000f08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f0a:	2303      	movs	r3, #3
 8000f0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f12:	f107 0314 	add.w	r3, r7, #20
 8000f16:	4619      	mov	r1, r3
 8000f18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f1c:	f002 fb80 	bl	8003620 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CONFIGMODE_Pin;
 8000f20:	2340      	movs	r3, #64	; 0x40
 8000f22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f24:	4b29      	ldr	r3, [pc, #164]	; (8000fcc <MX_GPIO_Init+0x1a0>)
 8000f26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CONFIGMODE_GPIO_Port, &GPIO_InitStruct);
 8000f2c:	f107 0314 	add.w	r3, r7, #20
 8000f30:	4619      	mov	r1, r3
 8000f32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f36:	f002 fb73 	bl	8003620 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB4 PB5
                           PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8000f3a:	23b3      	movs	r3, #179	; 0xb3
 8000f3c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f3e:	2303      	movs	r3, #3
 8000f40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f42:	2300      	movs	r3, #0
 8000f44:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f46:	f107 0314 	add.w	r3, r7, #20
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	481e      	ldr	r0, [pc, #120]	; (8000fc8 <MX_GPIO_Init+0x19c>)
 8000f4e:	f002 fb67 	bl	8003620 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000f52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f58:	2302      	movs	r3, #2
 8000f5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f60:	2303      	movs	r3, #3
 8000f62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000f64:	2303      	movs	r3, #3
 8000f66:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000f68:	f107 0314 	add.w	r3, r7, #20
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f72:	f002 fb55 	bl	8003620 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|BNO_INT_Pin;
 8000f76:	2348      	movs	r3, #72	; 0x48
 8000f78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f82:	2300      	movs	r3, #0
 8000f84:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f86:	f107 0314 	add.w	r3, r7, #20
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	480e      	ldr	r0, [pc, #56]	; (8000fc8 <MX_GPIO_Init+0x19c>)
 8000f8e:	f002 fb47 	bl	8003620 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000f92:	2308      	movs	r3, #8
 8000f94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f96:	2303      	movs	r3, #3
 8000f98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000f9e:	f107 0314 	add.w	r3, r7, #20
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	480a      	ldr	r0, [pc, #40]	; (8000fd0 <MX_GPIO_Init+0x1a4>)
 8000fa6:	f002 fb3b 	bl	8003620 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000faa:	2200      	movs	r2, #0
 8000fac:	2100      	movs	r1, #0
 8000fae:	2017      	movs	r0, #23
 8000fb0:	f002 f8f9 	bl	80031a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000fb4:	2017      	movs	r0, #23
 8000fb6:	f002 f912 	bl	80031de <HAL_NVIC_EnableIRQ>

}
 8000fba:	bf00      	nop
 8000fbc:	3728      	adds	r7, #40	; 0x28
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	40021000 	.word	0x40021000
 8000fc8:	48000400 	.word	0x48000400
 8000fcc:	10110000 	.word	0x10110000
 8000fd0:	48001c00 	.word	0x48001c00

08000fd4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fd8:	4b1b      	ldr	r3, [pc, #108]	; (8001048 <MX_I2C1_Init+0x74>)
 8000fda:	4a1c      	ldr	r2, [pc, #112]	; (800104c <MX_I2C1_Init+0x78>)
 8000fdc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2010091A;
 8000fde:	4b1a      	ldr	r3, [pc, #104]	; (8001048 <MX_I2C1_Init+0x74>)
 8000fe0:	4a1b      	ldr	r2, [pc, #108]	; (8001050 <MX_I2C1_Init+0x7c>)
 8000fe2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000fe4:	4b18      	ldr	r3, [pc, #96]	; (8001048 <MX_I2C1_Init+0x74>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fea:	4b17      	ldr	r3, [pc, #92]	; (8001048 <MX_I2C1_Init+0x74>)
 8000fec:	2201      	movs	r2, #1
 8000fee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ff0:	4b15      	ldr	r3, [pc, #84]	; (8001048 <MX_I2C1_Init+0x74>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000ff6:	4b14      	ldr	r3, [pc, #80]	; (8001048 <MX_I2C1_Init+0x74>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ffc:	4b12      	ldr	r3, [pc, #72]	; (8001048 <MX_I2C1_Init+0x74>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001002:	4b11      	ldr	r3, [pc, #68]	; (8001048 <MX_I2C1_Init+0x74>)
 8001004:	2200      	movs	r2, #0
 8001006:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001008:	4b0f      	ldr	r3, [pc, #60]	; (8001048 <MX_I2C1_Init+0x74>)
 800100a:	2200      	movs	r2, #0
 800100c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800100e:	480e      	ldr	r0, [pc, #56]	; (8001048 <MX_I2C1_Init+0x74>)
 8001010:	f002 fcba 	bl	8003988 <HAL_I2C_Init>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800101a:	f000 fc4b 	bl	80018b4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800101e:	2100      	movs	r1, #0
 8001020:	4809      	ldr	r0, [pc, #36]	; (8001048 <MX_I2C1_Init+0x74>)
 8001022:	f003 f98b 	bl	800433c <HAL_I2CEx_ConfigAnalogFilter>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800102c:	f000 fc42 	bl	80018b4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001030:	2100      	movs	r1, #0
 8001032:	4805      	ldr	r0, [pc, #20]	; (8001048 <MX_I2C1_Init+0x74>)
 8001034:	f003 f9cd 	bl	80043d2 <HAL_I2CEx_ConfigDigitalFilter>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800103e:	f000 fc39 	bl	80018b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	20000464 	.word	0x20000464
 800104c:	40005400 	.word	0x40005400
 8001050:	2010091a 	.word	0x2010091a

08001054 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b09e      	sub	sp, #120	; 0x78
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800105c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	605a      	str	r2, [r3, #4]
 8001066:	609a      	str	r2, [r3, #8]
 8001068:	60da      	str	r2, [r3, #12]
 800106a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800106c:	f107 0310 	add.w	r3, r7, #16
 8001070:	2254      	movs	r2, #84	; 0x54
 8001072:	2100      	movs	r1, #0
 8001074:	4618      	mov	r0, r3
 8001076:	f00a ff4b 	bl	800bf10 <memset>
  if(i2cHandle->Instance==I2C1)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a1f      	ldr	r2, [pc, #124]	; (80010fc <HAL_I2C_MspInit+0xa8>)
 8001080:	4293      	cmp	r3, r2
 8001082:	d137      	bne.n	80010f4 <HAL_I2C_MspInit+0xa0>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001084:	2340      	movs	r3, #64	; 0x40
 8001086:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001088:	2300      	movs	r3, #0
 800108a:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800108c:	f107 0310 	add.w	r3, r7, #16
 8001090:	4618      	mov	r0, r3
 8001092:	f005 fd13 	bl	8006abc <HAL_RCCEx_PeriphCLKConfig>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800109c:	f000 fc0a 	bl	80018b4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a0:	4b17      	ldr	r3, [pc, #92]	; (8001100 <HAL_I2C_MspInit+0xac>)
 80010a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a4:	4a16      	ldr	r2, [pc, #88]	; (8001100 <HAL_I2C_MspInit+0xac>)
 80010a6:	f043 0301 	orr.w	r3, r3, #1
 80010aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ac:	4b14      	ldr	r3, [pc, #80]	; (8001100 <HAL_I2C_MspInit+0xac>)
 80010ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b0:	f003 0301 	and.w	r3, r3, #1
 80010b4:	60fb      	str	r3, [r7, #12]
 80010b6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80010b8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80010bc:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010be:	2312      	movs	r3, #18
 80010c0:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c2:	2300      	movs	r3, #0
 80010c4:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c6:	2303      	movs	r3, #3
 80010c8:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010ca:	2304      	movs	r3, #4
 80010cc:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ce:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80010d2:	4619      	mov	r1, r3
 80010d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010d8:	f002 faa2 	bl	8003620 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010dc:	4b08      	ldr	r3, [pc, #32]	; (8001100 <HAL_I2C_MspInit+0xac>)
 80010de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010e0:	4a07      	ldr	r2, [pc, #28]	; (8001100 <HAL_I2C_MspInit+0xac>)
 80010e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010e6:	6593      	str	r3, [r2, #88]	; 0x58
 80010e8:	4b05      	ldr	r3, [pc, #20]	; (8001100 <HAL_I2C_MspInit+0xac>)
 80010ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010f0:	60bb      	str	r3, [r7, #8]
 80010f2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80010f4:	bf00      	nop
 80010f6:	3778      	adds	r7, #120	; 0x78
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	40005400 	.word	0x40005400
 8001100:	40021000 	.word	0x40021000

08001104 <BNO_I2C_Write>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
void PeriphCommonClock_Config(void);
/* USER CODE BEGIN PFP */

void BNO_I2C_Write(uint16_t address, uint8_t data) {
 8001104:	b580      	push	{r7, lr}
 8001106:	b088      	sub	sp, #32
 8001108:	af04      	add	r7, sp, #16
 800110a:	4603      	mov	r3, r0
 800110c:	460a      	mov	r2, r1
 800110e:	80fb      	strh	r3, [r7, #6]
 8001110:	4613      	mov	r3, r2
 8001112:	717b      	strb	r3, [r7, #5]
	uint8_t buf = data;
 8001114:	797b      	ldrb	r3, [r7, #5]
 8001116:	73bb      	strb	r3, [r7, #14]
	uint8_t err;

	do {
		err = HAL_I2C_Mem_Write(&hi2c1, BNO_ADDRESS, address, 1, &buf,
 8001118:	88fa      	ldrh	r2, [r7, #6]
 800111a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800111e:	9302      	str	r3, [sp, #8]
 8001120:	2301      	movs	r3, #1
 8001122:	9301      	str	r3, [sp, #4]
 8001124:	f107 030e 	add.w	r3, r7, #14
 8001128:	9300      	str	r3, [sp, #0]
 800112a:	2301      	movs	r3, #1
 800112c:	2152      	movs	r1, #82	; 0x52
 800112e:	4806      	ldr	r0, [pc, #24]	; (8001148 <BNO_I2C_Write+0x44>)
 8001130:	f002 fcba 	bl	8003aa8 <HAL_I2C_Mem_Write>
 8001134:	4603      	mov	r3, r0
 8001136:	73fb      	strb	r3, [r7, #15]
				sizeof(buf),
				I2C_TIMEOUT);
	} while (err != HAL_OK);
 8001138:	7bfb      	ldrb	r3, [r7, #15]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d1ec      	bne.n	8001118 <BNO_I2C_Write+0x14>

}
 800113e:	bf00      	nop
 8001140:	bf00      	nop
 8001142:	3710      	adds	r7, #16
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	20000464 	.word	0x20000464

0800114c <BNO_I2C_Read>:

uint8_t BNO_I2C_Read(uint16_t address) {
 800114c:	b580      	push	{r7, lr}
 800114e:	b088      	sub	sp, #32
 8001150:	af04      	add	r7, sp, #16
 8001152:	4603      	mov	r3, r0
 8001154:	80fb      	strh	r3, [r7, #6]
	uint8_t read;
	if (hi2c1.State == HAL_I2C_STATE_READY) {
 8001156:	4b0c      	ldr	r3, [pc, #48]	; (8001188 <BNO_I2C_Read+0x3c>)
 8001158:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800115c:	b2db      	uxtb	r3, r3
 800115e:	2b20      	cmp	r3, #32
 8001160:	d10d      	bne.n	800117e <BNO_I2C_Read+0x32>
		HAL_I2C_Mem_Read(&hi2c1, BNO_ADDRESS, address, 1, &read, 1,
 8001162:	88fa      	ldrh	r2, [r7, #6]
 8001164:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001168:	9302      	str	r3, [sp, #8]
 800116a:	2301      	movs	r3, #1
 800116c:	9301      	str	r3, [sp, #4]
 800116e:	f107 030f 	add.w	r3, r7, #15
 8001172:	9300      	str	r3, [sp, #0]
 8001174:	2301      	movs	r3, #1
 8001176:	2152      	movs	r1, #82	; 0x52
 8001178:	4803      	ldr	r0, [pc, #12]	; (8001188 <BNO_I2C_Read+0x3c>)
 800117a:	f002 fda9 	bl	8003cd0 <HAL_I2C_Mem_Read>
		I2C_TIMEOUT); //funkcja HAL_I2C_Mem_Read wysyła do urządzenia podrzędnego adres rejestru do odczytania, a następnie odbiera wysłane dane i przekazuje do zmiennej read
	}

	return read;
 800117e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001180:	4618      	mov	r0, r3
 8001182:	3710      	adds	r7, #16
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	20000464 	.word	0x20000464

0800118c <BNO_Init>:

uint8_t BNO_Init(void) {
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(INFO_LED_1_GPIO_Port, INFO_LED_1_Pin, GPIO_PIN_SET);
 8001192:	2201      	movs	r2, #1
 8001194:	2180      	movs	r1, #128	; 0x80
 8001196:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800119a:	f002 fbab 	bl	80038f4 <HAL_GPIO_WritePin>
	uint8_t check = 0;
 800119e:	2300      	movs	r3, #0
 80011a0:	71fb      	strb	r3, [r7, #7]

	check = BNO_I2C_Read(CHIP_ID); //odczytanie identyfikatora
 80011a2:	2000      	movs	r0, #0
 80011a4:	f7ff ffd2 	bl	800114c <BNO_I2C_Read>
 80011a8:	4603      	mov	r3, r0
 80011aa:	71fb      	strb	r3, [r7, #7]

	BNO_I2C_Write(BNO_OPR_MODE, CONFIGMODE); //przejście do trybu konfiguracji
 80011ac:	2100      	movs	r1, #0
 80011ae:	203d      	movs	r0, #61	; 0x3d
 80011b0:	f7ff ffa8 	bl	8001104 <BNO_I2C_Write>
	BNO_I2C_Write(BNO_SYS_TRIGGER, EXT_CLK_SEL); //wybór zewnętrznego oscylatora
 80011b4:	2180      	movs	r1, #128	; 0x80
 80011b6:	203f      	movs	r0, #63	; 0x3f
 80011b8:	f7ff ffa4 	bl	8001104 <BNO_I2C_Write>
	BNO_I2C_Write(BNO_AXIS_MAP_CONFIG, 0b011000); //zamiana osi
 80011bc:	2118      	movs	r1, #24
 80011be:	2041      	movs	r0, #65	; 0x41
 80011c0:	f7ff ffa0 	bl	8001104 <BNO_I2C_Write>
	BNO_I2C_Write(BNO_AXIS_MAP_SIGN, 0b100);
 80011c4:	2104      	movs	r1, #4
 80011c6:	2042      	movs	r0, #66	; 0x42
 80011c8:	f7ff ff9c 	bl	8001104 <BNO_I2C_Write>
	BNO_I2C_Write(BNO_OPR_MODE, IMUMODE); //przejście do trybu NDOF (Nine Degrees Of Freedom) - jednoczesna praca akcelerometru, żyroskopu, magnetometru.
 80011cc:	2108      	movs	r1, #8
 80011ce:	203d      	movs	r0, #61	; 0x3d
 80011d0:	f7ff ff98 	bl	8001104 <BNO_I2C_Write>

	if (BNO_I2C_Read(BNO_OPR_MODE) != IMUMODE) {
 80011d4:	203d      	movs	r0, #61	; 0x3d
 80011d6:	f7ff ffb9 	bl	800114c <BNO_I2C_Read>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b08      	cmp	r3, #8
 80011de:	d001      	beq.n	80011e4 <BNO_Init+0x58>
		Error_Handler();
 80011e0:	f000 fb68 	bl	80018b4 <Error_Handler>
	}

	HAL_GPIO_WritePin(INFO_LED_1_GPIO_Port, INFO_LED_1_Pin, GPIO_PIN_RESET);
 80011e4:	2200      	movs	r2, #0
 80011e6:	2180      	movs	r1, #128	; 0x80
 80011e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011ec:	f002 fb82 	bl	80038f4 <HAL_GPIO_WritePin>

	return check;
 80011f0:	79fb      	ldrb	r3, [r7, #7]
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
	...

080011fc <BNO_GetEuler>:

Angles BNO_GetEuler(void) {
 80011fc:	b590      	push	{r4, r7, lr}
 80011fe:	b097      	sub	sp, #92	; 0x5c
 8001200:	af04      	add	r7, sp, #16
	uint8_t data[6];

	HAL_I2C_Mem_Read(&hi2c1, BNO_ADDRESS, EUL_DATA_X_LSB, 1, (uint8_t*) &data,
 8001202:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001206:	9302      	str	r3, [sp, #8]
 8001208:	2306      	movs	r3, #6
 800120a:	9301      	str	r3, [sp, #4]
 800120c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001210:	9300      	str	r3, [sp, #0]
 8001212:	2301      	movs	r3, #1
 8001214:	221a      	movs	r2, #26
 8001216:	2152      	movs	r1, #82	; 0x52
 8001218:	4844      	ldr	r0, [pc, #272]	; (800132c <BNO_GetEuler+0x130>)
 800121a:	f002 fd59 	bl	8003cd0 <HAL_I2C_Mem_Read>
			6,
			I2C_TIMEOUT);
	Angles Eul;
	int16_t X, Y, Z;

	X = ((data[1] << 8) | data[0]);
 800121e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001222:	021b      	lsls	r3, r3, #8
 8001224:	b21a      	sxth	r2, r3
 8001226:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800122a:	b21b      	sxth	r3, r3
 800122c:	4313      	orrs	r3, r2
 800122e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	Y = ((data[3] << 8) | data[2]);
 8001232:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001236:	021b      	lsls	r3, r3, #8
 8001238:	b21a      	sxth	r2, r3
 800123a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800123e:	b21b      	sxth	r3, r3
 8001240:	4313      	orrs	r3, r2
 8001242:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
	Z = ((data[5] << 8) | data[4]);
 8001246:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800124a:	021b      	lsls	r3, r3, #8
 800124c:	b21a      	sxth	r2, r3
 800124e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001252:	b21b      	sxth	r3, r3
 8001254:	4313      	orrs	r3, r2
 8001256:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

	float_t X_temp = X / EUL_LSB;
 800125a:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 800125e:	4618      	mov	r0, r3
 8001260:	f7ff f960 	bl	8000524 <__aeabi_i2d>
 8001264:	f04f 0200 	mov.w	r2, #0
 8001268:	4b31      	ldr	r3, [pc, #196]	; (8001330 <BNO_GetEuler+0x134>)
 800126a:	f7ff faef 	bl	800084c <__aeabi_ddiv>
 800126e:	4602      	mov	r2, r0
 8001270:	460b      	mov	r3, r1
 8001272:	4610      	mov	r0, r2
 8001274:	4619      	mov	r1, r3
 8001276:	f7ff fc97 	bl	8000ba8 <__aeabi_d2f>
 800127a:	4603      	mov	r3, r0
 800127c:	63fb      	str	r3, [r7, #60]	; 0x3c

	if (X_temp >= 180.0) {
 800127e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001282:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8001334 <BNO_GetEuler+0x138>
 8001286:	eef4 7ac7 	vcmpe.f32	s15, s14
 800128a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800128e:	db08      	blt.n	80012a2 <BNO_GetEuler+0xa6>
		Eul.X = X_temp - 360.0; // przejście z systemu (0, 360) na (-180, 180)
 8001290:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001294:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8001338 <BNO_GetEuler+0x13c>
 8001298:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800129c:	edc7 7a05 	vstr	s15, [r7, #20]
 80012a0:	e001      	b.n	80012a6 <BNO_GetEuler+0xaa>
	} else {
		Eul.X = X_temp;
 80012a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80012a4:	617b      	str	r3, [r7, #20]
	}

	Eul.Y = Y / EUL_LSB;
 80012a6:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff f93a 	bl	8000524 <__aeabi_i2d>
 80012b0:	f04f 0200 	mov.w	r2, #0
 80012b4:	4b1e      	ldr	r3, [pc, #120]	; (8001330 <BNO_GetEuler+0x134>)
 80012b6:	f7ff fac9 	bl	800084c <__aeabi_ddiv>
 80012ba:	4602      	mov	r2, r0
 80012bc:	460b      	mov	r3, r1
 80012be:	4610      	mov	r0, r2
 80012c0:	4619      	mov	r1, r3
 80012c2:	f7ff fc71 	bl	8000ba8 <__aeabi_d2f>
 80012c6:	4603      	mov	r3, r0
 80012c8:	61bb      	str	r3, [r7, #24]
	Eul.Z = Z / EUL_LSB;
 80012ca:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7ff f928 	bl	8000524 <__aeabi_i2d>
 80012d4:	f04f 0200 	mov.w	r2, #0
 80012d8:	4b15      	ldr	r3, [pc, #84]	; (8001330 <BNO_GetEuler+0x134>)
 80012da:	f7ff fab7 	bl	800084c <__aeabi_ddiv>
 80012de:	4602      	mov	r2, r0
 80012e0:	460b      	mov	r3, r1
 80012e2:	4610      	mov	r0, r2
 80012e4:	4619      	mov	r1, r3
 80012e6:	f7ff fc5f 	bl	8000ba8 <__aeabi_d2f>
 80012ea:	4603      	mov	r3, r0
 80012ec:	61fb      	str	r3, [r7, #28]

	return Eul;
 80012ee:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 80012f2:	f107 0314 	add.w	r3, r7, #20
 80012f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80012fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80012fe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001300:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001304:	ee06 0a10 	vmov	s12, r0
 8001308:	ee06 1a90 	vmov	s13, r1
 800130c:	ee07 2a10 	vmov	s14, r2
 8001310:	ee07 3a90 	vmov	s15, r3
}
 8001314:	eeb0 0a46 	vmov.f32	s0, s12
 8001318:	eef0 0a66 	vmov.f32	s1, s13
 800131c:	eeb0 1a47 	vmov.f32	s2, s14
 8001320:	eef0 1a67 	vmov.f32	s3, s15
 8001324:	374c      	adds	r7, #76	; 0x4c
 8001326:	46bd      	mov	sp, r7
 8001328:	bd90      	pop	{r4, r7, pc}
 800132a:	bf00      	nop
 800132c:	20000464 	.word	0x20000464
 8001330:	40300000 	.word	0x40300000
 8001334:	43340000 	.word	0x43340000
 8001338:	43b40000 	.word	0x43b40000

0800133c <BNO_CheckCalibration>:
	float_t cosy_cosp = 1 - 2 * (qua.Y * qua.Y + qua.Z * qua.Z);
	eul.Z = atan2f(siny_cosp, cosy_cosp) * 57.295;

	return eul;
}
void BNO_CheckCalibration(uint8_t calib_thres) {
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	4603      	mov	r3, r0
 8001344:	71fb      	strb	r3, [r7, #7]
	/* Funkcja sprawdzająca status kalibracji akcelerometru, żyroskopu i magnetometru
	 * Liczba 3 (binarnie 11) oznacza pełną kalibrację komponentu, 0 - konieczność dokonania kalibracji
	 * Funkcja wstrzymuje działanie programu, jeżeli komponenty nie są skalibrowane zgodnie z progiem przekazanym w argumencie funkcji
	 */
//	__disable_irq(); //globalne wyłączenie przerwań
	uint8_t status = 0;
 8001346:	2300      	movs	r3, #0
 8001348:	73fb      	strb	r3, [r7, #15]

	do {
		CalibrationData calib;
		uint8_t data = BNO_I2C_Read(CALIB_STAT);
 800134a:	2035      	movs	r0, #53	; 0x35
 800134c:	f7ff fefe 	bl	800114c <BNO_I2C_Read>
 8001350:	4603      	mov	r3, r0
 8001352:	73bb      	strb	r3, [r7, #14]
		calib.sys = (data >> 6) & 0b11;
 8001354:	7bbb      	ldrb	r3, [r7, #14]
 8001356:	099b      	lsrs	r3, r3, #6
 8001358:	b2db      	uxtb	r3, r3
 800135a:	723b      	strb	r3, [r7, #8]
		calib.gyr = (data >> 4) & 0b11;
 800135c:	7bbb      	ldrb	r3, [r7, #14]
 800135e:	091b      	lsrs	r3, r3, #4
 8001360:	b2db      	uxtb	r3, r3
 8001362:	f003 0303 	and.w	r3, r3, #3
 8001366:	b2db      	uxtb	r3, r3
 8001368:	727b      	strb	r3, [r7, #9]
		calib.acc = (data >> 2) & 0b11;
 800136a:	7bbb      	ldrb	r3, [r7, #14]
 800136c:	089b      	lsrs	r3, r3, #2
 800136e:	b2db      	uxtb	r3, r3
 8001370:	f003 0303 	and.w	r3, r3, #3
 8001374:	b2db      	uxtb	r3, r3
 8001376:	72bb      	strb	r3, [r7, #10]
		calib.mag = data & 0b11;
 8001378:	7bbb      	ldrb	r3, [r7, #14]
 800137a:	f003 0303 	and.w	r3, r3, #3
 800137e:	b2db      	uxtb	r3, r3
 8001380:	72fb      	strb	r3, [r7, #11]

		if ((calib.gyr >= calib_thres) && (calib.acc >= calib_thres)) {
 8001382:	7a7b      	ldrb	r3, [r7, #9]
 8001384:	79fa      	ldrb	r2, [r7, #7]
 8001386:	429a      	cmp	r2, r3
 8001388:	d80c      	bhi.n	80013a4 <BNO_CheckCalibration+0x68>
 800138a:	7abb      	ldrb	r3, [r7, #10]
 800138c:	79fa      	ldrb	r2, [r7, #7]
 800138e:	429a      	cmp	r2, r3
 8001390:	d808      	bhi.n	80013a4 <BNO_CheckCalibration+0x68>
			status = 1;
 8001392:	2301      	movs	r3, #1
 8001394:	73fb      	strb	r3, [r7, #15]
			HAL_GPIO_WritePin(INFO_LED_1_GPIO_Port, INFO_LED_1_Pin, GPIO_PIN_RESET);
 8001396:	2200      	movs	r2, #0
 8001398:	2180      	movs	r1, #128	; 0x80
 800139a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800139e:	f002 faa9 	bl	80038f4 <HAL_GPIO_WritePin>
 80013a2:	e007      	b.n	80013b4 <BNO_CheckCalibration+0x78>
		} else {
			status = 0;
 80013a4:	2300      	movs	r3, #0
 80013a6:	73fb      	strb	r3, [r7, #15]
			HAL_GPIO_WritePin(INFO_LED_1_GPIO_Port, INFO_LED_1_Pin, GPIO_PIN_SET); //jeśli komponenty nie są skalibrowane, zaświeć diodą
 80013a8:	2201      	movs	r2, #1
 80013aa:	2180      	movs	r1, #128	; 0x80
 80013ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013b0:	f002 faa0 	bl	80038f4 <HAL_GPIO_WritePin>
		}
//		__enable_irq();

		HAL_Delay(10);
 80013b4:	200a      	movs	r0, #10
 80013b6:	f000 fd5b 	bl	8001e70 <HAL_Delay>
//		__disable_irq();
	} while (status == 0);
 80013ba:	7bfb      	ldrb	r3, [r7, #15]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d0c4      	beq.n	800134a <BNO_CheckCalibration+0xe>
//	__enable_irq(); //globalne włączenie przerwań
}
 80013c0:	bf00      	nop
 80013c2:	bf00      	nop
 80013c4:	3710      	adds	r7, #16
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
	...

080013cc <HID_SendReport>:
//void BNO_RestoreOffsets(void)
//{
// READ_FROM_EEPROM;
//}

uint8_t HID_SendReport(USBmouse device) {
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
	uint8_t status = USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &device,
 80013d4:	1d3b      	adds	r3, r7, #4
 80013d6:	2204      	movs	r2, #4
 80013d8:	4619      	mov	r1, r3
 80013da:	4805      	ldr	r0, [pc, #20]	; (80013f0 <HID_SendReport+0x24>)
 80013dc:	f008 ff36 	bl	800a24c <USBD_HID_SendReport>
 80013e0:	4603      	mov	r3, r0
 80013e2:	73fb      	strb	r3, [r7, #15]
			sizeof(device));
	return status;
 80013e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3710      	adds	r7, #16
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	20000908 	.word	0x20000908

080013f4 <EnableFPU>:
	Mouse_SetBoundaries();

}


void EnableFPU(void) {
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
	SCB->CPACR |= ((3UL << 10 * 2) | /* set CP10 Full Access */
 80013f8:	4b06      	ldr	r3, [pc, #24]	; (8001414 <EnableFPU+0x20>)
 80013fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013fe:	4a05      	ldr	r2, [pc, #20]	; (8001414 <EnableFPU+0x20>)
 8001400:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001404:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	(3UL << 11 * 2)); /* set CP11 Full Access */

}
 8001408:	bf00      	nop
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	e000ed00 	.word	0xe000ed00

08001418 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { //timer ustawia tylko flagę, aby wykonać w przerwaniu jak najmniej instrukcji
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM6) {
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a05      	ldr	r2, [pc, #20]	; (800143c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d102      	bne.n	8001430 <HAL_TIM_PeriodElapsedCallback+0x18>
		tim6_flg = 1;
 800142a:	4b05      	ldr	r3, [pc, #20]	; (8001440 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800142c:	2201      	movs	r2, #1
 800142e:	701a      	strb	r2, [r3, #0]
	}
}
 8001430:	bf00      	nop
 8001432:	370c      	adds	r7, #12
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr
 800143c:	40001000 	.word	0x40001000
 8001440:	20000380 	.word	0x20000380

08001444 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
	// przesuwanie wierszy w tabeli o 1
	adc_flg = 1;
 800144c:	4b04      	ldr	r3, [pc, #16]	; (8001460 <HAL_ADC_ConvCpltCallback+0x1c>)
 800144e:	2201      	movs	r2, #1
 8001450:	701a      	strb	r2, [r3, #0]

}
 8001452:	bf00      	nop
 8001454:	370c      	adds	r7, #12
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	20000381 	.word	0x20000381

08001464 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	4603      	mov	r3, r0
 800146c:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 800146e:	2201      	movs	r2, #1
 8001470:	2108      	movs	r1, #8
 8001472:	4803      	ldr	r0, [pc, #12]	; (8001480 <HAL_GPIO_EXTI_Callback+0x1c>)
 8001474:	f002 fa3e 	bl	80038f4 <HAL_GPIO_WritePin>
}
 8001478:	bf00      	nop
 800147a:	3708      	adds	r7, #8
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	48000400 	.word	0x48000400

08001484 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001484:	b590      	push	{r4, r7, lr}
 8001486:	b089      	sub	sp, #36	; 0x24
 8001488:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800148a:	f000 fc7c 	bl	8001d86 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800148e:	f000 f957 	bl	8001740 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001492:	f000 f9e1 	bl	8001858 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001496:	f7ff fcc9 	bl	8000e2c <MX_GPIO_Init>
  MX_I2C1_Init();
 800149a:	f7ff fd9b 	bl	8000fd4 <MX_I2C1_Init>
  MX_TIM6_Init();
 800149e:	f000 fbd9 	bl	8001c54 <MX_TIM6_Init>
  MX_DMA_Init();
 80014a2:	f7ff fca5 	bl	8000df0 <MX_DMA_Init>
  MX_ADC1_Init();
 80014a6:	f7ff fbcf 	bl	8000c48 <MX_ADC1_Init>
  MX_TIM1_Init();
 80014aa:	f000 fb7f 	bl	8001bac <MX_TIM1_Init>
  MX_USB_DEVICE_Init();
 80014ae:	f00a f849 	bl	800b544 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

	if (BNO_Init() != 0xA0) { //sprawdzenie, czy identyfikator urządzenia jest zgodny - weryfikacja poprawności komunikacji między urządzeniami
 80014b2:	f7ff fe6b 	bl	800118c <BNO_Init>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2ba0      	cmp	r3, #160	; 0xa0
 80014ba:	d001      	beq.n	80014c0 <main+0x3c>
		Error_Handler();
 80014bc:	f000 f9fa 	bl	80018b4 <Error_Handler>
	}

	//inicjalizacja tablicy z pomiarami ADC zerami
	for (uint8_t i = 0; i < RMS_FRAME_LEN; i++) {
 80014c0:	2300      	movs	r3, #0
 80014c2:	77fb      	strb	r3, [r7, #31]
 80014c4:	e007      	b.n	80014d6 <main+0x52>
		data_raw[i] = 0;
 80014c6:	7ffb      	ldrb	r3, [r7, #31]
 80014c8:	4a8d      	ldr	r2, [pc, #564]	; (8001700 <main+0x27c>)
 80014ca:	2100      	movs	r1, #0
 80014cc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (uint8_t i = 0; i < RMS_FRAME_LEN; i++) {
 80014d0:	7ffb      	ldrb	r3, [r7, #31]
 80014d2:	3301      	adds	r3, #1
 80014d4:	77fb      	strb	r3, [r7, #31]
 80014d6:	7ffb      	ldrb	r3, [r7, #31]
 80014d8:	2b3b      	cmp	r3, #59	; 0x3b
 80014da:	d9f4      	bls.n	80014c6 <main+0x42>
	}

	BNO_CheckCalibration(1);
 80014dc:	2001      	movs	r0, #1
 80014de:	f7ff ff2d 	bl	800133c <BNO_CheckCalibration>
//	Mouse_SetBoundaries();
	EnableFPU();
 80014e2:	f7ff ff87 	bl	80013f4 <EnableFPU>

	HAL_TIM_Base_Start_IT(&htim6); // rozpoczęcie pracy timera odpowiedzialnego za przerwania
 80014e6:	4887      	ldr	r0, [pc, #540]	; (8001704 <main+0x280>)
 80014e8:	f005 fec4 	bl	8007274 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim1);
 80014ec:	4886      	ldr	r0, [pc, #536]	; (8001708 <main+0x284>)
 80014ee:	f005 fe75 	bl	80071dc <HAL_TIM_Base_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &emg, 1); //rozpoczęcie pracy przetwornika ADC w trybie DMA (bezpośredniego dostępu do pamięci z pominięciem CPU)
 80014f2:	2201      	movs	r2, #1
 80014f4:	4985      	ldr	r1, [pc, #532]	; (800170c <main+0x288>)
 80014f6:	4886      	ldr	r0, [pc, #536]	; (8001710 <main+0x28c>)
 80014f8:	f000 ffee 	bl	80024d8 <HAL_ADC_Start_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		if (tim6_flg == 1) { //realizacja ruchów kursora, kliknięć, wysłanie raportu HID
 80014fc:	4b85      	ldr	r3, [pc, #532]	; (8001714 <main+0x290>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	2b01      	cmp	r3, #1
 8001502:	d17f      	bne.n	8001604 <main+0x180>

			Euler = BNO_GetEuler();
 8001504:	f7ff fe7a 	bl	80011fc <BNO_GetEuler>
 8001508:	eeb0 6a40 	vmov.f32	s12, s0
 800150c:	eef0 6a60 	vmov.f32	s13, s1
 8001510:	eeb0 7a41 	vmov.f32	s14, s2
 8001514:	eef0 7a61 	vmov.f32	s15, s3
 8001518:	4b7f      	ldr	r3, [pc, #508]	; (8001718 <main+0x294>)
 800151a:	ed83 6a00 	vstr	s12, [r3]
 800151e:	edc3 6a01 	vstr	s13, [r3, #4]
 8001522:	ed83 7a02 	vstr	s14, [r3, #8]
 8001526:	edc3 7a03 	vstr	s15, [r3, #12]

			if (Euler.X == 0 && Euler.Y == 0 && Euler.Z == 0) //jeśli wszystkie zwracane kąty są równe zero, istnieje prawdopodobieństwo że czujnik uległ rozkalibrowaniu
 800152a:	4b7b      	ldr	r3, [pc, #492]	; (8001718 <main+0x294>)
 800152c:	edd3 7a00 	vldr	s15, [r3]
 8001530:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001534:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001538:	d112      	bne.n	8001560 <main+0xdc>
 800153a:	4b77      	ldr	r3, [pc, #476]	; (8001718 <main+0x294>)
 800153c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001540:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001544:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001548:	d10a      	bne.n	8001560 <main+0xdc>
 800154a:	4b73      	ldr	r3, [pc, #460]	; (8001718 <main+0x294>)
 800154c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001550:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001558:	d102      	bne.n	8001560 <main+0xdc>
					{
				BNO_CheckCalibration(1);
 800155a:	2001      	movs	r0, #1
 800155c:	f7ff feee 	bl	800133c <BNO_CheckCalibration>
			}

			if (Euler.Y >= bound_max.Y + 15) {
 8001560:	4b6d      	ldr	r3, [pc, #436]	; (8001718 <main+0x294>)
 8001562:	ed93 7a01 	vldr	s14, [r3, #4]
 8001566:	4b6d      	ldr	r3, [pc, #436]	; (800171c <main+0x298>)
 8001568:	edd3 7a01 	vldr	s15, [r3, #4]
 800156c:	eef2 6a0e 	vmov.f32	s13, #46	; 0x41700000  15.0
 8001570:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001574:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800157c:	db02      	blt.n	8001584 <main+0x100>
				HAL_NVIC_SetPendingIRQ(EXTI9_5_IRQn);
 800157e:	2017      	movs	r0, #23
 8001580:	f001 fe47 	bl	8003212 <HAL_NVIC_SetPendingIRQ>
			}

			mouse.cursor_X = ((Euler.X - Euler_prev.X) * px_per_deg.X); //obliczenie składowych wektora ruchu kursora w stopniach i przeliczenie ich na piksele
 8001584:	4b64      	ldr	r3, [pc, #400]	; (8001718 <main+0x294>)
 8001586:	ed93 7a00 	vldr	s14, [r3]
 800158a:	4b65      	ldr	r3, [pc, #404]	; (8001720 <main+0x29c>)
 800158c:	edd3 7a00 	vldr	s15, [r3]
 8001590:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001594:	4b63      	ldr	r3, [pc, #396]	; (8001724 <main+0x2a0>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	ee07 3a90 	vmov	s15, r3
 800159c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015a8:	edc7 7a01 	vstr	s15, [r7, #4]
 80015ac:	793b      	ldrb	r3, [r7, #4]
 80015ae:	b25a      	sxtb	r2, r3
 80015b0:	4b5d      	ldr	r3, [pc, #372]	; (8001728 <main+0x2a4>)
 80015b2:	705a      	strb	r2, [r3, #1]
			mouse.cursor_Y = (Euler.Z - Euler_prev.Z) * px_per_deg.Y;
 80015b4:	4b58      	ldr	r3, [pc, #352]	; (8001718 <main+0x294>)
 80015b6:	ed93 7a02 	vldr	s14, [r3, #8]
 80015ba:	4b59      	ldr	r3, [pc, #356]	; (8001720 <main+0x29c>)
 80015bc:	edd3 7a02 	vldr	s15, [r3, #8]
 80015c0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80015c4:	4b57      	ldr	r3, [pc, #348]	; (8001724 <main+0x2a0>)
 80015c6:	785b      	ldrb	r3, [r3, #1]
 80015c8:	ee07 3a90 	vmov	s15, r3
 80015cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015d8:	edc7 7a01 	vstr	s15, [r7, #4]
 80015dc:	793b      	ldrb	r3, [r7, #4]
 80015de:	b25a      	sxtb	r2, r3
 80015e0:	4b51      	ldr	r3, [pc, #324]	; (8001728 <main+0x2a4>)
 80015e2:	709a      	strb	r2, [r3, #2]

			HID_SendReport(mouse); //wysłanie raportu HID
 80015e4:	4b50      	ldr	r3, [pc, #320]	; (8001728 <main+0x2a4>)
 80015e6:	6818      	ldr	r0, [r3, #0]
 80015e8:	f7ff fef0 	bl	80013cc <HID_SendReport>
			mouse.button = 0;
 80015ec:	4b4e      	ldr	r3, [pc, #312]	; (8001728 <main+0x2a4>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	701a      	strb	r2, [r3, #0]

			Euler_prev = Euler;
 80015f2:	4a4b      	ldr	r2, [pc, #300]	; (8001720 <main+0x29c>)
 80015f4:	4b48      	ldr	r3, [pc, #288]	; (8001718 <main+0x294>)
 80015f6:	4614      	mov	r4, r2
 80015f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015fa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

			tim6_flg = 0;
 80015fe:	4b45      	ldr	r3, [pc, #276]	; (8001714 <main+0x290>)
 8001600:	2200      	movs	r2, #0
 8001602:	701a      	strb	r2, [r3, #0]
		}

		if (adc_flg == 1) {
 8001604:	4b49      	ldr	r3, [pc, #292]	; (800172c <main+0x2a8>)
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	2b01      	cmp	r3, #1
 800160a:	f47f af77 	bne.w	80014fc <main+0x78>
			for (uint8_t i = 0; i < RMS_FRAME_LEN - 1; i++) { //przesunięcie elementów tablicy z pomiarami
 800160e:	2300      	movs	r3, #0
 8001610:	77bb      	strb	r3, [r7, #30]
 8001612:	e00b      	b.n	800162c <main+0x1a8>
				data_raw[i] = data_raw[i + 1];
 8001614:	7fbb      	ldrb	r3, [r7, #30]
 8001616:	1c5a      	adds	r2, r3, #1
 8001618:	7fbb      	ldrb	r3, [r7, #30]
 800161a:	4939      	ldr	r1, [pc, #228]	; (8001700 <main+0x27c>)
 800161c:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 8001620:	4a37      	ldr	r2, [pc, #220]	; (8001700 <main+0x27c>)
 8001622:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for (uint8_t i = 0; i < RMS_FRAME_LEN - 1; i++) { //przesunięcie elementów tablicy z pomiarami
 8001626:	7fbb      	ldrb	r3, [r7, #30]
 8001628:	3301      	adds	r3, #1
 800162a:	77bb      	strb	r3, [r7, #30]
 800162c:	7fbb      	ldrb	r3, [r7, #30]
 800162e:	2b3a      	cmp	r3, #58	; 0x3a
 8001630:	d9f0      	bls.n	8001614 <main+0x190>
			}
			data_raw[RMS_FRAME_LEN - 1] = emg[0] - 1800;
 8001632:	4b36      	ldr	r3, [pc, #216]	; (800170c <main+0x288>)
 8001634:	881b      	ldrh	r3, [r3, #0]
 8001636:	b29b      	uxth	r3, r3
 8001638:	f5a3 63e1 	sub.w	r3, r3, #1800	; 0x708
 800163c:	b29b      	uxth	r3, r3
 800163e:	b21a      	sxth	r2, r3
 8001640:	4b2f      	ldr	r3, [pc, #188]	; (8001700 <main+0x27c>)
 8001642:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76

			uint32_t square = 0;
 8001646:	2300      	movs	r3, #0
 8001648:	61bb      	str	r3, [r7, #24]
			float_t mean = 0.0;
 800164a:	f04f 0300 	mov.w	r3, #0
 800164e:	613b      	str	r3, [r7, #16]
			float_t square_root = 0.0;
 8001650:	f04f 0300 	mov.w	r3, #0
 8001654:	60fb      	str	r3, [r7, #12]

			/* Obliczenie RMS - średniej kwadratowej */
			for (uint8_t i = 0; i < RMS_FRAME_LEN; i++) {
 8001656:	2300      	movs	r3, #0
 8001658:	75fb      	strb	r3, [r7, #23]
 800165a:	e01e      	b.n	800169a <main+0x216>
				square += powf(data_raw[i], 2);
 800165c:	7dfb      	ldrb	r3, [r7, #23]
 800165e:	4a28      	ldr	r2, [pc, #160]	; (8001700 <main+0x27c>)
 8001660:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001664:	ee07 3a90 	vmov	s15, r3
 8001668:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800166c:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001670:	eeb0 0a67 	vmov.f32	s0, s15
 8001674:	f00d f926 	bl	800e8c4 <powf>
 8001678:	eeb0 7a40 	vmov.f32	s14, s0
 800167c:	69bb      	ldr	r3, [r7, #24]
 800167e:	ee07 3a90 	vmov	s15, r3
 8001682:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001686:	ee77 7a27 	vadd.f32	s15, s14, s15
 800168a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800168e:	ee17 3a90 	vmov	r3, s15
 8001692:	61bb      	str	r3, [r7, #24]
			for (uint8_t i = 0; i < RMS_FRAME_LEN; i++) {
 8001694:	7dfb      	ldrb	r3, [r7, #23]
 8001696:	3301      	adds	r3, #1
 8001698:	75fb      	strb	r3, [r7, #23]
 800169a:	7dfb      	ldrb	r3, [r7, #23]
 800169c:	2b3b      	cmp	r3, #59	; 0x3b
 800169e:	d9dd      	bls.n	800165c <main+0x1d8>
			}
			mean = (square / (float) RMS_FRAME_LEN);
 80016a0:	69bb      	ldr	r3, [r7, #24]
 80016a2:	ee07 3a90 	vmov	s15, r3
 80016a6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80016aa:	eddf 6a21 	vldr	s13, [pc, #132]	; 8001730 <main+0x2ac>
 80016ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016b2:	edc7 7a04 	vstr	s15, [r7, #16]
			square_root = sqrtf(mean);
 80016b6:	ed97 0a04 	vldr	s0, [r7, #16]
 80016ba:	f00d f99b 	bl	800e9f4 <sqrtf>
 80016be:	ed87 0a03 	vstr	s0, [r7, #12]
			data_rms = square_root;
 80016c2:	4a1c      	ldr	r2, [pc, #112]	; (8001734 <main+0x2b0>)
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	6013      	str	r3, [r2, #0]

			if(data_rms > RMS_THRES && data_rms < RMS_MAX) //jeżeli wartość RMS przekracza określoną wartość, czujnik prawdopodobnie nie jest założony poprawnie. Klikanie nie odbywa się
 80016c8:	4b1a      	ldr	r3, [pc, #104]	; (8001734 <main+0x2b0>)
 80016ca:	edd3 7a00 	vldr	s15, [r3]
 80016ce:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001738 <main+0x2b4>
 80016d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016da:	dd0c      	ble.n	80016f6 <main+0x272>
 80016dc:	4b15      	ldr	r3, [pc, #84]	; (8001734 <main+0x2b0>)
 80016de:	edd3 7a00 	vldr	s15, [r3]
 80016e2:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800173c <main+0x2b8>
 80016e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016ee:	d502      	bpl.n	80016f6 <main+0x272>
			{
				mouse.button = 1;
 80016f0:	4b0d      	ldr	r3, [pc, #52]	; (8001728 <main+0x2a4>)
 80016f2:	2201      	movs	r2, #1
 80016f4:	701a      	strb	r2, [r3, #0]
			}

			adc_flg = 0;
 80016f6:	4b0d      	ldr	r3, [pc, #52]	; (800172c <main+0x2a8>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	701a      	strb	r2, [r3, #0]
		if (tim6_flg == 1) { //realizacja ruchów kursora, kliknięć, wysłanie raportu HID
 80016fc:	e6fe      	b.n	80014fc <main+0x78>
 80016fe:	bf00      	nop
 8001700:	200004b4 	.word	0x200004b4
 8001704:	20000818 	.word	0x20000818
 8001708:	20000864 	.word	0x20000864
 800170c:	2000052c 	.word	0x2000052c
 8001710:	200003b8 	.word	0x200003b8
 8001714:	20000380 	.word	0x20000380
 8001718:	20000804 	.word	0x20000804
 800171c:	20000000 	.word	0x20000000
 8001720:	20000384 	.word	0x20000384
 8001724:	20000010 	.word	0x20000010
 8001728:	20000378 	.word	0x20000378
 800172c:	20000381 	.word	0x20000381
 8001730:	42700000 	.word	0x42700000
 8001734:	2000037c 	.word	0x2000037c
 8001738:	428c0000 	.word	0x428c0000
 800173c:	43fa0000 	.word	0x43fa0000

08001740 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b09e      	sub	sp, #120	; 0x78
 8001744:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001746:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800174a:	2244      	movs	r2, #68	; 0x44
 800174c:	2100      	movs	r1, #0
 800174e:	4618      	mov	r0, r3
 8001750:	f00a fbde 	bl	800bf10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001754:	f107 0320 	add.w	r3, r7, #32
 8001758:	2200      	movs	r2, #0
 800175a:	601a      	str	r2, [r3, #0]
 800175c:	605a      	str	r2, [r3, #4]
 800175e:	609a      	str	r2, [r3, #8]
 8001760:	60da      	str	r2, [r3, #12]
 8001762:	611a      	str	r2, [r3, #16]
  RCC_CRSInitTypeDef RCC_CRSInitStruct = {0};
 8001764:	f107 0308 	add.w	r3, r7, #8
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	605a      	str	r2, [r3, #4]
 800176e:	609a      	str	r2, [r3, #8]
 8001770:	60da      	str	r2, [r3, #12]
 8001772:	611a      	str	r2, [r3, #16]
 8001774:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001776:	f44f 7000 	mov.w	r0, #512	; 0x200
 800177a:	f004 fb4b 	bl	8005e14 <HAL_PWREx_ControlVoltageScaling>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <SystemClock_Config+0x48>
  {
    Error_Handler();
 8001784:	f000 f896 	bl	80018b4 <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001788:	f004 fb26 	bl	8005dd8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800178c:	4b31      	ldr	r3, [pc, #196]	; (8001854 <SystemClock_Config+0x114>)
 800178e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001792:	4a30      	ldr	r2, [pc, #192]	; (8001854 <SystemClock_Config+0x114>)
 8001794:	f023 0318 	bic.w	r3, r3, #24
 8001798:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800179c:	2314      	movs	r3, #20
 800179e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80017a0:	2301      	movs	r3, #1
 80017a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80017a4:	2301      	movs	r3, #1
 80017a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80017a8:	2300      	movs	r3, #0
 80017aa:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80017ac:	2360      	movs	r3, #96	; 0x60
 80017ae:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017b0:	2302      	movs	r3, #2
 80017b2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80017b4:	2301      	movs	r3, #1
 80017b6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLM = 1;
 80017b8:	2301      	movs	r3, #1
 80017ba:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLN = 24;
 80017bc:	2318      	movs	r3, #24
 80017be:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80017c0:	2307      	movs	r3, #7
 80017c2:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV6;
 80017c4:	2306      	movs	r3, #6
 80017c6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80017c8:	2302      	movs	r3, #2
 80017ca:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017cc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80017d0:	4618      	mov	r0, r3
 80017d2:	f004 fb85 	bl	8005ee0 <HAL_RCC_OscConfig>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80017dc:	f000 f86a 	bl	80018b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017e0:	230f      	movs	r3, #15
 80017e2:	623b      	str	r3, [r7, #32]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017e4:	2303      	movs	r3, #3
 80017e6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017e8:	2300      	movs	r3, #0
 80017ea:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017ec:	2300      	movs	r3, #0
 80017ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017f0:	2300      	movs	r3, #0
 80017f2:	633b      	str	r3, [r7, #48]	; 0x30

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80017f4:	f107 0320 	add.w	r3, r7, #32
 80017f8:	2102      	movs	r1, #2
 80017fa:	4618      	mov	r0, r3
 80017fc:	f004 ff90 	bl	8006720 <HAL_RCC_ClockConfig>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001806:	f000 f855 	bl	80018b4 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800180a:	f005 fb4b 	bl	8006ea4 <HAL_RCCEx_EnableMSIPLLMode>
  /** Enable the SYSCFG APB clock
  */
  __HAL_RCC_CRS_CLK_ENABLE();
 800180e:	4b11      	ldr	r3, [pc, #68]	; (8001854 <SystemClock_Config+0x114>)
 8001810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001812:	4a10      	ldr	r2, [pc, #64]	; (8001854 <SystemClock_Config+0x114>)
 8001814:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001818:	6593      	str	r3, [r2, #88]	; 0x58
 800181a:	4b0e      	ldr	r3, [pc, #56]	; (8001854 <SystemClock_Config+0x114>)
 800181c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800181e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001822:	607b      	str	r3, [r7, #4]
 8001824:	687b      	ldr	r3, [r7, #4]
  /** Configures CRS
  */
  RCC_CRSInitStruct.Prescaler = RCC_CRS_SYNC_DIV1;
 8001826:	2300      	movs	r3, #0
 8001828:	60bb      	str	r3, [r7, #8]
  RCC_CRSInitStruct.Source = RCC_CRS_SYNC_SOURCE_USB;
 800182a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800182e:	60fb      	str	r3, [r7, #12]
  RCC_CRSInitStruct.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 8001830:	2300      	movs	r3, #0
 8001832:	613b      	str	r3, [r7, #16]
  RCC_CRSInitStruct.ReloadValue = __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000,1000);
 8001834:	f64b 337f 	movw	r3, #47999	; 0xbb7f
 8001838:	617b      	str	r3, [r7, #20]
  RCC_CRSInitStruct.ErrorLimitValue = 34;
 800183a:	2322      	movs	r3, #34	; 0x22
 800183c:	61bb      	str	r3, [r7, #24]
  RCC_CRSInitStruct.HSI48CalibrationValue = 32;
 800183e:	2320      	movs	r3, #32
 8001840:	61fb      	str	r3, [r7, #28]

  HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
 8001842:	f107 0308 	add.w	r3, r7, #8
 8001846:	4618      	mov	r0, r3
 8001848:	f005 fb3c 	bl	8006ec4 <HAL_RCCEx_CRSConfig>
}
 800184c:	bf00      	nop
 800184e:	3778      	adds	r7, #120	; 0x78
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	40021000 	.word	0x40021000

08001858 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b096      	sub	sp, #88	; 0x58
 800185c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800185e:	1d3b      	adds	r3, r7, #4
 8001860:	2254      	movs	r2, #84	; 0x54
 8001862:	2100      	movs	r1, #0
 8001864:	4618      	mov	r0, r3
 8001866:	f00a fb53 	bl	800bf10 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
 800186a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800186e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001870:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001874:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001876:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800187a:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800187c:	2301      	movs	r3, #1
 800187e:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001880:	2301      	movs	r3, #1
 8001882:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001884:	2318      	movs	r3, #24
 8001886:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001888:	2307      	movs	r3, #7
 800188a:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800188c:	2302      	movs	r3, #2
 800188e:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001890:	2302      	movs	r3, #2
 8001892:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 8001894:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 8001898:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800189a:	1d3b      	adds	r3, r7, #4
 800189c:	4618      	mov	r0, r3
 800189e:	f005 f90d 	bl	8006abc <HAL_RCCEx_PeriphCLKConfig>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <PeriphCommonClock_Config+0x54>
  {
    Error_Handler();
 80018a8:	f000 f804 	bl	80018b4 <Error_Handler>
  }
}
 80018ac:	bf00      	nop
 80018ae:	3758      	adds	r7, #88	; 0x58
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}

080018b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018b8:	b672      	cpsid	i
}
 80018ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin); //w razie wystąpienia błędu mruga dioda LD3 na płytce Nucleo
 80018bc:	2108      	movs	r1, #8
 80018be:	4804      	ldr	r0, [pc, #16]	; (80018d0 <Error_Handler+0x1c>)
 80018c0:	f002 f830 	bl	8003924 <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 80018c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018c8:	f000 fad2 	bl	8001e70 <HAL_Delay>
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin); //w razie wystąpienia błędu mruga dioda LD3 na płytce Nucleo
 80018cc:	e7f6      	b.n	80018bc <Error_Handler+0x8>
 80018ce:	bf00      	nop
 80018d0:	48000400 	.word	0x48000400

080018d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018da:	4b0f      	ldr	r3, [pc, #60]	; (8001918 <HAL_MspInit+0x44>)
 80018dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018de:	4a0e      	ldr	r2, [pc, #56]	; (8001918 <HAL_MspInit+0x44>)
 80018e0:	f043 0301 	orr.w	r3, r3, #1
 80018e4:	6613      	str	r3, [r2, #96]	; 0x60
 80018e6:	4b0c      	ldr	r3, [pc, #48]	; (8001918 <HAL_MspInit+0x44>)
 80018e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018ea:	f003 0301 	and.w	r3, r3, #1
 80018ee:	607b      	str	r3, [r7, #4]
 80018f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018f2:	4b09      	ldr	r3, [pc, #36]	; (8001918 <HAL_MspInit+0x44>)
 80018f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018f6:	4a08      	ldr	r2, [pc, #32]	; (8001918 <HAL_MspInit+0x44>)
 80018f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018fc:	6593      	str	r3, [r2, #88]	; 0x58
 80018fe:	4b06      	ldr	r3, [pc, #24]	; (8001918 <HAL_MspInit+0x44>)
 8001900:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001902:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001906:	603b      	str	r3, [r7, #0]
 8001908:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800190a:	bf00      	nop
 800190c:	370c      	adds	r7, #12
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	40021000 	.word	0x40021000

0800191c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001920:	e7fe      	b.n	8001920 <NMI_Handler+0x4>

08001922 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001922:	b480      	push	{r7}
 8001924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001926:	e7fe      	b.n	8001926 <HardFault_Handler+0x4>

08001928 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800192c:	e7fe      	b.n	800192c <MemManage_Handler+0x4>

0800192e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800192e:	b480      	push	{r7}
 8001930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001932:	e7fe      	b.n	8001932 <BusFault_Handler+0x4>

08001934 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001938:	e7fe      	b.n	8001938 <UsageFault_Handler+0x4>

0800193a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800193a:	b480      	push	{r7}
 800193c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800193e:	bf00      	nop
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr

08001948 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800194c:	bf00      	nop
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr

08001956 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001956:	b480      	push	{r7}
 8001958:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800195a:	bf00      	nop
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr

08001964 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001968:	f000 fa62 	bl	8001e30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800196c:	bf00      	nop
 800196e:	bd80      	pop	{r7, pc}

08001970 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001974:	4802      	ldr	r0, [pc, #8]	; (8001980 <DMA1_Channel1_IRQHandler+0x10>)
 8001976:	f001 fd73 	bl	8003460 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800197a:	bf00      	nop
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	2000041c 	.word	0x2000041c

08001984 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001988:	2040      	movs	r0, #64	; 0x40
 800198a:	f001 ffe5 	bl	8003958 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800198e:	bf00      	nop
 8001990:	bd80      	pop	{r7, pc}
	...

08001994 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001998:	4802      	ldr	r0, [pc, #8]	; (80019a4 <TIM6_DAC_IRQHandler+0x10>)
 800199a:	f005 fcbf 	bl	800731c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800199e:	bf00      	nop
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	20000818 	.word	0x20000818

080019a8 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80019ac:	4802      	ldr	r0, [pc, #8]	; (80019b8 <USB_IRQHandler+0x10>)
 80019ae:	f002 fe90 	bl	80046d2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 80019b2:	bf00      	nop
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	20000dd8 	.word	0x20000dd8

080019bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
	return 1;
 80019c0:	2301      	movs	r3, #1
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <_kill>:

int _kill(int pid, int sig)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80019d6:	f00a fa71 	bl	800bebc <__errno>
 80019da:	4603      	mov	r3, r0
 80019dc:	2216      	movs	r2, #22
 80019de:	601a      	str	r2, [r3, #0]
	return -1;
 80019e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	3708      	adds	r7, #8
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}

080019ec <_exit>:

void _exit (int status)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80019f4:	f04f 31ff 	mov.w	r1, #4294967295
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f7ff ffe7 	bl	80019cc <_kill>
	while (1) {}		/* Make sure we hang here */
 80019fe:	e7fe      	b.n	80019fe <_exit+0x12>

08001a00 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b086      	sub	sp, #24
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	60f8      	str	r0, [r7, #12]
 8001a08:	60b9      	str	r1, [r7, #8]
 8001a0a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	617b      	str	r3, [r7, #20]
 8001a10:	e00a      	b.n	8001a28 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001a12:	f3af 8000 	nop.w
 8001a16:	4601      	mov	r1, r0
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	1c5a      	adds	r2, r3, #1
 8001a1c:	60ba      	str	r2, [r7, #8]
 8001a1e:	b2ca      	uxtb	r2, r1
 8001a20:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	3301      	adds	r3, #1
 8001a26:	617b      	str	r3, [r7, #20]
 8001a28:	697a      	ldr	r2, [r7, #20]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	dbf0      	blt.n	8001a12 <_read+0x12>
	}

return len;
 8001a30:	687b      	ldr	r3, [r7, #4]
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3718      	adds	r7, #24
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}

08001a3a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	b086      	sub	sp, #24
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	60f8      	str	r0, [r7, #12]
 8001a42:	60b9      	str	r1, [r7, #8]
 8001a44:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a46:	2300      	movs	r3, #0
 8001a48:	617b      	str	r3, [r7, #20]
 8001a4a:	e009      	b.n	8001a60 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	1c5a      	adds	r2, r3, #1
 8001a50:	60ba      	str	r2, [r7, #8]
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	4618      	mov	r0, r3
 8001a56:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	617b      	str	r3, [r7, #20]
 8001a60:	697a      	ldr	r2, [r7, #20]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	429a      	cmp	r2, r3
 8001a66:	dbf1      	blt.n	8001a4c <_write+0x12>
	}
	return len;
 8001a68:	687b      	ldr	r3, [r7, #4]
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3718      	adds	r7, #24
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}

08001a72 <_close>:

int _close(int file)
{
 8001a72:	b480      	push	{r7}
 8001a74:	b083      	sub	sp, #12
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	6078      	str	r0, [r7, #4]
	return -1;
 8001a7a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	370c      	adds	r7, #12
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr

08001a8a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a8a:	b480      	push	{r7}
 8001a8c:	b083      	sub	sp, #12
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	6078      	str	r0, [r7, #4]
 8001a92:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a9a:	605a      	str	r2, [r3, #4]
	return 0;
 8001a9c:	2300      	movs	r3, #0
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	370c      	adds	r7, #12
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr

08001aaa <_isatty>:

int _isatty(int file)
{
 8001aaa:	b480      	push	{r7}
 8001aac:	b083      	sub	sp, #12
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	6078      	str	r0, [r7, #4]
	return 1;
 8001ab2:	2301      	movs	r3, #1
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	370c      	adds	r7, #12
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr

08001ac0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b085      	sub	sp, #20
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	60f8      	str	r0, [r7, #12]
 8001ac8:	60b9      	str	r1, [r7, #8]
 8001aca:	607a      	str	r2, [r7, #4]
	return 0;
 8001acc:	2300      	movs	r3, #0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3714      	adds	r7, #20
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
	...

08001adc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b086      	sub	sp, #24
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ae4:	4a14      	ldr	r2, [pc, #80]	; (8001b38 <_sbrk+0x5c>)
 8001ae6:	4b15      	ldr	r3, [pc, #84]	; (8001b3c <_sbrk+0x60>)
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001af0:	4b13      	ldr	r3, [pc, #76]	; (8001b40 <_sbrk+0x64>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d102      	bne.n	8001afe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001af8:	4b11      	ldr	r3, [pc, #68]	; (8001b40 <_sbrk+0x64>)
 8001afa:	4a12      	ldr	r2, [pc, #72]	; (8001b44 <_sbrk+0x68>)
 8001afc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001afe:	4b10      	ldr	r3, [pc, #64]	; (8001b40 <_sbrk+0x64>)
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4413      	add	r3, r2
 8001b06:	693a      	ldr	r2, [r7, #16]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d207      	bcs.n	8001b1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b0c:	f00a f9d6 	bl	800bebc <__errno>
 8001b10:	4603      	mov	r3, r0
 8001b12:	220c      	movs	r2, #12
 8001b14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b16:	f04f 33ff 	mov.w	r3, #4294967295
 8001b1a:	e009      	b.n	8001b30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b1c:	4b08      	ldr	r3, [pc, #32]	; (8001b40 <_sbrk+0x64>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b22:	4b07      	ldr	r3, [pc, #28]	; (8001b40 <_sbrk+0x64>)
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4413      	add	r3, r2
 8001b2a:	4a05      	ldr	r2, [pc, #20]	; (8001b40 <_sbrk+0x64>)
 8001b2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3718      	adds	r7, #24
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	2000c000 	.word	0x2000c000
 8001b3c:	00000400 	.word	0x00000400
 8001b40:	20000394 	.word	0x20000394
 8001b44:	200010e0 	.word	0x200010e0

08001b48 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001b4c:	4b15      	ldr	r3, [pc, #84]	; (8001ba4 <SystemInit+0x5c>)
 8001b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b52:	4a14      	ldr	r2, [pc, #80]	; (8001ba4 <SystemInit+0x5c>)
 8001b54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001b5c:	4b12      	ldr	r3, [pc, #72]	; (8001ba8 <SystemInit+0x60>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a11      	ldr	r2, [pc, #68]	; (8001ba8 <SystemInit+0x60>)
 8001b62:	f043 0301 	orr.w	r3, r3, #1
 8001b66:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001b68:	4b0f      	ldr	r3, [pc, #60]	; (8001ba8 <SystemInit+0x60>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001b6e:	4b0e      	ldr	r3, [pc, #56]	; (8001ba8 <SystemInit+0x60>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a0d      	ldr	r2, [pc, #52]	; (8001ba8 <SystemInit+0x60>)
 8001b74:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001b78:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001b7c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001b7e:	4b0a      	ldr	r3, [pc, #40]	; (8001ba8 <SystemInit+0x60>)
 8001b80:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b84:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001b86:	4b08      	ldr	r3, [pc, #32]	; (8001ba8 <SystemInit+0x60>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a07      	ldr	r2, [pc, #28]	; (8001ba8 <SystemInit+0x60>)
 8001b8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b90:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001b92:	4b05      	ldr	r3, [pc, #20]	; (8001ba8 <SystemInit+0x60>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	619a      	str	r2, [r3, #24]
}
 8001b98:	bf00      	nop
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	e000ed00 	.word	0xe000ed00
 8001ba8:	40021000 	.word	0x40021000

08001bac <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b088      	sub	sp, #32
 8001bb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bb2:	f107 0310 	add.w	r3, r7, #16
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	601a      	str	r2, [r3, #0]
 8001bba:	605a      	str	r2, [r3, #4]
 8001bbc:	609a      	str	r2, [r3, #8]
 8001bbe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bc0:	1d3b      	adds	r3, r7, #4
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	601a      	str	r2, [r3, #0]
 8001bc6:	605a      	str	r2, [r3, #4]
 8001bc8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001bca:	4b20      	ldr	r3, [pc, #128]	; (8001c4c <MX_TIM1_Init+0xa0>)
 8001bcc:	4a20      	ldr	r2, [pc, #128]	; (8001c50 <MX_TIM1_Init+0xa4>)
 8001bce:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 999;
 8001bd0:	4b1e      	ldr	r3, [pc, #120]	; (8001c4c <MX_TIM1_Init+0xa0>)
 8001bd2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001bd6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bd8:	4b1c      	ldr	r3, [pc, #112]	; (8001c4c <MX_TIM1_Init+0xa0>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 143;
 8001bde:	4b1b      	ldr	r3, [pc, #108]	; (8001c4c <MX_TIM1_Init+0xa0>)
 8001be0:	228f      	movs	r2, #143	; 0x8f
 8001be2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001be4:	4b19      	ldr	r3, [pc, #100]	; (8001c4c <MX_TIM1_Init+0xa0>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001bea:	4b18      	ldr	r3, [pc, #96]	; (8001c4c <MX_TIM1_Init+0xa0>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bf0:	4b16      	ldr	r3, [pc, #88]	; (8001c4c <MX_TIM1_Init+0xa0>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001bf6:	4815      	ldr	r0, [pc, #84]	; (8001c4c <MX_TIM1_Init+0xa0>)
 8001bf8:	f005 fa98 	bl	800712c <HAL_TIM_Base_Init>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001c02:	f7ff fe57 	bl	80018b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c0a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001c0c:	f107 0310 	add.w	r3, r7, #16
 8001c10:	4619      	mov	r1, r3
 8001c12:	480e      	ldr	r0, [pc, #56]	; (8001c4c <MX_TIM1_Init+0xa0>)
 8001c14:	f005 fca1 	bl	800755a <HAL_TIM_ConfigClockSource>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001c1e:	f7ff fe49 	bl	80018b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001c22:	2320      	movs	r3, #32
 8001c24:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 8001c26:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001c2a:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c30:	1d3b      	adds	r3, r7, #4
 8001c32:	4619      	mov	r1, r3
 8001c34:	4805      	ldr	r0, [pc, #20]	; (8001c4c <MX_TIM1_Init+0xa0>)
 8001c36:	f005 fe7d 	bl	8007934 <HAL_TIMEx_MasterConfigSynchronization>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001c40:	f7ff fe38 	bl	80018b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001c44:	bf00      	nop
 8001c46:	3720      	adds	r7, #32
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	20000864 	.word	0x20000864
 8001c50:	40012c00 	.word	0x40012c00

08001c54 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c5a:	1d3b      	adds	r3, r7, #4
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	601a      	str	r2, [r3, #0]
 8001c60:	605a      	str	r2, [r3, #4]
 8001c62:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001c64:	4b14      	ldr	r3, [pc, #80]	; (8001cb8 <MX_TIM6_Init+0x64>)
 8001c66:	4a15      	ldr	r2, [pc, #84]	; (8001cbc <MX_TIM6_Init+0x68>)
 8001c68:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 4999;
 8001c6a:	4b13      	ldr	r3, [pc, #76]	; (8001cb8 <MX_TIM6_Init+0x64>)
 8001c6c:	f241 3287 	movw	r2, #4999	; 0x1387
 8001c70:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c72:	4b11      	ldr	r3, [pc, #68]	; (8001cb8 <MX_TIM6_Init+0x64>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 95;
 8001c78:	4b0f      	ldr	r3, [pc, #60]	; (8001cb8 <MX_TIM6_Init+0x64>)
 8001c7a:	225f      	movs	r2, #95	; 0x5f
 8001c7c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c7e:	4b0e      	ldr	r3, [pc, #56]	; (8001cb8 <MX_TIM6_Init+0x64>)
 8001c80:	2280      	movs	r2, #128	; 0x80
 8001c82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001c84:	480c      	ldr	r0, [pc, #48]	; (8001cb8 <MX_TIM6_Init+0x64>)
 8001c86:	f005 fa51 	bl	800712c <HAL_TIM_Base_Init>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001c90:	f7ff fe10 	bl	80018b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c94:	2300      	movs	r3, #0
 8001c96:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001c9c:	1d3b      	adds	r3, r7, #4
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	4805      	ldr	r0, [pc, #20]	; (8001cb8 <MX_TIM6_Init+0x64>)
 8001ca2:	f005 fe47 	bl	8007934 <HAL_TIMEx_MasterConfigSynchronization>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d001      	beq.n	8001cb0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001cac:	f7ff fe02 	bl	80018b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001cb0:	bf00      	nop
 8001cb2:	3710      	adds	r7, #16
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	20000818 	.word	0x20000818
 8001cbc:	40001000 	.word	0x40001000

08001cc0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b084      	sub	sp, #16
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a16      	ldr	r2, [pc, #88]	; (8001d28 <HAL_TIM_Base_MspInit+0x68>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d10c      	bne.n	8001cec <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001cd2:	4b16      	ldr	r3, [pc, #88]	; (8001d2c <HAL_TIM_Base_MspInit+0x6c>)
 8001cd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cd6:	4a15      	ldr	r2, [pc, #84]	; (8001d2c <HAL_TIM_Base_MspInit+0x6c>)
 8001cd8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001cdc:	6613      	str	r3, [r2, #96]	; 0x60
 8001cde:	4b13      	ldr	r3, [pc, #76]	; (8001d2c <HAL_TIM_Base_MspInit+0x6c>)
 8001ce0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ce2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ce6:	60fb      	str	r3, [r7, #12]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001cea:	e018      	b.n	8001d1e <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM6)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a0f      	ldr	r2, [pc, #60]	; (8001d30 <HAL_TIM_Base_MspInit+0x70>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d113      	bne.n	8001d1e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001cf6:	4b0d      	ldr	r3, [pc, #52]	; (8001d2c <HAL_TIM_Base_MspInit+0x6c>)
 8001cf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cfa:	4a0c      	ldr	r2, [pc, #48]	; (8001d2c <HAL_TIM_Base_MspInit+0x6c>)
 8001cfc:	f043 0310 	orr.w	r3, r3, #16
 8001d00:	6593      	str	r3, [r2, #88]	; 0x58
 8001d02:	4b0a      	ldr	r3, [pc, #40]	; (8001d2c <HAL_TIM_Base_MspInit+0x6c>)
 8001d04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d06:	f003 0310 	and.w	r3, r3, #16
 8001d0a:	60bb      	str	r3, [r7, #8]
 8001d0c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001d0e:	2200      	movs	r2, #0
 8001d10:	2100      	movs	r1, #0
 8001d12:	2036      	movs	r0, #54	; 0x36
 8001d14:	f001 fa47 	bl	80031a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001d18:	2036      	movs	r0, #54	; 0x36
 8001d1a:	f001 fa60 	bl	80031de <HAL_NVIC_EnableIRQ>
}
 8001d1e:	bf00      	nop
 8001d20:	3710      	adds	r7, #16
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	40012c00 	.word	0x40012c00
 8001d2c:	40021000 	.word	0x40021000
 8001d30:	40001000 	.word	0x40001000

08001d34 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001d34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d6c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d38:	f7ff ff06 	bl	8001b48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001d3c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001d3e:	e003      	b.n	8001d48 <LoopCopyDataInit>

08001d40 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001d40:	4b0b      	ldr	r3, [pc, #44]	; (8001d70 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001d42:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001d44:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001d46:	3104      	adds	r1, #4

08001d48 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001d48:	480a      	ldr	r0, [pc, #40]	; (8001d74 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001d4a:	4b0b      	ldr	r3, [pc, #44]	; (8001d78 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001d4c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001d4e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001d50:	d3f6      	bcc.n	8001d40 <CopyDataInit>
	ldr	r2, =_sbss
 8001d52:	4a0a      	ldr	r2, [pc, #40]	; (8001d7c <LoopForever+0x12>)
	b	LoopFillZerobss
 8001d54:	e002      	b.n	8001d5c <LoopFillZerobss>

08001d56 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001d56:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001d58:	f842 3b04 	str.w	r3, [r2], #4

08001d5c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001d5c:	4b08      	ldr	r3, [pc, #32]	; (8001d80 <LoopForever+0x16>)
	cmp	r2, r3
 8001d5e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001d60:	d3f9      	bcc.n	8001d56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d62:	f00a f8b1 	bl	800bec8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d66:	f7ff fb8d 	bl	8001484 <main>

08001d6a <LoopForever>:

LoopForever:
    b LoopForever
 8001d6a:	e7fe      	b.n	8001d6a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001d6c:	2000c000 	.word	0x2000c000
	ldr	r3, =_sidata
 8001d70:	0800f634 	.word	0x0800f634
	ldr	r0, =_sdata
 8001d74:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001d78:	2000035c 	.word	0x2000035c
	ldr	r2, =_sbss
 8001d7c:	2000035c 	.word	0x2000035c
	ldr	r3, = _ebss
 8001d80:	200010dc 	.word	0x200010dc

08001d84 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d84:	e7fe      	b.n	8001d84 <ADC1_IRQHandler>

08001d86 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d86:	b580      	push	{r7, lr}
 8001d88:	b082      	sub	sp, #8
 8001d8a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d90:	2003      	movs	r0, #3
 8001d92:	f001 f9fd 	bl	8003190 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d96:	2000      	movs	r0, #0
 8001d98:	f000 f80e 	bl	8001db8 <HAL_InitTick>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d002      	beq.n	8001da8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	71fb      	strb	r3, [r7, #7]
 8001da6:	e001      	b.n	8001dac <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001da8:	f7ff fd94 	bl	80018d4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001dac:	79fb      	ldrb	r3, [r7, #7]
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3708      	adds	r7, #8
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
	...

08001db8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001dc4:	4b17      	ldr	r3, [pc, #92]	; (8001e24 <HAL_InitTick+0x6c>)
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d023      	beq.n	8001e14 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001dcc:	4b16      	ldr	r3, [pc, #88]	; (8001e28 <HAL_InitTick+0x70>)
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	4b14      	ldr	r3, [pc, #80]	; (8001e24 <HAL_InitTick+0x6c>)
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dda:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dde:	fbb2 f3f3 	udiv	r3, r2, r3
 8001de2:	4618      	mov	r0, r3
 8001de4:	f001 fa09 	bl	80031fa <HAL_SYSTICK_Config>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d10f      	bne.n	8001e0e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2b0f      	cmp	r3, #15
 8001df2:	d809      	bhi.n	8001e08 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001df4:	2200      	movs	r2, #0
 8001df6:	6879      	ldr	r1, [r7, #4]
 8001df8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dfc:	f001 f9d3 	bl	80031a6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e00:	4a0a      	ldr	r2, [pc, #40]	; (8001e2c <HAL_InitTick+0x74>)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6013      	str	r3, [r2, #0]
 8001e06:	e007      	b.n	8001e18 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	73fb      	strb	r3, [r7, #15]
 8001e0c:	e004      	b.n	8001e18 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	73fb      	strb	r3, [r7, #15]
 8001e12:	e001      	b.n	8001e18 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3710      	adds	r7, #16
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	2000001c 	.word	0x2000001c
 8001e28:	20000014 	.word	0x20000014
 8001e2c:	20000018 	.word	0x20000018

08001e30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e34:	4b06      	ldr	r3, [pc, #24]	; (8001e50 <HAL_IncTick+0x20>)
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	461a      	mov	r2, r3
 8001e3a:	4b06      	ldr	r3, [pc, #24]	; (8001e54 <HAL_IncTick+0x24>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4413      	add	r3, r2
 8001e40:	4a04      	ldr	r2, [pc, #16]	; (8001e54 <HAL_IncTick+0x24>)
 8001e42:	6013      	str	r3, [r2, #0]
}
 8001e44:	bf00      	nop
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	2000001c 	.word	0x2000001c
 8001e54:	20000904 	.word	0x20000904

08001e58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e5c:	4b03      	ldr	r3, [pc, #12]	; (8001e6c <HAL_GetTick+0x14>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	20000904 	.word	0x20000904

08001e70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b084      	sub	sp, #16
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e78:	f7ff ffee 	bl	8001e58 <HAL_GetTick>
 8001e7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e88:	d005      	beq.n	8001e96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001e8a:	4b0a      	ldr	r3, [pc, #40]	; (8001eb4 <HAL_Delay+0x44>)
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	461a      	mov	r2, r3
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	4413      	add	r3, r2
 8001e94:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e96:	bf00      	nop
 8001e98:	f7ff ffde 	bl	8001e58 <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	68fa      	ldr	r2, [r7, #12]
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d8f7      	bhi.n	8001e98 <HAL_Delay+0x28>
  {
  }
}
 8001ea8:	bf00      	nop
 8001eaa:	bf00      	nop
 8001eac:	3710      	adds	r7, #16
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	2000001c 	.word	0x2000001c

08001eb8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	431a      	orrs	r2, r3
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	609a      	str	r2, [r3, #8]
}
 8001ed2:	bf00      	nop
 8001ed4:	370c      	adds	r7, #12
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr

08001ede <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001ede:	b480      	push	{r7}
 8001ee0:	b083      	sub	sp, #12
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
 8001ee6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	431a      	orrs	r2, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	609a      	str	r2, [r3, #8]
}
 8001ef8:	bf00      	nop
 8001efa:	370c      	adds	r7, #12
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr

08001f04 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b087      	sub	sp, #28
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	60f8      	str	r0, [r7, #12]
 8001f28:	60b9      	str	r1, [r7, #8]
 8001f2a:	607a      	str	r2, [r7, #4]
 8001f2c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	3360      	adds	r3, #96	; 0x60
 8001f32:	461a      	mov	r2, r3
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	4413      	add	r3, r2
 8001f3a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	4b08      	ldr	r3, [pc, #32]	; (8001f64 <LL_ADC_SetOffset+0x44>)
 8001f42:	4013      	ands	r3, r2
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001f4a:	683a      	ldr	r2, [r7, #0]
 8001f4c:	430a      	orrs	r2, r1
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001f58:	bf00      	nop
 8001f5a:	371c      	adds	r7, #28
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr
 8001f64:	03fff000 	.word	0x03fff000

08001f68 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b085      	sub	sp, #20
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	3360      	adds	r3, #96	; 0x60
 8001f76:	461a      	mov	r2, r3
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	4413      	add	r3, r2
 8001f7e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3714      	adds	r7, #20
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr

08001f94 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b087      	sub	sp, #28
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	60f8      	str	r0, [r7, #12]
 8001f9c:	60b9      	str	r1, [r7, #8]
 8001f9e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	3360      	adds	r3, #96	; 0x60
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	4413      	add	r3, r2
 8001fac:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	431a      	orrs	r2, r3
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001fbe:	bf00      	nop
 8001fc0:	371c      	adds	r7, #28
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr

08001fca <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001fca:	b480      	push	{r7}
 8001fcc:	b083      	sub	sp, #12
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	68db      	ldr	r3, [r3, #12]
 8001fd6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d101      	bne.n	8001fe2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e000      	b.n	8001fe4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001fe2:	2300      	movs	r3, #0
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr

08001ff0 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b087      	sub	sp, #28
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	60f8      	str	r0, [r7, #12]
 8001ff8:	60b9      	str	r1, [r7, #8]
 8001ffa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	3330      	adds	r3, #48	; 0x30
 8002000:	461a      	mov	r2, r3
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	0a1b      	lsrs	r3, r3, #8
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	f003 030c 	and.w	r3, r3, #12
 800200c:	4413      	add	r3, r2
 800200e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	f003 031f 	and.w	r3, r3, #31
 800201a:	211f      	movs	r1, #31
 800201c:	fa01 f303 	lsl.w	r3, r1, r3
 8002020:	43db      	mvns	r3, r3
 8002022:	401a      	ands	r2, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	0e9b      	lsrs	r3, r3, #26
 8002028:	f003 011f 	and.w	r1, r3, #31
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	f003 031f 	and.w	r3, r3, #31
 8002032:	fa01 f303 	lsl.w	r3, r1, r3
 8002036:	431a      	orrs	r2, r3
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800203c:	bf00      	nop
 800203e:	371c      	adds	r7, #28
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr

08002048 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002048:	b480      	push	{r7}
 800204a:	b087      	sub	sp, #28
 800204c:	af00      	add	r7, sp, #0
 800204e:	60f8      	str	r0, [r7, #12]
 8002050:	60b9      	str	r1, [r7, #8]
 8002052:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	3314      	adds	r3, #20
 8002058:	461a      	mov	r2, r3
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	0e5b      	lsrs	r3, r3, #25
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	f003 0304 	and.w	r3, r3, #4
 8002064:	4413      	add	r3, r2
 8002066:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	0d1b      	lsrs	r3, r3, #20
 8002070:	f003 031f 	and.w	r3, r3, #31
 8002074:	2107      	movs	r1, #7
 8002076:	fa01 f303 	lsl.w	r3, r1, r3
 800207a:	43db      	mvns	r3, r3
 800207c:	401a      	ands	r2, r3
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	0d1b      	lsrs	r3, r3, #20
 8002082:	f003 031f 	and.w	r3, r3, #31
 8002086:	6879      	ldr	r1, [r7, #4]
 8002088:	fa01 f303 	lsl.w	r3, r1, r3
 800208c:	431a      	orrs	r2, r3
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002092:	bf00      	nop
 8002094:	371c      	adds	r7, #28
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
	...

080020a0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b085      	sub	sp, #20
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	60f8      	str	r0, [r7, #12]
 80020a8:	60b9      	str	r1, [r7, #8]
 80020aa:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020b8:	43db      	mvns	r3, r3
 80020ba:	401a      	ands	r2, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	f003 0318 	and.w	r3, r3, #24
 80020c2:	4908      	ldr	r1, [pc, #32]	; (80020e4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80020c4:	40d9      	lsrs	r1, r3
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	400b      	ands	r3, r1
 80020ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020ce:	431a      	orrs	r2, r3
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80020d6:	bf00      	nop
 80020d8:	3714      	adds	r7, #20
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	0007ffff 	.word	0x0007ffff

080020e8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80020f8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80020fc:	687a      	ldr	r2, [r7, #4]
 80020fe:	6093      	str	r3, [r2, #8]
}
 8002100:	bf00      	nop
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr

0800210c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800211c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002120:	d101      	bne.n	8002126 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002122:	2301      	movs	r3, #1
 8002124:	e000      	b.n	8002128 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002126:	2300      	movs	r3, #0
}
 8002128:	4618      	mov	r0, r3
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002144:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002148:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002150:	bf00      	nop
 8002152:	370c      	adds	r7, #12
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800216c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002170:	d101      	bne.n	8002176 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002172:	2301      	movs	r3, #1
 8002174:	e000      	b.n	8002178 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002176:	2300      	movs	r3, #0
}
 8002178:	4618      	mov	r0, r3
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr

08002184 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002194:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002198:	f043 0201 	orr.w	r2, r3, #1
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80021a0:	bf00      	nop
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr

080021ac <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	f003 0301 	and.w	r3, r3, #1
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d101      	bne.n	80021c4 <LL_ADC_IsEnabled+0x18>
 80021c0:	2301      	movs	r3, #1
 80021c2:	e000      	b.n	80021c6 <LL_ADC_IsEnabled+0x1a>
 80021c4:	2300      	movs	r3, #0
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	370c      	adds	r7, #12
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr

080021d2 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80021d2:	b480      	push	{r7}
 80021d4:	b083      	sub	sp, #12
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80021e2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80021e6:	f043 0204 	orr.w	r2, r3, #4
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80021ee:	bf00      	nop
 80021f0:	370c      	adds	r7, #12
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr

080021fa <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80021fa:	b480      	push	{r7}
 80021fc:	b083      	sub	sp, #12
 80021fe:	af00      	add	r7, sp, #0
 8002200:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	f003 0304 	and.w	r3, r3, #4
 800220a:	2b04      	cmp	r3, #4
 800220c:	d101      	bne.n	8002212 <LL_ADC_REG_IsConversionOngoing+0x18>
 800220e:	2301      	movs	r3, #1
 8002210:	e000      	b.n	8002214 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002212:	2300      	movs	r3, #0
}
 8002214:	4618      	mov	r0, r3
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr

08002220 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	f003 0308 	and.w	r3, r3, #8
 8002230:	2b08      	cmp	r3, #8
 8002232:	d101      	bne.n	8002238 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002234:	2301      	movs	r3, #1
 8002236:	e000      	b.n	800223a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002238:	2300      	movs	r3, #0
}
 800223a:	4618      	mov	r0, r3
 800223c:	370c      	adds	r7, #12
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
	...

08002248 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b088      	sub	sp, #32
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002250:	2300      	movs	r3, #0
 8002252:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002254:	2300      	movs	r3, #0
 8002256:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d101      	bne.n	8002262 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e12c      	b.n	80024bc <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	691b      	ldr	r3, [r3, #16]
 8002266:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800226c:	2b00      	cmp	r3, #0
 800226e:	d109      	bne.n	8002284 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f7fe fd4f 	bl	8000d14 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2200      	movs	r2, #0
 800227a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2200      	movs	r2, #0
 8002280:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4618      	mov	r0, r3
 800228a:	f7ff ff3f 	bl	800210c <LL_ADC_IsDeepPowerDownEnabled>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d004      	beq.n	800229e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4618      	mov	r0, r3
 800229a:	f7ff ff25 	bl	80020e8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4618      	mov	r0, r3
 80022a4:	f7ff ff5a 	bl	800215c <LL_ADC_IsInternalRegulatorEnabled>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d115      	bne.n	80022da <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7ff ff3e 	bl	8002134 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80022b8:	4b82      	ldr	r3, [pc, #520]	; (80024c4 <HAL_ADC_Init+0x27c>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	099b      	lsrs	r3, r3, #6
 80022be:	4a82      	ldr	r2, [pc, #520]	; (80024c8 <HAL_ADC_Init+0x280>)
 80022c0:	fba2 2303 	umull	r2, r3, r2, r3
 80022c4:	099b      	lsrs	r3, r3, #6
 80022c6:	3301      	adds	r3, #1
 80022c8:	005b      	lsls	r3, r3, #1
 80022ca:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80022cc:	e002      	b.n	80022d4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	3b01      	subs	r3, #1
 80022d2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d1f9      	bne.n	80022ce <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4618      	mov	r0, r3
 80022e0:	f7ff ff3c 	bl	800215c <LL_ADC_IsInternalRegulatorEnabled>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d10d      	bne.n	8002306 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022ee:	f043 0210 	orr.w	r2, r3, #16
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022fa:	f043 0201 	orr.w	r2, r3, #1
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4618      	mov	r0, r3
 800230c:	f7ff ff75 	bl	80021fa <LL_ADC_REG_IsConversionOngoing>
 8002310:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002316:	f003 0310 	and.w	r3, r3, #16
 800231a:	2b00      	cmp	r3, #0
 800231c:	f040 80c5 	bne.w	80024aa <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	2b00      	cmp	r3, #0
 8002324:	f040 80c1 	bne.w	80024aa <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800232c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002330:	f043 0202 	orr.w	r2, r3, #2
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4618      	mov	r0, r3
 800233e:	f7ff ff35 	bl	80021ac <LL_ADC_IsEnabled>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d10b      	bne.n	8002360 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002348:	4860      	ldr	r0, [pc, #384]	; (80024cc <HAL_ADC_Init+0x284>)
 800234a:	f7ff ff2f 	bl	80021ac <LL_ADC_IsEnabled>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d105      	bne.n	8002360 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	4619      	mov	r1, r3
 800235a:	485d      	ldr	r0, [pc, #372]	; (80024d0 <HAL_ADC_Init+0x288>)
 800235c:	f7ff fdac 	bl	8001eb8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	7e5b      	ldrb	r3, [r3, #25]
 8002364:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800236a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002370:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002376:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800237e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002380:	4313      	orrs	r3, r2
 8002382:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	f893 3020 	ldrb.w	r3, [r3, #32]
 800238a:	2b01      	cmp	r3, #1
 800238c:	d106      	bne.n	800239c <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002392:	3b01      	subs	r3, #1
 8002394:	045b      	lsls	r3, r3, #17
 8002396:	69ba      	ldr	r2, [r7, #24]
 8002398:	4313      	orrs	r3, r2
 800239a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d009      	beq.n	80023b8 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023a8:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023b0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80023b2:	69ba      	ldr	r2, [r7, #24]
 80023b4:	4313      	orrs	r3, r2
 80023b6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	68da      	ldr	r2, [r3, #12]
 80023be:	4b45      	ldr	r3, [pc, #276]	; (80024d4 <HAL_ADC_Init+0x28c>)
 80023c0:	4013      	ands	r3, r2
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	6812      	ldr	r2, [r2, #0]
 80023c6:	69b9      	ldr	r1, [r7, #24]
 80023c8:	430b      	orrs	r3, r1
 80023ca:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4618      	mov	r0, r3
 80023d2:	f7ff ff12 	bl	80021fa <LL_ADC_REG_IsConversionOngoing>
 80023d6:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4618      	mov	r0, r3
 80023de:	f7ff ff1f 	bl	8002220 <LL_ADC_INJ_IsConversionOngoing>
 80023e2:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d13d      	bne.n	8002466 <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d13a      	bne.n	8002466 <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80023f4:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80023fc:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80023fe:	4313      	orrs	r3, r2
 8002400:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800240c:	f023 0302 	bic.w	r3, r3, #2
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	6812      	ldr	r2, [r2, #0]
 8002414:	69b9      	ldr	r1, [r7, #24]
 8002416:	430b      	orrs	r3, r1
 8002418:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002420:	2b01      	cmp	r3, #1
 8002422:	d118      	bne.n	8002456 <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	691b      	ldr	r3, [r3, #16]
 800242a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800242e:	f023 0304 	bic.w	r3, r3, #4
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800243a:	4311      	orrs	r1, r2
 800243c:	687a      	ldr	r2, [r7, #4]
 800243e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002440:	4311      	orrs	r1, r2
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002446:	430a      	orrs	r2, r1
 8002448:	431a      	orrs	r2, r3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f042 0201 	orr.w	r2, r2, #1
 8002452:	611a      	str	r2, [r3, #16]
 8002454:	e007      	b.n	8002466 <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	691a      	ldr	r2, [r3, #16]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f022 0201 	bic.w	r2, r2, #1
 8002464:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	691b      	ldr	r3, [r3, #16]
 800246a:	2b01      	cmp	r3, #1
 800246c:	d10c      	bne.n	8002488 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002474:	f023 010f 	bic.w	r1, r3, #15
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	69db      	ldr	r3, [r3, #28]
 800247c:	1e5a      	subs	r2, r3, #1
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	430a      	orrs	r2, r1
 8002484:	631a      	str	r2, [r3, #48]	; 0x30
 8002486:	e007      	b.n	8002498 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f022 020f 	bic.w	r2, r2, #15
 8002496:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800249c:	f023 0303 	bic.w	r3, r3, #3
 80024a0:	f043 0201 	orr.w	r2, r3, #1
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	655a      	str	r2, [r3, #84]	; 0x54
 80024a8:	e007      	b.n	80024ba <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024ae:	f043 0210 	orr.w	r2, r3, #16
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80024ba:	7ffb      	ldrb	r3, [r7, #31]
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3720      	adds	r7, #32
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	20000014 	.word	0x20000014
 80024c8:	053e2d63 	.word	0x053e2d63
 80024cc:	50040000 	.word	0x50040000
 80024d0:	50040300 	.word	0x50040300
 80024d4:	fff0c007 	.word	0xfff0c007

080024d8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b086      	sub	sp, #24
 80024dc:	af00      	add	r7, sp, #0
 80024de:	60f8      	str	r0, [r7, #12]
 80024e0:	60b9      	str	r1, [r7, #8]
 80024e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4618      	mov	r0, r3
 80024ea:	f7ff fe86 	bl	80021fa <LL_ADC_REG_IsConversionOngoing>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d167      	bne.n	80025c4 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d101      	bne.n	8002502 <HAL_ADC_Start_DMA+0x2a>
 80024fe:	2302      	movs	r3, #2
 8002500:	e063      	b.n	80025ca <HAL_ADC_Start_DMA+0xf2>
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2201      	movs	r2, #1
 8002506:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800250a:	68f8      	ldr	r0, [r7, #12]
 800250c:	f000 fc5c 	bl	8002dc8 <ADC_Enable>
 8002510:	4603      	mov	r3, r0
 8002512:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002514:	7dfb      	ldrb	r3, [r7, #23]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d14f      	bne.n	80025ba <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800251e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002522:	f023 0301 	bic.w	r3, r3, #1
 8002526:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002532:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d006      	beq.n	8002548 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800253e:	f023 0206 	bic.w	r2, r3, #6
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	659a      	str	r2, [r3, #88]	; 0x58
 8002546:	e002      	b.n	800254e <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2200      	movs	r2, #0
 800254c:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002552:	4a20      	ldr	r2, [pc, #128]	; (80025d4 <HAL_ADC_Start_DMA+0xfc>)
 8002554:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800255a:	4a1f      	ldr	r2, [pc, #124]	; (80025d8 <HAL_ADC_Start_DMA+0x100>)
 800255c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002562:	4a1e      	ldr	r2, [pc, #120]	; (80025dc <HAL_ADC_Start_DMA+0x104>)
 8002564:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	221c      	movs	r2, #28
 800256c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2200      	movs	r2, #0
 8002572:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	685a      	ldr	r2, [r3, #4]
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f042 0210 	orr.w	r2, r2, #16
 8002584:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	68da      	ldr	r2, [r3, #12]
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f042 0201 	orr.w	r2, r2, #1
 8002594:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	3340      	adds	r3, #64	; 0x40
 80025a0:	4619      	mov	r1, r3
 80025a2:	68ba      	ldr	r2, [r7, #8]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f000 fefb 	bl	80033a0 <HAL_DMA_Start_IT>
 80025aa:	4603      	mov	r3, r0
 80025ac:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4618      	mov	r0, r3
 80025b4:	f7ff fe0d 	bl	80021d2 <LL_ADC_REG_StartConversion>
 80025b8:	e006      	b.n	80025c8 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2200      	movs	r2, #0
 80025be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80025c2:	e001      	b.n	80025c8 <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80025c4:	2302      	movs	r3, #2
 80025c6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80025c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3718      	adds	r7, #24
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	08002e8d 	.word	0x08002e8d
 80025d8:	08002f65 	.word	0x08002f65
 80025dc:	08002f81 	.word	0x08002f81

080025e0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80025e8:	bf00      	nop
 80025ea:	370c      	adds	r7, #12
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr

080025f4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80025fc:	bf00      	nop
 80025fe:	370c      	adds	r7, #12
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr

08002608 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b0b6      	sub	sp, #216	; 0xd8
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002612:	2300      	movs	r3, #0
 8002614:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002618:	2300      	movs	r3, #0
 800261a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002622:	2b01      	cmp	r3, #1
 8002624:	d101      	bne.n	800262a <HAL_ADC_ConfigChannel+0x22>
 8002626:	2302      	movs	r3, #2
 8002628:	e3b9      	b.n	8002d9e <HAL_ADC_ConfigChannel+0x796>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2201      	movs	r2, #1
 800262e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4618      	mov	r0, r3
 8002638:	f7ff fddf 	bl	80021fa <LL_ADC_REG_IsConversionOngoing>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	f040 839e 	bne.w	8002d80 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	2b05      	cmp	r3, #5
 800264a:	d824      	bhi.n	8002696 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	3b02      	subs	r3, #2
 8002652:	2b03      	cmp	r3, #3
 8002654:	d81b      	bhi.n	800268e <HAL_ADC_ConfigChannel+0x86>
 8002656:	a201      	add	r2, pc, #4	; (adr r2, 800265c <HAL_ADC_ConfigChannel+0x54>)
 8002658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800265c:	0800266d 	.word	0x0800266d
 8002660:	08002675 	.word	0x08002675
 8002664:	0800267d 	.word	0x0800267d
 8002668:	08002685 	.word	0x08002685
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	220c      	movs	r2, #12
 8002670:	605a      	str	r2, [r3, #4]
          break;
 8002672:	e011      	b.n	8002698 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	2212      	movs	r2, #18
 8002678:	605a      	str	r2, [r3, #4]
          break;
 800267a:	e00d      	b.n	8002698 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	2218      	movs	r2, #24
 8002680:	605a      	str	r2, [r3, #4]
          break;
 8002682:	e009      	b.n	8002698 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	f44f 7280 	mov.w	r2, #256	; 0x100
 800268a:	605a      	str	r2, [r3, #4]
          break;
 800268c:	e004      	b.n	8002698 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	2206      	movs	r2, #6
 8002692:	605a      	str	r2, [r3, #4]
          break;
 8002694:	e000      	b.n	8002698 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002696:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6818      	ldr	r0, [r3, #0]
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	6859      	ldr	r1, [r3, #4]
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	461a      	mov	r2, r3
 80026a6:	f7ff fca3 	bl	8001ff0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7ff fda3 	bl	80021fa <LL_ADC_REG_IsConversionOngoing>
 80026b4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4618      	mov	r0, r3
 80026be:	f7ff fdaf 	bl	8002220 <LL_ADC_INJ_IsConversionOngoing>
 80026c2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80026c6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	f040 81a6 	bne.w	8002a1c <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80026d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	f040 81a1 	bne.w	8002a1c <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6818      	ldr	r0, [r3, #0]
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	6819      	ldr	r1, [r3, #0]
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	461a      	mov	r2, r3
 80026e8:	f7ff fcae 	bl	8002048 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	695a      	ldr	r2, [r3, #20]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	68db      	ldr	r3, [r3, #12]
 80026f6:	08db      	lsrs	r3, r3, #3
 80026f8:	f003 0303 	and.w	r3, r3, #3
 80026fc:	005b      	lsls	r3, r3, #1
 80026fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002702:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	691b      	ldr	r3, [r3, #16]
 800270a:	2b04      	cmp	r3, #4
 800270c:	d00a      	beq.n	8002724 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6818      	ldr	r0, [r3, #0]
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	6919      	ldr	r1, [r3, #16]
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800271e:	f7ff fbff 	bl	8001f20 <LL_ADC_SetOffset>
 8002722:	e17b      	b.n	8002a1c <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	2100      	movs	r1, #0
 800272a:	4618      	mov	r0, r3
 800272c:	f7ff fc1c 	bl	8001f68 <LL_ADC_GetOffsetChannel>
 8002730:	4603      	mov	r3, r0
 8002732:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002736:	2b00      	cmp	r3, #0
 8002738:	d10a      	bne.n	8002750 <HAL_ADC_ConfigChannel+0x148>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	2100      	movs	r1, #0
 8002740:	4618      	mov	r0, r3
 8002742:	f7ff fc11 	bl	8001f68 <LL_ADC_GetOffsetChannel>
 8002746:	4603      	mov	r3, r0
 8002748:	0e9b      	lsrs	r3, r3, #26
 800274a:	f003 021f 	and.w	r2, r3, #31
 800274e:	e01e      	b.n	800278e <HAL_ADC_ConfigChannel+0x186>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	2100      	movs	r1, #0
 8002756:	4618      	mov	r0, r3
 8002758:	f7ff fc06 	bl	8001f68 <LL_ADC_GetOffsetChannel>
 800275c:	4603      	mov	r3, r0
 800275e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002762:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002766:	fa93 f3a3 	rbit	r3, r3
 800276a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800276e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002772:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002776:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d101      	bne.n	8002782 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 800277e:	2320      	movs	r3, #32
 8002780:	e004      	b.n	800278c <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8002782:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002786:	fab3 f383 	clz	r3, r3
 800278a:	b2db      	uxtb	r3, r3
 800278c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002796:	2b00      	cmp	r3, #0
 8002798:	d105      	bne.n	80027a6 <HAL_ADC_ConfigChannel+0x19e>
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	0e9b      	lsrs	r3, r3, #26
 80027a0:	f003 031f 	and.w	r3, r3, #31
 80027a4:	e018      	b.n	80027d8 <HAL_ADC_ConfigChannel+0x1d0>
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ae:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80027b2:	fa93 f3a3 	rbit	r3, r3
 80027b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80027ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80027be:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80027c2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d101      	bne.n	80027ce <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 80027ca:	2320      	movs	r3, #32
 80027cc:	e004      	b.n	80027d8 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80027ce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80027d2:	fab3 f383 	clz	r3, r3
 80027d6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80027d8:	429a      	cmp	r2, r3
 80027da:	d106      	bne.n	80027ea <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	2200      	movs	r2, #0
 80027e2:	2100      	movs	r1, #0
 80027e4:	4618      	mov	r0, r3
 80027e6:	f7ff fbd5 	bl	8001f94 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	2101      	movs	r1, #1
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7ff fbb9 	bl	8001f68 <LL_ADC_GetOffsetChannel>
 80027f6:	4603      	mov	r3, r0
 80027f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d10a      	bne.n	8002816 <HAL_ADC_ConfigChannel+0x20e>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	2101      	movs	r1, #1
 8002806:	4618      	mov	r0, r3
 8002808:	f7ff fbae 	bl	8001f68 <LL_ADC_GetOffsetChannel>
 800280c:	4603      	mov	r3, r0
 800280e:	0e9b      	lsrs	r3, r3, #26
 8002810:	f003 021f 	and.w	r2, r3, #31
 8002814:	e01e      	b.n	8002854 <HAL_ADC_ConfigChannel+0x24c>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	2101      	movs	r1, #1
 800281c:	4618      	mov	r0, r3
 800281e:	f7ff fba3 	bl	8001f68 <LL_ADC_GetOffsetChannel>
 8002822:	4603      	mov	r3, r0
 8002824:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002828:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800282c:	fa93 f3a3 	rbit	r3, r3
 8002830:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002834:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002838:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800283c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002840:	2b00      	cmp	r3, #0
 8002842:	d101      	bne.n	8002848 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8002844:	2320      	movs	r3, #32
 8002846:	e004      	b.n	8002852 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8002848:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800284c:	fab3 f383 	clz	r3, r3
 8002850:	b2db      	uxtb	r3, r3
 8002852:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800285c:	2b00      	cmp	r3, #0
 800285e:	d105      	bne.n	800286c <HAL_ADC_ConfigChannel+0x264>
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	0e9b      	lsrs	r3, r3, #26
 8002866:	f003 031f 	and.w	r3, r3, #31
 800286a:	e018      	b.n	800289e <HAL_ADC_ConfigChannel+0x296>
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002874:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002878:	fa93 f3a3 	rbit	r3, r3
 800287c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002880:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002884:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002888:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800288c:	2b00      	cmp	r3, #0
 800288e:	d101      	bne.n	8002894 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8002890:	2320      	movs	r3, #32
 8002892:	e004      	b.n	800289e <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8002894:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002898:	fab3 f383 	clz	r3, r3
 800289c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800289e:	429a      	cmp	r2, r3
 80028a0:	d106      	bne.n	80028b0 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	2200      	movs	r2, #0
 80028a8:	2101      	movs	r1, #1
 80028aa:	4618      	mov	r0, r3
 80028ac:	f7ff fb72 	bl	8001f94 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	2102      	movs	r1, #2
 80028b6:	4618      	mov	r0, r3
 80028b8:	f7ff fb56 	bl	8001f68 <LL_ADC_GetOffsetChannel>
 80028bc:	4603      	mov	r3, r0
 80028be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d10a      	bne.n	80028dc <HAL_ADC_ConfigChannel+0x2d4>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	2102      	movs	r1, #2
 80028cc:	4618      	mov	r0, r3
 80028ce:	f7ff fb4b 	bl	8001f68 <LL_ADC_GetOffsetChannel>
 80028d2:	4603      	mov	r3, r0
 80028d4:	0e9b      	lsrs	r3, r3, #26
 80028d6:	f003 021f 	and.w	r2, r3, #31
 80028da:	e01e      	b.n	800291a <HAL_ADC_ConfigChannel+0x312>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	2102      	movs	r1, #2
 80028e2:	4618      	mov	r0, r3
 80028e4:	f7ff fb40 	bl	8001f68 <LL_ADC_GetOffsetChannel>
 80028e8:	4603      	mov	r3, r0
 80028ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80028f2:	fa93 f3a3 	rbit	r3, r3
 80028f6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80028fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80028fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002902:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002906:	2b00      	cmp	r3, #0
 8002908:	d101      	bne.n	800290e <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 800290a:	2320      	movs	r3, #32
 800290c:	e004      	b.n	8002918 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800290e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002912:	fab3 f383 	clz	r3, r3
 8002916:	b2db      	uxtb	r3, r3
 8002918:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002922:	2b00      	cmp	r3, #0
 8002924:	d105      	bne.n	8002932 <HAL_ADC_ConfigChannel+0x32a>
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	0e9b      	lsrs	r3, r3, #26
 800292c:	f003 031f 	and.w	r3, r3, #31
 8002930:	e016      	b.n	8002960 <HAL_ADC_ConfigChannel+0x358>
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800293a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800293e:	fa93 f3a3 	rbit	r3, r3
 8002942:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002944:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002946:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800294a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800294e:	2b00      	cmp	r3, #0
 8002950:	d101      	bne.n	8002956 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8002952:	2320      	movs	r3, #32
 8002954:	e004      	b.n	8002960 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8002956:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800295a:	fab3 f383 	clz	r3, r3
 800295e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002960:	429a      	cmp	r2, r3
 8002962:	d106      	bne.n	8002972 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	2200      	movs	r2, #0
 800296a:	2102      	movs	r1, #2
 800296c:	4618      	mov	r0, r3
 800296e:	f7ff fb11 	bl	8001f94 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	2103      	movs	r1, #3
 8002978:	4618      	mov	r0, r3
 800297a:	f7ff faf5 	bl	8001f68 <LL_ADC_GetOffsetChannel>
 800297e:	4603      	mov	r3, r0
 8002980:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002984:	2b00      	cmp	r3, #0
 8002986:	d10a      	bne.n	800299e <HAL_ADC_ConfigChannel+0x396>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2103      	movs	r1, #3
 800298e:	4618      	mov	r0, r3
 8002990:	f7ff faea 	bl	8001f68 <LL_ADC_GetOffsetChannel>
 8002994:	4603      	mov	r3, r0
 8002996:	0e9b      	lsrs	r3, r3, #26
 8002998:	f003 021f 	and.w	r2, r3, #31
 800299c:	e017      	b.n	80029ce <HAL_ADC_ConfigChannel+0x3c6>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	2103      	movs	r1, #3
 80029a4:	4618      	mov	r0, r3
 80029a6:	f7ff fadf 	bl	8001f68 <LL_ADC_GetOffsetChannel>
 80029aa:	4603      	mov	r3, r0
 80029ac:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029b0:	fa93 f3a3 	rbit	r3, r3
 80029b4:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80029b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029b8:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80029ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d101      	bne.n	80029c4 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 80029c0:	2320      	movs	r3, #32
 80029c2:	e003      	b.n	80029cc <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 80029c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80029c6:	fab3 f383 	clz	r3, r3
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d105      	bne.n	80029e6 <HAL_ADC_ConfigChannel+0x3de>
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	0e9b      	lsrs	r3, r3, #26
 80029e0:	f003 031f 	and.w	r3, r3, #31
 80029e4:	e011      	b.n	8002a0a <HAL_ADC_ConfigChannel+0x402>
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80029ee:	fa93 f3a3 	rbit	r3, r3
 80029f2:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80029f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80029f6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80029f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d101      	bne.n	8002a02 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 80029fe:	2320      	movs	r3, #32
 8002a00:	e003      	b.n	8002a0a <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8002a02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a04:	fab3 f383 	clz	r3, r3
 8002a08:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d106      	bne.n	8002a1c <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2200      	movs	r2, #0
 8002a14:	2103      	movs	r1, #3
 8002a16:	4618      	mov	r0, r3
 8002a18:	f7ff fabc 	bl	8001f94 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4618      	mov	r0, r3
 8002a22:	f7ff fbc3 	bl	80021ac <LL_ADC_IsEnabled>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	f040 813f 	bne.w	8002cac <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6818      	ldr	r0, [r3, #0]
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	6819      	ldr	r1, [r3, #0]
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	f7ff fb30 	bl	80020a0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	4a8e      	ldr	r2, [pc, #568]	; (8002c80 <HAL_ADC_ConfigChannel+0x678>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	f040 8130 	bne.w	8002cac <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d10b      	bne.n	8002a74 <HAL_ADC_ConfigChannel+0x46c>
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	0e9b      	lsrs	r3, r3, #26
 8002a62:	3301      	adds	r3, #1
 8002a64:	f003 031f 	and.w	r3, r3, #31
 8002a68:	2b09      	cmp	r3, #9
 8002a6a:	bf94      	ite	ls
 8002a6c:	2301      	movls	r3, #1
 8002a6e:	2300      	movhi	r3, #0
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	e019      	b.n	8002aa8 <HAL_ADC_ConfigChannel+0x4a0>
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a7c:	fa93 f3a3 	rbit	r3, r3
 8002a80:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002a82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a84:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002a86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d101      	bne.n	8002a90 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002a8c:	2320      	movs	r3, #32
 8002a8e:	e003      	b.n	8002a98 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002a90:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a92:	fab3 f383 	clz	r3, r3
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	3301      	adds	r3, #1
 8002a9a:	f003 031f 	and.w	r3, r3, #31
 8002a9e:	2b09      	cmp	r3, #9
 8002aa0:	bf94      	ite	ls
 8002aa2:	2301      	movls	r3, #1
 8002aa4:	2300      	movhi	r3, #0
 8002aa6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d079      	beq.n	8002ba0 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d107      	bne.n	8002ac8 <HAL_ADC_ConfigChannel+0x4c0>
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	0e9b      	lsrs	r3, r3, #26
 8002abe:	3301      	adds	r3, #1
 8002ac0:	069b      	lsls	r3, r3, #26
 8002ac2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ac6:	e015      	b.n	8002af4 <HAL_ADC_ConfigChannel+0x4ec>
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ace:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ad0:	fa93 f3a3 	rbit	r3, r3
 8002ad4:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002ad6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ad8:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002ada:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d101      	bne.n	8002ae4 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002ae0:	2320      	movs	r3, #32
 8002ae2:	e003      	b.n	8002aec <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002ae4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ae6:	fab3 f383 	clz	r3, r3
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	3301      	adds	r3, #1
 8002aee:	069b      	lsls	r3, r3, #26
 8002af0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d109      	bne.n	8002b14 <HAL_ADC_ConfigChannel+0x50c>
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	0e9b      	lsrs	r3, r3, #26
 8002b06:	3301      	adds	r3, #1
 8002b08:	f003 031f 	and.w	r3, r3, #31
 8002b0c:	2101      	movs	r1, #1
 8002b0e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b12:	e017      	b.n	8002b44 <HAL_ADC_ConfigChannel+0x53c>
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b1c:	fa93 f3a3 	rbit	r3, r3
 8002b20:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002b22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b24:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002b26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d101      	bne.n	8002b30 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002b2c:	2320      	movs	r3, #32
 8002b2e:	e003      	b.n	8002b38 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002b30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b32:	fab3 f383 	clz	r3, r3
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	3301      	adds	r3, #1
 8002b3a:	f003 031f 	and.w	r3, r3, #31
 8002b3e:	2101      	movs	r1, #1
 8002b40:	fa01 f303 	lsl.w	r3, r1, r3
 8002b44:	ea42 0103 	orr.w	r1, r2, r3
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d10a      	bne.n	8002b6a <HAL_ADC_ConfigChannel+0x562>
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	0e9b      	lsrs	r3, r3, #26
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	f003 021f 	and.w	r2, r3, #31
 8002b60:	4613      	mov	r3, r2
 8002b62:	005b      	lsls	r3, r3, #1
 8002b64:	4413      	add	r3, r2
 8002b66:	051b      	lsls	r3, r3, #20
 8002b68:	e018      	b.n	8002b9c <HAL_ADC_ConfigChannel+0x594>
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b72:	fa93 f3a3 	rbit	r3, r3
 8002b76:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002b78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002b7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d101      	bne.n	8002b86 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8002b82:	2320      	movs	r3, #32
 8002b84:	e003      	b.n	8002b8e <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8002b86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b88:	fab3 f383 	clz	r3, r3
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	3301      	adds	r3, #1
 8002b90:	f003 021f 	and.w	r2, r3, #31
 8002b94:	4613      	mov	r3, r2
 8002b96:	005b      	lsls	r3, r3, #1
 8002b98:	4413      	add	r3, r2
 8002b9a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b9c:	430b      	orrs	r3, r1
 8002b9e:	e080      	b.n	8002ca2 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d107      	bne.n	8002bbc <HAL_ADC_ConfigChannel+0x5b4>
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	0e9b      	lsrs	r3, r3, #26
 8002bb2:	3301      	adds	r3, #1
 8002bb4:	069b      	lsls	r3, r3, #26
 8002bb6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002bba:	e015      	b.n	8002be8 <HAL_ADC_ConfigChannel+0x5e0>
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bc4:	fa93 f3a3 	rbit	r3, r3
 8002bc8:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bcc:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d101      	bne.n	8002bd8 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002bd4:	2320      	movs	r3, #32
 8002bd6:	e003      	b.n	8002be0 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bda:	fab3 f383 	clz	r3, r3
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	3301      	adds	r3, #1
 8002be2:	069b      	lsls	r3, r3, #26
 8002be4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d109      	bne.n	8002c08 <HAL_ADC_ConfigChannel+0x600>
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	0e9b      	lsrs	r3, r3, #26
 8002bfa:	3301      	adds	r3, #1
 8002bfc:	f003 031f 	and.w	r3, r3, #31
 8002c00:	2101      	movs	r1, #1
 8002c02:	fa01 f303 	lsl.w	r3, r1, r3
 8002c06:	e017      	b.n	8002c38 <HAL_ADC_ConfigChannel+0x630>
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c0e:	6a3b      	ldr	r3, [r7, #32]
 8002c10:	fa93 f3a3 	rbit	r3, r3
 8002c14:	61fb      	str	r3, [r7, #28]
  return result;
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d101      	bne.n	8002c24 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002c20:	2320      	movs	r3, #32
 8002c22:	e003      	b.n	8002c2c <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c26:	fab3 f383 	clz	r3, r3
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	f003 031f 	and.w	r3, r3, #31
 8002c32:	2101      	movs	r1, #1
 8002c34:	fa01 f303 	lsl.w	r3, r1, r3
 8002c38:	ea42 0103 	orr.w	r1, r2, r3
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d10d      	bne.n	8002c64 <HAL_ADC_ConfigChannel+0x65c>
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	0e9b      	lsrs	r3, r3, #26
 8002c4e:	3301      	adds	r3, #1
 8002c50:	f003 021f 	and.w	r2, r3, #31
 8002c54:	4613      	mov	r3, r2
 8002c56:	005b      	lsls	r3, r3, #1
 8002c58:	4413      	add	r3, r2
 8002c5a:	3b1e      	subs	r3, #30
 8002c5c:	051b      	lsls	r3, r3, #20
 8002c5e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002c62:	e01d      	b.n	8002ca0 <HAL_ADC_ConfigChannel+0x698>
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	fa93 f3a3 	rbit	r3, r3
 8002c70:	613b      	str	r3, [r7, #16]
  return result;
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002c76:	69bb      	ldr	r3, [r7, #24]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d103      	bne.n	8002c84 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002c7c:	2320      	movs	r3, #32
 8002c7e:	e005      	b.n	8002c8c <HAL_ADC_ConfigChannel+0x684>
 8002c80:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	fab3 f383 	clz	r3, r3
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	3301      	adds	r3, #1
 8002c8e:	f003 021f 	and.w	r2, r3, #31
 8002c92:	4613      	mov	r3, r2
 8002c94:	005b      	lsls	r3, r3, #1
 8002c96:	4413      	add	r3, r2
 8002c98:	3b1e      	subs	r3, #30
 8002c9a:	051b      	lsls	r3, r3, #20
 8002c9c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ca0:	430b      	orrs	r3, r1
 8002ca2:	683a      	ldr	r2, [r7, #0]
 8002ca4:	6892      	ldr	r2, [r2, #8]
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	f7ff f9ce 	bl	8002048 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	4b3d      	ldr	r3, [pc, #244]	; (8002da8 <HAL_ADC_ConfigChannel+0x7a0>)
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d06c      	beq.n	8002d92 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002cb8:	483c      	ldr	r0, [pc, #240]	; (8002dac <HAL_ADC_ConfigChannel+0x7a4>)
 8002cba:	f7ff f923 	bl	8001f04 <LL_ADC_GetCommonPathInternalCh>
 8002cbe:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a3a      	ldr	r2, [pc, #232]	; (8002db0 <HAL_ADC_ConfigChannel+0x7a8>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d127      	bne.n	8002d1c <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002ccc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002cd0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d121      	bne.n	8002d1c <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a35      	ldr	r2, [pc, #212]	; (8002db4 <HAL_ADC_ConfigChannel+0x7ac>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d157      	bne.n	8002d92 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ce2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ce6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002cea:	4619      	mov	r1, r3
 8002cec:	482f      	ldr	r0, [pc, #188]	; (8002dac <HAL_ADC_ConfigChannel+0x7a4>)
 8002cee:	f7ff f8f6 	bl	8001ede <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002cf2:	4b31      	ldr	r3, [pc, #196]	; (8002db8 <HAL_ADC_ConfigChannel+0x7b0>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	099b      	lsrs	r3, r3, #6
 8002cf8:	4a30      	ldr	r2, [pc, #192]	; (8002dbc <HAL_ADC_ConfigChannel+0x7b4>)
 8002cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8002cfe:	099b      	lsrs	r3, r3, #6
 8002d00:	1c5a      	adds	r2, r3, #1
 8002d02:	4613      	mov	r3, r2
 8002d04:	005b      	lsls	r3, r3, #1
 8002d06:	4413      	add	r3, r2
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002d0c:	e002      	b.n	8002d14 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	3b01      	subs	r3, #1
 8002d12:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d1f9      	bne.n	8002d0e <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d1a:	e03a      	b.n	8002d92 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a27      	ldr	r2, [pc, #156]	; (8002dc0 <HAL_ADC_ConfigChannel+0x7b8>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d113      	bne.n	8002d4e <HAL_ADC_ConfigChannel+0x746>
 8002d26:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d2a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d10d      	bne.n	8002d4e <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a1f      	ldr	r2, [pc, #124]	; (8002db4 <HAL_ADC_ConfigChannel+0x7ac>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d12a      	bne.n	8002d92 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d3c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d40:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d44:	4619      	mov	r1, r3
 8002d46:	4819      	ldr	r0, [pc, #100]	; (8002dac <HAL_ADC_ConfigChannel+0x7a4>)
 8002d48:	f7ff f8c9 	bl	8001ede <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d4c:	e021      	b.n	8002d92 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a1c      	ldr	r2, [pc, #112]	; (8002dc4 <HAL_ADC_ConfigChannel+0x7bc>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d11c      	bne.n	8002d92 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002d58:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d116      	bne.n	8002d92 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a12      	ldr	r2, [pc, #72]	; (8002db4 <HAL_ADC_ConfigChannel+0x7ac>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d111      	bne.n	8002d92 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d6e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d72:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002d76:	4619      	mov	r1, r3
 8002d78:	480c      	ldr	r0, [pc, #48]	; (8002dac <HAL_ADC_ConfigChannel+0x7a4>)
 8002d7a:	f7ff f8b0 	bl	8001ede <LL_ADC_SetCommonPathInternalCh>
 8002d7e:	e008      	b.n	8002d92 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d84:	f043 0220 	orr.w	r2, r3, #32
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2200      	movs	r2, #0
 8002d96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002d9a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	37d8      	adds	r7, #216	; 0xd8
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	80080000 	.word	0x80080000
 8002dac:	50040300 	.word	0x50040300
 8002db0:	c7520000 	.word	0xc7520000
 8002db4:	50040000 	.word	0x50040000
 8002db8:	20000014 	.word	0x20000014
 8002dbc:	053e2d63 	.word	0x053e2d63
 8002dc0:	cb840000 	.word	0xcb840000
 8002dc4:	80000001 	.word	0x80000001

08002dc8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b084      	sub	sp, #16
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f7ff f9e9 	bl	80021ac <LL_ADC_IsEnabled>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d14d      	bne.n	8002e7c <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	689a      	ldr	r2, [r3, #8]
 8002de6:	4b28      	ldr	r3, [pc, #160]	; (8002e88 <ADC_Enable+0xc0>)
 8002de8:	4013      	ands	r3, r2
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d00d      	beq.n	8002e0a <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002df2:	f043 0210 	orr.w	r2, r3, #16
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dfe:	f043 0201 	orr.w	r2, r3, #1
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e039      	b.n	8002e7e <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f7ff f9b8 	bl	8002184 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002e14:	f7ff f820 	bl	8001e58 <HAL_GetTick>
 8002e18:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e1a:	e028      	b.n	8002e6e <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4618      	mov	r0, r3
 8002e22:	f7ff f9c3 	bl	80021ac <LL_ADC_IsEnabled>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d104      	bne.n	8002e36 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4618      	mov	r0, r3
 8002e32:	f7ff f9a7 	bl	8002184 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002e36:	f7ff f80f 	bl	8001e58 <HAL_GetTick>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	2b02      	cmp	r3, #2
 8002e42:	d914      	bls.n	8002e6e <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0301 	and.w	r3, r3, #1
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d00d      	beq.n	8002e6e <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e56:	f043 0210 	orr.w	r2, r3, #16
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e62:	f043 0201 	orr.w	r2, r3, #1
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e007      	b.n	8002e7e <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0301 	and.w	r3, r3, #1
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d1cf      	bne.n	8002e1c <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002e7c:	2300      	movs	r3, #0
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3710      	adds	r7, #16
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	8000003f 	.word	0x8000003f

08002e8c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b084      	sub	sp, #16
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e98:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e9e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d14b      	bne.n	8002f3e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eaa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 0308 	and.w	r3, r3, #8
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d021      	beq.n	8002f04 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f7ff f880 	bl	8001fca <LL_ADC_REG_IsTriggerSourceSWStart>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d032      	beq.n	8002f36 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d12b      	bne.n	8002f36 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ee2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d11f      	bne.n	8002f36 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002efa:	f043 0201 	orr.w	r2, r3, #1
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	655a      	str	r2, [r3, #84]	; 0x54
 8002f02:	e018      	b.n	8002f36 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	f003 0302 	and.w	r3, r3, #2
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d111      	bne.n	8002f36 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f16:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d105      	bne.n	8002f36 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f2e:	f043 0201 	orr.w	r2, r3, #1
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002f36:	68f8      	ldr	r0, [r7, #12]
 8002f38:	f7fe fa84 	bl	8001444 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002f3c:	e00e      	b.n	8002f5c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f42:	f003 0310 	and.w	r3, r3, #16
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d003      	beq.n	8002f52 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002f4a:	68f8      	ldr	r0, [r7, #12]
 8002f4c:	f7ff fb52 	bl	80025f4 <HAL_ADC_ErrorCallback>
}
 8002f50:	e004      	b.n	8002f5c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	4798      	blx	r3
}
 8002f5c:	bf00      	nop
 8002f5e:	3710      	adds	r7, #16
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}

08002f64 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b084      	sub	sp, #16
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f70:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002f72:	68f8      	ldr	r0, [r7, #12]
 8002f74:	f7ff fb34 	bl	80025e0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002f78:	bf00      	nop
 8002f7a:	3710      	adds	r7, #16
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}

08002f80 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f8c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f92:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f9e:	f043 0204 	orr.w	r2, r3, #4
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002fa6:	68f8      	ldr	r0, [r7, #12]
 8002fa8:	f7ff fb24 	bl	80025f4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002fac:	bf00      	nop
 8002fae:	3710      	adds	r7, #16
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b085      	sub	sp, #20
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f003 0307 	and.w	r3, r3, #7
 8002fc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fc4:	4b0c      	ldr	r3, [pc, #48]	; (8002ff8 <__NVIC_SetPriorityGrouping+0x44>)
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fca:	68ba      	ldr	r2, [r7, #8]
 8002fcc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fdc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002fe0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fe4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fe6:	4a04      	ldr	r2, [pc, #16]	; (8002ff8 <__NVIC_SetPriorityGrouping+0x44>)
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	60d3      	str	r3, [r2, #12]
}
 8002fec:	bf00      	nop
 8002fee:	3714      	adds	r7, #20
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr
 8002ff8:	e000ed00 	.word	0xe000ed00

08002ffc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003000:	4b04      	ldr	r3, [pc, #16]	; (8003014 <__NVIC_GetPriorityGrouping+0x18>)
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	0a1b      	lsrs	r3, r3, #8
 8003006:	f003 0307 	and.w	r3, r3, #7
}
 800300a:	4618      	mov	r0, r3
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr
 8003014:	e000ed00 	.word	0xe000ed00

08003018 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003018:	b480      	push	{r7}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
 800301e:	4603      	mov	r3, r0
 8003020:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003026:	2b00      	cmp	r3, #0
 8003028:	db0b      	blt.n	8003042 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800302a:	79fb      	ldrb	r3, [r7, #7]
 800302c:	f003 021f 	and.w	r2, r3, #31
 8003030:	4907      	ldr	r1, [pc, #28]	; (8003050 <__NVIC_EnableIRQ+0x38>)
 8003032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003036:	095b      	lsrs	r3, r3, #5
 8003038:	2001      	movs	r0, #1
 800303a:	fa00 f202 	lsl.w	r2, r0, r2
 800303e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003042:	bf00      	nop
 8003044:	370c      	adds	r7, #12
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr
 800304e:	bf00      	nop
 8003050:	e000e100 	.word	0xe000e100

08003054 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	4603      	mov	r3, r0
 800305c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800305e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003062:	2b00      	cmp	r3, #0
 8003064:	db0c      	blt.n	8003080 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003066:	79fb      	ldrb	r3, [r7, #7]
 8003068:	f003 021f 	and.w	r2, r3, #31
 800306c:	4907      	ldr	r1, [pc, #28]	; (800308c <__NVIC_SetPendingIRQ+0x38>)
 800306e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003072:	095b      	lsrs	r3, r3, #5
 8003074:	2001      	movs	r0, #1
 8003076:	fa00 f202 	lsl.w	r2, r0, r2
 800307a:	3340      	adds	r3, #64	; 0x40
 800307c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003080:	bf00      	nop
 8003082:	370c      	adds	r7, #12
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr
 800308c:	e000e100 	.word	0xe000e100

08003090 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	4603      	mov	r3, r0
 8003098:	6039      	str	r1, [r7, #0]
 800309a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800309c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	db0a      	blt.n	80030ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	b2da      	uxtb	r2, r3
 80030a8:	490c      	ldr	r1, [pc, #48]	; (80030dc <__NVIC_SetPriority+0x4c>)
 80030aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ae:	0112      	lsls	r2, r2, #4
 80030b0:	b2d2      	uxtb	r2, r2
 80030b2:	440b      	add	r3, r1
 80030b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030b8:	e00a      	b.n	80030d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	b2da      	uxtb	r2, r3
 80030be:	4908      	ldr	r1, [pc, #32]	; (80030e0 <__NVIC_SetPriority+0x50>)
 80030c0:	79fb      	ldrb	r3, [r7, #7]
 80030c2:	f003 030f 	and.w	r3, r3, #15
 80030c6:	3b04      	subs	r3, #4
 80030c8:	0112      	lsls	r2, r2, #4
 80030ca:	b2d2      	uxtb	r2, r2
 80030cc:	440b      	add	r3, r1
 80030ce:	761a      	strb	r2, [r3, #24]
}
 80030d0:	bf00      	nop
 80030d2:	370c      	adds	r7, #12
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr
 80030dc:	e000e100 	.word	0xe000e100
 80030e0:	e000ed00 	.word	0xe000ed00

080030e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b089      	sub	sp, #36	; 0x24
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	60f8      	str	r0, [r7, #12]
 80030ec:	60b9      	str	r1, [r7, #8]
 80030ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f003 0307 	and.w	r3, r3, #7
 80030f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030f8:	69fb      	ldr	r3, [r7, #28]
 80030fa:	f1c3 0307 	rsb	r3, r3, #7
 80030fe:	2b04      	cmp	r3, #4
 8003100:	bf28      	it	cs
 8003102:	2304      	movcs	r3, #4
 8003104:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	3304      	adds	r3, #4
 800310a:	2b06      	cmp	r3, #6
 800310c:	d902      	bls.n	8003114 <NVIC_EncodePriority+0x30>
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	3b03      	subs	r3, #3
 8003112:	e000      	b.n	8003116 <NVIC_EncodePriority+0x32>
 8003114:	2300      	movs	r3, #0
 8003116:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003118:	f04f 32ff 	mov.w	r2, #4294967295
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	fa02 f303 	lsl.w	r3, r2, r3
 8003122:	43da      	mvns	r2, r3
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	401a      	ands	r2, r3
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800312c:	f04f 31ff 	mov.w	r1, #4294967295
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	fa01 f303 	lsl.w	r3, r1, r3
 8003136:	43d9      	mvns	r1, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800313c:	4313      	orrs	r3, r2
         );
}
 800313e:	4618      	mov	r0, r3
 8003140:	3724      	adds	r7, #36	; 0x24
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr
	...

0800314c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	3b01      	subs	r3, #1
 8003158:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800315c:	d301      	bcc.n	8003162 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800315e:	2301      	movs	r3, #1
 8003160:	e00f      	b.n	8003182 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003162:	4a0a      	ldr	r2, [pc, #40]	; (800318c <SysTick_Config+0x40>)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	3b01      	subs	r3, #1
 8003168:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800316a:	210f      	movs	r1, #15
 800316c:	f04f 30ff 	mov.w	r0, #4294967295
 8003170:	f7ff ff8e 	bl	8003090 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003174:	4b05      	ldr	r3, [pc, #20]	; (800318c <SysTick_Config+0x40>)
 8003176:	2200      	movs	r2, #0
 8003178:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800317a:	4b04      	ldr	r3, [pc, #16]	; (800318c <SysTick_Config+0x40>)
 800317c:	2207      	movs	r2, #7
 800317e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003180:	2300      	movs	r3, #0
}
 8003182:	4618      	mov	r0, r3
 8003184:	3708      	adds	r7, #8
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	e000e010 	.word	0xe000e010

08003190 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b082      	sub	sp, #8
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f7ff ff0b 	bl	8002fb4 <__NVIC_SetPriorityGrouping>
}
 800319e:	bf00      	nop
 80031a0:	3708      	adds	r7, #8
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}

080031a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031a6:	b580      	push	{r7, lr}
 80031a8:	b086      	sub	sp, #24
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	4603      	mov	r3, r0
 80031ae:	60b9      	str	r1, [r7, #8]
 80031b0:	607a      	str	r2, [r7, #4]
 80031b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80031b4:	2300      	movs	r3, #0
 80031b6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80031b8:	f7ff ff20 	bl	8002ffc <__NVIC_GetPriorityGrouping>
 80031bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	68b9      	ldr	r1, [r7, #8]
 80031c2:	6978      	ldr	r0, [r7, #20]
 80031c4:	f7ff ff8e 	bl	80030e4 <NVIC_EncodePriority>
 80031c8:	4602      	mov	r2, r0
 80031ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031ce:	4611      	mov	r1, r2
 80031d0:	4618      	mov	r0, r3
 80031d2:	f7ff ff5d 	bl	8003090 <__NVIC_SetPriority>
}
 80031d6:	bf00      	nop
 80031d8:	3718      	adds	r7, #24
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}

080031de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031de:	b580      	push	{r7, lr}
 80031e0:	b082      	sub	sp, #8
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	4603      	mov	r3, r0
 80031e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ec:	4618      	mov	r0, r3
 80031ee:	f7ff ff13 	bl	8003018 <__NVIC_EnableIRQ>
}
 80031f2:	bf00      	nop
 80031f4:	3708      	adds	r7, #8
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}

080031fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031fa:	b580      	push	{r7, lr}
 80031fc:	b082      	sub	sp, #8
 80031fe:	af00      	add	r7, sp, #0
 8003200:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f7ff ffa2 	bl	800314c <SysTick_Config>
 8003208:	4603      	mov	r3, r0
}
 800320a:	4618      	mov	r0, r3
 800320c:	3708      	adds	r7, #8
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}

08003212 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8003212:	b580      	push	{r7, lr}
 8003214:	b082      	sub	sp, #8
 8003216:	af00      	add	r7, sp, #0
 8003218:	4603      	mov	r3, r0
 800321a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 800321c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003220:	4618      	mov	r0, r3
 8003222:	f7ff ff17 	bl	8003054 <__NVIC_SetPendingIRQ>
}
 8003226:	bf00      	nop
 8003228:	3708      	adds	r7, #8
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
	...

08003230 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003230:	b480      	push	{r7}
 8003232:	b085      	sub	sp, #20
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d101      	bne.n	8003242 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e098      	b.n	8003374 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	461a      	mov	r2, r3
 8003248:	4b4d      	ldr	r3, [pc, #308]	; (8003380 <HAL_DMA_Init+0x150>)
 800324a:	429a      	cmp	r2, r3
 800324c:	d80f      	bhi.n	800326e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	461a      	mov	r2, r3
 8003254:	4b4b      	ldr	r3, [pc, #300]	; (8003384 <HAL_DMA_Init+0x154>)
 8003256:	4413      	add	r3, r2
 8003258:	4a4b      	ldr	r2, [pc, #300]	; (8003388 <HAL_DMA_Init+0x158>)
 800325a:	fba2 2303 	umull	r2, r3, r2, r3
 800325e:	091b      	lsrs	r3, r3, #4
 8003260:	009a      	lsls	r2, r3, #2
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4a48      	ldr	r2, [pc, #288]	; (800338c <HAL_DMA_Init+0x15c>)
 800326a:	641a      	str	r2, [r3, #64]	; 0x40
 800326c:	e00e      	b.n	800328c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	461a      	mov	r2, r3
 8003274:	4b46      	ldr	r3, [pc, #280]	; (8003390 <HAL_DMA_Init+0x160>)
 8003276:	4413      	add	r3, r2
 8003278:	4a43      	ldr	r2, [pc, #268]	; (8003388 <HAL_DMA_Init+0x158>)
 800327a:	fba2 2303 	umull	r2, r3, r2, r3
 800327e:	091b      	lsrs	r3, r3, #4
 8003280:	009a      	lsls	r2, r3, #2
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4a42      	ldr	r2, [pc, #264]	; (8003394 <HAL_DMA_Init+0x164>)
 800328a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2202      	movs	r2, #2
 8003290:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80032a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032a6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80032b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	691b      	ldr	r3, [r3, #16]
 80032b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	699b      	ldr	r3, [r3, #24]
 80032c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6a1b      	ldr	r3, [r3, #32]
 80032ce:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80032d0:	68fa      	ldr	r2, [r7, #12]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	68fa      	ldr	r2, [r7, #12]
 80032dc:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80032e6:	d039      	beq.n	800335c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ec:	4a27      	ldr	r2, [pc, #156]	; (800338c <HAL_DMA_Init+0x15c>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d11a      	bne.n	8003328 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80032f2:	4b29      	ldr	r3, [pc, #164]	; (8003398 <HAL_DMA_Init+0x168>)
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032fa:	f003 031c 	and.w	r3, r3, #28
 80032fe:	210f      	movs	r1, #15
 8003300:	fa01 f303 	lsl.w	r3, r1, r3
 8003304:	43db      	mvns	r3, r3
 8003306:	4924      	ldr	r1, [pc, #144]	; (8003398 <HAL_DMA_Init+0x168>)
 8003308:	4013      	ands	r3, r2
 800330a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800330c:	4b22      	ldr	r3, [pc, #136]	; (8003398 <HAL_DMA_Init+0x168>)
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6859      	ldr	r1, [r3, #4]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003318:	f003 031c 	and.w	r3, r3, #28
 800331c:	fa01 f303 	lsl.w	r3, r1, r3
 8003320:	491d      	ldr	r1, [pc, #116]	; (8003398 <HAL_DMA_Init+0x168>)
 8003322:	4313      	orrs	r3, r2
 8003324:	600b      	str	r3, [r1, #0]
 8003326:	e019      	b.n	800335c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003328:	4b1c      	ldr	r3, [pc, #112]	; (800339c <HAL_DMA_Init+0x16c>)
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003330:	f003 031c 	and.w	r3, r3, #28
 8003334:	210f      	movs	r1, #15
 8003336:	fa01 f303 	lsl.w	r3, r1, r3
 800333a:	43db      	mvns	r3, r3
 800333c:	4917      	ldr	r1, [pc, #92]	; (800339c <HAL_DMA_Init+0x16c>)
 800333e:	4013      	ands	r3, r2
 8003340:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003342:	4b16      	ldr	r3, [pc, #88]	; (800339c <HAL_DMA_Init+0x16c>)
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6859      	ldr	r1, [r3, #4]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800334e:	f003 031c 	and.w	r3, r3, #28
 8003352:	fa01 f303 	lsl.w	r3, r1, r3
 8003356:	4911      	ldr	r1, [pc, #68]	; (800339c <HAL_DMA_Init+0x16c>)
 8003358:	4313      	orrs	r3, r2
 800335a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2200      	movs	r2, #0
 8003360:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2201      	movs	r2, #1
 8003366:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2200      	movs	r2, #0
 800336e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003372:	2300      	movs	r3, #0
}
 8003374:	4618      	mov	r0, r3
 8003376:	3714      	adds	r7, #20
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr
 8003380:	40020407 	.word	0x40020407
 8003384:	bffdfff8 	.word	0xbffdfff8
 8003388:	cccccccd 	.word	0xcccccccd
 800338c:	40020000 	.word	0x40020000
 8003390:	bffdfbf8 	.word	0xbffdfbf8
 8003394:	40020400 	.word	0x40020400
 8003398:	400200a8 	.word	0x400200a8
 800339c:	400204a8 	.word	0x400204a8

080033a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b086      	sub	sp, #24
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	60f8      	str	r0, [r7, #12]
 80033a8:	60b9      	str	r1, [r7, #8]
 80033aa:	607a      	str	r2, [r7, #4]
 80033ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033ae:	2300      	movs	r3, #0
 80033b0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d101      	bne.n	80033c0 <HAL_DMA_Start_IT+0x20>
 80033bc:	2302      	movs	r3, #2
 80033be:	e04b      	b.n	8003458 <HAL_DMA_Start_IT+0xb8>
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2201      	movs	r2, #1
 80033c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d13a      	bne.n	800344a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2202      	movs	r2, #2
 80033d8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2200      	movs	r2, #0
 80033e0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f022 0201 	bic.w	r2, r2, #1
 80033f0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	687a      	ldr	r2, [r7, #4]
 80033f6:	68b9      	ldr	r1, [r7, #8]
 80033f8:	68f8      	ldr	r0, [r7, #12]
 80033fa:	f000 f8e0 	bl	80035be <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003402:	2b00      	cmp	r3, #0
 8003404:	d008      	beq.n	8003418 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f042 020e 	orr.w	r2, r2, #14
 8003414:	601a      	str	r2, [r3, #0]
 8003416:	e00f      	b.n	8003438 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f022 0204 	bic.w	r2, r2, #4
 8003426:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f042 020a 	orr.w	r2, r2, #10
 8003436:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f042 0201 	orr.w	r2, r2, #1
 8003446:	601a      	str	r2, [r3, #0]
 8003448:	e005      	b.n	8003456 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2200      	movs	r2, #0
 800344e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003452:	2302      	movs	r3, #2
 8003454:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003456:	7dfb      	ldrb	r3, [r7, #23]
}
 8003458:	4618      	mov	r0, r3
 800345a:	3718      	adds	r7, #24
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}

08003460 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b084      	sub	sp, #16
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800347c:	f003 031c 	and.w	r3, r3, #28
 8003480:	2204      	movs	r2, #4
 8003482:	409a      	lsls	r2, r3
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	4013      	ands	r3, r2
 8003488:	2b00      	cmp	r3, #0
 800348a:	d026      	beq.n	80034da <HAL_DMA_IRQHandler+0x7a>
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	f003 0304 	and.w	r3, r3, #4
 8003492:	2b00      	cmp	r3, #0
 8003494:	d021      	beq.n	80034da <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0320 	and.w	r3, r3, #32
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d107      	bne.n	80034b4 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f022 0204 	bic.w	r2, r2, #4
 80034b2:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b8:	f003 021c 	and.w	r2, r3, #28
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c0:	2104      	movs	r1, #4
 80034c2:	fa01 f202 	lsl.w	r2, r1, r2
 80034c6:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d071      	beq.n	80035b4 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80034d8:	e06c      	b.n	80035b4 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034de:	f003 031c 	and.w	r3, r3, #28
 80034e2:	2202      	movs	r2, #2
 80034e4:	409a      	lsls	r2, r3
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	4013      	ands	r3, r2
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d02e      	beq.n	800354c <HAL_DMA_IRQHandler+0xec>
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	f003 0302 	and.w	r3, r3, #2
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d029      	beq.n	800354c <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 0320 	and.w	r3, r3, #32
 8003502:	2b00      	cmp	r3, #0
 8003504:	d10b      	bne.n	800351e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f022 020a 	bic.w	r2, r2, #10
 8003514:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2201      	movs	r2, #1
 800351a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003522:	f003 021c 	and.w	r2, r3, #28
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352a:	2102      	movs	r1, #2
 800352c:	fa01 f202 	lsl.w	r2, r1, r2
 8003530:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2200      	movs	r2, #0
 8003536:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800353e:	2b00      	cmp	r3, #0
 8003540:	d038      	beq.n	80035b4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800354a:	e033      	b.n	80035b4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003550:	f003 031c 	and.w	r3, r3, #28
 8003554:	2208      	movs	r2, #8
 8003556:	409a      	lsls	r2, r3
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	4013      	ands	r3, r2
 800355c:	2b00      	cmp	r3, #0
 800355e:	d02a      	beq.n	80035b6 <HAL_DMA_IRQHandler+0x156>
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	f003 0308 	and.w	r3, r3, #8
 8003566:	2b00      	cmp	r3, #0
 8003568:	d025      	beq.n	80035b6 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f022 020e 	bic.w	r2, r2, #14
 8003578:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800357e:	f003 021c 	and.w	r2, r3, #28
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003586:	2101      	movs	r1, #1
 8003588:	fa01 f202 	lsl.w	r2, r1, r2
 800358c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2201      	movs	r2, #1
 8003592:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2201      	movs	r2, #1
 8003598:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2200      	movs	r2, #0
 80035a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d004      	beq.n	80035b6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80035b4:	bf00      	nop
 80035b6:	bf00      	nop
}
 80035b8:	3710      	adds	r7, #16
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}

080035be <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80035be:	b480      	push	{r7}
 80035c0:	b085      	sub	sp, #20
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	60f8      	str	r0, [r7, #12]
 80035c6:	60b9      	str	r1, [r7, #8]
 80035c8:	607a      	str	r2, [r7, #4]
 80035ca:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035d0:	f003 021c 	and.w	r2, r3, #28
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d8:	2101      	movs	r1, #1
 80035da:	fa01 f202 	lsl.w	r2, r1, r2
 80035de:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	683a      	ldr	r2, [r7, #0]
 80035e6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	2b10      	cmp	r3, #16
 80035ee:	d108      	bne.n	8003602 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	68ba      	ldr	r2, [r7, #8]
 80035fe:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003600:	e007      	b.n	8003612 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	68ba      	ldr	r2, [r7, #8]
 8003608:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	60da      	str	r2, [r3, #12]
}
 8003612:	bf00      	nop
 8003614:	3714      	adds	r7, #20
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr
	...

08003620 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003620:	b480      	push	{r7}
 8003622:	b087      	sub	sp, #28
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800362a:	2300      	movs	r3, #0
 800362c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800362e:	e148      	b.n	80038c2 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	2101      	movs	r1, #1
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	fa01 f303 	lsl.w	r3, r1, r3
 800363c:	4013      	ands	r3, r2
 800363e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2b00      	cmp	r3, #0
 8003644:	f000 813a 	beq.w	80038bc <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	2b01      	cmp	r3, #1
 800364e:	d00b      	beq.n	8003668 <HAL_GPIO_Init+0x48>
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	2b02      	cmp	r3, #2
 8003656:	d007      	beq.n	8003668 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800365c:	2b11      	cmp	r3, #17
 800365e:	d003      	beq.n	8003668 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	2b12      	cmp	r3, #18
 8003666:	d130      	bne.n	80036ca <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	005b      	lsls	r3, r3, #1
 8003672:	2203      	movs	r2, #3
 8003674:	fa02 f303 	lsl.w	r3, r2, r3
 8003678:	43db      	mvns	r3, r3
 800367a:	693a      	ldr	r2, [r7, #16]
 800367c:	4013      	ands	r3, r2
 800367e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	68da      	ldr	r2, [r3, #12]
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	005b      	lsls	r3, r3, #1
 8003688:	fa02 f303 	lsl.w	r3, r2, r3
 800368c:	693a      	ldr	r2, [r7, #16]
 800368e:	4313      	orrs	r3, r2
 8003690:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	693a      	ldr	r2, [r7, #16]
 8003696:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800369e:	2201      	movs	r2, #1
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	fa02 f303 	lsl.w	r3, r2, r3
 80036a6:	43db      	mvns	r3, r3
 80036a8:	693a      	ldr	r2, [r7, #16]
 80036aa:	4013      	ands	r3, r2
 80036ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	091b      	lsrs	r3, r3, #4
 80036b4:	f003 0201 	and.w	r2, r3, #1
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	fa02 f303 	lsl.w	r3, r2, r3
 80036be:	693a      	ldr	r2, [r7, #16]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	693a      	ldr	r2, [r7, #16]
 80036c8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	68db      	ldr	r3, [r3, #12]
 80036ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	005b      	lsls	r3, r3, #1
 80036d4:	2203      	movs	r2, #3
 80036d6:	fa02 f303 	lsl.w	r3, r2, r3
 80036da:	43db      	mvns	r3, r3
 80036dc:	693a      	ldr	r2, [r7, #16]
 80036de:	4013      	ands	r3, r2
 80036e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	689a      	ldr	r2, [r3, #8]
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	005b      	lsls	r3, r3, #1
 80036ea:	fa02 f303 	lsl.w	r3, r2, r3
 80036ee:	693a      	ldr	r2, [r7, #16]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	693a      	ldr	r2, [r7, #16]
 80036f8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d003      	beq.n	800370a <HAL_GPIO_Init+0xea>
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	2b12      	cmp	r3, #18
 8003708:	d123      	bne.n	8003752 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	08da      	lsrs	r2, r3, #3
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	3208      	adds	r2, #8
 8003712:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003716:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	f003 0307 	and.w	r3, r3, #7
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	220f      	movs	r2, #15
 8003722:	fa02 f303 	lsl.w	r3, r2, r3
 8003726:	43db      	mvns	r3, r3
 8003728:	693a      	ldr	r2, [r7, #16]
 800372a:	4013      	ands	r3, r2
 800372c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	691a      	ldr	r2, [r3, #16]
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	f003 0307 	and.w	r3, r3, #7
 8003738:	009b      	lsls	r3, r3, #2
 800373a:	fa02 f303 	lsl.w	r3, r2, r3
 800373e:	693a      	ldr	r2, [r7, #16]
 8003740:	4313      	orrs	r3, r2
 8003742:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	08da      	lsrs	r2, r3, #3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	3208      	adds	r2, #8
 800374c:	6939      	ldr	r1, [r7, #16]
 800374e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	005b      	lsls	r3, r3, #1
 800375c:	2203      	movs	r2, #3
 800375e:	fa02 f303 	lsl.w	r3, r2, r3
 8003762:	43db      	mvns	r3, r3
 8003764:	693a      	ldr	r2, [r7, #16]
 8003766:	4013      	ands	r3, r2
 8003768:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	f003 0203 	and.w	r2, r3, #3
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	005b      	lsls	r3, r3, #1
 8003776:	fa02 f303 	lsl.w	r3, r2, r3
 800377a:	693a      	ldr	r2, [r7, #16]
 800377c:	4313      	orrs	r3, r2
 800377e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	693a      	ldr	r2, [r7, #16]
 8003784:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800378e:	2b00      	cmp	r3, #0
 8003790:	f000 8094 	beq.w	80038bc <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003794:	4b52      	ldr	r3, [pc, #328]	; (80038e0 <HAL_GPIO_Init+0x2c0>)
 8003796:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003798:	4a51      	ldr	r2, [pc, #324]	; (80038e0 <HAL_GPIO_Init+0x2c0>)
 800379a:	f043 0301 	orr.w	r3, r3, #1
 800379e:	6613      	str	r3, [r2, #96]	; 0x60
 80037a0:	4b4f      	ldr	r3, [pc, #316]	; (80038e0 <HAL_GPIO_Init+0x2c0>)
 80037a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037a4:	f003 0301 	and.w	r3, r3, #1
 80037a8:	60bb      	str	r3, [r7, #8]
 80037aa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80037ac:	4a4d      	ldr	r2, [pc, #308]	; (80038e4 <HAL_GPIO_Init+0x2c4>)
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	089b      	lsrs	r3, r3, #2
 80037b2:	3302      	adds	r3, #2
 80037b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	f003 0303 	and.w	r3, r3, #3
 80037c0:	009b      	lsls	r3, r3, #2
 80037c2:	220f      	movs	r2, #15
 80037c4:	fa02 f303 	lsl.w	r3, r2, r3
 80037c8:	43db      	mvns	r3, r3
 80037ca:	693a      	ldr	r2, [r7, #16]
 80037cc:	4013      	ands	r3, r2
 80037ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80037d6:	d00d      	beq.n	80037f4 <HAL_GPIO_Init+0x1d4>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	4a43      	ldr	r2, [pc, #268]	; (80038e8 <HAL_GPIO_Init+0x2c8>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d007      	beq.n	80037f0 <HAL_GPIO_Init+0x1d0>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	4a42      	ldr	r2, [pc, #264]	; (80038ec <HAL_GPIO_Init+0x2cc>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d101      	bne.n	80037ec <HAL_GPIO_Init+0x1cc>
 80037e8:	2302      	movs	r3, #2
 80037ea:	e004      	b.n	80037f6 <HAL_GPIO_Init+0x1d6>
 80037ec:	2307      	movs	r3, #7
 80037ee:	e002      	b.n	80037f6 <HAL_GPIO_Init+0x1d6>
 80037f0:	2301      	movs	r3, #1
 80037f2:	e000      	b.n	80037f6 <HAL_GPIO_Init+0x1d6>
 80037f4:	2300      	movs	r3, #0
 80037f6:	697a      	ldr	r2, [r7, #20]
 80037f8:	f002 0203 	and.w	r2, r2, #3
 80037fc:	0092      	lsls	r2, r2, #2
 80037fe:	4093      	lsls	r3, r2
 8003800:	693a      	ldr	r2, [r7, #16]
 8003802:	4313      	orrs	r3, r2
 8003804:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003806:	4937      	ldr	r1, [pc, #220]	; (80038e4 <HAL_GPIO_Init+0x2c4>)
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	089b      	lsrs	r3, r3, #2
 800380c:	3302      	adds	r3, #2
 800380e:	693a      	ldr	r2, [r7, #16]
 8003810:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003814:	4b36      	ldr	r3, [pc, #216]	; (80038f0 <HAL_GPIO_Init+0x2d0>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	43db      	mvns	r3, r3
 800381e:	693a      	ldr	r2, [r7, #16]
 8003820:	4013      	ands	r3, r2
 8003822:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800382c:	2b00      	cmp	r3, #0
 800382e:	d003      	beq.n	8003838 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003830:	693a      	ldr	r2, [r7, #16]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	4313      	orrs	r3, r2
 8003836:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003838:	4a2d      	ldr	r2, [pc, #180]	; (80038f0 <HAL_GPIO_Init+0x2d0>)
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800383e:	4b2c      	ldr	r3, [pc, #176]	; (80038f0 <HAL_GPIO_Init+0x2d0>)
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	43db      	mvns	r3, r3
 8003848:	693a      	ldr	r2, [r7, #16]
 800384a:	4013      	ands	r3, r2
 800384c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d003      	beq.n	8003862 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800385a:	693a      	ldr	r2, [r7, #16]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	4313      	orrs	r3, r2
 8003860:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003862:	4a23      	ldr	r2, [pc, #140]	; (80038f0 <HAL_GPIO_Init+0x2d0>)
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003868:	4b21      	ldr	r3, [pc, #132]	; (80038f0 <HAL_GPIO_Init+0x2d0>)
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	43db      	mvns	r3, r3
 8003872:	693a      	ldr	r2, [r7, #16]
 8003874:	4013      	ands	r3, r2
 8003876:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003880:	2b00      	cmp	r3, #0
 8003882:	d003      	beq.n	800388c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8003884:	693a      	ldr	r2, [r7, #16]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	4313      	orrs	r3, r2
 800388a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800388c:	4a18      	ldr	r2, [pc, #96]	; (80038f0 <HAL_GPIO_Init+0x2d0>)
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003892:	4b17      	ldr	r3, [pc, #92]	; (80038f0 <HAL_GPIO_Init+0x2d0>)
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	43db      	mvns	r3, r3
 800389c:	693a      	ldr	r2, [r7, #16]
 800389e:	4013      	ands	r3, r2
 80038a0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d003      	beq.n	80038b6 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80038ae:	693a      	ldr	r2, [r7, #16]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	4313      	orrs	r3, r2
 80038b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80038b6:	4a0e      	ldr	r2, [pc, #56]	; (80038f0 <HAL_GPIO_Init+0x2d0>)
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	3301      	adds	r3, #1
 80038c0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	fa22 f303 	lsr.w	r3, r2, r3
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	f47f aeaf 	bne.w	8003630 <HAL_GPIO_Init+0x10>
  }
}
 80038d2:	bf00      	nop
 80038d4:	bf00      	nop
 80038d6:	371c      	adds	r7, #28
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr
 80038e0:	40021000 	.word	0x40021000
 80038e4:	40010000 	.word	0x40010000
 80038e8:	48000400 	.word	0x48000400
 80038ec:	48000800 	.word	0x48000800
 80038f0:	40010400 	.word	0x40010400

080038f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b083      	sub	sp, #12
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	460b      	mov	r3, r1
 80038fe:	807b      	strh	r3, [r7, #2]
 8003900:	4613      	mov	r3, r2
 8003902:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003904:	787b      	ldrb	r3, [r7, #1]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d003      	beq.n	8003912 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800390a:	887a      	ldrh	r2, [r7, #2]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003910:	e002      	b.n	8003918 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003912:	887a      	ldrh	r2, [r7, #2]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003918:	bf00      	nop
 800391a:	370c      	adds	r7, #12
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr

08003924 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003924:	b480      	push	{r7}
 8003926:	b085      	sub	sp, #20
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
 800392c:	460b      	mov	r3, r1
 800392e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	695b      	ldr	r3, [r3, #20]
 8003934:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003936:	887a      	ldrh	r2, [r7, #2]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	4013      	ands	r3, r2
 800393c:	041a      	lsls	r2, r3, #16
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	43d9      	mvns	r1, r3
 8003942:	887b      	ldrh	r3, [r7, #2]
 8003944:	400b      	ands	r3, r1
 8003946:	431a      	orrs	r2, r3
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	619a      	str	r2, [r3, #24]
}
 800394c:	bf00      	nop
 800394e:	3714      	adds	r7, #20
 8003950:	46bd      	mov	sp, r7
 8003952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003956:	4770      	bx	lr

08003958 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b082      	sub	sp, #8
 800395c:	af00      	add	r7, sp, #0
 800395e:	4603      	mov	r3, r0
 8003960:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003962:	4b08      	ldr	r3, [pc, #32]	; (8003984 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003964:	695a      	ldr	r2, [r3, #20]
 8003966:	88fb      	ldrh	r3, [r7, #6]
 8003968:	4013      	ands	r3, r2
 800396a:	2b00      	cmp	r3, #0
 800396c:	d006      	beq.n	800397c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800396e:	4a05      	ldr	r2, [pc, #20]	; (8003984 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003970:	88fb      	ldrh	r3, [r7, #6]
 8003972:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003974:	88fb      	ldrh	r3, [r7, #6]
 8003976:	4618      	mov	r0, r3
 8003978:	f7fd fd74 	bl	8001464 <HAL_GPIO_EXTI_Callback>
  }
}
 800397c:	bf00      	nop
 800397e:	3708      	adds	r7, #8
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}
 8003984:	40010400 	.word	0x40010400

08003988 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b082      	sub	sp, #8
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d101      	bne.n	800399a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e081      	b.n	8003a9e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d106      	bne.n	80039b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f7fd fb50 	bl	8001054 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2224      	movs	r2, #36	; 0x24
 80039b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f022 0201 	bic.w	r2, r2, #1
 80039ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	685a      	ldr	r2, [r3, #4]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80039d8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	689a      	ldr	r2, [r3, #8]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80039e8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d107      	bne.n	8003a02 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	689a      	ldr	r2, [r3, #8]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039fe:	609a      	str	r2, [r3, #8]
 8003a00:	e006      	b.n	8003a10 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	689a      	ldr	r2, [r3, #8]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003a0e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	2b02      	cmp	r3, #2
 8003a16:	d104      	bne.n	8003a22 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a20:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	687a      	ldr	r2, [r7, #4]
 8003a2a:	6812      	ldr	r2, [r2, #0]
 8003a2c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003a30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a34:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	68da      	ldr	r2, [r3, #12]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a44:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	691a      	ldr	r2, [r3, #16]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	695b      	ldr	r3, [r3, #20]
 8003a4e:	ea42 0103 	orr.w	r1, r2, r3
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	699b      	ldr	r3, [r3, #24]
 8003a56:	021a      	lsls	r2, r3, #8
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	430a      	orrs	r2, r1
 8003a5e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	69d9      	ldr	r1, [r3, #28]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6a1a      	ldr	r2, [r3, #32]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	430a      	orrs	r2, r1
 8003a6e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f042 0201 	orr.w	r2, r2, #1
 8003a7e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2200      	movs	r2, #0
 8003a84:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2220      	movs	r2, #32
 8003a8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2200      	movs	r2, #0
 8003a92:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003a9c:	2300      	movs	r3, #0
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3708      	adds	r7, #8
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
	...

08003aa8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b088      	sub	sp, #32
 8003aac:	af02      	add	r7, sp, #8
 8003aae:	60f8      	str	r0, [r7, #12]
 8003ab0:	4608      	mov	r0, r1
 8003ab2:	4611      	mov	r1, r2
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	817b      	strh	r3, [r7, #10]
 8003aba:	460b      	mov	r3, r1
 8003abc:	813b      	strh	r3, [r7, #8]
 8003abe:	4613      	mov	r3, r2
 8003ac0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	2b20      	cmp	r3, #32
 8003acc:	f040 80f9 	bne.w	8003cc2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ad0:	6a3b      	ldr	r3, [r7, #32]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d002      	beq.n	8003adc <HAL_I2C_Mem_Write+0x34>
 8003ad6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d105      	bne.n	8003ae8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ae2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e0ed      	b.n	8003cc4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d101      	bne.n	8003af6 <HAL_I2C_Mem_Write+0x4e>
 8003af2:	2302      	movs	r3, #2
 8003af4:	e0e6      	b.n	8003cc4 <HAL_I2C_Mem_Write+0x21c>
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2201      	movs	r2, #1
 8003afa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003afe:	f7fe f9ab 	bl	8001e58 <HAL_GetTick>
 8003b02:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	9300      	str	r3, [sp, #0]
 8003b08:	2319      	movs	r3, #25
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003b10:	68f8      	ldr	r0, [r7, #12]
 8003b12:	f000 fac3 	bl	800409c <I2C_WaitOnFlagUntilTimeout>
 8003b16:	4603      	mov	r3, r0
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d001      	beq.n	8003b20 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e0d1      	b.n	8003cc4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2221      	movs	r2, #33	; 0x21
 8003b24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2240      	movs	r2, #64	; 0x40
 8003b2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2200      	movs	r2, #0
 8003b34:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	6a3a      	ldr	r2, [r7, #32]
 8003b3a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003b40:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2200      	movs	r2, #0
 8003b46:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003b48:	88f8      	ldrh	r0, [r7, #6]
 8003b4a:	893a      	ldrh	r2, [r7, #8]
 8003b4c:	8979      	ldrh	r1, [r7, #10]
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	9301      	str	r3, [sp, #4]
 8003b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b54:	9300      	str	r3, [sp, #0]
 8003b56:	4603      	mov	r3, r0
 8003b58:	68f8      	ldr	r0, [r7, #12]
 8003b5a:	f000 f9d3 	bl	8003f04 <I2C_RequestMemoryWrite>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d005      	beq.n	8003b70 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2200      	movs	r2, #0
 8003b68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e0a9      	b.n	8003cc4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	2bff      	cmp	r3, #255	; 0xff
 8003b78:	d90e      	bls.n	8003b98 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	22ff      	movs	r2, #255	; 0xff
 8003b7e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b84:	b2da      	uxtb	r2, r3
 8003b86:	8979      	ldrh	r1, [r7, #10]
 8003b88:	2300      	movs	r3, #0
 8003b8a:	9300      	str	r3, [sp, #0]
 8003b8c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b90:	68f8      	ldr	r0, [r7, #12]
 8003b92:	f000 fba5 	bl	80042e0 <I2C_TransferConfig>
 8003b96:	e00f      	b.n	8003bb8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b9c:	b29a      	uxth	r2, r3
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ba6:	b2da      	uxtb	r2, r3
 8003ba8:	8979      	ldrh	r1, [r7, #10]
 8003baa:	2300      	movs	r3, #0
 8003bac:	9300      	str	r3, [sp, #0]
 8003bae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003bb2:	68f8      	ldr	r0, [r7, #12]
 8003bb4:	f000 fb94 	bl	80042e0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bb8:	697a      	ldr	r2, [r7, #20]
 8003bba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003bbc:	68f8      	ldr	r0, [r7, #12]
 8003bbe:	f000 faad 	bl	800411c <I2C_WaitOnTXISFlagUntilTimeout>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d001      	beq.n	8003bcc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e07b      	b.n	8003cc4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd0:	781a      	ldrb	r2, [r3, #0]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bdc:	1c5a      	adds	r2, r3, #1
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	3b01      	subs	r3, #1
 8003bea:	b29a      	uxth	r2, r3
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bf4:	3b01      	subs	r3, #1
 8003bf6:	b29a      	uxth	r2, r3
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d034      	beq.n	8003c70 <HAL_I2C_Mem_Write+0x1c8>
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d130      	bne.n	8003c70 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	9300      	str	r3, [sp, #0]
 8003c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c14:	2200      	movs	r2, #0
 8003c16:	2180      	movs	r1, #128	; 0x80
 8003c18:	68f8      	ldr	r0, [r7, #12]
 8003c1a:	f000 fa3f 	bl	800409c <I2C_WaitOnFlagUntilTimeout>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d001      	beq.n	8003c28 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	e04d      	b.n	8003cc4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c2c:	b29b      	uxth	r3, r3
 8003c2e:	2bff      	cmp	r3, #255	; 0xff
 8003c30:	d90e      	bls.n	8003c50 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	22ff      	movs	r2, #255	; 0xff
 8003c36:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c3c:	b2da      	uxtb	r2, r3
 8003c3e:	8979      	ldrh	r1, [r7, #10]
 8003c40:	2300      	movs	r3, #0
 8003c42:	9300      	str	r3, [sp, #0]
 8003c44:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c48:	68f8      	ldr	r0, [r7, #12]
 8003c4a:	f000 fb49 	bl	80042e0 <I2C_TransferConfig>
 8003c4e:	e00f      	b.n	8003c70 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c54:	b29a      	uxth	r2, r3
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c5e:	b2da      	uxtb	r2, r3
 8003c60:	8979      	ldrh	r1, [r7, #10]
 8003c62:	2300      	movs	r3, #0
 8003c64:	9300      	str	r3, [sp, #0]
 8003c66:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c6a:	68f8      	ldr	r0, [r7, #12]
 8003c6c:	f000 fb38 	bl	80042e0 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c74:	b29b      	uxth	r3, r3
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d19e      	bne.n	8003bb8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c7a:	697a      	ldr	r2, [r7, #20]
 8003c7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c7e:	68f8      	ldr	r0, [r7, #12]
 8003c80:	f000 fa8c 	bl	800419c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003c84:	4603      	mov	r3, r0
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d001      	beq.n	8003c8e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e01a      	b.n	8003cc4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	2220      	movs	r2, #32
 8003c94:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	6859      	ldr	r1, [r3, #4]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	4b0a      	ldr	r3, [pc, #40]	; (8003ccc <HAL_I2C_Mem_Write+0x224>)
 8003ca2:	400b      	ands	r3, r1
 8003ca4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2220      	movs	r2, #32
 8003caa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	e000      	b.n	8003cc4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003cc2:	2302      	movs	r3, #2
  }
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3718      	adds	r7, #24
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}
 8003ccc:	fe00e800 	.word	0xfe00e800

08003cd0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b088      	sub	sp, #32
 8003cd4:	af02      	add	r7, sp, #8
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	4608      	mov	r0, r1
 8003cda:	4611      	mov	r1, r2
 8003cdc:	461a      	mov	r2, r3
 8003cde:	4603      	mov	r3, r0
 8003ce0:	817b      	strh	r3, [r7, #10]
 8003ce2:	460b      	mov	r3, r1
 8003ce4:	813b      	strh	r3, [r7, #8]
 8003ce6:	4613      	mov	r3, r2
 8003ce8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	2b20      	cmp	r3, #32
 8003cf4:	f040 80fd 	bne.w	8003ef2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cf8:	6a3b      	ldr	r3, [r7, #32]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d002      	beq.n	8003d04 <HAL_I2C_Mem_Read+0x34>
 8003cfe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d105      	bne.n	8003d10 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d0a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e0f1      	b.n	8003ef4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d101      	bne.n	8003d1e <HAL_I2C_Mem_Read+0x4e>
 8003d1a:	2302      	movs	r3, #2
 8003d1c:	e0ea      	b.n	8003ef4 <HAL_I2C_Mem_Read+0x224>
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2201      	movs	r2, #1
 8003d22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003d26:	f7fe f897 	bl	8001e58 <HAL_GetTick>
 8003d2a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	9300      	str	r3, [sp, #0]
 8003d30:	2319      	movs	r3, #25
 8003d32:	2201      	movs	r2, #1
 8003d34:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003d38:	68f8      	ldr	r0, [r7, #12]
 8003d3a:	f000 f9af 	bl	800409c <I2C_WaitOnFlagUntilTimeout>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d001      	beq.n	8003d48 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	e0d5      	b.n	8003ef4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2222      	movs	r2, #34	; 0x22
 8003d4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2240      	movs	r2, #64	; 0x40
 8003d54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	6a3a      	ldr	r2, [r7, #32]
 8003d62:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003d68:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003d70:	88f8      	ldrh	r0, [r7, #6]
 8003d72:	893a      	ldrh	r2, [r7, #8]
 8003d74:	8979      	ldrh	r1, [r7, #10]
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	9301      	str	r3, [sp, #4]
 8003d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d7c:	9300      	str	r3, [sp, #0]
 8003d7e:	4603      	mov	r3, r0
 8003d80:	68f8      	ldr	r0, [r7, #12]
 8003d82:	f000 f913 	bl	8003fac <I2C_RequestMemoryRead>
 8003d86:	4603      	mov	r3, r0
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d005      	beq.n	8003d98 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	e0ad      	b.n	8003ef4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	2bff      	cmp	r3, #255	; 0xff
 8003da0:	d90e      	bls.n	8003dc0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	22ff      	movs	r2, #255	; 0xff
 8003da6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dac:	b2da      	uxtb	r2, r3
 8003dae:	8979      	ldrh	r1, [r7, #10]
 8003db0:	4b52      	ldr	r3, [pc, #328]	; (8003efc <HAL_I2C_Mem_Read+0x22c>)
 8003db2:	9300      	str	r3, [sp, #0]
 8003db4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003db8:	68f8      	ldr	r0, [r7, #12]
 8003dba:	f000 fa91 	bl	80042e0 <I2C_TransferConfig>
 8003dbe:	e00f      	b.n	8003de0 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dc4:	b29a      	uxth	r2, r3
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dce:	b2da      	uxtb	r2, r3
 8003dd0:	8979      	ldrh	r1, [r7, #10]
 8003dd2:	4b4a      	ldr	r3, [pc, #296]	; (8003efc <HAL_I2C_Mem_Read+0x22c>)
 8003dd4:	9300      	str	r3, [sp, #0]
 8003dd6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003dda:	68f8      	ldr	r0, [r7, #12]
 8003ddc:	f000 fa80 	bl	80042e0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	9300      	str	r3, [sp, #0]
 8003de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003de6:	2200      	movs	r2, #0
 8003de8:	2104      	movs	r1, #4
 8003dea:	68f8      	ldr	r0, [r7, #12]
 8003dec:	f000 f956 	bl	800409c <I2C_WaitOnFlagUntilTimeout>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d001      	beq.n	8003dfa <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e07c      	b.n	8003ef4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e04:	b2d2      	uxtb	r2, r2
 8003e06:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0c:	1c5a      	adds	r2, r3, #1
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e16:	3b01      	subs	r3, #1
 8003e18:	b29a      	uxth	r2, r3
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	3b01      	subs	r3, #1
 8003e26:	b29a      	uxth	r2, r3
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d034      	beq.n	8003ea0 <HAL_I2C_Mem_Read+0x1d0>
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d130      	bne.n	8003ea0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	9300      	str	r3, [sp, #0]
 8003e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e44:	2200      	movs	r2, #0
 8003e46:	2180      	movs	r1, #128	; 0x80
 8003e48:	68f8      	ldr	r0, [r7, #12]
 8003e4a:	f000 f927 	bl	800409c <I2C_WaitOnFlagUntilTimeout>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d001      	beq.n	8003e58 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	e04d      	b.n	8003ef4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e5c:	b29b      	uxth	r3, r3
 8003e5e:	2bff      	cmp	r3, #255	; 0xff
 8003e60:	d90e      	bls.n	8003e80 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	22ff      	movs	r2, #255	; 0xff
 8003e66:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e6c:	b2da      	uxtb	r2, r3
 8003e6e:	8979      	ldrh	r1, [r7, #10]
 8003e70:	2300      	movs	r3, #0
 8003e72:	9300      	str	r3, [sp, #0]
 8003e74:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003e78:	68f8      	ldr	r0, [r7, #12]
 8003e7a:	f000 fa31 	bl	80042e0 <I2C_TransferConfig>
 8003e7e:	e00f      	b.n	8003ea0 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e84:	b29a      	uxth	r2, r3
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e8e:	b2da      	uxtb	r2, r3
 8003e90:	8979      	ldrh	r1, [r7, #10]
 8003e92:	2300      	movs	r3, #0
 8003e94:	9300      	str	r3, [sp, #0]
 8003e96:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e9a:	68f8      	ldr	r0, [r7, #12]
 8003e9c:	f000 fa20 	bl	80042e0 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d19a      	bne.n	8003de0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003eaa:	697a      	ldr	r2, [r7, #20]
 8003eac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003eae:	68f8      	ldr	r0, [r7, #12]
 8003eb0:	f000 f974 	bl	800419c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d001      	beq.n	8003ebe <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e01a      	b.n	8003ef4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	2220      	movs	r2, #32
 8003ec4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	6859      	ldr	r1, [r3, #4]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	4b0b      	ldr	r3, [pc, #44]	; (8003f00 <HAL_I2C_Mem_Read+0x230>)
 8003ed2:	400b      	ands	r3, r1
 8003ed4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2220      	movs	r2, #32
 8003eda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	e000      	b.n	8003ef4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003ef2:	2302      	movs	r3, #2
  }
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	3718      	adds	r7, #24
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}
 8003efc:	80002400 	.word	0x80002400
 8003f00:	fe00e800 	.word	0xfe00e800

08003f04 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b086      	sub	sp, #24
 8003f08:	af02      	add	r7, sp, #8
 8003f0a:	60f8      	str	r0, [r7, #12]
 8003f0c:	4608      	mov	r0, r1
 8003f0e:	4611      	mov	r1, r2
 8003f10:	461a      	mov	r2, r3
 8003f12:	4603      	mov	r3, r0
 8003f14:	817b      	strh	r3, [r7, #10]
 8003f16:	460b      	mov	r3, r1
 8003f18:	813b      	strh	r3, [r7, #8]
 8003f1a:	4613      	mov	r3, r2
 8003f1c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003f1e:	88fb      	ldrh	r3, [r7, #6]
 8003f20:	b2da      	uxtb	r2, r3
 8003f22:	8979      	ldrh	r1, [r7, #10]
 8003f24:	4b20      	ldr	r3, [pc, #128]	; (8003fa8 <I2C_RequestMemoryWrite+0xa4>)
 8003f26:	9300      	str	r3, [sp, #0]
 8003f28:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003f2c:	68f8      	ldr	r0, [r7, #12]
 8003f2e:	f000 f9d7 	bl	80042e0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f32:	69fa      	ldr	r2, [r7, #28]
 8003f34:	69b9      	ldr	r1, [r7, #24]
 8003f36:	68f8      	ldr	r0, [r7, #12]
 8003f38:	f000 f8f0 	bl	800411c <I2C_WaitOnTXISFlagUntilTimeout>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d001      	beq.n	8003f46 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e02c      	b.n	8003fa0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003f46:	88fb      	ldrh	r3, [r7, #6]
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d105      	bne.n	8003f58 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003f4c:	893b      	ldrh	r3, [r7, #8]
 8003f4e:	b2da      	uxtb	r2, r3
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	629a      	str	r2, [r3, #40]	; 0x28
 8003f56:	e015      	b.n	8003f84 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003f58:	893b      	ldrh	r3, [r7, #8]
 8003f5a:	0a1b      	lsrs	r3, r3, #8
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	b2da      	uxtb	r2, r3
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f66:	69fa      	ldr	r2, [r7, #28]
 8003f68:	69b9      	ldr	r1, [r7, #24]
 8003f6a:	68f8      	ldr	r0, [r7, #12]
 8003f6c:	f000 f8d6 	bl	800411c <I2C_WaitOnTXISFlagUntilTimeout>
 8003f70:	4603      	mov	r3, r0
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d001      	beq.n	8003f7a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e012      	b.n	8003fa0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003f7a:	893b      	ldrh	r3, [r7, #8]
 8003f7c:	b2da      	uxtb	r2, r3
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003f84:	69fb      	ldr	r3, [r7, #28]
 8003f86:	9300      	str	r3, [sp, #0]
 8003f88:	69bb      	ldr	r3, [r7, #24]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	2180      	movs	r1, #128	; 0x80
 8003f8e:	68f8      	ldr	r0, [r7, #12]
 8003f90:	f000 f884 	bl	800409c <I2C_WaitOnFlagUntilTimeout>
 8003f94:	4603      	mov	r3, r0
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d001      	beq.n	8003f9e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e000      	b.n	8003fa0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003f9e:	2300      	movs	r3, #0
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3710      	adds	r7, #16
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}
 8003fa8:	80002000 	.word	0x80002000

08003fac <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b086      	sub	sp, #24
 8003fb0:	af02      	add	r7, sp, #8
 8003fb2:	60f8      	str	r0, [r7, #12]
 8003fb4:	4608      	mov	r0, r1
 8003fb6:	4611      	mov	r1, r2
 8003fb8:	461a      	mov	r2, r3
 8003fba:	4603      	mov	r3, r0
 8003fbc:	817b      	strh	r3, [r7, #10]
 8003fbe:	460b      	mov	r3, r1
 8003fc0:	813b      	strh	r3, [r7, #8]
 8003fc2:	4613      	mov	r3, r2
 8003fc4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003fc6:	88fb      	ldrh	r3, [r7, #6]
 8003fc8:	b2da      	uxtb	r2, r3
 8003fca:	8979      	ldrh	r1, [r7, #10]
 8003fcc:	4b20      	ldr	r3, [pc, #128]	; (8004050 <I2C_RequestMemoryRead+0xa4>)
 8003fce:	9300      	str	r3, [sp, #0]
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	68f8      	ldr	r0, [r7, #12]
 8003fd4:	f000 f984 	bl	80042e0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fd8:	69fa      	ldr	r2, [r7, #28]
 8003fda:	69b9      	ldr	r1, [r7, #24]
 8003fdc:	68f8      	ldr	r0, [r7, #12]
 8003fde:	f000 f89d 	bl	800411c <I2C_WaitOnTXISFlagUntilTimeout>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d001      	beq.n	8003fec <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e02c      	b.n	8004046 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003fec:	88fb      	ldrh	r3, [r7, #6]
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d105      	bne.n	8003ffe <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003ff2:	893b      	ldrh	r3, [r7, #8]
 8003ff4:	b2da      	uxtb	r2, r3
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	629a      	str	r2, [r3, #40]	; 0x28
 8003ffc:	e015      	b.n	800402a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003ffe:	893b      	ldrh	r3, [r7, #8]
 8004000:	0a1b      	lsrs	r3, r3, #8
 8004002:	b29b      	uxth	r3, r3
 8004004:	b2da      	uxtb	r2, r3
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800400c:	69fa      	ldr	r2, [r7, #28]
 800400e:	69b9      	ldr	r1, [r7, #24]
 8004010:	68f8      	ldr	r0, [r7, #12]
 8004012:	f000 f883 	bl	800411c <I2C_WaitOnTXISFlagUntilTimeout>
 8004016:	4603      	mov	r3, r0
 8004018:	2b00      	cmp	r3, #0
 800401a:	d001      	beq.n	8004020 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	e012      	b.n	8004046 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004020:	893b      	ldrh	r3, [r7, #8]
 8004022:	b2da      	uxtb	r2, r3
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800402a:	69fb      	ldr	r3, [r7, #28]
 800402c:	9300      	str	r3, [sp, #0]
 800402e:	69bb      	ldr	r3, [r7, #24]
 8004030:	2200      	movs	r2, #0
 8004032:	2140      	movs	r1, #64	; 0x40
 8004034:	68f8      	ldr	r0, [r7, #12]
 8004036:	f000 f831 	bl	800409c <I2C_WaitOnFlagUntilTimeout>
 800403a:	4603      	mov	r3, r0
 800403c:	2b00      	cmp	r3, #0
 800403e:	d001      	beq.n	8004044 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	e000      	b.n	8004046 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004044:	2300      	movs	r3, #0
}
 8004046:	4618      	mov	r0, r3
 8004048:	3710      	adds	r7, #16
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	80002000 	.word	0x80002000

08004054 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004054:	b480      	push	{r7}
 8004056:	b083      	sub	sp, #12
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	699b      	ldr	r3, [r3, #24]
 8004062:	f003 0302 	and.w	r3, r3, #2
 8004066:	2b02      	cmp	r3, #2
 8004068:	d103      	bne.n	8004072 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	2200      	movs	r2, #0
 8004070:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	699b      	ldr	r3, [r3, #24]
 8004078:	f003 0301 	and.w	r3, r3, #1
 800407c:	2b01      	cmp	r3, #1
 800407e:	d007      	beq.n	8004090 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	699a      	ldr	r2, [r3, #24]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f042 0201 	orr.w	r2, r2, #1
 800408e:	619a      	str	r2, [r3, #24]
  }
}
 8004090:	bf00      	nop
 8004092:	370c      	adds	r7, #12
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr

0800409c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b084      	sub	sp, #16
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	60f8      	str	r0, [r7, #12]
 80040a4:	60b9      	str	r1, [r7, #8]
 80040a6:	603b      	str	r3, [r7, #0]
 80040a8:	4613      	mov	r3, r2
 80040aa:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040ac:	e022      	b.n	80040f4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040b4:	d01e      	beq.n	80040f4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040b6:	f7fd fecf 	bl	8001e58 <HAL_GetTick>
 80040ba:	4602      	mov	r2, r0
 80040bc:	69bb      	ldr	r3, [r7, #24]
 80040be:	1ad3      	subs	r3, r2, r3
 80040c0:	683a      	ldr	r2, [r7, #0]
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d302      	bcc.n	80040cc <I2C_WaitOnFlagUntilTimeout+0x30>
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d113      	bne.n	80040f4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040d0:	f043 0220 	orr.w	r2, r3, #32
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2220      	movs	r2, #32
 80040dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2200      	movs	r2, #0
 80040e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2200      	movs	r2, #0
 80040ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e00f      	b.n	8004114 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	699a      	ldr	r2, [r3, #24]
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	4013      	ands	r3, r2
 80040fe:	68ba      	ldr	r2, [r7, #8]
 8004100:	429a      	cmp	r2, r3
 8004102:	bf0c      	ite	eq
 8004104:	2301      	moveq	r3, #1
 8004106:	2300      	movne	r3, #0
 8004108:	b2db      	uxtb	r3, r3
 800410a:	461a      	mov	r2, r3
 800410c:	79fb      	ldrb	r3, [r7, #7]
 800410e:	429a      	cmp	r2, r3
 8004110:	d0cd      	beq.n	80040ae <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004112:	2300      	movs	r3, #0
}
 8004114:	4618      	mov	r0, r3
 8004116:	3710      	adds	r7, #16
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}

0800411c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b084      	sub	sp, #16
 8004120:	af00      	add	r7, sp, #0
 8004122:	60f8      	str	r0, [r7, #12]
 8004124:	60b9      	str	r1, [r7, #8]
 8004126:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004128:	e02c      	b.n	8004184 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	68b9      	ldr	r1, [r7, #8]
 800412e:	68f8      	ldr	r0, [r7, #12]
 8004130:	f000 f870 	bl	8004214 <I2C_IsAcknowledgeFailed>
 8004134:	4603      	mov	r3, r0
 8004136:	2b00      	cmp	r3, #0
 8004138:	d001      	beq.n	800413e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e02a      	b.n	8004194 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004144:	d01e      	beq.n	8004184 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004146:	f7fd fe87 	bl	8001e58 <HAL_GetTick>
 800414a:	4602      	mov	r2, r0
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	1ad3      	subs	r3, r2, r3
 8004150:	68ba      	ldr	r2, [r7, #8]
 8004152:	429a      	cmp	r2, r3
 8004154:	d302      	bcc.n	800415c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d113      	bne.n	8004184 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004160:	f043 0220 	orr.w	r2, r3, #32
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2220      	movs	r2, #32
 800416c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2200      	movs	r2, #0
 8004174:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2200      	movs	r2, #0
 800417c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	e007      	b.n	8004194 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	699b      	ldr	r3, [r3, #24]
 800418a:	f003 0302 	and.w	r3, r3, #2
 800418e:	2b02      	cmp	r3, #2
 8004190:	d1cb      	bne.n	800412a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004192:	2300      	movs	r3, #0
}
 8004194:	4618      	mov	r0, r3
 8004196:	3710      	adds	r7, #16
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}

0800419c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b084      	sub	sp, #16
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	60f8      	str	r0, [r7, #12]
 80041a4:	60b9      	str	r1, [r7, #8]
 80041a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80041a8:	e028      	b.n	80041fc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	68b9      	ldr	r1, [r7, #8]
 80041ae:	68f8      	ldr	r0, [r7, #12]
 80041b0:	f000 f830 	bl	8004214 <I2C_IsAcknowledgeFailed>
 80041b4:	4603      	mov	r3, r0
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d001      	beq.n	80041be <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e026      	b.n	800420c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041be:	f7fd fe4b 	bl	8001e58 <HAL_GetTick>
 80041c2:	4602      	mov	r2, r0
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	1ad3      	subs	r3, r2, r3
 80041c8:	68ba      	ldr	r2, [r7, #8]
 80041ca:	429a      	cmp	r2, r3
 80041cc:	d302      	bcc.n	80041d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d113      	bne.n	80041fc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041d8:	f043 0220 	orr.w	r2, r3, #32
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2220      	movs	r2, #32
 80041e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2200      	movs	r2, #0
 80041ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2200      	movs	r2, #0
 80041f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	e007      	b.n	800420c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	699b      	ldr	r3, [r3, #24]
 8004202:	f003 0320 	and.w	r3, r3, #32
 8004206:	2b20      	cmp	r3, #32
 8004208:	d1cf      	bne.n	80041aa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800420a:	2300      	movs	r3, #0
}
 800420c:	4618      	mov	r0, r3
 800420e:	3710      	adds	r7, #16
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}

08004214 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b084      	sub	sp, #16
 8004218:	af00      	add	r7, sp, #0
 800421a:	60f8      	str	r0, [r7, #12]
 800421c:	60b9      	str	r1, [r7, #8]
 800421e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	699b      	ldr	r3, [r3, #24]
 8004226:	f003 0310 	and.w	r3, r3, #16
 800422a:	2b10      	cmp	r3, #16
 800422c:	d151      	bne.n	80042d2 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800422e:	e022      	b.n	8004276 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004236:	d01e      	beq.n	8004276 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004238:	f7fd fe0e 	bl	8001e58 <HAL_GetTick>
 800423c:	4602      	mov	r2, r0
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	68ba      	ldr	r2, [r7, #8]
 8004244:	429a      	cmp	r2, r3
 8004246:	d302      	bcc.n	800424e <I2C_IsAcknowledgeFailed+0x3a>
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d113      	bne.n	8004276 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004252:	f043 0220 	orr.w	r2, r3, #32
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2220      	movs	r2, #32
 800425e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2200      	movs	r2, #0
 8004266:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2200      	movs	r2, #0
 800426e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e02e      	b.n	80042d4 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	699b      	ldr	r3, [r3, #24]
 800427c:	f003 0320 	and.w	r3, r3, #32
 8004280:	2b20      	cmp	r3, #32
 8004282:	d1d5      	bne.n	8004230 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	2210      	movs	r2, #16
 800428a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	2220      	movs	r2, #32
 8004292:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004294:	68f8      	ldr	r0, [r7, #12]
 8004296:	f7ff fedd 	bl	8004054 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	6859      	ldr	r1, [r3, #4]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	4b0d      	ldr	r3, [pc, #52]	; (80042dc <I2C_IsAcknowledgeFailed+0xc8>)
 80042a6:	400b      	ands	r3, r1
 80042a8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ae:	f043 0204 	orr.w	r2, r3, #4
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2220      	movs	r2, #32
 80042ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2200      	movs	r2, #0
 80042c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2200      	movs	r2, #0
 80042ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e000      	b.n	80042d4 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80042d2:	2300      	movs	r3, #0
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3710      	adds	r7, #16
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}
 80042dc:	fe00e800 	.word	0xfe00e800

080042e0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b085      	sub	sp, #20
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	60f8      	str	r0, [r7, #12]
 80042e8:	607b      	str	r3, [r7, #4]
 80042ea:	460b      	mov	r3, r1
 80042ec:	817b      	strh	r3, [r7, #10]
 80042ee:	4613      	mov	r3, r2
 80042f0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	685a      	ldr	r2, [r3, #4]
 80042f8:	69bb      	ldr	r3, [r7, #24]
 80042fa:	0d5b      	lsrs	r3, r3, #21
 80042fc:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004300:	4b0d      	ldr	r3, [pc, #52]	; (8004338 <I2C_TransferConfig+0x58>)
 8004302:	430b      	orrs	r3, r1
 8004304:	43db      	mvns	r3, r3
 8004306:	ea02 0103 	and.w	r1, r2, r3
 800430a:	897b      	ldrh	r3, [r7, #10]
 800430c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004310:	7a7b      	ldrb	r3, [r7, #9]
 8004312:	041b      	lsls	r3, r3, #16
 8004314:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004318:	431a      	orrs	r2, r3
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	431a      	orrs	r2, r3
 800431e:	69bb      	ldr	r3, [r7, #24]
 8004320:	431a      	orrs	r2, r3
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	430a      	orrs	r2, r1
 8004328:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800432a:	bf00      	nop
 800432c:	3714      	adds	r7, #20
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr
 8004336:	bf00      	nop
 8004338:	03ff63ff 	.word	0x03ff63ff

0800433c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800433c:	b480      	push	{r7}
 800433e:	b083      	sub	sp, #12
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800434c:	b2db      	uxtb	r3, r3
 800434e:	2b20      	cmp	r3, #32
 8004350:	d138      	bne.n	80043c4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004358:	2b01      	cmp	r3, #1
 800435a:	d101      	bne.n	8004360 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800435c:	2302      	movs	r3, #2
 800435e:	e032      	b.n	80043c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2224      	movs	r2, #36	; 0x24
 800436c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f022 0201 	bic.w	r2, r2, #1
 800437e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800438e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	6819      	ldr	r1, [r3, #0]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	683a      	ldr	r2, [r7, #0]
 800439c:	430a      	orrs	r2, r1
 800439e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f042 0201 	orr.w	r2, r2, #1
 80043ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2220      	movs	r2, #32
 80043b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2200      	movs	r2, #0
 80043bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80043c0:	2300      	movs	r3, #0
 80043c2:	e000      	b.n	80043c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80043c4:	2302      	movs	r3, #2
  }
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	370c      	adds	r7, #12
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr

080043d2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80043d2:	b480      	push	{r7}
 80043d4:	b085      	sub	sp, #20
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	6078      	str	r0, [r7, #4]
 80043da:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043e2:	b2db      	uxtb	r3, r3
 80043e4:	2b20      	cmp	r3, #32
 80043e6:	d139      	bne.n	800445c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d101      	bne.n	80043f6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80043f2:	2302      	movs	r3, #2
 80043f4:	e033      	b.n	800445e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2201      	movs	r2, #1
 80043fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2224      	movs	r2, #36	; 0x24
 8004402:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f022 0201 	bic.w	r2, r2, #1
 8004414:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004424:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	021b      	lsls	r3, r3, #8
 800442a:	68fa      	ldr	r2, [r7, #12]
 800442c:	4313      	orrs	r3, r2
 800442e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	68fa      	ldr	r2, [r7, #12]
 8004436:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f042 0201 	orr.w	r2, r2, #1
 8004446:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2220      	movs	r2, #32
 800444c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2200      	movs	r2, #0
 8004454:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004458:	2300      	movs	r3, #0
 800445a:	e000      	b.n	800445e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800445c:	2302      	movs	r3, #2
  }
}
 800445e:	4618      	mov	r0, r3
 8004460:	3714      	adds	r7, #20
 8004462:	46bd      	mov	sp, r7
 8004464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004468:	4770      	bx	lr

0800446a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800446a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800446c:	b08b      	sub	sp, #44	; 0x2c
 800446e:	af06      	add	r7, sp, #24
 8004470:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d101      	bne.n	800447c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	e104      	b.n	8004686 <HAL_PCD_Init+0x21c>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8004482:	b2db      	uxtb	r3, r3
 8004484:	2b00      	cmp	r3, #0
 8004486:	d106      	bne.n	8004496 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2200      	movs	r2, #0
 800448c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f007 f99f 	bl	800b7d4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2203      	movs	r2, #3
 800449a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4618      	mov	r0, r3
 80044a4:	f003 faf2 	bl	8007a8c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	603b      	str	r3, [r7, #0]
 80044ae:	687e      	ldr	r6, [r7, #4]
 80044b0:	466d      	mov	r5, sp
 80044b2:	f106 0410 	add.w	r4, r6, #16
 80044b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80044b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80044ba:	6823      	ldr	r3, [r4, #0]
 80044bc:	602b      	str	r3, [r5, #0]
 80044be:	1d33      	adds	r3, r6, #4
 80044c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80044c2:	6838      	ldr	r0, [r7, #0]
 80044c4:	f003 faba 	bl	8007a3c <USB_CoreInit>
 80044c8:	4603      	mov	r3, r0
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d005      	beq.n	80044da <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2202      	movs	r2, #2
 80044d2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	e0d5      	b.n	8004686 <HAL_PCD_Init+0x21c>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	2100      	movs	r1, #0
 80044e0:	4618      	mov	r0, r3
 80044e2:	f003 faee 	bl	8007ac2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80044e6:	2300      	movs	r3, #0
 80044e8:	73fb      	strb	r3, [r7, #15]
 80044ea:	e04c      	b.n	8004586 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80044ec:	7bfb      	ldrb	r3, [r7, #15]
 80044ee:	6879      	ldr	r1, [r7, #4]
 80044f0:	1c5a      	adds	r2, r3, #1
 80044f2:	4613      	mov	r3, r2
 80044f4:	009b      	lsls	r3, r3, #2
 80044f6:	4413      	add	r3, r2
 80044f8:	00db      	lsls	r3, r3, #3
 80044fa:	440b      	add	r3, r1
 80044fc:	3301      	adds	r3, #1
 80044fe:	2201      	movs	r2, #1
 8004500:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004502:	7bfb      	ldrb	r3, [r7, #15]
 8004504:	6879      	ldr	r1, [r7, #4]
 8004506:	1c5a      	adds	r2, r3, #1
 8004508:	4613      	mov	r3, r2
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	4413      	add	r3, r2
 800450e:	00db      	lsls	r3, r3, #3
 8004510:	440b      	add	r3, r1
 8004512:	7bfa      	ldrb	r2, [r7, #15]
 8004514:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004516:	7bfa      	ldrb	r2, [r7, #15]
 8004518:	7bfb      	ldrb	r3, [r7, #15]
 800451a:	b298      	uxth	r0, r3
 800451c:	6879      	ldr	r1, [r7, #4]
 800451e:	4613      	mov	r3, r2
 8004520:	009b      	lsls	r3, r3, #2
 8004522:	4413      	add	r3, r2
 8004524:	00db      	lsls	r3, r3, #3
 8004526:	440b      	add	r3, r1
 8004528:	3336      	adds	r3, #54	; 0x36
 800452a:	4602      	mov	r2, r0
 800452c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800452e:	7bfb      	ldrb	r3, [r7, #15]
 8004530:	6879      	ldr	r1, [r7, #4]
 8004532:	1c5a      	adds	r2, r3, #1
 8004534:	4613      	mov	r3, r2
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	4413      	add	r3, r2
 800453a:	00db      	lsls	r3, r3, #3
 800453c:	440b      	add	r3, r1
 800453e:	3303      	adds	r3, #3
 8004540:	2200      	movs	r2, #0
 8004542:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004544:	7bfa      	ldrb	r2, [r7, #15]
 8004546:	6879      	ldr	r1, [r7, #4]
 8004548:	4613      	mov	r3, r2
 800454a:	009b      	lsls	r3, r3, #2
 800454c:	4413      	add	r3, r2
 800454e:	00db      	lsls	r3, r3, #3
 8004550:	440b      	add	r3, r1
 8004552:	3338      	adds	r3, #56	; 0x38
 8004554:	2200      	movs	r2, #0
 8004556:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004558:	7bfa      	ldrb	r2, [r7, #15]
 800455a:	6879      	ldr	r1, [r7, #4]
 800455c:	4613      	mov	r3, r2
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	4413      	add	r3, r2
 8004562:	00db      	lsls	r3, r3, #3
 8004564:	440b      	add	r3, r1
 8004566:	333c      	adds	r3, #60	; 0x3c
 8004568:	2200      	movs	r2, #0
 800456a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800456c:	7bfa      	ldrb	r2, [r7, #15]
 800456e:	6879      	ldr	r1, [r7, #4]
 8004570:	4613      	mov	r3, r2
 8004572:	009b      	lsls	r3, r3, #2
 8004574:	4413      	add	r3, r2
 8004576:	00db      	lsls	r3, r3, #3
 8004578:	440b      	add	r3, r1
 800457a:	3340      	adds	r3, #64	; 0x40
 800457c:	2200      	movs	r2, #0
 800457e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004580:	7bfb      	ldrb	r3, [r7, #15]
 8004582:	3301      	adds	r3, #1
 8004584:	73fb      	strb	r3, [r7, #15]
 8004586:	7bfa      	ldrb	r2, [r7, #15]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	429a      	cmp	r2, r3
 800458e:	d3ad      	bcc.n	80044ec <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004590:	2300      	movs	r3, #0
 8004592:	73fb      	strb	r3, [r7, #15]
 8004594:	e044      	b.n	8004620 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004596:	7bfa      	ldrb	r2, [r7, #15]
 8004598:	6879      	ldr	r1, [r7, #4]
 800459a:	4613      	mov	r3, r2
 800459c:	009b      	lsls	r3, r3, #2
 800459e:	4413      	add	r3, r2
 80045a0:	00db      	lsls	r3, r3, #3
 80045a2:	440b      	add	r3, r1
 80045a4:	f203 1369 	addw	r3, r3, #361	; 0x169
 80045a8:	2200      	movs	r2, #0
 80045aa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80045ac:	7bfa      	ldrb	r2, [r7, #15]
 80045ae:	6879      	ldr	r1, [r7, #4]
 80045b0:	4613      	mov	r3, r2
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	4413      	add	r3, r2
 80045b6:	00db      	lsls	r3, r3, #3
 80045b8:	440b      	add	r3, r1
 80045ba:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80045be:	7bfa      	ldrb	r2, [r7, #15]
 80045c0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80045c2:	7bfa      	ldrb	r2, [r7, #15]
 80045c4:	6879      	ldr	r1, [r7, #4]
 80045c6:	4613      	mov	r3, r2
 80045c8:	009b      	lsls	r3, r3, #2
 80045ca:	4413      	add	r3, r2
 80045cc:	00db      	lsls	r3, r3, #3
 80045ce:	440b      	add	r3, r1
 80045d0:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80045d4:	2200      	movs	r2, #0
 80045d6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80045d8:	7bfa      	ldrb	r2, [r7, #15]
 80045da:	6879      	ldr	r1, [r7, #4]
 80045dc:	4613      	mov	r3, r2
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	4413      	add	r3, r2
 80045e2:	00db      	lsls	r3, r3, #3
 80045e4:	440b      	add	r3, r1
 80045e6:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80045ea:	2200      	movs	r2, #0
 80045ec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80045ee:	7bfa      	ldrb	r2, [r7, #15]
 80045f0:	6879      	ldr	r1, [r7, #4]
 80045f2:	4613      	mov	r3, r2
 80045f4:	009b      	lsls	r3, r3, #2
 80045f6:	4413      	add	r3, r2
 80045f8:	00db      	lsls	r3, r3, #3
 80045fa:	440b      	add	r3, r1
 80045fc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8004600:	2200      	movs	r2, #0
 8004602:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004604:	7bfa      	ldrb	r2, [r7, #15]
 8004606:	6879      	ldr	r1, [r7, #4]
 8004608:	4613      	mov	r3, r2
 800460a:	009b      	lsls	r3, r3, #2
 800460c:	4413      	add	r3, r2
 800460e:	00db      	lsls	r3, r3, #3
 8004610:	440b      	add	r3, r1
 8004612:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004616:	2200      	movs	r2, #0
 8004618:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800461a:	7bfb      	ldrb	r3, [r7, #15]
 800461c:	3301      	adds	r3, #1
 800461e:	73fb      	strb	r3, [r7, #15]
 8004620:	7bfa      	ldrb	r2, [r7, #15]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	429a      	cmp	r2, r3
 8004628:	d3b5      	bcc.n	8004596 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	603b      	str	r3, [r7, #0]
 8004630:	687e      	ldr	r6, [r7, #4]
 8004632:	466d      	mov	r5, sp
 8004634:	f106 0410 	add.w	r4, r6, #16
 8004638:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800463a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800463c:	6823      	ldr	r3, [r4, #0]
 800463e:	602b      	str	r3, [r5, #0]
 8004640:	1d33      	adds	r3, r6, #4
 8004642:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004644:	6838      	ldr	r0, [r7, #0]
 8004646:	f003 fa49 	bl	8007adc <USB_DevInit>
 800464a:	4603      	mov	r3, r0
 800464c:	2b00      	cmp	r3, #0
 800464e:	d005      	beq.n	800465c <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2202      	movs	r2, #2
 8004654:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	e014      	b.n	8004686 <HAL_PCD_Init+0x21c>
  }

  hpcd->USB_Address = 0U;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2200      	movs	r2, #0
 8004660:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2201      	movs	r2, #1
 8004668:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	69db      	ldr	r3, [r3, #28]
 8004670:	2b01      	cmp	r3, #1
 8004672:	d102      	bne.n	800467a <HAL_PCD_Init+0x210>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f001 fb85 	bl	8005d84 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4618      	mov	r0, r3
 8004680:	f005 fbca 	bl	8009e18 <USB_DevDisconnect>

  return HAL_OK;
 8004684:	2300      	movs	r3, #0
}
 8004686:	4618      	mov	r0, r3
 8004688:	3714      	adds	r7, #20
 800468a:	46bd      	mov	sp, r7
 800468c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800468e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800468e:	b580      	push	{r7, lr}
 8004690:	b082      	sub	sp, #8
 8004692:	af00      	add	r7, sp, #0
 8004694:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800469c:	2b01      	cmp	r3, #1
 800469e:	d101      	bne.n	80046a4 <HAL_PCD_Start+0x16>
 80046a0:	2302      	movs	r3, #2
 80046a2:	e012      	b.n	80046ca <HAL_PCD_Start+0x3c>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2201      	movs	r2, #1
 80046a8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4618      	mov	r0, r3
 80046b2:	f003 f9d4 	bl	8007a5e <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4618      	mov	r0, r3
 80046bc:	f005 fb95 	bl	8009dea <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2200      	movs	r2, #0
 80046c4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80046c8:	2300      	movs	r3, #0
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3708      	adds	r7, #8
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}

080046d2 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80046d2:	b580      	push	{r7, lr}
 80046d4:	b082      	sub	sp, #8
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4618      	mov	r0, r3
 80046e0:	f005 fbaf 	bl	8009e42 <USB_ReadInterrupts>
 80046e4:	4603      	mov	r3, r0
 80046e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046ee:	d102      	bne.n	80046f6 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	f000 fb43 	bl	8004d7c <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4618      	mov	r0, r3
 80046fc:	f005 fba1 	bl	8009e42 <USB_ReadInterrupts>
 8004700:	4603      	mov	r3, r0
 8004702:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004706:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800470a:	d112      	bne.n	8004732 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004714:	b29a      	uxth	r2, r3
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800471e:	b292      	uxth	r2, r2
 8004720:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	f007 f8ea 	bl	800b8fe <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800472a:	2100      	movs	r1, #0
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	f000 f91e 	bl	800496e <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4618      	mov	r0, r3
 8004738:	f005 fb83 	bl	8009e42 <USB_ReadInterrupts>
 800473c:	4603      	mov	r3, r0
 800473e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004742:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004746:	d10b      	bne.n	8004760 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004750:	b29a      	uxth	r2, r3
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800475a:	b292      	uxth	r2, r2
 800475c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4618      	mov	r0, r3
 8004766:	f005 fb6c 	bl	8009e42 <USB_ReadInterrupts>
 800476a:	4603      	mov	r3, r0
 800476c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004770:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004774:	d10b      	bne.n	800478e <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800477e:	b29a      	uxth	r2, r3
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004788:	b292      	uxth	r2, r2
 800478a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4618      	mov	r0, r3
 8004794:	f005 fb55 	bl	8009e42 <USB_ReadInterrupts>
 8004798:	4603      	mov	r3, r0
 800479a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800479e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047a2:	d133      	bne.n	800480c <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80047ac:	b29a      	uxth	r2, r3
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f022 0204 	bic.w	r2, r2, #4
 80047b6:	b292      	uxth	r2, r2
 80047b8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80047c4:	b29a      	uxth	r2, r3
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f022 0208 	bic.w	r2, r2, #8
 80047ce:	b292      	uxth	r2, r2
 80047d0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d107      	bne.n	80047ee <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2200      	movs	r2, #0
 80047e2:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80047e6:	2100      	movs	r1, #0
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	f007 fb13 	bl	800be14 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f007 f8be 	bl	800b970 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80047fc:	b29a      	uxth	r2, r3
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004806:	b292      	uxth	r2, r2
 8004808:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4618      	mov	r0, r3
 8004812:	f005 fb16 	bl	8009e42 <USB_ReadInterrupts>
 8004816:	4603      	mov	r3, r0
 8004818:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800481c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004820:	d126      	bne.n	8004870 <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800482a:	b29a      	uxth	r2, r3
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f042 0208 	orr.w	r2, r2, #8
 8004834:	b292      	uxth	r2, r2
 8004836:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004842:	b29a      	uxth	r2, r3
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800484c:	b292      	uxth	r2, r2
 800484e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800485a:	b29a      	uxth	r2, r3
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f042 0204 	orr.w	r2, r2, #4
 8004864:	b292      	uxth	r2, r2
 8004866:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f007 f866 	bl	800b93c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4618      	mov	r0, r3
 8004876:	f005 fae4 	bl	8009e42 <USB_ReadInterrupts>
 800487a:	4603      	mov	r3, r0
 800487c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004880:	2b80      	cmp	r3, #128	; 0x80
 8004882:	d13f      	bne.n	8004904 <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800488c:	b29a      	uxth	r2, r3
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004896:	b292      	uxth	r2, r2
 8004898:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d12b      	bne.n	80048fe <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80048ae:	b29a      	uxth	r2, r3
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f042 0204 	orr.w	r2, r2, #4
 80048b8:	b292      	uxth	r2, r2
 80048ba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80048c6:	b29a      	uxth	r2, r3
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f042 0208 	orr.w	r2, r2, #8
 80048d0:	b292      	uxth	r2, r2
 80048d2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2201      	movs	r2, #1
 80048da:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	089b      	lsrs	r3, r3, #2
 80048ea:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80048f4:	2101      	movs	r1, #1
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f007 fa8c 	bl	800be14 <HAL_PCDEx_LPM_Callback>
 80048fc:	e002      	b.n	8004904 <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f007 f81c 	bl	800b93c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4618      	mov	r0, r3
 800490a:	f005 fa9a 	bl	8009e42 <USB_ReadInterrupts>
 800490e:	4603      	mov	r3, r0
 8004910:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004914:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004918:	d10e      	bne.n	8004938 <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004922:	b29a      	uxth	r2, r3
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800492c:	b292      	uxth	r2, r2
 800492e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f006 ffd5 	bl	800b8e2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4618      	mov	r0, r3
 800493e:	f005 fa80 	bl	8009e42 <USB_ReadInterrupts>
 8004942:	4603      	mov	r3, r0
 8004944:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004948:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800494c:	d10b      	bne.n	8004966 <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004956:	b29a      	uxth	r2, r3
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004960:	b292      	uxth	r2, r2
 8004962:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8004966:	bf00      	nop
 8004968:	3708      	adds	r7, #8
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}

0800496e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800496e:	b580      	push	{r7, lr}
 8004970:	b082      	sub	sp, #8
 8004972:	af00      	add	r7, sp, #0
 8004974:	6078      	str	r0, [r7, #4]
 8004976:	460b      	mov	r3, r1
 8004978:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004980:	2b01      	cmp	r3, #1
 8004982:	d101      	bne.n	8004988 <HAL_PCD_SetAddress+0x1a>
 8004984:	2302      	movs	r3, #2
 8004986:	e013      	b.n	80049b0 <HAL_PCD_SetAddress+0x42>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2201      	movs	r2, #1
 800498c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	78fa      	ldrb	r2, [r7, #3]
 8004994:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	78fa      	ldrb	r2, [r7, #3]
 800499e:	4611      	mov	r1, r2
 80049a0:	4618      	mov	r0, r3
 80049a2:	f005 fa0e 	bl	8009dc2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2200      	movs	r2, #0
 80049aa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80049ae:	2300      	movs	r3, #0
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	3708      	adds	r7, #8
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}

080049b8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b084      	sub	sp, #16
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
 80049c0:	4608      	mov	r0, r1
 80049c2:	4611      	mov	r1, r2
 80049c4:	461a      	mov	r2, r3
 80049c6:	4603      	mov	r3, r0
 80049c8:	70fb      	strb	r3, [r7, #3]
 80049ca:	460b      	mov	r3, r1
 80049cc:	803b      	strh	r3, [r7, #0]
 80049ce:	4613      	mov	r3, r2
 80049d0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80049d2:	2300      	movs	r3, #0
 80049d4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80049d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	da0e      	bge.n	80049fc <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80049de:	78fb      	ldrb	r3, [r7, #3]
 80049e0:	f003 0307 	and.w	r3, r3, #7
 80049e4:	1c5a      	adds	r2, r3, #1
 80049e6:	4613      	mov	r3, r2
 80049e8:	009b      	lsls	r3, r3, #2
 80049ea:	4413      	add	r3, r2
 80049ec:	00db      	lsls	r3, r3, #3
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	4413      	add	r3, r2
 80049f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2201      	movs	r2, #1
 80049f8:	705a      	strb	r2, [r3, #1]
 80049fa:	e00e      	b.n	8004a1a <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80049fc:	78fb      	ldrb	r3, [r7, #3]
 80049fe:	f003 0207 	and.w	r2, r3, #7
 8004a02:	4613      	mov	r3, r2
 8004a04:	009b      	lsls	r3, r3, #2
 8004a06:	4413      	add	r3, r2
 8004a08:	00db      	lsls	r3, r3, #3
 8004a0a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	4413      	add	r3, r2
 8004a12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2200      	movs	r2, #0
 8004a18:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004a1a:	78fb      	ldrb	r3, [r7, #3]
 8004a1c:	f003 0307 	and.w	r3, r3, #7
 8004a20:	b2da      	uxtb	r2, r3
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004a26:	883a      	ldrh	r2, [r7, #0]
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	78ba      	ldrb	r2, [r7, #2]
 8004a30:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	785b      	ldrb	r3, [r3, #1]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d004      	beq.n	8004a44 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	781b      	ldrb	r3, [r3, #0]
 8004a3e:	b29a      	uxth	r2, r3
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004a44:	78bb      	ldrb	r3, [r7, #2]
 8004a46:	2b02      	cmp	r3, #2
 8004a48:	d102      	bne.n	8004a50 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	d101      	bne.n	8004a5e <HAL_PCD_EP_Open+0xa6>
 8004a5a:	2302      	movs	r3, #2
 8004a5c:	e00e      	b.n	8004a7c <HAL_PCD_EP_Open+0xc4>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2201      	movs	r2, #1
 8004a62:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	68f9      	ldr	r1, [r7, #12]
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f003 f857 	bl	8007b20 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8004a7a:	7afb      	ldrb	r3, [r7, #11]
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3710      	adds	r7, #16
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}

08004a84 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b084      	sub	sp, #16
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
 8004a8c:	460b      	mov	r3, r1
 8004a8e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004a90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	da0e      	bge.n	8004ab6 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a98:	78fb      	ldrb	r3, [r7, #3]
 8004a9a:	f003 0307 	and.w	r3, r3, #7
 8004a9e:	1c5a      	adds	r2, r3, #1
 8004aa0:	4613      	mov	r3, r2
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	4413      	add	r3, r2
 8004aa6:	00db      	lsls	r3, r3, #3
 8004aa8:	687a      	ldr	r2, [r7, #4]
 8004aaa:	4413      	add	r3, r2
 8004aac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	705a      	strb	r2, [r3, #1]
 8004ab4:	e00e      	b.n	8004ad4 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004ab6:	78fb      	ldrb	r3, [r7, #3]
 8004ab8:	f003 0207 	and.w	r2, r3, #7
 8004abc:	4613      	mov	r3, r2
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	4413      	add	r3, r2
 8004ac2:	00db      	lsls	r3, r3, #3
 8004ac4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	4413      	add	r3, r2
 8004acc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004ad4:	78fb      	ldrb	r3, [r7, #3]
 8004ad6:	f003 0307 	and.w	r3, r3, #7
 8004ada:	b2da      	uxtb	r2, r3
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	d101      	bne.n	8004aee <HAL_PCD_EP_Close+0x6a>
 8004aea:	2302      	movs	r3, #2
 8004aec:	e00e      	b.n	8004b0c <HAL_PCD_EP_Close+0x88>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2201      	movs	r2, #1
 8004af2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	68f9      	ldr	r1, [r7, #12]
 8004afc:	4618      	mov	r0, r3
 8004afe:	f003 fb7d 	bl	80081fc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2200      	movs	r2, #0
 8004b06:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8004b0a:	2300      	movs	r3, #0
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3710      	adds	r7, #16
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}

08004b14 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b086      	sub	sp, #24
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	60f8      	str	r0, [r7, #12]
 8004b1c:	607a      	str	r2, [r7, #4]
 8004b1e:	603b      	str	r3, [r7, #0]
 8004b20:	460b      	mov	r3, r1
 8004b22:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004b24:	7afb      	ldrb	r3, [r7, #11]
 8004b26:	f003 0207 	and.w	r2, r3, #7
 8004b2a:	4613      	mov	r3, r2
 8004b2c:	009b      	lsls	r3, r3, #2
 8004b2e:	4413      	add	r3, r2
 8004b30:	00db      	lsls	r3, r3, #3
 8004b32:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004b36:	68fa      	ldr	r2, [r7, #12]
 8004b38:	4413      	add	r3, r2
 8004b3a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	683a      	ldr	r2, [r7, #0]
 8004b46:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	2200      	movs	r2, #0
 8004b52:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004b54:	7afb      	ldrb	r3, [r7, #11]
 8004b56:	f003 0307 	and.w	r3, r3, #7
 8004b5a:	b2da      	uxtb	r2, r3
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004b60:	7afb      	ldrb	r3, [r7, #11]
 8004b62:	f003 0307 	and.w	r3, r3, #7
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d106      	bne.n	8004b78 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	6979      	ldr	r1, [r7, #20]
 8004b70:	4618      	mov	r0, r3
 8004b72:	f003 fd30 	bl	80085d6 <USB_EPStartXfer>
 8004b76:	e005      	b.n	8004b84 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	6979      	ldr	r1, [r7, #20]
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f003 fd29 	bl	80085d6 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004b84:	2300      	movs	r3, #0
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3718      	adds	r7, #24
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}

08004b8e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004b8e:	b580      	push	{r7, lr}
 8004b90:	b086      	sub	sp, #24
 8004b92:	af00      	add	r7, sp, #0
 8004b94:	60f8      	str	r0, [r7, #12]
 8004b96:	607a      	str	r2, [r7, #4]
 8004b98:	603b      	str	r3, [r7, #0]
 8004b9a:	460b      	mov	r3, r1
 8004b9c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b9e:	7afb      	ldrb	r3, [r7, #11]
 8004ba0:	f003 0307 	and.w	r3, r3, #7
 8004ba4:	1c5a      	adds	r2, r3, #1
 8004ba6:	4613      	mov	r3, r2
 8004ba8:	009b      	lsls	r3, r3, #2
 8004baa:	4413      	add	r3, r2
 8004bac:	00db      	lsls	r3, r3, #3
 8004bae:	68fa      	ldr	r2, [r7, #12]
 8004bb0:	4413      	add	r3, r2
 8004bb2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	683a      	ldr	r2, [r7, #0]
 8004bbe:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	683a      	ldr	r2, [r7, #0]
 8004bcc:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004bda:	7afb      	ldrb	r3, [r7, #11]
 8004bdc:	f003 0307 	and.w	r3, r3, #7
 8004be0:	b2da      	uxtb	r2, r3
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004be6:	7afb      	ldrb	r3, [r7, #11]
 8004be8:	f003 0307 	and.w	r3, r3, #7
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d106      	bne.n	8004bfe <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	6979      	ldr	r1, [r7, #20]
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f003 fced 	bl	80085d6 <USB_EPStartXfer>
 8004bfc:	e005      	b.n	8004c0a <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	6979      	ldr	r1, [r7, #20]
 8004c04:	4618      	mov	r0, r3
 8004c06:	f003 fce6 	bl	80085d6 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004c0a:	2300      	movs	r3, #0
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	3718      	adds	r7, #24
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}

08004c14 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b084      	sub	sp, #16
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
 8004c1c:	460b      	mov	r3, r1
 8004c1e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004c20:	78fb      	ldrb	r3, [r7, #3]
 8004c22:	f003 0207 	and.w	r2, r3, #7
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	d901      	bls.n	8004c32 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e04c      	b.n	8004ccc <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004c32:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	da0e      	bge.n	8004c58 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c3a:	78fb      	ldrb	r3, [r7, #3]
 8004c3c:	f003 0307 	and.w	r3, r3, #7
 8004c40:	1c5a      	adds	r2, r3, #1
 8004c42:	4613      	mov	r3, r2
 8004c44:	009b      	lsls	r3, r3, #2
 8004c46:	4413      	add	r3, r2
 8004c48:	00db      	lsls	r3, r3, #3
 8004c4a:	687a      	ldr	r2, [r7, #4]
 8004c4c:	4413      	add	r3, r2
 8004c4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2201      	movs	r2, #1
 8004c54:	705a      	strb	r2, [r3, #1]
 8004c56:	e00c      	b.n	8004c72 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004c58:	78fa      	ldrb	r2, [r7, #3]
 8004c5a:	4613      	mov	r3, r2
 8004c5c:	009b      	lsls	r3, r3, #2
 8004c5e:	4413      	add	r3, r2
 8004c60:	00db      	lsls	r3, r3, #3
 8004c62:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004c66:	687a      	ldr	r2, [r7, #4]
 8004c68:	4413      	add	r3, r2
 8004c6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2201      	movs	r2, #1
 8004c76:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004c78:	78fb      	ldrb	r3, [r7, #3]
 8004c7a:	f003 0307 	and.w	r3, r3, #7
 8004c7e:	b2da      	uxtb	r2, r3
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004c8a:	2b01      	cmp	r3, #1
 8004c8c:	d101      	bne.n	8004c92 <HAL_PCD_EP_SetStall+0x7e>
 8004c8e:	2302      	movs	r3, #2
 8004c90:	e01c      	b.n	8004ccc <HAL_PCD_EP_SetStall+0xb8>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2201      	movs	r2, #1
 8004c96:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	68f9      	ldr	r1, [r7, #12]
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f004 ff8f 	bl	8009bc4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004ca6:	78fb      	ldrb	r3, [r7, #3]
 8004ca8:	f003 0307 	and.w	r3, r3, #7
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d108      	bne.n	8004cc2 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8004cba:	4619      	mov	r1, r3
 8004cbc:	4610      	mov	r0, r2
 8004cbe:	f005 f8d0 	bl	8009e62 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004cca:	2300      	movs	r3, #0
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3710      	adds	r7, #16
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}

08004cd4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b084      	sub	sp, #16
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
 8004cdc:	460b      	mov	r3, r1
 8004cde:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004ce0:	78fb      	ldrb	r3, [r7, #3]
 8004ce2:	f003 020f 	and.w	r2, r3, #15
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	429a      	cmp	r2, r3
 8004cec:	d901      	bls.n	8004cf2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e040      	b.n	8004d74 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004cf2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	da0e      	bge.n	8004d18 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004cfa:	78fb      	ldrb	r3, [r7, #3]
 8004cfc:	f003 0307 	and.w	r3, r3, #7
 8004d00:	1c5a      	adds	r2, r3, #1
 8004d02:	4613      	mov	r3, r2
 8004d04:	009b      	lsls	r3, r3, #2
 8004d06:	4413      	add	r3, r2
 8004d08:	00db      	lsls	r3, r3, #3
 8004d0a:	687a      	ldr	r2, [r7, #4]
 8004d0c:	4413      	add	r3, r2
 8004d0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2201      	movs	r2, #1
 8004d14:	705a      	strb	r2, [r3, #1]
 8004d16:	e00e      	b.n	8004d36 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004d18:	78fb      	ldrb	r3, [r7, #3]
 8004d1a:	f003 0207 	and.w	r2, r3, #7
 8004d1e:	4613      	mov	r3, r2
 8004d20:	009b      	lsls	r3, r3, #2
 8004d22:	4413      	add	r3, r2
 8004d24:	00db      	lsls	r3, r3, #3
 8004d26:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004d2a:	687a      	ldr	r2, [r7, #4]
 8004d2c:	4413      	add	r3, r2
 8004d2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2200      	movs	r2, #0
 8004d34:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004d3c:	78fb      	ldrb	r3, [r7, #3]
 8004d3e:	f003 0307 	and.w	r3, r3, #7
 8004d42:	b2da      	uxtb	r2, r3
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d101      	bne.n	8004d56 <HAL_PCD_EP_ClrStall+0x82>
 8004d52:	2302      	movs	r3, #2
 8004d54:	e00e      	b.n	8004d74 <HAL_PCD_EP_ClrStall+0xa0>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2201      	movs	r2, #1
 8004d5a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	68f9      	ldr	r1, [r7, #12]
 8004d64:	4618      	mov	r0, r3
 8004d66:	f004 ff7e 	bl	8009c66 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004d72:	2300      	movs	r3, #0
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	3710      	adds	r7, #16
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}

08004d7c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b08e      	sub	sp, #56	; 0x38
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004d84:	e2d6      	b.n	8005334 <PCD_EP_ISR_Handler+0x5b8>
  {
    wIstr = hpcd->Instance->ISTR;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004d8e:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004d90:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004d92:	b2db      	uxtb	r3, r3
 8004d94:	f003 030f 	and.w	r3, r3, #15
 8004d98:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8004d9c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	f040 815b 	bne.w	800505c <PCD_EP_ISR_Handler+0x2e0>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004da6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004da8:	f003 0310 	and.w	r3, r3, #16
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d150      	bne.n	8004e52 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	881b      	ldrh	r3, [r3, #0]
 8004db6:	b29b      	uxth	r3, r3
 8004db8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004dbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dc0:	81fb      	strh	r3, [r7, #14]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681a      	ldr	r2, [r3, #0]
 8004dc6:	89fb      	ldrh	r3, [r7, #14]
 8004dc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004dcc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	3328      	adds	r3, #40	; 0x28
 8004dd8:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	461a      	mov	r2, r3
 8004de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de8:	781b      	ldrb	r3, [r3, #0]
 8004dea:	00db      	lsls	r3, r3, #3
 8004dec:	4413      	add	r3, r2
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	6812      	ldr	r2, [r2, #0]
 8004df2:	4413      	add	r3, r2
 8004df4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004df8:	881b      	ldrh	r3, [r3, #0]
 8004dfa:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e00:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e04:	695a      	ldr	r2, [r3, #20]
 8004e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e08:	69db      	ldr	r3, [r3, #28]
 8004e0a:	441a      	add	r2, r3
 8004e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004e10:	2100      	movs	r1, #0
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f006 fd4b 	bl	800b8ae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004e1e:	b2db      	uxtb	r3, r3
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	f000 8287 	beq.w	8005334 <PCD_EP_ISR_Handler+0x5b8>
 8004e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e28:	699b      	ldr	r3, [r3, #24]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	f040 8282 	bne.w	8005334 <PCD_EP_ISR_Handler+0x5b8>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004e36:	b2db      	uxtb	r3, r3
 8004e38:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004e3c:	b2da      	uxtb	r2, r3
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	b292      	uxth	r2, r2
 8004e44:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004e50:	e270      	b.n	8005334 <PCD_EP_ISR_Handler+0x5b8>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004e58:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	881b      	ldrh	r3, [r3, #0]
 8004e60:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004e62:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004e64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d032      	beq.n	8004ed2 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e74:	b29b      	uxth	r3, r3
 8004e76:	461a      	mov	r2, r3
 8004e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7a:	781b      	ldrb	r3, [r3, #0]
 8004e7c:	00db      	lsls	r3, r3, #3
 8004e7e:	4413      	add	r3, r2
 8004e80:	687a      	ldr	r2, [r7, #4]
 8004e82:	6812      	ldr	r2, [r2, #0]
 8004e84:	4413      	add	r3, r2
 8004e86:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004e8a:	881b      	ldrh	r3, [r3, #0]
 8004e8c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e92:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6818      	ldr	r0, [r3, #0]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8004e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea0:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea4:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	f005 f829 	bl	8009efe <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	881b      	ldrh	r3, [r3, #0]
 8004eb2:	b29a      	uxth	r2, r3
 8004eb4:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004eb8:	4013      	ands	r3, r2
 8004eba:	823b      	strh	r3, [r7, #16]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	8a3a      	ldrh	r2, [r7, #16]
 8004ec2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004ec6:	b292      	uxth	r2, r2
 8004ec8:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f006 fcc2 	bl	800b854 <HAL_PCD_SetupStageCallback>
 8004ed0:	e230      	b.n	8005334 <PCD_EP_ISR_Handler+0x5b8>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004ed2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	f280 822c 	bge.w	8005334 <PCD_EP_ISR_Handler+0x5b8>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	881b      	ldrh	r3, [r3, #0]
 8004ee2:	b29a      	uxth	r2, r3
 8004ee4:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004ee8:	4013      	ands	r3, r2
 8004eea:	83bb      	strh	r3, [r7, #28]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	8bba      	ldrh	r2, [r7, #28]
 8004ef2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004ef6:	b292      	uxth	r2, r2
 8004ef8:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f02:	b29b      	uxth	r3, r3
 8004f04:	461a      	mov	r2, r3
 8004f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f08:	781b      	ldrb	r3, [r3, #0]
 8004f0a:	00db      	lsls	r3, r3, #3
 8004f0c:	4413      	add	r3, r2
 8004f0e:	687a      	ldr	r2, [r7, #4]
 8004f10:	6812      	ldr	r2, [r2, #0]
 8004f12:	4413      	add	r3, r2
 8004f14:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004f18:	881b      	ldrh	r3, [r3, #0]
 8004f1a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f20:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f24:	69db      	ldr	r3, [r3, #28]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d019      	beq.n	8004f5e <PCD_EP_ISR_Handler+0x1e2>
 8004f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2c:	695b      	ldr	r3, [r3, #20]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d015      	beq.n	8004f5e <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6818      	ldr	r0, [r3, #0]
 8004f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f38:	6959      	ldr	r1, [r3, #20]
 8004f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f40:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004f42:	b29b      	uxth	r3, r3
 8004f44:	f004 ffdb 	bl	8009efe <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f4a:	695a      	ldr	r2, [r3, #20]
 8004f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f4e:	69db      	ldr	r3, [r3, #28]
 8004f50:	441a      	add	r2, r3
 8004f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f54:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004f56:	2100      	movs	r1, #0
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f006 fc8d 	bl	800b878 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	881b      	ldrh	r3, [r3, #0]
 8004f64:	b29b      	uxth	r3, r3
 8004f66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	f040 81e2 	bne.w	8005334 <PCD_EP_ISR_Handler+0x5b8>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	61bb      	str	r3, [r7, #24]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f7e:	b29b      	uxth	r3, r3
 8004f80:	461a      	mov	r2, r3
 8004f82:	69bb      	ldr	r3, [r7, #24]
 8004f84:	4413      	add	r3, r2
 8004f86:	61bb      	str	r3, [r7, #24]
 8004f88:	69bb      	ldr	r3, [r7, #24]
 8004f8a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004f8e:	617b      	str	r3, [r7, #20]
 8004f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f92:	691b      	ldr	r3, [r3, #16]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d112      	bne.n	8004fbe <PCD_EP_ISR_Handler+0x242>
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	881b      	ldrh	r3, [r3, #0]
 8004f9c:	b29b      	uxth	r3, r3
 8004f9e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004fa2:	b29a      	uxth	r2, r3
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	801a      	strh	r2, [r3, #0]
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	881b      	ldrh	r3, [r3, #0]
 8004fac:	b29b      	uxth	r3, r3
 8004fae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fb6:	b29a      	uxth	r2, r3
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	801a      	strh	r2, [r3, #0]
 8004fbc:	e02f      	b.n	800501e <PCD_EP_ISR_Handler+0x2a2>
 8004fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc0:	691b      	ldr	r3, [r3, #16]
 8004fc2:	2b3e      	cmp	r3, #62	; 0x3e
 8004fc4:	d813      	bhi.n	8004fee <PCD_EP_ISR_Handler+0x272>
 8004fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc8:	691b      	ldr	r3, [r3, #16]
 8004fca:	085b      	lsrs	r3, r3, #1
 8004fcc:	633b      	str	r3, [r7, #48]	; 0x30
 8004fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd0:	691b      	ldr	r3, [r3, #16]
 8004fd2:	f003 0301 	and.w	r3, r3, #1
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d002      	beq.n	8004fe0 <PCD_EP_ISR_Handler+0x264>
 8004fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fdc:	3301      	adds	r3, #1
 8004fde:	633b      	str	r3, [r7, #48]	; 0x30
 8004fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fe2:	b29b      	uxth	r3, r3
 8004fe4:	029b      	lsls	r3, r3, #10
 8004fe6:	b29a      	uxth	r2, r3
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	801a      	strh	r2, [r3, #0]
 8004fec:	e017      	b.n	800501e <PCD_EP_ISR_Handler+0x2a2>
 8004fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff0:	691b      	ldr	r3, [r3, #16]
 8004ff2:	095b      	lsrs	r3, r3, #5
 8004ff4:	633b      	str	r3, [r7, #48]	; 0x30
 8004ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff8:	691b      	ldr	r3, [r3, #16]
 8004ffa:	f003 031f 	and.w	r3, r3, #31
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d102      	bne.n	8005008 <PCD_EP_ISR_Handler+0x28c>
 8005002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005004:	3b01      	subs	r3, #1
 8005006:	633b      	str	r3, [r7, #48]	; 0x30
 8005008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800500a:	b29b      	uxth	r3, r3
 800500c:	029b      	lsls	r3, r3, #10
 800500e:	b29b      	uxth	r3, r3
 8005010:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005014:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005018:	b29a      	uxth	r2, r3
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	881b      	ldrh	r3, [r3, #0]
 8005024:	b29b      	uxth	r3, r3
 8005026:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800502a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800502e:	827b      	strh	r3, [r7, #18]
 8005030:	8a7b      	ldrh	r3, [r7, #18]
 8005032:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005036:	827b      	strh	r3, [r7, #18]
 8005038:	8a7b      	ldrh	r3, [r7, #18]
 800503a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800503e:	827b      	strh	r3, [r7, #18]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681a      	ldr	r2, [r3, #0]
 8005044:	8a7b      	ldrh	r3, [r7, #18]
 8005046:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800504a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800504e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005052:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005056:	b29b      	uxth	r3, r3
 8005058:	8013      	strh	r3, [r2, #0]
 800505a:	e16b      	b.n	8005334 <PCD_EP_ISR_Handler+0x5b8>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	461a      	mov	r2, r3
 8005062:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005066:	009b      	lsls	r3, r3, #2
 8005068:	4413      	add	r3, r2
 800506a:	881b      	ldrh	r3, [r3, #0]
 800506c:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800506e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8005072:	2b00      	cmp	r3, #0
 8005074:	f280 80e4 	bge.w	8005240 <PCD_EP_ISR_Handler+0x4c4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	461a      	mov	r2, r3
 800507e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005082:	009b      	lsls	r3, r3, #2
 8005084:	4413      	add	r3, r2
 8005086:	881b      	ldrh	r3, [r3, #0]
 8005088:	b29a      	uxth	r2, r3
 800508a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800508e:	4013      	ands	r3, r2
 8005090:	853b      	strh	r3, [r7, #40]	; 0x28
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	461a      	mov	r2, r3
 8005098:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800509c:	009b      	lsls	r3, r3, #2
 800509e:	4413      	add	r3, r2
 80050a0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80050a2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80050a6:	b292      	uxth	r2, r2
 80050a8:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80050aa:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80050ae:	4613      	mov	r3, r2
 80050b0:	009b      	lsls	r3, r3, #2
 80050b2:	4413      	add	r3, r2
 80050b4:	00db      	lsls	r3, r3, #3
 80050b6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80050ba:	687a      	ldr	r2, [r7, #4]
 80050bc:	4413      	add	r3, r2
 80050be:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80050c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c2:	7b1b      	ldrb	r3, [r3, #12]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d120      	bne.n	800510a <PCD_EP_ISR_Handler+0x38e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050d0:	b29b      	uxth	r3, r3
 80050d2:	461a      	mov	r2, r3
 80050d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d6:	781b      	ldrb	r3, [r3, #0]
 80050d8:	00db      	lsls	r3, r3, #3
 80050da:	4413      	add	r3, r2
 80050dc:	687a      	ldr	r2, [r7, #4]
 80050de:	6812      	ldr	r2, [r2, #0]
 80050e0:	4413      	add	r3, r2
 80050e2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80050e6:	881b      	ldrh	r3, [r3, #0]
 80050e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80050ec:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80050ee:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	f000 8083 	beq.w	80051fc <PCD_EP_ISR_Handler+0x480>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6818      	ldr	r0, [r3, #0]
 80050fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050fc:	6959      	ldr	r1, [r3, #20]
 80050fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005100:	88da      	ldrh	r2, [r3, #6]
 8005102:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005104:	f004 fefb 	bl	8009efe <USB_ReadPMA>
 8005108:	e078      	b.n	80051fc <PCD_EP_ISR_Handler+0x480>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800510a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510c:	78db      	ldrb	r3, [r3, #3]
 800510e:	2b02      	cmp	r3, #2
 8005110:	d108      	bne.n	8005124 <PCD_EP_ISR_Handler+0x3a8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8005112:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005114:	461a      	mov	r2, r3
 8005116:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	f000 f919 	bl	8005350 <HAL_PCD_EP_DB_Receive>
 800511e:	4603      	mov	r3, r0
 8005120:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005122:	e06b      	b.n	80051fc <PCD_EP_ISR_Handler+0x480>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	461a      	mov	r2, r3
 800512a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800512c:	781b      	ldrb	r3, [r3, #0]
 800512e:	009b      	lsls	r3, r3, #2
 8005130:	4413      	add	r3, r2
 8005132:	881b      	ldrh	r3, [r3, #0]
 8005134:	b29b      	uxth	r3, r3
 8005136:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800513a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800513e:	847b      	strh	r3, [r7, #34]	; 0x22
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	461a      	mov	r2, r3
 8005146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005148:	781b      	ldrb	r3, [r3, #0]
 800514a:	009b      	lsls	r3, r3, #2
 800514c:	441a      	add	r2, r3
 800514e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005150:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005154:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005158:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800515c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005160:	b29b      	uxth	r3, r3
 8005162:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	461a      	mov	r2, r3
 800516a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516c:	781b      	ldrb	r3, [r3, #0]
 800516e:	009b      	lsls	r3, r3, #2
 8005170:	4413      	add	r3, r2
 8005172:	881b      	ldrh	r3, [r3, #0]
 8005174:	b29b      	uxth	r3, r3
 8005176:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800517a:	2b00      	cmp	r3, #0
 800517c:	d01f      	beq.n	80051be <PCD_EP_ISR_Handler+0x442>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005186:	b29b      	uxth	r3, r3
 8005188:	461a      	mov	r2, r3
 800518a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800518c:	781b      	ldrb	r3, [r3, #0]
 800518e:	00db      	lsls	r3, r3, #3
 8005190:	4413      	add	r3, r2
 8005192:	687a      	ldr	r2, [r7, #4]
 8005194:	6812      	ldr	r2, [r2, #0]
 8005196:	4413      	add	r3, r2
 8005198:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800519c:	881b      	ldrh	r3, [r3, #0]
 800519e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80051a2:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80051a4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d028      	beq.n	80051fc <PCD_EP_ISR_Handler+0x480>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6818      	ldr	r0, [r3, #0]
 80051ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b0:	6959      	ldr	r1, [r3, #20]
 80051b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b4:	891a      	ldrh	r2, [r3, #8]
 80051b6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80051b8:	f004 fea1 	bl	8009efe <USB_ReadPMA>
 80051bc:	e01e      	b.n	80051fc <PCD_EP_ISR_Handler+0x480>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	461a      	mov	r2, r3
 80051ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051cc:	781b      	ldrb	r3, [r3, #0]
 80051ce:	00db      	lsls	r3, r3, #3
 80051d0:	4413      	add	r3, r2
 80051d2:	687a      	ldr	r2, [r7, #4]
 80051d4:	6812      	ldr	r2, [r2, #0]
 80051d6:	4413      	add	r3, r2
 80051d8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80051dc:	881b      	ldrh	r3, [r3, #0]
 80051de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80051e2:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80051e4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d008      	beq.n	80051fc <PCD_EP_ISR_Handler+0x480>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6818      	ldr	r0, [r3, #0]
 80051ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f0:	6959      	ldr	r1, [r3, #20]
 80051f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f4:	895a      	ldrh	r2, [r3, #10]
 80051f6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80051f8:	f004 fe81 	bl	8009efe <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80051fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fe:	69da      	ldr	r2, [r3, #28]
 8005200:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005202:	441a      	add	r2, r3
 8005204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005206:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8005208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800520a:	695a      	ldr	r2, [r3, #20]
 800520c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800520e:	441a      	add	r2, r3
 8005210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005212:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005216:	699b      	ldr	r3, [r3, #24]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d004      	beq.n	8005226 <PCD_EP_ISR_Handler+0x4aa>
 800521c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800521e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005220:	691b      	ldr	r3, [r3, #16]
 8005222:	429a      	cmp	r2, r3
 8005224:	d206      	bcs.n	8005234 <PCD_EP_ISR_Handler+0x4b8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005228:	781b      	ldrb	r3, [r3, #0]
 800522a:	4619      	mov	r1, r3
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f006 fb23 	bl	800b878 <HAL_PCD_DataOutStageCallback>
 8005232:	e005      	b.n	8005240 <PCD_EP_ISR_Handler+0x4c4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800523a:	4618      	mov	r0, r3
 800523c:	f003 f9cb 	bl	80085d6 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8005240:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005242:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005246:	2b00      	cmp	r3, #0
 8005248:	d074      	beq.n	8005334 <PCD_EP_ISR_Handler+0x5b8>
      {
        ep = &hpcd->IN_ep[epindex];
 800524a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800524e:	1c5a      	adds	r2, r3, #1
 8005250:	4613      	mov	r3, r2
 8005252:	009b      	lsls	r3, r3, #2
 8005254:	4413      	add	r3, r2
 8005256:	00db      	lsls	r3, r3, #3
 8005258:	687a      	ldr	r2, [r7, #4]
 800525a:	4413      	add	r3, r2
 800525c:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	461a      	mov	r2, r3
 8005264:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005268:	009b      	lsls	r3, r3, #2
 800526a:	4413      	add	r3, r2
 800526c:	881b      	ldrh	r3, [r3, #0]
 800526e:	b29b      	uxth	r3, r3
 8005270:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005274:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005278:	843b      	strh	r3, [r7, #32]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	461a      	mov	r2, r3
 8005280:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005284:	009b      	lsls	r3, r3, #2
 8005286:	441a      	add	r2, r3
 8005288:	8c3b      	ldrh	r3, [r7, #32]
 800528a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800528e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005292:	b29b      	uxth	r3, r3
 8005294:	8013      	strh	r3, [r2, #0]

        /* Manage Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U))
 8005296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005298:	78db      	ldrb	r3, [r3, #3]
 800529a:	2b02      	cmp	r3, #2
 800529c:	d144      	bne.n	8005328 <PCD_EP_ISR_Handler+0x5ac>
 800529e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80052a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d13f      	bne.n	8005328 <PCD_EP_ISR_Handler+0x5ac>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	461a      	mov	r2, r3
 80052b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b6:	781b      	ldrb	r3, [r3, #0]
 80052b8:	00db      	lsls	r3, r3, #3
 80052ba:	4413      	add	r3, r2
 80052bc:	687a      	ldr	r2, [r7, #4]
 80052be:	6812      	ldr	r2, [r2, #0]
 80052c0:	4413      	add	r3, r2
 80052c2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80052c6:	881b      	ldrh	r3, [r3, #0]
 80052c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80052cc:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80052ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d0:	699a      	ldr	r2, [r3, #24]
 80052d2:	8bfb      	ldrh	r3, [r7, #30]
 80052d4:	429a      	cmp	r2, r3
 80052d6:	d906      	bls.n	80052e6 <PCD_EP_ISR_Handler+0x56a>
          {
            ep->xfer_len -= TxByteNbre;
 80052d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052da:	699a      	ldr	r2, [r3, #24]
 80052dc:	8bfb      	ldrh	r3, [r7, #30]
 80052de:	1ad2      	subs	r2, r2, r3
 80052e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e2:	619a      	str	r2, [r3, #24]
 80052e4:	e002      	b.n	80052ec <PCD_EP_ISR_Handler+0x570>
          }
          else
          {
            ep->xfer_len = 0U;
 80052e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e8:	2200      	movs	r2, #0
 80052ea:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80052ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ee:	699b      	ldr	r3, [r3, #24]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d106      	bne.n	8005302 <PCD_EP_ISR_Handler+0x586>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80052f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f6:	781b      	ldrb	r3, [r3, #0]
 80052f8:	4619      	mov	r1, r3
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f006 fad7 	bl	800b8ae <HAL_PCD_DataInStageCallback>
 8005300:	e018      	b.n	8005334 <PCD_EP_ISR_Handler+0x5b8>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8005302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005304:	695a      	ldr	r2, [r3, #20]
 8005306:	8bfb      	ldrh	r3, [r7, #30]
 8005308:	441a      	add	r2, r3
 800530a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530c:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 800530e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005310:	69da      	ldr	r2, [r3, #28]
 8005312:	8bfb      	ldrh	r3, [r7, #30]
 8005314:	441a      	add	r2, r3
 8005316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005318:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005320:	4618      	mov	r0, r3
 8005322:	f003 f958 	bl	80085d6 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8005326:	e005      	b.n	8005334 <PCD_EP_ISR_Handler+0x5b8>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8005328:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800532a:	461a      	mov	r2, r3
 800532c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f000 f917 	bl	8005562 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800533c:	b29b      	uxth	r3, r3
 800533e:	b21b      	sxth	r3, r3
 8005340:	2b00      	cmp	r3, #0
 8005342:	f6ff ad20 	blt.w	8004d86 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8005346:	2300      	movs	r3, #0
}
 8005348:	4618      	mov	r0, r3
 800534a:	3738      	adds	r7, #56	; 0x38
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}

08005350 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b088      	sub	sp, #32
 8005354:	af00      	add	r7, sp, #0
 8005356:	60f8      	str	r0, [r7, #12]
 8005358:	60b9      	str	r1, [r7, #8]
 800535a:	4613      	mov	r3, r2
 800535c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800535e:	88fb      	ldrh	r3, [r7, #6]
 8005360:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005364:	2b00      	cmp	r3, #0
 8005366:	d07c      	beq.n	8005462 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005370:	b29b      	uxth	r3, r3
 8005372:	461a      	mov	r2, r3
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	781b      	ldrb	r3, [r3, #0]
 8005378:	00db      	lsls	r3, r3, #3
 800537a:	4413      	add	r3, r2
 800537c:	68fa      	ldr	r2, [r7, #12]
 800537e:	6812      	ldr	r2, [r2, #0]
 8005380:	4413      	add	r3, r2
 8005382:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005386:	881b      	ldrh	r3, [r3, #0]
 8005388:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800538c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	699a      	ldr	r2, [r3, #24]
 8005392:	8b7b      	ldrh	r3, [r7, #26]
 8005394:	429a      	cmp	r2, r3
 8005396:	d306      	bcc.n	80053a6 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	699a      	ldr	r2, [r3, #24]
 800539c:	8b7b      	ldrh	r3, [r7, #26]
 800539e:	1ad2      	subs	r2, r2, r3
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	619a      	str	r2, [r3, #24]
 80053a4:	e002      	b.n	80053ac <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	2200      	movs	r2, #0
 80053aa:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	699b      	ldr	r3, [r3, #24]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d123      	bne.n	80053fc <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	461a      	mov	r2, r3
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	781b      	ldrb	r3, [r3, #0]
 80053be:	009b      	lsls	r3, r3, #2
 80053c0:	4413      	add	r3, r2
 80053c2:	881b      	ldrh	r3, [r3, #0]
 80053c4:	b29b      	uxth	r3, r3
 80053c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053ce:	833b      	strh	r3, [r7, #24]
 80053d0:	8b3b      	ldrh	r3, [r7, #24]
 80053d2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80053d6:	833b      	strh	r3, [r7, #24]
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	461a      	mov	r2, r3
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	781b      	ldrb	r3, [r3, #0]
 80053e2:	009b      	lsls	r3, r3, #2
 80053e4:	441a      	add	r2, r3
 80053e6:	8b3b      	ldrh	r3, [r7, #24]
 80053e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053f8:	b29b      	uxth	r3, r3
 80053fa:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80053fc:	88fb      	ldrh	r3, [r7, #6]
 80053fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005402:	2b00      	cmp	r3, #0
 8005404:	d01f      	beq.n	8005446 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	461a      	mov	r2, r3
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	781b      	ldrb	r3, [r3, #0]
 8005410:	009b      	lsls	r3, r3, #2
 8005412:	4413      	add	r3, r2
 8005414:	881b      	ldrh	r3, [r3, #0]
 8005416:	b29b      	uxth	r3, r3
 8005418:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800541c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005420:	82fb      	strh	r3, [r7, #22]
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	461a      	mov	r2, r3
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	781b      	ldrb	r3, [r3, #0]
 800542c:	009b      	lsls	r3, r3, #2
 800542e:	441a      	add	r2, r3
 8005430:	8afb      	ldrh	r3, [r7, #22]
 8005432:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005436:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800543a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800543e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005442:	b29b      	uxth	r3, r3
 8005444:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005446:	8b7b      	ldrh	r3, [r7, #26]
 8005448:	2b00      	cmp	r3, #0
 800544a:	f000 8085 	beq.w	8005558 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	6818      	ldr	r0, [r3, #0]
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	6959      	ldr	r1, [r3, #20]
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	891a      	ldrh	r2, [r3, #8]
 800545a:	8b7b      	ldrh	r3, [r7, #26]
 800545c:	f004 fd4f 	bl	8009efe <USB_ReadPMA>
 8005460:	e07a      	b.n	8005558 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800546a:	b29b      	uxth	r3, r3
 800546c:	461a      	mov	r2, r3
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	781b      	ldrb	r3, [r3, #0]
 8005472:	00db      	lsls	r3, r3, #3
 8005474:	4413      	add	r3, r2
 8005476:	68fa      	ldr	r2, [r7, #12]
 8005478:	6812      	ldr	r2, [r2, #0]
 800547a:	4413      	add	r3, r2
 800547c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005480:	881b      	ldrh	r3, [r3, #0]
 8005482:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005486:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	699a      	ldr	r2, [r3, #24]
 800548c:	8b7b      	ldrh	r3, [r7, #26]
 800548e:	429a      	cmp	r2, r3
 8005490:	d306      	bcc.n	80054a0 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	699a      	ldr	r2, [r3, #24]
 8005496:	8b7b      	ldrh	r3, [r7, #26]
 8005498:	1ad2      	subs	r2, r2, r3
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	619a      	str	r2, [r3, #24]
 800549e:	e002      	b.n	80054a6 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	2200      	movs	r2, #0
 80054a4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	699b      	ldr	r3, [r3, #24]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d123      	bne.n	80054f6 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	461a      	mov	r2, r3
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	781b      	ldrb	r3, [r3, #0]
 80054b8:	009b      	lsls	r3, r3, #2
 80054ba:	4413      	add	r3, r2
 80054bc:	881b      	ldrh	r3, [r3, #0]
 80054be:	b29b      	uxth	r3, r3
 80054c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80054c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054c8:	83fb      	strh	r3, [r7, #30]
 80054ca:	8bfb      	ldrh	r3, [r7, #30]
 80054cc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80054d0:	83fb      	strh	r3, [r7, #30]
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	461a      	mov	r2, r3
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	781b      	ldrb	r3, [r3, #0]
 80054dc:	009b      	lsls	r3, r3, #2
 80054de:	441a      	add	r2, r3
 80054e0:	8bfb      	ldrh	r3, [r7, #30]
 80054e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054f2:	b29b      	uxth	r3, r3
 80054f4:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80054f6:	88fb      	ldrh	r3, [r7, #6]
 80054f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d11f      	bne.n	8005540 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	461a      	mov	r2, r3
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	781b      	ldrb	r3, [r3, #0]
 800550a:	009b      	lsls	r3, r3, #2
 800550c:	4413      	add	r3, r2
 800550e:	881b      	ldrh	r3, [r3, #0]
 8005510:	b29b      	uxth	r3, r3
 8005512:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005516:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800551a:	83bb      	strh	r3, [r7, #28]
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	461a      	mov	r2, r3
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	781b      	ldrb	r3, [r3, #0]
 8005526:	009b      	lsls	r3, r3, #2
 8005528:	441a      	add	r2, r3
 800552a:	8bbb      	ldrh	r3, [r7, #28]
 800552c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005530:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005534:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005538:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800553c:	b29b      	uxth	r3, r3
 800553e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005540:	8b7b      	ldrh	r3, [r7, #26]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d008      	beq.n	8005558 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	6818      	ldr	r0, [r3, #0]
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	6959      	ldr	r1, [r3, #20]
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	895a      	ldrh	r2, [r3, #10]
 8005552:	8b7b      	ldrh	r3, [r7, #26]
 8005554:	f004 fcd3 	bl	8009efe <USB_ReadPMA>
    }
  }

  return count;
 8005558:	8b7b      	ldrh	r3, [r7, #26]
}
 800555a:	4618      	mov	r0, r3
 800555c:	3720      	adds	r7, #32
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}

08005562 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005562:	b580      	push	{r7, lr}
 8005564:	b0a2      	sub	sp, #136	; 0x88
 8005566:	af00      	add	r7, sp, #0
 8005568:	60f8      	str	r0, [r7, #12]
 800556a:	60b9      	str	r1, [r7, #8]
 800556c:	4613      	mov	r3, r2
 800556e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005570:	88fb      	ldrh	r3, [r7, #6]
 8005572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005576:	2b00      	cmp	r3, #0
 8005578:	f000 81c5 	beq.w	8005906 <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005584:	b29b      	uxth	r3, r3
 8005586:	461a      	mov	r2, r3
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	781b      	ldrb	r3, [r3, #0]
 800558c:	00db      	lsls	r3, r3, #3
 800558e:	4413      	add	r3, r2
 8005590:	68fa      	ldr	r2, [r7, #12]
 8005592:	6812      	ldr	r2, [r2, #0]
 8005594:	4413      	add	r3, r2
 8005596:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800559a:	881b      	ldrh	r3, [r3, #0]
 800559c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055a0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	699a      	ldr	r2, [r3, #24]
 80055a8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80055ac:	429a      	cmp	r2, r3
 80055ae:	d907      	bls.n	80055c0 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxByteNbre;
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	699a      	ldr	r2, [r3, #24]
 80055b4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80055b8:	1ad2      	subs	r2, r2, r3
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	619a      	str	r2, [r3, #24]
 80055be:	e002      	b.n	80055c6 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	2200      	movs	r2, #0
 80055c4:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	699b      	ldr	r3, [r3, #24]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	f040 80b9 	bne.w	8005742 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	785b      	ldrb	r3, [r3, #1]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d126      	bne.n	8005626 <HAL_PCD_EP_DB_Transmit+0xc4>
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	461a      	mov	r2, r3
 80055ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ec:	4413      	add	r3, r2
 80055ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	781b      	ldrb	r3, [r3, #0]
 80055f4:	00da      	lsls	r2, r3, #3
 80055f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055f8:	4413      	add	r3, r2
 80055fa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80055fe:	627b      	str	r3, [r7, #36]	; 0x24
 8005600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005602:	881b      	ldrh	r3, [r3, #0]
 8005604:	b29b      	uxth	r3, r3
 8005606:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800560a:	b29a      	uxth	r2, r3
 800560c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560e:	801a      	strh	r2, [r3, #0]
 8005610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005612:	881b      	ldrh	r3, [r3, #0]
 8005614:	b29b      	uxth	r3, r3
 8005616:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800561a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800561e:	b29a      	uxth	r2, r3
 8005620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005622:	801a      	strh	r2, [r3, #0]
 8005624:	e01a      	b.n	800565c <HAL_PCD_EP_DB_Transmit+0xfa>
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	785b      	ldrb	r3, [r3, #1]
 800562a:	2b01      	cmp	r3, #1
 800562c:	d116      	bne.n	800565c <HAL_PCD_EP_DB_Transmit+0xfa>
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	633b      	str	r3, [r7, #48]	; 0x30
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800563c:	b29b      	uxth	r3, r3
 800563e:	461a      	mov	r2, r3
 8005640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005642:	4413      	add	r3, r2
 8005644:	633b      	str	r3, [r7, #48]	; 0x30
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	781b      	ldrb	r3, [r3, #0]
 800564a:	00da      	lsls	r2, r3, #3
 800564c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800564e:	4413      	add	r3, r2
 8005650:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005654:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005658:	2200      	movs	r2, #0
 800565a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	623b      	str	r3, [r7, #32]
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	785b      	ldrb	r3, [r3, #1]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d126      	bne.n	80056b8 <HAL_PCD_EP_DB_Transmit+0x156>
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	61bb      	str	r3, [r7, #24]
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005678:	b29b      	uxth	r3, r3
 800567a:	461a      	mov	r2, r3
 800567c:	69bb      	ldr	r3, [r7, #24]
 800567e:	4413      	add	r3, r2
 8005680:	61bb      	str	r3, [r7, #24]
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	781b      	ldrb	r3, [r3, #0]
 8005686:	00da      	lsls	r2, r3, #3
 8005688:	69bb      	ldr	r3, [r7, #24]
 800568a:	4413      	add	r3, r2
 800568c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005690:	617b      	str	r3, [r7, #20]
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	881b      	ldrh	r3, [r3, #0]
 8005696:	b29b      	uxth	r3, r3
 8005698:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800569c:	b29a      	uxth	r2, r3
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	801a      	strh	r2, [r3, #0]
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	881b      	ldrh	r3, [r3, #0]
 80056a6:	b29b      	uxth	r3, r3
 80056a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056b0:	b29a      	uxth	r2, r3
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	801a      	strh	r2, [r3, #0]
 80056b6:	e017      	b.n	80056e8 <HAL_PCD_EP_DB_Transmit+0x186>
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	785b      	ldrb	r3, [r3, #1]
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d113      	bne.n	80056e8 <HAL_PCD_EP_DB_Transmit+0x186>
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056c8:	b29b      	uxth	r3, r3
 80056ca:	461a      	mov	r2, r3
 80056cc:	6a3b      	ldr	r3, [r7, #32]
 80056ce:	4413      	add	r3, r2
 80056d0:	623b      	str	r3, [r7, #32]
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	781b      	ldrb	r3, [r3, #0]
 80056d6:	00da      	lsls	r2, r3, #3
 80056d8:	6a3b      	ldr	r3, [r7, #32]
 80056da:	4413      	add	r3, r2
 80056dc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80056e0:	61fb      	str	r3, [r7, #28]
 80056e2:	69fb      	ldr	r3, [r7, #28]
 80056e4:	2200      	movs	r2, #0
 80056e6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	781b      	ldrb	r3, [r3, #0]
 80056ec:	4619      	mov	r1, r3
 80056ee:	68f8      	ldr	r0, [r7, #12]
 80056f0:	f006 f8dd 	bl	800b8ae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80056f4:	88fb      	ldrh	r3, [r7, #6]
 80056f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	f000 82d2 	beq.w	8005ca4 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	461a      	mov	r2, r3
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	781b      	ldrb	r3, [r3, #0]
 800570a:	009b      	lsls	r3, r3, #2
 800570c:	4413      	add	r3, r2
 800570e:	881b      	ldrh	r3, [r3, #0]
 8005710:	b29b      	uxth	r3, r3
 8005712:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005716:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800571a:	827b      	strh	r3, [r7, #18]
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	461a      	mov	r2, r3
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	781b      	ldrb	r3, [r3, #0]
 8005726:	009b      	lsls	r3, r3, #2
 8005728:	441a      	add	r2, r3
 800572a:	8a7b      	ldrh	r3, [r7, #18]
 800572c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005730:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005734:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005738:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800573c:	b29b      	uxth	r3, r3
 800573e:	8013      	strh	r3, [r2, #0]
 8005740:	e2b0      	b.n	8005ca4 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005742:	88fb      	ldrh	r3, [r7, #6]
 8005744:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005748:	2b00      	cmp	r3, #0
 800574a:	d021      	beq.n	8005790 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	461a      	mov	r2, r3
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	781b      	ldrb	r3, [r3, #0]
 8005756:	009b      	lsls	r3, r3, #2
 8005758:	4413      	add	r3, r2
 800575a:	881b      	ldrh	r3, [r3, #0]
 800575c:	b29b      	uxth	r3, r3
 800575e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005762:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005766:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	461a      	mov	r2, r3
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	781b      	ldrb	r3, [r3, #0]
 8005774:	009b      	lsls	r3, r3, #2
 8005776:	441a      	add	r2, r3
 8005778:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800577c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005780:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005784:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005788:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800578c:	b29b      	uxth	r3, r3
 800578e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005796:	2b01      	cmp	r3, #1
 8005798:	f040 8284 	bne.w	8005ca4 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxByteNbre;
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	695a      	ldr	r2, [r3, #20]
 80057a0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80057a4:	441a      	add	r2, r3
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	69da      	ldr	r2, [r3, #28]
 80057ae:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80057b2:	441a      	add	r2, r3
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	6a1a      	ldr	r2, [r3, #32]
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	691b      	ldr	r3, [r3, #16]
 80057c0:	429a      	cmp	r2, r3
 80057c2:	d309      	bcc.n	80057d8 <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	691b      	ldr	r3, [r3, #16]
 80057c8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	6a1a      	ldr	r2, [r3, #32]
 80057ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057d0:	1ad2      	subs	r2, r2, r3
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	621a      	str	r2, [r3, #32]
 80057d6:	e015      	b.n	8005804 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	6a1b      	ldr	r3, [r3, #32]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d107      	bne.n	80057f0 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxByteNbre;
 80057e0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80057e4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	2200      	movs	r2, #0
 80057ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80057ee:	e009      	b.n	8005804 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	2200      	movs	r2, #0
 80057f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	6a1b      	ldr	r3, [r3, #32]
 80057fc:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	2200      	movs	r2, #0
 8005802:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	785b      	ldrb	r3, [r3, #1]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d155      	bne.n	80058b8 <HAL_PCD_EP_DB_Transmit+0x356>
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	63bb      	str	r3, [r7, #56]	; 0x38
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800581a:	b29b      	uxth	r3, r3
 800581c:	461a      	mov	r2, r3
 800581e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005820:	4413      	add	r3, r2
 8005822:	63bb      	str	r3, [r7, #56]	; 0x38
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	781b      	ldrb	r3, [r3, #0]
 8005828:	00da      	lsls	r2, r3, #3
 800582a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800582c:	4413      	add	r3, r2
 800582e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005832:	637b      	str	r3, [r7, #52]	; 0x34
 8005834:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005836:	2b00      	cmp	r3, #0
 8005838:	d112      	bne.n	8005860 <HAL_PCD_EP_DB_Transmit+0x2fe>
 800583a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800583c:	881b      	ldrh	r3, [r3, #0]
 800583e:	b29b      	uxth	r3, r3
 8005840:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005844:	b29a      	uxth	r2, r3
 8005846:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005848:	801a      	strh	r2, [r3, #0]
 800584a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800584c:	881b      	ldrh	r3, [r3, #0]
 800584e:	b29b      	uxth	r3, r3
 8005850:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005854:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005858:	b29a      	uxth	r2, r3
 800585a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800585c:	801a      	strh	r2, [r3, #0]
 800585e:	e047      	b.n	80058f0 <HAL_PCD_EP_DB_Transmit+0x38e>
 8005860:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005862:	2b3e      	cmp	r3, #62	; 0x3e
 8005864:	d811      	bhi.n	800588a <HAL_PCD_EP_DB_Transmit+0x328>
 8005866:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005868:	085b      	lsrs	r3, r3, #1
 800586a:	64bb      	str	r3, [r7, #72]	; 0x48
 800586c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800586e:	f003 0301 	and.w	r3, r3, #1
 8005872:	2b00      	cmp	r3, #0
 8005874:	d002      	beq.n	800587c <HAL_PCD_EP_DB_Transmit+0x31a>
 8005876:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005878:	3301      	adds	r3, #1
 800587a:	64bb      	str	r3, [r7, #72]	; 0x48
 800587c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800587e:	b29b      	uxth	r3, r3
 8005880:	029b      	lsls	r3, r3, #10
 8005882:	b29a      	uxth	r2, r3
 8005884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005886:	801a      	strh	r2, [r3, #0]
 8005888:	e032      	b.n	80058f0 <HAL_PCD_EP_DB_Transmit+0x38e>
 800588a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800588c:	095b      	lsrs	r3, r3, #5
 800588e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005890:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005892:	f003 031f 	and.w	r3, r3, #31
 8005896:	2b00      	cmp	r3, #0
 8005898:	d102      	bne.n	80058a0 <HAL_PCD_EP_DB_Transmit+0x33e>
 800589a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800589c:	3b01      	subs	r3, #1
 800589e:	64bb      	str	r3, [r7, #72]	; 0x48
 80058a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058a2:	b29b      	uxth	r3, r3
 80058a4:	029b      	lsls	r3, r3, #10
 80058a6:	b29b      	uxth	r3, r3
 80058a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058b0:	b29a      	uxth	r2, r3
 80058b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058b4:	801a      	strh	r2, [r3, #0]
 80058b6:	e01b      	b.n	80058f0 <HAL_PCD_EP_DB_Transmit+0x38e>
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	785b      	ldrb	r3, [r3, #1]
 80058bc:	2b01      	cmp	r3, #1
 80058be:	d117      	bne.n	80058f0 <HAL_PCD_EP_DB_Transmit+0x38e>
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	643b      	str	r3, [r7, #64]	; 0x40
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058ce:	b29b      	uxth	r3, r3
 80058d0:	461a      	mov	r2, r3
 80058d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058d4:	4413      	add	r3, r2
 80058d6:	643b      	str	r3, [r7, #64]	; 0x40
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	781b      	ldrb	r3, [r3, #0]
 80058dc:	00da      	lsls	r2, r3, #3
 80058de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058e0:	4413      	add	r3, r2
 80058e2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80058e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058ea:	b29a      	uxth	r2, r3
 80058ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058ee:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	6818      	ldr	r0, [r3, #0]
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	6959      	ldr	r1, [r3, #20]
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	891a      	ldrh	r2, [r3, #8]
 80058fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058fe:	b29b      	uxth	r3, r3
 8005900:	f004 fabb 	bl	8009e7a <USB_WritePMA>
 8005904:	e1ce      	b.n	8005ca4 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800590e:	b29b      	uxth	r3, r3
 8005910:	461a      	mov	r2, r3
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	781b      	ldrb	r3, [r3, #0]
 8005916:	00db      	lsls	r3, r3, #3
 8005918:	4413      	add	r3, r2
 800591a:	68fa      	ldr	r2, [r7, #12]
 800591c:	6812      	ldr	r2, [r2, #0]
 800591e:	4413      	add	r3, r2
 8005920:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005924:	881b      	ldrh	r3, [r3, #0]
 8005926:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800592a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	699a      	ldr	r2, [r3, #24]
 8005932:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005936:	429a      	cmp	r2, r3
 8005938:	d307      	bcc.n	800594a <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxByteNbre;
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	699a      	ldr	r2, [r3, #24]
 800593e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005942:	1ad2      	subs	r2, r2, r3
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	619a      	str	r2, [r3, #24]
 8005948:	e002      	b.n	8005950 <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	2200      	movs	r2, #0
 800594e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	699b      	ldr	r3, [r3, #24]
 8005954:	2b00      	cmp	r3, #0
 8005956:	f040 80c4 	bne.w	8005ae2 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	785b      	ldrb	r3, [r3, #1]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d126      	bne.n	80059b0 <HAL_PCD_EP_DB_Transmit+0x44e>
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005970:	b29b      	uxth	r3, r3
 8005972:	461a      	mov	r2, r3
 8005974:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005976:	4413      	add	r3, r2
 8005978:	66fb      	str	r3, [r7, #108]	; 0x6c
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	781b      	ldrb	r3, [r3, #0]
 800597e:	00da      	lsls	r2, r3, #3
 8005980:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005982:	4413      	add	r3, r2
 8005984:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005988:	66bb      	str	r3, [r7, #104]	; 0x68
 800598a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800598c:	881b      	ldrh	r3, [r3, #0]
 800598e:	b29b      	uxth	r3, r3
 8005990:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005994:	b29a      	uxth	r2, r3
 8005996:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005998:	801a      	strh	r2, [r3, #0]
 800599a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800599c:	881b      	ldrh	r3, [r3, #0]
 800599e:	b29b      	uxth	r3, r3
 80059a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059a8:	b29a      	uxth	r2, r3
 80059aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80059ac:	801a      	strh	r2, [r3, #0]
 80059ae:	e01a      	b.n	80059e6 <HAL_PCD_EP_DB_Transmit+0x484>
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	785b      	ldrb	r3, [r3, #1]
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	d116      	bne.n	80059e6 <HAL_PCD_EP_DB_Transmit+0x484>
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	677b      	str	r3, [r7, #116]	; 0x74
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059c6:	b29b      	uxth	r3, r3
 80059c8:	461a      	mov	r2, r3
 80059ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059cc:	4413      	add	r3, r2
 80059ce:	677b      	str	r3, [r7, #116]	; 0x74
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	781b      	ldrb	r3, [r3, #0]
 80059d4:	00da      	lsls	r2, r3, #3
 80059d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059d8:	4413      	add	r3, r2
 80059da:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80059de:	673b      	str	r3, [r7, #112]	; 0x70
 80059e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80059e2:	2200      	movs	r2, #0
 80059e4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	67bb      	str	r3, [r7, #120]	; 0x78
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	785b      	ldrb	r3, [r3, #1]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d12f      	bne.n	8005a54 <HAL_PCD_EP_DB_Transmit+0x4f2>
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a04:	b29b      	uxth	r3, r3
 8005a06:	461a      	mov	r2, r3
 8005a08:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005a0c:	4413      	add	r3, r2
 8005a0e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	781b      	ldrb	r3, [r3, #0]
 8005a16:	00da      	lsls	r2, r3, #3
 8005a18:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005a1c:	4413      	add	r3, r2
 8005a1e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005a22:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005a26:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005a2a:	881b      	ldrh	r3, [r3, #0]
 8005a2c:	b29b      	uxth	r3, r3
 8005a2e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a32:	b29a      	uxth	r2, r3
 8005a34:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005a38:	801a      	strh	r2, [r3, #0]
 8005a3a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005a3e:	881b      	ldrh	r3, [r3, #0]
 8005a40:	b29b      	uxth	r3, r3
 8005a42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a4a:	b29a      	uxth	r2, r3
 8005a4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005a50:	801a      	strh	r2, [r3, #0]
 8005a52:	e017      	b.n	8005a84 <HAL_PCD_EP_DB_Transmit+0x522>
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	785b      	ldrb	r3, [r3, #1]
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d113      	bne.n	8005a84 <HAL_PCD_EP_DB_Transmit+0x522>
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a64:	b29b      	uxth	r3, r3
 8005a66:	461a      	mov	r2, r3
 8005a68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a6a:	4413      	add	r3, r2
 8005a6c:	67bb      	str	r3, [r7, #120]	; 0x78
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	781b      	ldrb	r3, [r3, #0]
 8005a72:	00da      	lsls	r2, r3, #3
 8005a74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a76:	4413      	add	r3, r2
 8005a78:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005a7c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005a7e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005a80:	2200      	movs	r2, #0
 8005a82:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	781b      	ldrb	r3, [r3, #0]
 8005a88:	4619      	mov	r1, r3
 8005a8a:	68f8      	ldr	r0, [r7, #12]
 8005a8c:	f005 ff0f 	bl	800b8ae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005a90:	88fb      	ldrh	r3, [r7, #6]
 8005a92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	f040 8104 	bne.w	8005ca4 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	781b      	ldrb	r3, [r3, #0]
 8005aa6:	009b      	lsls	r3, r3, #2
 8005aa8:	4413      	add	r3, r2
 8005aaa:	881b      	ldrh	r3, [r3, #0]
 8005aac:	b29b      	uxth	r3, r3
 8005aae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ab2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ab6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	461a      	mov	r2, r3
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	781b      	ldrb	r3, [r3, #0]
 8005ac4:	009b      	lsls	r3, r3, #2
 8005ac6:	441a      	add	r2, r3
 8005ac8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005acc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ad0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ad4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005ad8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	8013      	strh	r3, [r2, #0]
 8005ae0:	e0e0      	b.n	8005ca4 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005ae2:	88fb      	ldrh	r3, [r7, #6]
 8005ae4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d121      	bne.n	8005b30 <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	461a      	mov	r2, r3
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	781b      	ldrb	r3, [r3, #0]
 8005af6:	009b      	lsls	r3, r3, #2
 8005af8:	4413      	add	r3, r2
 8005afa:	881b      	ldrh	r3, [r3, #0]
 8005afc:	b29b      	uxth	r3, r3
 8005afe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b06:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	461a      	mov	r2, r3
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	781b      	ldrb	r3, [r3, #0]
 8005b14:	009b      	lsls	r3, r3, #2
 8005b16:	441a      	add	r2, r3
 8005b18:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005b1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b24:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005b28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b2c:	b29b      	uxth	r3, r3
 8005b2e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005b36:	2b01      	cmp	r3, #1
 8005b38:	f040 80b4 	bne.w	8005ca4 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxByteNbre;
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	695a      	ldr	r2, [r3, #20]
 8005b40:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005b44:	441a      	add	r2, r3
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	69da      	ldr	r2, [r3, #28]
 8005b4e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005b52:	441a      	add	r2, r3
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	6a1a      	ldr	r2, [r3, #32]
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	691b      	ldr	r3, [r3, #16]
 8005b60:	429a      	cmp	r2, r3
 8005b62:	d309      	bcc.n	8005b78 <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	691b      	ldr	r3, [r3, #16]
 8005b68:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	6a1a      	ldr	r2, [r3, #32]
 8005b6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b70:	1ad2      	subs	r2, r2, r3
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	621a      	str	r2, [r3, #32]
 8005b76:	e015      	b.n	8005ba4 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	6a1b      	ldr	r3, [r3, #32]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d107      	bne.n	8005b90 <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxByteNbre;
 8005b80:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005b84:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005b8e:	e009      	b.n	8005ba4 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	6a1b      	ldr	r3, [r3, #32]
 8005b94:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	667b      	str	r3, [r7, #100]	; 0x64
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	785b      	ldrb	r3, [r3, #1]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d155      	bne.n	8005c5e <HAL_PCD_EP_DB_Transmit+0x6fc>
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bc0:	b29b      	uxth	r3, r3
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005bc6:	4413      	add	r3, r2
 8005bc8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	781b      	ldrb	r3, [r3, #0]
 8005bce:	00da      	lsls	r2, r3, #3
 8005bd0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005bd2:	4413      	add	r3, r2
 8005bd4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005bd8:	65bb      	str	r3, [r7, #88]	; 0x58
 8005bda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d112      	bne.n	8005c06 <HAL_PCD_EP_DB_Transmit+0x6a4>
 8005be0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005be2:	881b      	ldrh	r3, [r3, #0]
 8005be4:	b29b      	uxth	r3, r3
 8005be6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005bea:	b29a      	uxth	r2, r3
 8005bec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005bee:	801a      	strh	r2, [r3, #0]
 8005bf0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005bf2:	881b      	ldrh	r3, [r3, #0]
 8005bf4:	b29b      	uxth	r3, r3
 8005bf6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bfa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bfe:	b29a      	uxth	r2, r3
 8005c00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c02:	801a      	strh	r2, [r3, #0]
 8005c04:	e044      	b.n	8005c90 <HAL_PCD_EP_DB_Transmit+0x72e>
 8005c06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c08:	2b3e      	cmp	r3, #62	; 0x3e
 8005c0a:	d811      	bhi.n	8005c30 <HAL_PCD_EP_DB_Transmit+0x6ce>
 8005c0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c0e:	085b      	lsrs	r3, r3, #1
 8005c10:	657b      	str	r3, [r7, #84]	; 0x54
 8005c12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c14:	f003 0301 	and.w	r3, r3, #1
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d002      	beq.n	8005c22 <HAL_PCD_EP_DB_Transmit+0x6c0>
 8005c1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c1e:	3301      	adds	r3, #1
 8005c20:	657b      	str	r3, [r7, #84]	; 0x54
 8005c22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c24:	b29b      	uxth	r3, r3
 8005c26:	029b      	lsls	r3, r3, #10
 8005c28:	b29a      	uxth	r2, r3
 8005c2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c2c:	801a      	strh	r2, [r3, #0]
 8005c2e:	e02f      	b.n	8005c90 <HAL_PCD_EP_DB_Transmit+0x72e>
 8005c30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c32:	095b      	lsrs	r3, r3, #5
 8005c34:	657b      	str	r3, [r7, #84]	; 0x54
 8005c36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c38:	f003 031f 	and.w	r3, r3, #31
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d102      	bne.n	8005c46 <HAL_PCD_EP_DB_Transmit+0x6e4>
 8005c40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c42:	3b01      	subs	r3, #1
 8005c44:	657b      	str	r3, [r7, #84]	; 0x54
 8005c46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c48:	b29b      	uxth	r3, r3
 8005c4a:	029b      	lsls	r3, r3, #10
 8005c4c:	b29b      	uxth	r3, r3
 8005c4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c56:	b29a      	uxth	r2, r3
 8005c58:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c5a:	801a      	strh	r2, [r3, #0]
 8005c5c:	e018      	b.n	8005c90 <HAL_PCD_EP_DB_Transmit+0x72e>
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	785b      	ldrb	r3, [r3, #1]
 8005c62:	2b01      	cmp	r3, #1
 8005c64:	d114      	bne.n	8005c90 <HAL_PCD_EP_DB_Transmit+0x72e>
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c6e:	b29b      	uxth	r3, r3
 8005c70:	461a      	mov	r2, r3
 8005c72:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c74:	4413      	add	r3, r2
 8005c76:	667b      	str	r3, [r7, #100]	; 0x64
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	781b      	ldrb	r3, [r3, #0]
 8005c7c:	00da      	lsls	r2, r3, #3
 8005c7e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c80:	4413      	add	r3, r2
 8005c82:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005c86:	663b      	str	r3, [r7, #96]	; 0x60
 8005c88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c8a:	b29a      	uxth	r2, r3
 8005c8c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c8e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	6818      	ldr	r0, [r3, #0]
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	6959      	ldr	r1, [r3, #20]
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	895a      	ldrh	r2, [r3, #10]
 8005c9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c9e:	b29b      	uxth	r3, r3
 8005ca0:	f004 f8eb 	bl	8009e7a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	461a      	mov	r2, r3
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	781b      	ldrb	r3, [r3, #0]
 8005cae:	009b      	lsls	r3, r3, #2
 8005cb0:	4413      	add	r3, r2
 8005cb2:	881b      	ldrh	r3, [r3, #0]
 8005cb4:	b29b      	uxth	r3, r3
 8005cb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cbe:	823b      	strh	r3, [r7, #16]
 8005cc0:	8a3b      	ldrh	r3, [r7, #16]
 8005cc2:	f083 0310 	eor.w	r3, r3, #16
 8005cc6:	823b      	strh	r3, [r7, #16]
 8005cc8:	8a3b      	ldrh	r3, [r7, #16]
 8005cca:	f083 0320 	eor.w	r3, r3, #32
 8005cce:	823b      	strh	r3, [r7, #16]
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	461a      	mov	r2, r3
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	781b      	ldrb	r3, [r3, #0]
 8005cda:	009b      	lsls	r3, r3, #2
 8005cdc:	441a      	add	r2, r3
 8005cde:	8a3b      	ldrh	r3, [r7, #16]
 8005ce0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ce4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ce8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cf0:	b29b      	uxth	r3, r3
 8005cf2:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8005cf4:	2300      	movs	r3, #0
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3788      	adds	r7, #136	; 0x88
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}

08005cfe <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005cfe:	b480      	push	{r7}
 8005d00:	b087      	sub	sp, #28
 8005d02:	af00      	add	r7, sp, #0
 8005d04:	60f8      	str	r0, [r7, #12]
 8005d06:	607b      	str	r3, [r7, #4]
 8005d08:	460b      	mov	r3, r1
 8005d0a:	817b      	strh	r3, [r7, #10]
 8005d0c:	4613      	mov	r3, r2
 8005d0e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005d10:	897b      	ldrh	r3, [r7, #10]
 8005d12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d16:	b29b      	uxth	r3, r3
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d00b      	beq.n	8005d34 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005d1c:	897b      	ldrh	r3, [r7, #10]
 8005d1e:	f003 0307 	and.w	r3, r3, #7
 8005d22:	1c5a      	adds	r2, r3, #1
 8005d24:	4613      	mov	r3, r2
 8005d26:	009b      	lsls	r3, r3, #2
 8005d28:	4413      	add	r3, r2
 8005d2a:	00db      	lsls	r3, r3, #3
 8005d2c:	68fa      	ldr	r2, [r7, #12]
 8005d2e:	4413      	add	r3, r2
 8005d30:	617b      	str	r3, [r7, #20]
 8005d32:	e009      	b.n	8005d48 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005d34:	897a      	ldrh	r2, [r7, #10]
 8005d36:	4613      	mov	r3, r2
 8005d38:	009b      	lsls	r3, r3, #2
 8005d3a:	4413      	add	r3, r2
 8005d3c:	00db      	lsls	r3, r3, #3
 8005d3e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005d42:	68fa      	ldr	r2, [r7, #12]
 8005d44:	4413      	add	r3, r2
 8005d46:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005d48:	893b      	ldrh	r3, [r7, #8]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d107      	bne.n	8005d5e <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	2200      	movs	r2, #0
 8005d52:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	b29a      	uxth	r2, r3
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	80da      	strh	r2, [r3, #6]
 8005d5c:	e00b      	b.n	8005d76 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	2201      	movs	r2, #1
 8005d62:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	b29a      	uxth	r2, r3
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	0c1b      	lsrs	r3, r3, #16
 8005d70:	b29a      	uxth	r2, r3
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8005d76:	2300      	movs	r3, #0
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	371c      	adds	r7, #28
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d82:	4770      	bx	lr

08005d84 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b085      	sub	sp, #20
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2201      	movs	r2, #1
 8005d96:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8005da8:	b29b      	uxth	r3, r3
 8005daa:	f043 0301 	orr.w	r3, r3, #1
 8005dae:	b29a      	uxth	r2, r3
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8005dbc:	b29b      	uxth	r3, r3
 8005dbe:	f043 0302 	orr.w	r3, r3, #2
 8005dc2:	b29a      	uxth	r2, r3
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8005dca:	2300      	movs	r3, #0
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	3714      	adds	r7, #20
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd6:	4770      	bx	lr

08005dd8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005ddc:	4b05      	ldr	r3, [pc, #20]	; (8005df4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a04      	ldr	r2, [pc, #16]	; (8005df4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005de2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005de6:	6013      	str	r3, [r2, #0]
}
 8005de8:	bf00      	nop
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr
 8005df2:	bf00      	nop
 8005df4:	40007000 	.word	0x40007000

08005df8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005dfc:	4b04      	ldr	r3, [pc, #16]	; (8005e10 <HAL_PWREx_GetVoltageRange+0x18>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	46bd      	mov	sp, r7
 8005e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0c:	4770      	bx	lr
 8005e0e:	bf00      	nop
 8005e10:	40007000 	.word	0x40007000

08005e14 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005e14:	b480      	push	{r7}
 8005e16:	b085      	sub	sp, #20
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e22:	d130      	bne.n	8005e86 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005e24:	4b23      	ldr	r3, [pc, #140]	; (8005eb4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005e2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e30:	d038      	beq.n	8005ea4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005e32:	4b20      	ldr	r3, [pc, #128]	; (8005eb4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005e3a:	4a1e      	ldr	r2, [pc, #120]	; (8005eb4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005e3c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005e40:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005e42:	4b1d      	ldr	r3, [pc, #116]	; (8005eb8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	2232      	movs	r2, #50	; 0x32
 8005e48:	fb02 f303 	mul.w	r3, r2, r3
 8005e4c:	4a1b      	ldr	r2, [pc, #108]	; (8005ebc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8005e52:	0c9b      	lsrs	r3, r3, #18
 8005e54:	3301      	adds	r3, #1
 8005e56:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005e58:	e002      	b.n	8005e60 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	3b01      	subs	r3, #1
 8005e5e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005e60:	4b14      	ldr	r3, [pc, #80]	; (8005eb4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005e62:	695b      	ldr	r3, [r3, #20]
 8005e64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e6c:	d102      	bne.n	8005e74 <HAL_PWREx_ControlVoltageScaling+0x60>
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d1f2      	bne.n	8005e5a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005e74:	4b0f      	ldr	r3, [pc, #60]	; (8005eb4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005e76:	695b      	ldr	r3, [r3, #20]
 8005e78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e80:	d110      	bne.n	8005ea4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005e82:	2303      	movs	r3, #3
 8005e84:	e00f      	b.n	8005ea6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005e86:	4b0b      	ldr	r3, [pc, #44]	; (8005eb4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005e8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e92:	d007      	beq.n	8005ea4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005e94:	4b07      	ldr	r3, [pc, #28]	; (8005eb4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005e9c:	4a05      	ldr	r2, [pc, #20]	; (8005eb4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005e9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005ea2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005ea4:	2300      	movs	r3, #0
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3714      	adds	r7, #20
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb0:	4770      	bx	lr
 8005eb2:	bf00      	nop
 8005eb4:	40007000 	.word	0x40007000
 8005eb8:	20000014 	.word	0x20000014
 8005ebc:	431bde83 	.word	0x431bde83

08005ec0 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8005ec4:	4b05      	ldr	r3, [pc, #20]	; (8005edc <HAL_PWREx_EnableVddUSB+0x1c>)
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	4a04      	ldr	r2, [pc, #16]	; (8005edc <HAL_PWREx_EnableVddUSB+0x1c>)
 8005eca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005ece:	6053      	str	r3, [r2, #4]
}
 8005ed0:	bf00      	nop
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed8:	4770      	bx	lr
 8005eda:	bf00      	nop
 8005edc:	40007000 	.word	0x40007000

08005ee0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b088      	sub	sp, #32
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d102      	bne.n	8005ef4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005eee:	2301      	movs	r3, #1
 8005ef0:	f000 bc11 	b.w	8006716 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ef4:	4ba0      	ldr	r3, [pc, #640]	; (8006178 <HAL_RCC_OscConfig+0x298>)
 8005ef6:	689b      	ldr	r3, [r3, #8]
 8005ef8:	f003 030c 	and.w	r3, r3, #12
 8005efc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005efe:	4b9e      	ldr	r3, [pc, #632]	; (8006178 <HAL_RCC_OscConfig+0x298>)
 8005f00:	68db      	ldr	r3, [r3, #12]
 8005f02:	f003 0303 	and.w	r3, r3, #3
 8005f06:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f003 0310 	and.w	r3, r3, #16
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	f000 80e4 	beq.w	80060de <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005f16:	69bb      	ldr	r3, [r7, #24]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d007      	beq.n	8005f2c <HAL_RCC_OscConfig+0x4c>
 8005f1c:	69bb      	ldr	r3, [r7, #24]
 8005f1e:	2b0c      	cmp	r3, #12
 8005f20:	f040 808b 	bne.w	800603a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	2b01      	cmp	r3, #1
 8005f28:	f040 8087 	bne.w	800603a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005f2c:	4b92      	ldr	r3, [pc, #584]	; (8006178 <HAL_RCC_OscConfig+0x298>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f003 0302 	and.w	r3, r3, #2
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d005      	beq.n	8005f44 <HAL_RCC_OscConfig+0x64>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	699b      	ldr	r3, [r3, #24]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d101      	bne.n	8005f44 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005f40:	2301      	movs	r3, #1
 8005f42:	e3e8      	b.n	8006716 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6a1a      	ldr	r2, [r3, #32]
 8005f48:	4b8b      	ldr	r3, [pc, #556]	; (8006178 <HAL_RCC_OscConfig+0x298>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f003 0308 	and.w	r3, r3, #8
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d004      	beq.n	8005f5e <HAL_RCC_OscConfig+0x7e>
 8005f54:	4b88      	ldr	r3, [pc, #544]	; (8006178 <HAL_RCC_OscConfig+0x298>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f5c:	e005      	b.n	8005f6a <HAL_RCC_OscConfig+0x8a>
 8005f5e:	4b86      	ldr	r3, [pc, #536]	; (8006178 <HAL_RCC_OscConfig+0x298>)
 8005f60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f64:	091b      	lsrs	r3, r3, #4
 8005f66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d223      	bcs.n	8005fb6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6a1b      	ldr	r3, [r3, #32]
 8005f72:	4618      	mov	r0, r3
 8005f74:	f000 fd42 	bl	80069fc <RCC_SetFlashLatencyFromMSIRange>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d001      	beq.n	8005f82 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	e3c9      	b.n	8006716 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005f82:	4b7d      	ldr	r3, [pc, #500]	; (8006178 <HAL_RCC_OscConfig+0x298>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a7c      	ldr	r2, [pc, #496]	; (8006178 <HAL_RCC_OscConfig+0x298>)
 8005f88:	f043 0308 	orr.w	r3, r3, #8
 8005f8c:	6013      	str	r3, [r2, #0]
 8005f8e:	4b7a      	ldr	r3, [pc, #488]	; (8006178 <HAL_RCC_OscConfig+0x298>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6a1b      	ldr	r3, [r3, #32]
 8005f9a:	4977      	ldr	r1, [pc, #476]	; (8006178 <HAL_RCC_OscConfig+0x298>)
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005fa0:	4b75      	ldr	r3, [pc, #468]	; (8006178 <HAL_RCC_OscConfig+0x298>)
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	69db      	ldr	r3, [r3, #28]
 8005fac:	021b      	lsls	r3, r3, #8
 8005fae:	4972      	ldr	r1, [pc, #456]	; (8006178 <HAL_RCC_OscConfig+0x298>)
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	604b      	str	r3, [r1, #4]
 8005fb4:	e025      	b.n	8006002 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005fb6:	4b70      	ldr	r3, [pc, #448]	; (8006178 <HAL_RCC_OscConfig+0x298>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a6f      	ldr	r2, [pc, #444]	; (8006178 <HAL_RCC_OscConfig+0x298>)
 8005fbc:	f043 0308 	orr.w	r3, r3, #8
 8005fc0:	6013      	str	r3, [r2, #0]
 8005fc2:	4b6d      	ldr	r3, [pc, #436]	; (8006178 <HAL_RCC_OscConfig+0x298>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6a1b      	ldr	r3, [r3, #32]
 8005fce:	496a      	ldr	r1, [pc, #424]	; (8006178 <HAL_RCC_OscConfig+0x298>)
 8005fd0:	4313      	orrs	r3, r2
 8005fd2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005fd4:	4b68      	ldr	r3, [pc, #416]	; (8006178 <HAL_RCC_OscConfig+0x298>)
 8005fd6:	685b      	ldr	r3, [r3, #4]
 8005fd8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	69db      	ldr	r3, [r3, #28]
 8005fe0:	021b      	lsls	r3, r3, #8
 8005fe2:	4965      	ldr	r1, [pc, #404]	; (8006178 <HAL_RCC_OscConfig+0x298>)
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005fe8:	69bb      	ldr	r3, [r7, #24]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d109      	bne.n	8006002 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6a1b      	ldr	r3, [r3, #32]
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f000 fd02 	bl	80069fc <RCC_SetFlashLatencyFromMSIRange>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d001      	beq.n	8006002 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8005ffe:	2301      	movs	r3, #1
 8006000:	e389      	b.n	8006716 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006002:	f000 fc6f 	bl	80068e4 <HAL_RCC_GetSysClockFreq>
 8006006:	4602      	mov	r2, r0
 8006008:	4b5b      	ldr	r3, [pc, #364]	; (8006178 <HAL_RCC_OscConfig+0x298>)
 800600a:	689b      	ldr	r3, [r3, #8]
 800600c:	091b      	lsrs	r3, r3, #4
 800600e:	f003 030f 	and.w	r3, r3, #15
 8006012:	495a      	ldr	r1, [pc, #360]	; (800617c <HAL_RCC_OscConfig+0x29c>)
 8006014:	5ccb      	ldrb	r3, [r1, r3]
 8006016:	f003 031f 	and.w	r3, r3, #31
 800601a:	fa22 f303 	lsr.w	r3, r2, r3
 800601e:	4a58      	ldr	r2, [pc, #352]	; (8006180 <HAL_RCC_OscConfig+0x2a0>)
 8006020:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006022:	4b58      	ldr	r3, [pc, #352]	; (8006184 <HAL_RCC_OscConfig+0x2a4>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4618      	mov	r0, r3
 8006028:	f7fb fec6 	bl	8001db8 <HAL_InitTick>
 800602c:	4603      	mov	r3, r0
 800602e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8006030:	7bfb      	ldrb	r3, [r7, #15]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d052      	beq.n	80060dc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8006036:	7bfb      	ldrb	r3, [r7, #15]
 8006038:	e36d      	b.n	8006716 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	699b      	ldr	r3, [r3, #24]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d032      	beq.n	80060a8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006042:	4b4d      	ldr	r3, [pc, #308]	; (8006178 <HAL_RCC_OscConfig+0x298>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a4c      	ldr	r2, [pc, #304]	; (8006178 <HAL_RCC_OscConfig+0x298>)
 8006048:	f043 0301 	orr.w	r3, r3, #1
 800604c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800604e:	f7fb ff03 	bl	8001e58 <HAL_GetTick>
 8006052:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006054:	e008      	b.n	8006068 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006056:	f7fb feff 	bl	8001e58 <HAL_GetTick>
 800605a:	4602      	mov	r2, r0
 800605c:	693b      	ldr	r3, [r7, #16]
 800605e:	1ad3      	subs	r3, r2, r3
 8006060:	2b02      	cmp	r3, #2
 8006062:	d901      	bls.n	8006068 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8006064:	2303      	movs	r3, #3
 8006066:	e356      	b.n	8006716 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006068:	4b43      	ldr	r3, [pc, #268]	; (8006178 <HAL_RCC_OscConfig+0x298>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f003 0302 	and.w	r3, r3, #2
 8006070:	2b00      	cmp	r3, #0
 8006072:	d0f0      	beq.n	8006056 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006074:	4b40      	ldr	r3, [pc, #256]	; (8006178 <HAL_RCC_OscConfig+0x298>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a3f      	ldr	r2, [pc, #252]	; (8006178 <HAL_RCC_OscConfig+0x298>)
 800607a:	f043 0308 	orr.w	r3, r3, #8
 800607e:	6013      	str	r3, [r2, #0]
 8006080:	4b3d      	ldr	r3, [pc, #244]	; (8006178 <HAL_RCC_OscConfig+0x298>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6a1b      	ldr	r3, [r3, #32]
 800608c:	493a      	ldr	r1, [pc, #232]	; (8006178 <HAL_RCC_OscConfig+0x298>)
 800608e:	4313      	orrs	r3, r2
 8006090:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006092:	4b39      	ldr	r3, [pc, #228]	; (8006178 <HAL_RCC_OscConfig+0x298>)
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	69db      	ldr	r3, [r3, #28]
 800609e:	021b      	lsls	r3, r3, #8
 80060a0:	4935      	ldr	r1, [pc, #212]	; (8006178 <HAL_RCC_OscConfig+0x298>)
 80060a2:	4313      	orrs	r3, r2
 80060a4:	604b      	str	r3, [r1, #4]
 80060a6:	e01a      	b.n	80060de <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80060a8:	4b33      	ldr	r3, [pc, #204]	; (8006178 <HAL_RCC_OscConfig+0x298>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a32      	ldr	r2, [pc, #200]	; (8006178 <HAL_RCC_OscConfig+0x298>)
 80060ae:	f023 0301 	bic.w	r3, r3, #1
 80060b2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80060b4:	f7fb fed0 	bl	8001e58 <HAL_GetTick>
 80060b8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80060ba:	e008      	b.n	80060ce <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80060bc:	f7fb fecc 	bl	8001e58 <HAL_GetTick>
 80060c0:	4602      	mov	r2, r0
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	1ad3      	subs	r3, r2, r3
 80060c6:	2b02      	cmp	r3, #2
 80060c8:	d901      	bls.n	80060ce <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80060ca:	2303      	movs	r3, #3
 80060cc:	e323      	b.n	8006716 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80060ce:	4b2a      	ldr	r3, [pc, #168]	; (8006178 <HAL_RCC_OscConfig+0x298>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f003 0302 	and.w	r3, r3, #2
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d1f0      	bne.n	80060bc <HAL_RCC_OscConfig+0x1dc>
 80060da:	e000      	b.n	80060de <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80060dc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f003 0301 	and.w	r3, r3, #1
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d073      	beq.n	80061d2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80060ea:	69bb      	ldr	r3, [r7, #24]
 80060ec:	2b08      	cmp	r3, #8
 80060ee:	d005      	beq.n	80060fc <HAL_RCC_OscConfig+0x21c>
 80060f0:	69bb      	ldr	r3, [r7, #24]
 80060f2:	2b0c      	cmp	r3, #12
 80060f4:	d10e      	bne.n	8006114 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	2b03      	cmp	r3, #3
 80060fa:	d10b      	bne.n	8006114 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060fc:	4b1e      	ldr	r3, [pc, #120]	; (8006178 <HAL_RCC_OscConfig+0x298>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006104:	2b00      	cmp	r3, #0
 8006106:	d063      	beq.n	80061d0 <HAL_RCC_OscConfig+0x2f0>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d15f      	bne.n	80061d0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8006110:	2301      	movs	r3, #1
 8006112:	e300      	b.n	8006716 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800611c:	d106      	bne.n	800612c <HAL_RCC_OscConfig+0x24c>
 800611e:	4b16      	ldr	r3, [pc, #88]	; (8006178 <HAL_RCC_OscConfig+0x298>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a15      	ldr	r2, [pc, #84]	; (8006178 <HAL_RCC_OscConfig+0x298>)
 8006124:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006128:	6013      	str	r3, [r2, #0]
 800612a:	e01d      	b.n	8006168 <HAL_RCC_OscConfig+0x288>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006134:	d10c      	bne.n	8006150 <HAL_RCC_OscConfig+0x270>
 8006136:	4b10      	ldr	r3, [pc, #64]	; (8006178 <HAL_RCC_OscConfig+0x298>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a0f      	ldr	r2, [pc, #60]	; (8006178 <HAL_RCC_OscConfig+0x298>)
 800613c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006140:	6013      	str	r3, [r2, #0]
 8006142:	4b0d      	ldr	r3, [pc, #52]	; (8006178 <HAL_RCC_OscConfig+0x298>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a0c      	ldr	r2, [pc, #48]	; (8006178 <HAL_RCC_OscConfig+0x298>)
 8006148:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800614c:	6013      	str	r3, [r2, #0]
 800614e:	e00b      	b.n	8006168 <HAL_RCC_OscConfig+0x288>
 8006150:	4b09      	ldr	r3, [pc, #36]	; (8006178 <HAL_RCC_OscConfig+0x298>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a08      	ldr	r2, [pc, #32]	; (8006178 <HAL_RCC_OscConfig+0x298>)
 8006156:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800615a:	6013      	str	r3, [r2, #0]
 800615c:	4b06      	ldr	r3, [pc, #24]	; (8006178 <HAL_RCC_OscConfig+0x298>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a05      	ldr	r2, [pc, #20]	; (8006178 <HAL_RCC_OscConfig+0x298>)
 8006162:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006166:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d01b      	beq.n	80061a8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006170:	f7fb fe72 	bl	8001e58 <HAL_GetTick>
 8006174:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006176:	e010      	b.n	800619a <HAL_RCC_OscConfig+0x2ba>
 8006178:	40021000 	.word	0x40021000
 800617c:	0800f1e8 	.word	0x0800f1e8
 8006180:	20000014 	.word	0x20000014
 8006184:	20000018 	.word	0x20000018
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006188:	f7fb fe66 	bl	8001e58 <HAL_GetTick>
 800618c:	4602      	mov	r2, r0
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	1ad3      	subs	r3, r2, r3
 8006192:	2b64      	cmp	r3, #100	; 0x64
 8006194:	d901      	bls.n	800619a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8006196:	2303      	movs	r3, #3
 8006198:	e2bd      	b.n	8006716 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800619a:	4baf      	ldr	r3, [pc, #700]	; (8006458 <HAL_RCC_OscConfig+0x578>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d0f0      	beq.n	8006188 <HAL_RCC_OscConfig+0x2a8>
 80061a6:	e014      	b.n	80061d2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061a8:	f7fb fe56 	bl	8001e58 <HAL_GetTick>
 80061ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80061ae:	e008      	b.n	80061c2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80061b0:	f7fb fe52 	bl	8001e58 <HAL_GetTick>
 80061b4:	4602      	mov	r2, r0
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	1ad3      	subs	r3, r2, r3
 80061ba:	2b64      	cmp	r3, #100	; 0x64
 80061bc:	d901      	bls.n	80061c2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80061be:	2303      	movs	r3, #3
 80061c0:	e2a9      	b.n	8006716 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80061c2:	4ba5      	ldr	r3, [pc, #660]	; (8006458 <HAL_RCC_OscConfig+0x578>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d1f0      	bne.n	80061b0 <HAL_RCC_OscConfig+0x2d0>
 80061ce:	e000      	b.n	80061d2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f003 0302 	and.w	r3, r3, #2
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d060      	beq.n	80062a0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80061de:	69bb      	ldr	r3, [r7, #24]
 80061e0:	2b04      	cmp	r3, #4
 80061e2:	d005      	beq.n	80061f0 <HAL_RCC_OscConfig+0x310>
 80061e4:	69bb      	ldr	r3, [r7, #24]
 80061e6:	2b0c      	cmp	r3, #12
 80061e8:	d119      	bne.n	800621e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	2b02      	cmp	r3, #2
 80061ee:	d116      	bne.n	800621e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80061f0:	4b99      	ldr	r3, [pc, #612]	; (8006458 <HAL_RCC_OscConfig+0x578>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d005      	beq.n	8006208 <HAL_RCC_OscConfig+0x328>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	68db      	ldr	r3, [r3, #12]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d101      	bne.n	8006208 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006204:	2301      	movs	r3, #1
 8006206:	e286      	b.n	8006716 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006208:	4b93      	ldr	r3, [pc, #588]	; (8006458 <HAL_RCC_OscConfig+0x578>)
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	691b      	ldr	r3, [r3, #16]
 8006214:	061b      	lsls	r3, r3, #24
 8006216:	4990      	ldr	r1, [pc, #576]	; (8006458 <HAL_RCC_OscConfig+0x578>)
 8006218:	4313      	orrs	r3, r2
 800621a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800621c:	e040      	b.n	80062a0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	68db      	ldr	r3, [r3, #12]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d023      	beq.n	800626e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006226:	4b8c      	ldr	r3, [pc, #560]	; (8006458 <HAL_RCC_OscConfig+0x578>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a8b      	ldr	r2, [pc, #556]	; (8006458 <HAL_RCC_OscConfig+0x578>)
 800622c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006230:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006232:	f7fb fe11 	bl	8001e58 <HAL_GetTick>
 8006236:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006238:	e008      	b.n	800624c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800623a:	f7fb fe0d 	bl	8001e58 <HAL_GetTick>
 800623e:	4602      	mov	r2, r0
 8006240:	693b      	ldr	r3, [r7, #16]
 8006242:	1ad3      	subs	r3, r2, r3
 8006244:	2b02      	cmp	r3, #2
 8006246:	d901      	bls.n	800624c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006248:	2303      	movs	r3, #3
 800624a:	e264      	b.n	8006716 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800624c:	4b82      	ldr	r3, [pc, #520]	; (8006458 <HAL_RCC_OscConfig+0x578>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006254:	2b00      	cmp	r3, #0
 8006256:	d0f0      	beq.n	800623a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006258:	4b7f      	ldr	r3, [pc, #508]	; (8006458 <HAL_RCC_OscConfig+0x578>)
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	691b      	ldr	r3, [r3, #16]
 8006264:	061b      	lsls	r3, r3, #24
 8006266:	497c      	ldr	r1, [pc, #496]	; (8006458 <HAL_RCC_OscConfig+0x578>)
 8006268:	4313      	orrs	r3, r2
 800626a:	604b      	str	r3, [r1, #4]
 800626c:	e018      	b.n	80062a0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800626e:	4b7a      	ldr	r3, [pc, #488]	; (8006458 <HAL_RCC_OscConfig+0x578>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a79      	ldr	r2, [pc, #484]	; (8006458 <HAL_RCC_OscConfig+0x578>)
 8006274:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006278:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800627a:	f7fb fded 	bl	8001e58 <HAL_GetTick>
 800627e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006280:	e008      	b.n	8006294 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006282:	f7fb fde9 	bl	8001e58 <HAL_GetTick>
 8006286:	4602      	mov	r2, r0
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	1ad3      	subs	r3, r2, r3
 800628c:	2b02      	cmp	r3, #2
 800628e:	d901      	bls.n	8006294 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006290:	2303      	movs	r3, #3
 8006292:	e240      	b.n	8006716 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006294:	4b70      	ldr	r3, [pc, #448]	; (8006458 <HAL_RCC_OscConfig+0x578>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800629c:	2b00      	cmp	r3, #0
 800629e:	d1f0      	bne.n	8006282 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f003 0308 	and.w	r3, r3, #8
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d03c      	beq.n	8006326 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	695b      	ldr	r3, [r3, #20]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d01c      	beq.n	80062ee <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80062b4:	4b68      	ldr	r3, [pc, #416]	; (8006458 <HAL_RCC_OscConfig+0x578>)
 80062b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80062ba:	4a67      	ldr	r2, [pc, #412]	; (8006458 <HAL_RCC_OscConfig+0x578>)
 80062bc:	f043 0301 	orr.w	r3, r3, #1
 80062c0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062c4:	f7fb fdc8 	bl	8001e58 <HAL_GetTick>
 80062c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80062ca:	e008      	b.n	80062de <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80062cc:	f7fb fdc4 	bl	8001e58 <HAL_GetTick>
 80062d0:	4602      	mov	r2, r0
 80062d2:	693b      	ldr	r3, [r7, #16]
 80062d4:	1ad3      	subs	r3, r2, r3
 80062d6:	2b02      	cmp	r3, #2
 80062d8:	d901      	bls.n	80062de <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80062da:	2303      	movs	r3, #3
 80062dc:	e21b      	b.n	8006716 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80062de:	4b5e      	ldr	r3, [pc, #376]	; (8006458 <HAL_RCC_OscConfig+0x578>)
 80062e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80062e4:	f003 0302 	and.w	r3, r3, #2
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d0ef      	beq.n	80062cc <HAL_RCC_OscConfig+0x3ec>
 80062ec:	e01b      	b.n	8006326 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80062ee:	4b5a      	ldr	r3, [pc, #360]	; (8006458 <HAL_RCC_OscConfig+0x578>)
 80062f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80062f4:	4a58      	ldr	r2, [pc, #352]	; (8006458 <HAL_RCC_OscConfig+0x578>)
 80062f6:	f023 0301 	bic.w	r3, r3, #1
 80062fa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062fe:	f7fb fdab 	bl	8001e58 <HAL_GetTick>
 8006302:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006304:	e008      	b.n	8006318 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006306:	f7fb fda7 	bl	8001e58 <HAL_GetTick>
 800630a:	4602      	mov	r2, r0
 800630c:	693b      	ldr	r3, [r7, #16]
 800630e:	1ad3      	subs	r3, r2, r3
 8006310:	2b02      	cmp	r3, #2
 8006312:	d901      	bls.n	8006318 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006314:	2303      	movs	r3, #3
 8006316:	e1fe      	b.n	8006716 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006318:	4b4f      	ldr	r3, [pc, #316]	; (8006458 <HAL_RCC_OscConfig+0x578>)
 800631a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800631e:	f003 0302 	and.w	r3, r3, #2
 8006322:	2b00      	cmp	r3, #0
 8006324:	d1ef      	bne.n	8006306 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f003 0304 	and.w	r3, r3, #4
 800632e:	2b00      	cmp	r3, #0
 8006330:	f000 80a6 	beq.w	8006480 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006334:	2300      	movs	r3, #0
 8006336:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006338:	4b47      	ldr	r3, [pc, #284]	; (8006458 <HAL_RCC_OscConfig+0x578>)
 800633a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800633c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006340:	2b00      	cmp	r3, #0
 8006342:	d10d      	bne.n	8006360 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006344:	4b44      	ldr	r3, [pc, #272]	; (8006458 <HAL_RCC_OscConfig+0x578>)
 8006346:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006348:	4a43      	ldr	r2, [pc, #268]	; (8006458 <HAL_RCC_OscConfig+0x578>)
 800634a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800634e:	6593      	str	r3, [r2, #88]	; 0x58
 8006350:	4b41      	ldr	r3, [pc, #260]	; (8006458 <HAL_RCC_OscConfig+0x578>)
 8006352:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006354:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006358:	60bb      	str	r3, [r7, #8]
 800635a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800635c:	2301      	movs	r3, #1
 800635e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006360:	4b3e      	ldr	r3, [pc, #248]	; (800645c <HAL_RCC_OscConfig+0x57c>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006368:	2b00      	cmp	r3, #0
 800636a:	d118      	bne.n	800639e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800636c:	4b3b      	ldr	r3, [pc, #236]	; (800645c <HAL_RCC_OscConfig+0x57c>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a3a      	ldr	r2, [pc, #232]	; (800645c <HAL_RCC_OscConfig+0x57c>)
 8006372:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006376:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006378:	f7fb fd6e 	bl	8001e58 <HAL_GetTick>
 800637c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800637e:	e008      	b.n	8006392 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006380:	f7fb fd6a 	bl	8001e58 <HAL_GetTick>
 8006384:	4602      	mov	r2, r0
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	1ad3      	subs	r3, r2, r3
 800638a:	2b02      	cmp	r3, #2
 800638c:	d901      	bls.n	8006392 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800638e:	2303      	movs	r3, #3
 8006390:	e1c1      	b.n	8006716 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006392:	4b32      	ldr	r3, [pc, #200]	; (800645c <HAL_RCC_OscConfig+0x57c>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800639a:	2b00      	cmp	r3, #0
 800639c:	d0f0      	beq.n	8006380 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	689b      	ldr	r3, [r3, #8]
 80063a2:	2b01      	cmp	r3, #1
 80063a4:	d108      	bne.n	80063b8 <HAL_RCC_OscConfig+0x4d8>
 80063a6:	4b2c      	ldr	r3, [pc, #176]	; (8006458 <HAL_RCC_OscConfig+0x578>)
 80063a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063ac:	4a2a      	ldr	r2, [pc, #168]	; (8006458 <HAL_RCC_OscConfig+0x578>)
 80063ae:	f043 0301 	orr.w	r3, r3, #1
 80063b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80063b6:	e024      	b.n	8006402 <HAL_RCC_OscConfig+0x522>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	689b      	ldr	r3, [r3, #8]
 80063bc:	2b05      	cmp	r3, #5
 80063be:	d110      	bne.n	80063e2 <HAL_RCC_OscConfig+0x502>
 80063c0:	4b25      	ldr	r3, [pc, #148]	; (8006458 <HAL_RCC_OscConfig+0x578>)
 80063c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063c6:	4a24      	ldr	r2, [pc, #144]	; (8006458 <HAL_RCC_OscConfig+0x578>)
 80063c8:	f043 0304 	orr.w	r3, r3, #4
 80063cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80063d0:	4b21      	ldr	r3, [pc, #132]	; (8006458 <HAL_RCC_OscConfig+0x578>)
 80063d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063d6:	4a20      	ldr	r2, [pc, #128]	; (8006458 <HAL_RCC_OscConfig+0x578>)
 80063d8:	f043 0301 	orr.w	r3, r3, #1
 80063dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80063e0:	e00f      	b.n	8006402 <HAL_RCC_OscConfig+0x522>
 80063e2:	4b1d      	ldr	r3, [pc, #116]	; (8006458 <HAL_RCC_OscConfig+0x578>)
 80063e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063e8:	4a1b      	ldr	r2, [pc, #108]	; (8006458 <HAL_RCC_OscConfig+0x578>)
 80063ea:	f023 0301 	bic.w	r3, r3, #1
 80063ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80063f2:	4b19      	ldr	r3, [pc, #100]	; (8006458 <HAL_RCC_OscConfig+0x578>)
 80063f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063f8:	4a17      	ldr	r2, [pc, #92]	; (8006458 <HAL_RCC_OscConfig+0x578>)
 80063fa:	f023 0304 	bic.w	r3, r3, #4
 80063fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	689b      	ldr	r3, [r3, #8]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d016      	beq.n	8006438 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800640a:	f7fb fd25 	bl	8001e58 <HAL_GetTick>
 800640e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006410:	e00a      	b.n	8006428 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006412:	f7fb fd21 	bl	8001e58 <HAL_GetTick>
 8006416:	4602      	mov	r2, r0
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	1ad3      	subs	r3, r2, r3
 800641c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006420:	4293      	cmp	r3, r2
 8006422:	d901      	bls.n	8006428 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8006424:	2303      	movs	r3, #3
 8006426:	e176      	b.n	8006716 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006428:	4b0b      	ldr	r3, [pc, #44]	; (8006458 <HAL_RCC_OscConfig+0x578>)
 800642a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800642e:	f003 0302 	and.w	r3, r3, #2
 8006432:	2b00      	cmp	r3, #0
 8006434:	d0ed      	beq.n	8006412 <HAL_RCC_OscConfig+0x532>
 8006436:	e01a      	b.n	800646e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006438:	f7fb fd0e 	bl	8001e58 <HAL_GetTick>
 800643c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800643e:	e00f      	b.n	8006460 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006440:	f7fb fd0a 	bl	8001e58 <HAL_GetTick>
 8006444:	4602      	mov	r2, r0
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	1ad3      	subs	r3, r2, r3
 800644a:	f241 3288 	movw	r2, #5000	; 0x1388
 800644e:	4293      	cmp	r3, r2
 8006450:	d906      	bls.n	8006460 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006452:	2303      	movs	r3, #3
 8006454:	e15f      	b.n	8006716 <HAL_RCC_OscConfig+0x836>
 8006456:	bf00      	nop
 8006458:	40021000 	.word	0x40021000
 800645c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006460:	4baa      	ldr	r3, [pc, #680]	; (800670c <HAL_RCC_OscConfig+0x82c>)
 8006462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006466:	f003 0302 	and.w	r3, r3, #2
 800646a:	2b00      	cmp	r3, #0
 800646c:	d1e8      	bne.n	8006440 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800646e:	7ffb      	ldrb	r3, [r7, #31]
 8006470:	2b01      	cmp	r3, #1
 8006472:	d105      	bne.n	8006480 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006474:	4ba5      	ldr	r3, [pc, #660]	; (800670c <HAL_RCC_OscConfig+0x82c>)
 8006476:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006478:	4aa4      	ldr	r2, [pc, #656]	; (800670c <HAL_RCC_OscConfig+0x82c>)
 800647a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800647e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f003 0320 	and.w	r3, r3, #32
 8006488:	2b00      	cmp	r3, #0
 800648a:	d03c      	beq.n	8006506 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006490:	2b00      	cmp	r3, #0
 8006492:	d01c      	beq.n	80064ce <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006494:	4b9d      	ldr	r3, [pc, #628]	; (800670c <HAL_RCC_OscConfig+0x82c>)
 8006496:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800649a:	4a9c      	ldr	r2, [pc, #624]	; (800670c <HAL_RCC_OscConfig+0x82c>)
 800649c:	f043 0301 	orr.w	r3, r3, #1
 80064a0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064a4:	f7fb fcd8 	bl	8001e58 <HAL_GetTick>
 80064a8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80064aa:	e008      	b.n	80064be <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80064ac:	f7fb fcd4 	bl	8001e58 <HAL_GetTick>
 80064b0:	4602      	mov	r2, r0
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	1ad3      	subs	r3, r2, r3
 80064b6:	2b02      	cmp	r3, #2
 80064b8:	d901      	bls.n	80064be <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80064ba:	2303      	movs	r3, #3
 80064bc:	e12b      	b.n	8006716 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80064be:	4b93      	ldr	r3, [pc, #588]	; (800670c <HAL_RCC_OscConfig+0x82c>)
 80064c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80064c4:	f003 0302 	and.w	r3, r3, #2
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d0ef      	beq.n	80064ac <HAL_RCC_OscConfig+0x5cc>
 80064cc:	e01b      	b.n	8006506 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80064ce:	4b8f      	ldr	r3, [pc, #572]	; (800670c <HAL_RCC_OscConfig+0x82c>)
 80064d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80064d4:	4a8d      	ldr	r2, [pc, #564]	; (800670c <HAL_RCC_OscConfig+0x82c>)
 80064d6:	f023 0301 	bic.w	r3, r3, #1
 80064da:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064de:	f7fb fcbb 	bl	8001e58 <HAL_GetTick>
 80064e2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80064e4:	e008      	b.n	80064f8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80064e6:	f7fb fcb7 	bl	8001e58 <HAL_GetTick>
 80064ea:	4602      	mov	r2, r0
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	1ad3      	subs	r3, r2, r3
 80064f0:	2b02      	cmp	r3, #2
 80064f2:	d901      	bls.n	80064f8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80064f4:	2303      	movs	r3, #3
 80064f6:	e10e      	b.n	8006716 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80064f8:	4b84      	ldr	r3, [pc, #528]	; (800670c <HAL_RCC_OscConfig+0x82c>)
 80064fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80064fe:	f003 0302 	and.w	r3, r3, #2
 8006502:	2b00      	cmp	r3, #0
 8006504:	d1ef      	bne.n	80064e6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800650a:	2b00      	cmp	r3, #0
 800650c:	f000 8102 	beq.w	8006714 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006514:	2b02      	cmp	r3, #2
 8006516:	f040 80c5 	bne.w	80066a4 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800651a:	4b7c      	ldr	r3, [pc, #496]	; (800670c <HAL_RCC_OscConfig+0x82c>)
 800651c:	68db      	ldr	r3, [r3, #12]
 800651e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	f003 0203 	and.w	r2, r3, #3
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800652a:	429a      	cmp	r2, r3
 800652c:	d12c      	bne.n	8006588 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006538:	3b01      	subs	r3, #1
 800653a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800653c:	429a      	cmp	r2, r3
 800653e:	d123      	bne.n	8006588 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800654a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800654c:	429a      	cmp	r2, r3
 800654e:	d11b      	bne.n	8006588 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800655a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800655c:	429a      	cmp	r2, r3
 800655e:	d113      	bne.n	8006588 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800656a:	085b      	lsrs	r3, r3, #1
 800656c:	3b01      	subs	r3, #1
 800656e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006570:	429a      	cmp	r2, r3
 8006572:	d109      	bne.n	8006588 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800657e:	085b      	lsrs	r3, r3, #1
 8006580:	3b01      	subs	r3, #1
 8006582:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006584:	429a      	cmp	r2, r3
 8006586:	d067      	beq.n	8006658 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006588:	69bb      	ldr	r3, [r7, #24]
 800658a:	2b0c      	cmp	r3, #12
 800658c:	d062      	beq.n	8006654 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800658e:	4b5f      	ldr	r3, [pc, #380]	; (800670c <HAL_RCC_OscConfig+0x82c>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006596:	2b00      	cmp	r3, #0
 8006598:	d001      	beq.n	800659e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800659a:	2301      	movs	r3, #1
 800659c:	e0bb      	b.n	8006716 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800659e:	4b5b      	ldr	r3, [pc, #364]	; (800670c <HAL_RCC_OscConfig+0x82c>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a5a      	ldr	r2, [pc, #360]	; (800670c <HAL_RCC_OscConfig+0x82c>)
 80065a4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80065a8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80065aa:	f7fb fc55 	bl	8001e58 <HAL_GetTick>
 80065ae:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80065b0:	e008      	b.n	80065c4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065b2:	f7fb fc51 	bl	8001e58 <HAL_GetTick>
 80065b6:	4602      	mov	r2, r0
 80065b8:	693b      	ldr	r3, [r7, #16]
 80065ba:	1ad3      	subs	r3, r2, r3
 80065bc:	2b02      	cmp	r3, #2
 80065be:	d901      	bls.n	80065c4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80065c0:	2303      	movs	r3, #3
 80065c2:	e0a8      	b.n	8006716 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80065c4:	4b51      	ldr	r3, [pc, #324]	; (800670c <HAL_RCC_OscConfig+0x82c>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d1f0      	bne.n	80065b2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80065d0:	4b4e      	ldr	r3, [pc, #312]	; (800670c <HAL_RCC_OscConfig+0x82c>)
 80065d2:	68da      	ldr	r2, [r3, #12]
 80065d4:	4b4e      	ldr	r3, [pc, #312]	; (8006710 <HAL_RCC_OscConfig+0x830>)
 80065d6:	4013      	ands	r3, r2
 80065d8:	687a      	ldr	r2, [r7, #4]
 80065da:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80065dc:	687a      	ldr	r2, [r7, #4]
 80065de:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80065e0:	3a01      	subs	r2, #1
 80065e2:	0112      	lsls	r2, r2, #4
 80065e4:	4311      	orrs	r1, r2
 80065e6:	687a      	ldr	r2, [r7, #4]
 80065e8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80065ea:	0212      	lsls	r2, r2, #8
 80065ec:	4311      	orrs	r1, r2
 80065ee:	687a      	ldr	r2, [r7, #4]
 80065f0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80065f2:	0852      	lsrs	r2, r2, #1
 80065f4:	3a01      	subs	r2, #1
 80065f6:	0552      	lsls	r2, r2, #21
 80065f8:	4311      	orrs	r1, r2
 80065fa:	687a      	ldr	r2, [r7, #4]
 80065fc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80065fe:	0852      	lsrs	r2, r2, #1
 8006600:	3a01      	subs	r2, #1
 8006602:	0652      	lsls	r2, r2, #25
 8006604:	4311      	orrs	r1, r2
 8006606:	687a      	ldr	r2, [r7, #4]
 8006608:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800660a:	06d2      	lsls	r2, r2, #27
 800660c:	430a      	orrs	r2, r1
 800660e:	493f      	ldr	r1, [pc, #252]	; (800670c <HAL_RCC_OscConfig+0x82c>)
 8006610:	4313      	orrs	r3, r2
 8006612:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006614:	4b3d      	ldr	r3, [pc, #244]	; (800670c <HAL_RCC_OscConfig+0x82c>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a3c      	ldr	r2, [pc, #240]	; (800670c <HAL_RCC_OscConfig+0x82c>)
 800661a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800661e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006620:	4b3a      	ldr	r3, [pc, #232]	; (800670c <HAL_RCC_OscConfig+0x82c>)
 8006622:	68db      	ldr	r3, [r3, #12]
 8006624:	4a39      	ldr	r2, [pc, #228]	; (800670c <HAL_RCC_OscConfig+0x82c>)
 8006626:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800662a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800662c:	f7fb fc14 	bl	8001e58 <HAL_GetTick>
 8006630:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006632:	e008      	b.n	8006646 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006634:	f7fb fc10 	bl	8001e58 <HAL_GetTick>
 8006638:	4602      	mov	r2, r0
 800663a:	693b      	ldr	r3, [r7, #16]
 800663c:	1ad3      	subs	r3, r2, r3
 800663e:	2b02      	cmp	r3, #2
 8006640:	d901      	bls.n	8006646 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8006642:	2303      	movs	r3, #3
 8006644:	e067      	b.n	8006716 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006646:	4b31      	ldr	r3, [pc, #196]	; (800670c <HAL_RCC_OscConfig+0x82c>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800664e:	2b00      	cmp	r3, #0
 8006650:	d0f0      	beq.n	8006634 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006652:	e05f      	b.n	8006714 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006654:	2301      	movs	r3, #1
 8006656:	e05e      	b.n	8006716 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006658:	4b2c      	ldr	r3, [pc, #176]	; (800670c <HAL_RCC_OscConfig+0x82c>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006660:	2b00      	cmp	r3, #0
 8006662:	d157      	bne.n	8006714 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006664:	4b29      	ldr	r3, [pc, #164]	; (800670c <HAL_RCC_OscConfig+0x82c>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4a28      	ldr	r2, [pc, #160]	; (800670c <HAL_RCC_OscConfig+0x82c>)
 800666a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800666e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006670:	4b26      	ldr	r3, [pc, #152]	; (800670c <HAL_RCC_OscConfig+0x82c>)
 8006672:	68db      	ldr	r3, [r3, #12]
 8006674:	4a25      	ldr	r2, [pc, #148]	; (800670c <HAL_RCC_OscConfig+0x82c>)
 8006676:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800667a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800667c:	f7fb fbec 	bl	8001e58 <HAL_GetTick>
 8006680:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006682:	e008      	b.n	8006696 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006684:	f7fb fbe8 	bl	8001e58 <HAL_GetTick>
 8006688:	4602      	mov	r2, r0
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	1ad3      	subs	r3, r2, r3
 800668e:	2b02      	cmp	r3, #2
 8006690:	d901      	bls.n	8006696 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8006692:	2303      	movs	r3, #3
 8006694:	e03f      	b.n	8006716 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006696:	4b1d      	ldr	r3, [pc, #116]	; (800670c <HAL_RCC_OscConfig+0x82c>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d0f0      	beq.n	8006684 <HAL_RCC_OscConfig+0x7a4>
 80066a2:	e037      	b.n	8006714 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80066a4:	69bb      	ldr	r3, [r7, #24]
 80066a6:	2b0c      	cmp	r3, #12
 80066a8:	d02d      	beq.n	8006706 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066aa:	4b18      	ldr	r3, [pc, #96]	; (800670c <HAL_RCC_OscConfig+0x82c>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4a17      	ldr	r2, [pc, #92]	; (800670c <HAL_RCC_OscConfig+0x82c>)
 80066b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80066b4:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80066b6:	4b15      	ldr	r3, [pc, #84]	; (800670c <HAL_RCC_OscConfig+0x82c>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d105      	bne.n	80066ce <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80066c2:	4b12      	ldr	r3, [pc, #72]	; (800670c <HAL_RCC_OscConfig+0x82c>)
 80066c4:	68db      	ldr	r3, [r3, #12]
 80066c6:	4a11      	ldr	r2, [pc, #68]	; (800670c <HAL_RCC_OscConfig+0x82c>)
 80066c8:	f023 0303 	bic.w	r3, r3, #3
 80066cc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80066ce:	4b0f      	ldr	r3, [pc, #60]	; (800670c <HAL_RCC_OscConfig+0x82c>)
 80066d0:	68db      	ldr	r3, [r3, #12]
 80066d2:	4a0e      	ldr	r2, [pc, #56]	; (800670c <HAL_RCC_OscConfig+0x82c>)
 80066d4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80066d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80066dc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066de:	f7fb fbbb 	bl	8001e58 <HAL_GetTick>
 80066e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80066e4:	e008      	b.n	80066f8 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80066e6:	f7fb fbb7 	bl	8001e58 <HAL_GetTick>
 80066ea:	4602      	mov	r2, r0
 80066ec:	693b      	ldr	r3, [r7, #16]
 80066ee:	1ad3      	subs	r3, r2, r3
 80066f0:	2b02      	cmp	r3, #2
 80066f2:	d901      	bls.n	80066f8 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 80066f4:	2303      	movs	r3, #3
 80066f6:	e00e      	b.n	8006716 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80066f8:	4b04      	ldr	r3, [pc, #16]	; (800670c <HAL_RCC_OscConfig+0x82c>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006700:	2b00      	cmp	r3, #0
 8006702:	d1f0      	bne.n	80066e6 <HAL_RCC_OscConfig+0x806>
 8006704:	e006      	b.n	8006714 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006706:	2301      	movs	r3, #1
 8006708:	e005      	b.n	8006716 <HAL_RCC_OscConfig+0x836>
 800670a:	bf00      	nop
 800670c:	40021000 	.word	0x40021000
 8006710:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8006714:	2300      	movs	r3, #0
}
 8006716:	4618      	mov	r0, r3
 8006718:	3720      	adds	r7, #32
 800671a:	46bd      	mov	sp, r7
 800671c:	bd80      	pop	{r7, pc}
 800671e:	bf00      	nop

08006720 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b084      	sub	sp, #16
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
 8006728:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d101      	bne.n	8006734 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006730:	2301      	movs	r3, #1
 8006732:	e0c8      	b.n	80068c6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006734:	4b66      	ldr	r3, [pc, #408]	; (80068d0 <HAL_RCC_ClockConfig+0x1b0>)
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f003 0307 	and.w	r3, r3, #7
 800673c:	683a      	ldr	r2, [r7, #0]
 800673e:	429a      	cmp	r2, r3
 8006740:	d910      	bls.n	8006764 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006742:	4b63      	ldr	r3, [pc, #396]	; (80068d0 <HAL_RCC_ClockConfig+0x1b0>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f023 0207 	bic.w	r2, r3, #7
 800674a:	4961      	ldr	r1, [pc, #388]	; (80068d0 <HAL_RCC_ClockConfig+0x1b0>)
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	4313      	orrs	r3, r2
 8006750:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006752:	4b5f      	ldr	r3, [pc, #380]	; (80068d0 <HAL_RCC_ClockConfig+0x1b0>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f003 0307 	and.w	r3, r3, #7
 800675a:	683a      	ldr	r2, [r7, #0]
 800675c:	429a      	cmp	r2, r3
 800675e:	d001      	beq.n	8006764 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006760:	2301      	movs	r3, #1
 8006762:	e0b0      	b.n	80068c6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f003 0301 	and.w	r3, r3, #1
 800676c:	2b00      	cmp	r3, #0
 800676e:	d04c      	beq.n	800680a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	2b03      	cmp	r3, #3
 8006776:	d107      	bne.n	8006788 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006778:	4b56      	ldr	r3, [pc, #344]	; (80068d4 <HAL_RCC_ClockConfig+0x1b4>)
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006780:	2b00      	cmp	r3, #0
 8006782:	d121      	bne.n	80067c8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8006784:	2301      	movs	r3, #1
 8006786:	e09e      	b.n	80068c6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	2b02      	cmp	r3, #2
 800678e:	d107      	bne.n	80067a0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006790:	4b50      	ldr	r3, [pc, #320]	; (80068d4 <HAL_RCC_ClockConfig+0x1b4>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006798:	2b00      	cmp	r3, #0
 800679a:	d115      	bne.n	80067c8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800679c:	2301      	movs	r3, #1
 800679e:	e092      	b.n	80068c6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d107      	bne.n	80067b8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80067a8:	4b4a      	ldr	r3, [pc, #296]	; (80068d4 <HAL_RCC_ClockConfig+0x1b4>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f003 0302 	and.w	r3, r3, #2
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d109      	bne.n	80067c8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80067b4:	2301      	movs	r3, #1
 80067b6:	e086      	b.n	80068c6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80067b8:	4b46      	ldr	r3, [pc, #280]	; (80068d4 <HAL_RCC_ClockConfig+0x1b4>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d101      	bne.n	80067c8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80067c4:	2301      	movs	r3, #1
 80067c6:	e07e      	b.n	80068c6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80067c8:	4b42      	ldr	r3, [pc, #264]	; (80068d4 <HAL_RCC_ClockConfig+0x1b4>)
 80067ca:	689b      	ldr	r3, [r3, #8]
 80067cc:	f023 0203 	bic.w	r2, r3, #3
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	493f      	ldr	r1, [pc, #252]	; (80068d4 <HAL_RCC_ClockConfig+0x1b4>)
 80067d6:	4313      	orrs	r3, r2
 80067d8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80067da:	f7fb fb3d 	bl	8001e58 <HAL_GetTick>
 80067de:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067e0:	e00a      	b.n	80067f8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80067e2:	f7fb fb39 	bl	8001e58 <HAL_GetTick>
 80067e6:	4602      	mov	r2, r0
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	1ad3      	subs	r3, r2, r3
 80067ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d901      	bls.n	80067f8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80067f4:	2303      	movs	r3, #3
 80067f6:	e066      	b.n	80068c6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067f8:	4b36      	ldr	r3, [pc, #216]	; (80068d4 <HAL_RCC_ClockConfig+0x1b4>)
 80067fa:	689b      	ldr	r3, [r3, #8]
 80067fc:	f003 020c 	and.w	r2, r3, #12
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	685b      	ldr	r3, [r3, #4]
 8006804:	009b      	lsls	r3, r3, #2
 8006806:	429a      	cmp	r2, r3
 8006808:	d1eb      	bne.n	80067e2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f003 0302 	and.w	r3, r3, #2
 8006812:	2b00      	cmp	r3, #0
 8006814:	d008      	beq.n	8006828 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006816:	4b2f      	ldr	r3, [pc, #188]	; (80068d4 <HAL_RCC_ClockConfig+0x1b4>)
 8006818:	689b      	ldr	r3, [r3, #8]
 800681a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	689b      	ldr	r3, [r3, #8]
 8006822:	492c      	ldr	r1, [pc, #176]	; (80068d4 <HAL_RCC_ClockConfig+0x1b4>)
 8006824:	4313      	orrs	r3, r2
 8006826:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006828:	4b29      	ldr	r3, [pc, #164]	; (80068d0 <HAL_RCC_ClockConfig+0x1b0>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f003 0307 	and.w	r3, r3, #7
 8006830:	683a      	ldr	r2, [r7, #0]
 8006832:	429a      	cmp	r2, r3
 8006834:	d210      	bcs.n	8006858 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006836:	4b26      	ldr	r3, [pc, #152]	; (80068d0 <HAL_RCC_ClockConfig+0x1b0>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f023 0207 	bic.w	r2, r3, #7
 800683e:	4924      	ldr	r1, [pc, #144]	; (80068d0 <HAL_RCC_ClockConfig+0x1b0>)
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	4313      	orrs	r3, r2
 8006844:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006846:	4b22      	ldr	r3, [pc, #136]	; (80068d0 <HAL_RCC_ClockConfig+0x1b0>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f003 0307 	and.w	r3, r3, #7
 800684e:	683a      	ldr	r2, [r7, #0]
 8006850:	429a      	cmp	r2, r3
 8006852:	d001      	beq.n	8006858 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8006854:	2301      	movs	r3, #1
 8006856:	e036      	b.n	80068c6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f003 0304 	and.w	r3, r3, #4
 8006860:	2b00      	cmp	r3, #0
 8006862:	d008      	beq.n	8006876 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006864:	4b1b      	ldr	r3, [pc, #108]	; (80068d4 <HAL_RCC_ClockConfig+0x1b4>)
 8006866:	689b      	ldr	r3, [r3, #8]
 8006868:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	68db      	ldr	r3, [r3, #12]
 8006870:	4918      	ldr	r1, [pc, #96]	; (80068d4 <HAL_RCC_ClockConfig+0x1b4>)
 8006872:	4313      	orrs	r3, r2
 8006874:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f003 0308 	and.w	r3, r3, #8
 800687e:	2b00      	cmp	r3, #0
 8006880:	d009      	beq.n	8006896 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006882:	4b14      	ldr	r3, [pc, #80]	; (80068d4 <HAL_RCC_ClockConfig+0x1b4>)
 8006884:	689b      	ldr	r3, [r3, #8]
 8006886:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	691b      	ldr	r3, [r3, #16]
 800688e:	00db      	lsls	r3, r3, #3
 8006890:	4910      	ldr	r1, [pc, #64]	; (80068d4 <HAL_RCC_ClockConfig+0x1b4>)
 8006892:	4313      	orrs	r3, r2
 8006894:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006896:	f000 f825 	bl	80068e4 <HAL_RCC_GetSysClockFreq>
 800689a:	4602      	mov	r2, r0
 800689c:	4b0d      	ldr	r3, [pc, #52]	; (80068d4 <HAL_RCC_ClockConfig+0x1b4>)
 800689e:	689b      	ldr	r3, [r3, #8]
 80068a0:	091b      	lsrs	r3, r3, #4
 80068a2:	f003 030f 	and.w	r3, r3, #15
 80068a6:	490c      	ldr	r1, [pc, #48]	; (80068d8 <HAL_RCC_ClockConfig+0x1b8>)
 80068a8:	5ccb      	ldrb	r3, [r1, r3]
 80068aa:	f003 031f 	and.w	r3, r3, #31
 80068ae:	fa22 f303 	lsr.w	r3, r2, r3
 80068b2:	4a0a      	ldr	r2, [pc, #40]	; (80068dc <HAL_RCC_ClockConfig+0x1bc>)
 80068b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80068b6:	4b0a      	ldr	r3, [pc, #40]	; (80068e0 <HAL_RCC_ClockConfig+0x1c0>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4618      	mov	r0, r3
 80068bc:	f7fb fa7c 	bl	8001db8 <HAL_InitTick>
 80068c0:	4603      	mov	r3, r0
 80068c2:	72fb      	strb	r3, [r7, #11]

  return status;
 80068c4:	7afb      	ldrb	r3, [r7, #11]
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	3710      	adds	r7, #16
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}
 80068ce:	bf00      	nop
 80068d0:	40022000 	.word	0x40022000
 80068d4:	40021000 	.word	0x40021000
 80068d8:	0800f1e8 	.word	0x0800f1e8
 80068dc:	20000014 	.word	0x20000014
 80068e0:	20000018 	.word	0x20000018

080068e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80068e4:	b480      	push	{r7}
 80068e6:	b089      	sub	sp, #36	; 0x24
 80068e8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80068ea:	2300      	movs	r3, #0
 80068ec:	61fb      	str	r3, [r7, #28]
 80068ee:	2300      	movs	r3, #0
 80068f0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80068f2:	4b3e      	ldr	r3, [pc, #248]	; (80069ec <HAL_RCC_GetSysClockFreq+0x108>)
 80068f4:	689b      	ldr	r3, [r3, #8]
 80068f6:	f003 030c 	and.w	r3, r3, #12
 80068fa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80068fc:	4b3b      	ldr	r3, [pc, #236]	; (80069ec <HAL_RCC_GetSysClockFreq+0x108>)
 80068fe:	68db      	ldr	r3, [r3, #12]
 8006900:	f003 0303 	and.w	r3, r3, #3
 8006904:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006906:	693b      	ldr	r3, [r7, #16]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d005      	beq.n	8006918 <HAL_RCC_GetSysClockFreq+0x34>
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	2b0c      	cmp	r3, #12
 8006910:	d121      	bne.n	8006956 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	2b01      	cmp	r3, #1
 8006916:	d11e      	bne.n	8006956 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006918:	4b34      	ldr	r3, [pc, #208]	; (80069ec <HAL_RCC_GetSysClockFreq+0x108>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f003 0308 	and.w	r3, r3, #8
 8006920:	2b00      	cmp	r3, #0
 8006922:	d107      	bne.n	8006934 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006924:	4b31      	ldr	r3, [pc, #196]	; (80069ec <HAL_RCC_GetSysClockFreq+0x108>)
 8006926:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800692a:	0a1b      	lsrs	r3, r3, #8
 800692c:	f003 030f 	and.w	r3, r3, #15
 8006930:	61fb      	str	r3, [r7, #28]
 8006932:	e005      	b.n	8006940 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006934:	4b2d      	ldr	r3, [pc, #180]	; (80069ec <HAL_RCC_GetSysClockFreq+0x108>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	091b      	lsrs	r3, r3, #4
 800693a:	f003 030f 	and.w	r3, r3, #15
 800693e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006940:	4a2b      	ldr	r2, [pc, #172]	; (80069f0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006942:	69fb      	ldr	r3, [r7, #28]
 8006944:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006948:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d10d      	bne.n	800696c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006950:	69fb      	ldr	r3, [r7, #28]
 8006952:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006954:	e00a      	b.n	800696c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	2b04      	cmp	r3, #4
 800695a:	d102      	bne.n	8006962 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800695c:	4b25      	ldr	r3, [pc, #148]	; (80069f4 <HAL_RCC_GetSysClockFreq+0x110>)
 800695e:	61bb      	str	r3, [r7, #24]
 8006960:	e004      	b.n	800696c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006962:	693b      	ldr	r3, [r7, #16]
 8006964:	2b08      	cmp	r3, #8
 8006966:	d101      	bne.n	800696c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006968:	4b23      	ldr	r3, [pc, #140]	; (80069f8 <HAL_RCC_GetSysClockFreq+0x114>)
 800696a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	2b0c      	cmp	r3, #12
 8006970:	d134      	bne.n	80069dc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006972:	4b1e      	ldr	r3, [pc, #120]	; (80069ec <HAL_RCC_GetSysClockFreq+0x108>)
 8006974:	68db      	ldr	r3, [r3, #12]
 8006976:	f003 0303 	and.w	r3, r3, #3
 800697a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	2b02      	cmp	r3, #2
 8006980:	d003      	beq.n	800698a <HAL_RCC_GetSysClockFreq+0xa6>
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	2b03      	cmp	r3, #3
 8006986:	d003      	beq.n	8006990 <HAL_RCC_GetSysClockFreq+0xac>
 8006988:	e005      	b.n	8006996 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800698a:	4b1a      	ldr	r3, [pc, #104]	; (80069f4 <HAL_RCC_GetSysClockFreq+0x110>)
 800698c:	617b      	str	r3, [r7, #20]
      break;
 800698e:	e005      	b.n	800699c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006990:	4b19      	ldr	r3, [pc, #100]	; (80069f8 <HAL_RCC_GetSysClockFreq+0x114>)
 8006992:	617b      	str	r3, [r7, #20]
      break;
 8006994:	e002      	b.n	800699c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006996:	69fb      	ldr	r3, [r7, #28]
 8006998:	617b      	str	r3, [r7, #20]
      break;
 800699a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800699c:	4b13      	ldr	r3, [pc, #76]	; (80069ec <HAL_RCC_GetSysClockFreq+0x108>)
 800699e:	68db      	ldr	r3, [r3, #12]
 80069a0:	091b      	lsrs	r3, r3, #4
 80069a2:	f003 0307 	and.w	r3, r3, #7
 80069a6:	3301      	adds	r3, #1
 80069a8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80069aa:	4b10      	ldr	r3, [pc, #64]	; (80069ec <HAL_RCC_GetSysClockFreq+0x108>)
 80069ac:	68db      	ldr	r3, [r3, #12]
 80069ae:	0a1b      	lsrs	r3, r3, #8
 80069b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069b4:	697a      	ldr	r2, [r7, #20]
 80069b6:	fb02 f203 	mul.w	r2, r2, r3
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80069c0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80069c2:	4b0a      	ldr	r3, [pc, #40]	; (80069ec <HAL_RCC_GetSysClockFreq+0x108>)
 80069c4:	68db      	ldr	r3, [r3, #12]
 80069c6:	0e5b      	lsrs	r3, r3, #25
 80069c8:	f003 0303 	and.w	r3, r3, #3
 80069cc:	3301      	adds	r3, #1
 80069ce:	005b      	lsls	r3, r3, #1
 80069d0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80069d2:	697a      	ldr	r2, [r7, #20]
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80069da:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80069dc:	69bb      	ldr	r3, [r7, #24]
}
 80069de:	4618      	mov	r0, r3
 80069e0:	3724      	adds	r7, #36	; 0x24
 80069e2:	46bd      	mov	sp, r7
 80069e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e8:	4770      	bx	lr
 80069ea:	bf00      	nop
 80069ec:	40021000 	.word	0x40021000
 80069f0:	0800f1f8 	.word	0x0800f1f8
 80069f4:	00f42400 	.word	0x00f42400
 80069f8:	007a1200 	.word	0x007a1200

080069fc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b086      	sub	sp, #24
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006a04:	2300      	movs	r3, #0
 8006a06:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006a08:	4b2a      	ldr	r3, [pc, #168]	; (8006ab4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006a0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d003      	beq.n	8006a1c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006a14:	f7ff f9f0 	bl	8005df8 <HAL_PWREx_GetVoltageRange>
 8006a18:	6178      	str	r0, [r7, #20]
 8006a1a:	e014      	b.n	8006a46 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006a1c:	4b25      	ldr	r3, [pc, #148]	; (8006ab4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006a1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a20:	4a24      	ldr	r2, [pc, #144]	; (8006ab4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006a22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a26:	6593      	str	r3, [r2, #88]	; 0x58
 8006a28:	4b22      	ldr	r3, [pc, #136]	; (8006ab4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006a2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a30:	60fb      	str	r3, [r7, #12]
 8006a32:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006a34:	f7ff f9e0 	bl	8005df8 <HAL_PWREx_GetVoltageRange>
 8006a38:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006a3a:	4b1e      	ldr	r3, [pc, #120]	; (8006ab4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a3e:	4a1d      	ldr	r2, [pc, #116]	; (8006ab4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006a40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a44:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a4c:	d10b      	bne.n	8006a66 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2b80      	cmp	r3, #128	; 0x80
 8006a52:	d919      	bls.n	8006a88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2ba0      	cmp	r3, #160	; 0xa0
 8006a58:	d902      	bls.n	8006a60 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006a5a:	2302      	movs	r3, #2
 8006a5c:	613b      	str	r3, [r7, #16]
 8006a5e:	e013      	b.n	8006a88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006a60:	2301      	movs	r3, #1
 8006a62:	613b      	str	r3, [r7, #16]
 8006a64:	e010      	b.n	8006a88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2b80      	cmp	r3, #128	; 0x80
 8006a6a:	d902      	bls.n	8006a72 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006a6c:	2303      	movs	r3, #3
 8006a6e:	613b      	str	r3, [r7, #16]
 8006a70:	e00a      	b.n	8006a88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2b80      	cmp	r3, #128	; 0x80
 8006a76:	d102      	bne.n	8006a7e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006a78:	2302      	movs	r3, #2
 8006a7a:	613b      	str	r3, [r7, #16]
 8006a7c:	e004      	b.n	8006a88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2b70      	cmp	r3, #112	; 0x70
 8006a82:	d101      	bne.n	8006a88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006a84:	2301      	movs	r3, #1
 8006a86:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006a88:	4b0b      	ldr	r3, [pc, #44]	; (8006ab8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f023 0207 	bic.w	r2, r3, #7
 8006a90:	4909      	ldr	r1, [pc, #36]	; (8006ab8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	4313      	orrs	r3, r2
 8006a96:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006a98:	4b07      	ldr	r3, [pc, #28]	; (8006ab8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f003 0307 	and.w	r3, r3, #7
 8006aa0:	693a      	ldr	r2, [r7, #16]
 8006aa2:	429a      	cmp	r2, r3
 8006aa4:	d001      	beq.n	8006aaa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	e000      	b.n	8006aac <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006aaa:	2300      	movs	r3, #0
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	3718      	adds	r7, #24
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}
 8006ab4:	40021000 	.word	0x40021000
 8006ab8:	40022000 	.word	0x40022000

08006abc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b086      	sub	sp, #24
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006ac8:	2300      	movs	r3, #0
 8006aca:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d031      	beq.n	8006b3c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006adc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006ae0:	d01a      	beq.n	8006b18 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8006ae2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006ae6:	d814      	bhi.n	8006b12 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d009      	beq.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006aec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006af0:	d10f      	bne.n	8006b12 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8006af2:	4bac      	ldr	r3, [pc, #688]	; (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006af4:	68db      	ldr	r3, [r3, #12]
 8006af6:	4aab      	ldr	r2, [pc, #684]	; (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006af8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006afc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006afe:	e00c      	b.n	8006b1a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	3304      	adds	r3, #4
 8006b04:	2100      	movs	r1, #0
 8006b06:	4618      	mov	r0, r3
 8006b08:	f000 fa1e 	bl	8006f48 <RCCEx_PLLSAI1_Config>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006b10:	e003      	b.n	8006b1a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b12:	2301      	movs	r3, #1
 8006b14:	74fb      	strb	r3, [r7, #19]
      break;
 8006b16:	e000      	b.n	8006b1a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8006b18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b1a:	7cfb      	ldrb	r3, [r7, #19]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d10b      	bne.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006b20:	4ba0      	ldr	r3, [pc, #640]	; (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b26:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b2e:	499d      	ldr	r1, [pc, #628]	; (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006b30:	4313      	orrs	r3, r2
 8006b32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006b36:	e001      	b.n	8006b3c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b38:	7cfb      	ldrb	r3, [r7, #19]
 8006b3a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	f000 8099 	beq.w	8006c7c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006b4e:	4b95      	ldr	r3, [pc, #596]	; (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006b50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d101      	bne.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	e000      	b.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8006b5e:	2300      	movs	r3, #0
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d00d      	beq.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b64:	4b8f      	ldr	r3, [pc, #572]	; (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006b66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b68:	4a8e      	ldr	r2, [pc, #568]	; (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006b6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b6e:	6593      	str	r3, [r2, #88]	; 0x58
 8006b70:	4b8c      	ldr	r3, [pc, #560]	; (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006b72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b78:	60bb      	str	r3, [r7, #8]
 8006b7a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006b80:	4b89      	ldr	r3, [pc, #548]	; (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4a88      	ldr	r2, [pc, #544]	; (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8006b86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b8a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006b8c:	f7fb f964 	bl	8001e58 <HAL_GetTick>
 8006b90:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006b92:	e009      	b.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b94:	f7fb f960 	bl	8001e58 <HAL_GetTick>
 8006b98:	4602      	mov	r2, r0
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	1ad3      	subs	r3, r2, r3
 8006b9e:	2b02      	cmp	r3, #2
 8006ba0:	d902      	bls.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8006ba2:	2303      	movs	r3, #3
 8006ba4:	74fb      	strb	r3, [r7, #19]
        break;
 8006ba6:	e005      	b.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006ba8:	4b7f      	ldr	r3, [pc, #508]	; (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d0ef      	beq.n	8006b94 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8006bb4:	7cfb      	ldrb	r3, [r7, #19]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d155      	bne.n	8006c66 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006bba:	4b7a      	ldr	r3, [pc, #488]	; (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006bbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bc0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bc4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006bc6:	697b      	ldr	r3, [r7, #20]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d01e      	beq.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bd0:	697a      	ldr	r2, [r7, #20]
 8006bd2:	429a      	cmp	r2, r3
 8006bd4:	d019      	beq.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006bd6:	4b73      	ldr	r3, [pc, #460]	; (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006bd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006be0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006be2:	4b70      	ldr	r3, [pc, #448]	; (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006be4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006be8:	4a6e      	ldr	r2, [pc, #440]	; (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006bea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006bee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006bf2:	4b6c      	ldr	r3, [pc, #432]	; (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006bf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bf8:	4a6a      	ldr	r2, [pc, #424]	; (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006bfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006bfe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006c02:	4a68      	ldr	r2, [pc, #416]	; (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006c04:	697b      	ldr	r3, [r7, #20]
 8006c06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006c0a:	697b      	ldr	r3, [r7, #20]
 8006c0c:	f003 0301 	and.w	r3, r3, #1
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d016      	beq.n	8006c42 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c14:	f7fb f920 	bl	8001e58 <HAL_GetTick>
 8006c18:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006c1a:	e00b      	b.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c1c:	f7fb f91c 	bl	8001e58 <HAL_GetTick>
 8006c20:	4602      	mov	r2, r0
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	1ad3      	subs	r3, r2, r3
 8006c26:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d902      	bls.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8006c2e:	2303      	movs	r3, #3
 8006c30:	74fb      	strb	r3, [r7, #19]
            break;
 8006c32:	e006      	b.n	8006c42 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006c34:	4b5b      	ldr	r3, [pc, #364]	; (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006c36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c3a:	f003 0302 	and.w	r3, r3, #2
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d0ec      	beq.n	8006c1c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8006c42:	7cfb      	ldrb	r3, [r7, #19]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d10b      	bne.n	8006c60 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006c48:	4b56      	ldr	r3, [pc, #344]	; (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c4e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c56:	4953      	ldr	r1, [pc, #332]	; (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006c58:	4313      	orrs	r3, r2
 8006c5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006c5e:	e004      	b.n	8006c6a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006c60:	7cfb      	ldrb	r3, [r7, #19]
 8006c62:	74bb      	strb	r3, [r7, #18]
 8006c64:	e001      	b.n	8006c6a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c66:	7cfb      	ldrb	r3, [r7, #19]
 8006c68:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006c6a:	7c7b      	ldrb	r3, [r7, #17]
 8006c6c:	2b01      	cmp	r3, #1
 8006c6e:	d105      	bne.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c70:	4b4c      	ldr	r3, [pc, #304]	; (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006c72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c74:	4a4b      	ldr	r2, [pc, #300]	; (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006c76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c7a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f003 0301 	and.w	r3, r3, #1
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d00a      	beq.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006c88:	4b46      	ldr	r3, [pc, #280]	; (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c8e:	f023 0203 	bic.w	r2, r3, #3
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6a1b      	ldr	r3, [r3, #32]
 8006c96:	4943      	ldr	r1, [pc, #268]	; (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f003 0302 	and.w	r3, r3, #2
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d00a      	beq.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006caa:	4b3e      	ldr	r3, [pc, #248]	; (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006cac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cb0:	f023 020c 	bic.w	r2, r3, #12
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cb8:	493a      	ldr	r1, [pc, #232]	; (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006cba:	4313      	orrs	r3, r2
 8006cbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f003 0320 	and.w	r3, r3, #32
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d00a      	beq.n	8006ce2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006ccc:	4b35      	ldr	r3, [pc, #212]	; (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cd2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cda:	4932      	ldr	r1, [pc, #200]	; (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d00a      	beq.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006cee:	4b2d      	ldr	r3, [pc, #180]	; (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006cf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cf4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cfc:	4929      	ldr	r1, [pc, #164]	; (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d00a      	beq.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006d10:	4b24      	ldr	r3, [pc, #144]	; (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d16:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d1e:	4921      	ldr	r1, [pc, #132]	; (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006d20:	4313      	orrs	r3, r2
 8006d22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d00a      	beq.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006d32:	4b1c      	ldr	r3, [pc, #112]	; (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006d34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d38:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d40:	4918      	ldr	r1, [pc, #96]	; (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006d42:	4313      	orrs	r3, r2
 8006d44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d00a      	beq.n	8006d6a <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006d54:	4b13      	ldr	r3, [pc, #76]	; (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d5a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d62:	4910      	ldr	r1, [pc, #64]	; (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006d64:	4313      	orrs	r3, r2
 8006d66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d02c      	beq.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006d76:	4b0b      	ldr	r3, [pc, #44]	; (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006d78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d7c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d84:	4907      	ldr	r1, [pc, #28]	; (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006d86:	4313      	orrs	r3, r2
 8006d88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d90:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006d94:	d10a      	bne.n	8006dac <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006d96:	4b03      	ldr	r3, [pc, #12]	; (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006d98:	68db      	ldr	r3, [r3, #12]
 8006d9a:	4a02      	ldr	r2, [pc, #8]	; (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006d9c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006da0:	60d3      	str	r3, [r2, #12]
 8006da2:	e015      	b.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8006da4:	40021000 	.word	0x40021000
 8006da8:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006db0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006db4:	d10c      	bne.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	3304      	adds	r3, #4
 8006dba:	2101      	movs	r1, #1
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	f000 f8c3 	bl	8006f48 <RCCEx_PLLSAI1_Config>
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006dc6:	7cfb      	ldrb	r3, [r7, #19]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d001      	beq.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 8006dcc:	7cfb      	ldrb	r3, [r7, #19]
 8006dce:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d028      	beq.n	8006e2e <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006ddc:	4b30      	ldr	r3, [pc, #192]	; (8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006de2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dea:	492d      	ldr	r1, [pc, #180]	; (8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006dec:	4313      	orrs	r3, r2
 8006dee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006df6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006dfa:	d106      	bne.n	8006e0a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006dfc:	4b28      	ldr	r3, [pc, #160]	; (8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006dfe:	68db      	ldr	r3, [r3, #12]
 8006e00:	4a27      	ldr	r2, [pc, #156]	; (8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006e02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006e06:	60d3      	str	r3, [r2, #12]
 8006e08:	e011      	b.n	8006e2e <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e0e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006e12:	d10c      	bne.n	8006e2e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	3304      	adds	r3, #4
 8006e18:	2101      	movs	r1, #1
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f000 f894 	bl	8006f48 <RCCEx_PLLSAI1_Config>
 8006e20:	4603      	mov	r3, r0
 8006e22:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006e24:	7cfb      	ldrb	r3, [r7, #19]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d001      	beq.n	8006e2e <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 8006e2a:	7cfb      	ldrb	r3, [r7, #19]
 8006e2c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d01c      	beq.n	8006e74 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006e3a:	4b19      	ldr	r3, [pc, #100]	; (8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006e3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e40:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e48:	4915      	ldr	r1, [pc, #84]	; (8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e54:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006e58:	d10c      	bne.n	8006e74 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	3304      	adds	r3, #4
 8006e5e:	2102      	movs	r1, #2
 8006e60:	4618      	mov	r0, r3
 8006e62:	f000 f871 	bl	8006f48 <RCCEx_PLLSAI1_Config>
 8006e66:	4603      	mov	r3, r0
 8006e68:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006e6a:	7cfb      	ldrb	r3, [r7, #19]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d001      	beq.n	8006e74 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8006e70:	7cfb      	ldrb	r3, [r7, #19]
 8006e72:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d00a      	beq.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006e80:	4b07      	ldr	r3, [pc, #28]	; (8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e86:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e8e:	4904      	ldr	r1, [pc, #16]	; (8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006e90:	4313      	orrs	r3, r2
 8006e92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006e96:	7cbb      	ldrb	r3, [r7, #18]
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	3718      	adds	r7, #24
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bd80      	pop	{r7, pc}
 8006ea0:	40021000 	.word	0x40021000

08006ea4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8006ea8:	4b05      	ldr	r3, [pc, #20]	; (8006ec0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4a04      	ldr	r2, [pc, #16]	; (8006ec0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006eae:	f043 0304 	orr.w	r3, r3, #4
 8006eb2:	6013      	str	r3, [r2, #0]
}
 8006eb4:	bf00      	nop
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebc:	4770      	bx	lr
 8006ebe:	bf00      	nop
 8006ec0:	40021000 	.word	0x40021000

08006ec4 <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b085      	sub	sp, #20
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 8006ecc:	4b1c      	ldr	r3, [pc, #112]	; (8006f40 <HAL_RCCEx_CRSConfig+0x7c>)
 8006ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ed0:	4a1b      	ldr	r2, [pc, #108]	; (8006f40 <HAL_RCCEx_CRSConfig+0x7c>)
 8006ed2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006ed6:	6393      	str	r3, [r2, #56]	; 0x38
  __HAL_RCC_CRS_RELEASE_RESET();
 8006ed8:	4b19      	ldr	r3, [pc, #100]	; (8006f40 <HAL_RCCEx_CRSConfig+0x7c>)
 8006eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006edc:	4a18      	ldr	r2, [pc, #96]	; (8006f40 <HAL_RCCEx_CRSConfig+0x7c>)
 8006ede:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006ee2:	6393      	str	r3, [r2, #56]	; 0x38

  /* Set the SYNCDIV[2:0] bits according to Prescaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681a      	ldr	r2, [r3, #0]
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	685b      	ldr	r3, [r3, #4]
 8006eec:	431a      	orrs	r2, r3
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	689b      	ldr	r3, [r3, #8]
 8006ef2:	4313      	orrs	r3, r2
 8006ef4:	60fb      	str	r3, [r7, #12]
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	68db      	ldr	r3, [r3, #12]
 8006efa:	68fa      	ldr	r2, [r7, #12]
 8006efc:	4313      	orrs	r3, r2
 8006efe:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	691b      	ldr	r3, [r3, #16]
 8006f04:	041b      	lsls	r3, r3, #16
 8006f06:	68fa      	ldr	r2, [r7, #12]
 8006f08:	4313      	orrs	r3, r2
 8006f0a:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 8006f0c:	4a0d      	ldr	r2, [pc, #52]	; (8006f44 <HAL_RCCEx_CRSConfig+0x80>)
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[6:0] bits for STM32L412xx/L422xx or TRIM[5:0] bits otherwise
     according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 8006f12:	4b0c      	ldr	r3, [pc, #48]	; (8006f44 <HAL_RCCEx_CRSConfig+0x80>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	695b      	ldr	r3, [r3, #20]
 8006f1e:	021b      	lsls	r3, r3, #8
 8006f20:	4908      	ldr	r1, [pc, #32]	; (8006f44 <HAL_RCCEx_CRSConfig+0x80>)
 8006f22:	4313      	orrs	r3, r2
 8006f24:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 8006f26:	4b07      	ldr	r3, [pc, #28]	; (8006f44 <HAL_RCCEx_CRSConfig+0x80>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	4a06      	ldr	r2, [pc, #24]	; (8006f44 <HAL_RCCEx_CRSConfig+0x80>)
 8006f2c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006f30:	6013      	str	r3, [r2, #0]
}
 8006f32:	bf00      	nop
 8006f34:	3714      	adds	r7, #20
 8006f36:	46bd      	mov	sp, r7
 8006f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3c:	4770      	bx	lr
 8006f3e:	bf00      	nop
 8006f40:	40021000 	.word	0x40021000
 8006f44:	40006000 	.word	0x40006000

08006f48 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b084      	sub	sp, #16
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
 8006f50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006f52:	2300      	movs	r3, #0
 8006f54:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006f56:	4b74      	ldr	r3, [pc, #464]	; (8007128 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006f58:	68db      	ldr	r3, [r3, #12]
 8006f5a:	f003 0303 	and.w	r3, r3, #3
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d018      	beq.n	8006f94 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006f62:	4b71      	ldr	r3, [pc, #452]	; (8007128 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006f64:	68db      	ldr	r3, [r3, #12]
 8006f66:	f003 0203 	and.w	r2, r3, #3
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	429a      	cmp	r2, r3
 8006f70:	d10d      	bne.n	8006f8e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
       ||
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d009      	beq.n	8006f8e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006f7a:	4b6b      	ldr	r3, [pc, #428]	; (8007128 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006f7c:	68db      	ldr	r3, [r3, #12]
 8006f7e:	091b      	lsrs	r3, r3, #4
 8006f80:	f003 0307 	and.w	r3, r3, #7
 8006f84:	1c5a      	adds	r2, r3, #1
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	685b      	ldr	r3, [r3, #4]
       ||
 8006f8a:	429a      	cmp	r2, r3
 8006f8c:	d047      	beq.n	800701e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006f8e:	2301      	movs	r3, #1
 8006f90:	73fb      	strb	r3, [r7, #15]
 8006f92:	e044      	b.n	800701e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	2b03      	cmp	r3, #3
 8006f9a:	d018      	beq.n	8006fce <RCCEx_PLLSAI1_Config+0x86>
 8006f9c:	2b03      	cmp	r3, #3
 8006f9e:	d825      	bhi.n	8006fec <RCCEx_PLLSAI1_Config+0xa4>
 8006fa0:	2b01      	cmp	r3, #1
 8006fa2:	d002      	beq.n	8006faa <RCCEx_PLLSAI1_Config+0x62>
 8006fa4:	2b02      	cmp	r3, #2
 8006fa6:	d009      	beq.n	8006fbc <RCCEx_PLLSAI1_Config+0x74>
 8006fa8:	e020      	b.n	8006fec <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006faa:	4b5f      	ldr	r3, [pc, #380]	; (8007128 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f003 0302 	and.w	r3, r3, #2
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d11d      	bne.n	8006ff2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006fba:	e01a      	b.n	8006ff2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006fbc:	4b5a      	ldr	r3, [pc, #360]	; (8007128 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d116      	bne.n	8006ff6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006fc8:	2301      	movs	r3, #1
 8006fca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006fcc:	e013      	b.n	8006ff6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006fce:	4b56      	ldr	r3, [pc, #344]	; (8007128 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d10f      	bne.n	8006ffa <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006fda:	4b53      	ldr	r3, [pc, #332]	; (8007128 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d109      	bne.n	8006ffa <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006fea:	e006      	b.n	8006ffa <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006fec:	2301      	movs	r3, #1
 8006fee:	73fb      	strb	r3, [r7, #15]
      break;
 8006ff0:	e004      	b.n	8006ffc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006ff2:	bf00      	nop
 8006ff4:	e002      	b.n	8006ffc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006ff6:	bf00      	nop
 8006ff8:	e000      	b.n	8006ffc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006ffa:	bf00      	nop
    }

    if(status == HAL_OK)
 8006ffc:	7bfb      	ldrb	r3, [r7, #15]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d10d      	bne.n	800701e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007002:	4b49      	ldr	r3, [pc, #292]	; (8007128 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007004:	68db      	ldr	r3, [r3, #12]
 8007006:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6819      	ldr	r1, [r3, #0]
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	685b      	ldr	r3, [r3, #4]
 8007012:	3b01      	subs	r3, #1
 8007014:	011b      	lsls	r3, r3, #4
 8007016:	430b      	orrs	r3, r1
 8007018:	4943      	ldr	r1, [pc, #268]	; (8007128 <RCCEx_PLLSAI1_Config+0x1e0>)
 800701a:	4313      	orrs	r3, r2
 800701c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800701e:	7bfb      	ldrb	r3, [r7, #15]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d17c      	bne.n	800711e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007024:	4b40      	ldr	r3, [pc, #256]	; (8007128 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4a3f      	ldr	r2, [pc, #252]	; (8007128 <RCCEx_PLLSAI1_Config+0x1e0>)
 800702a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800702e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007030:	f7fa ff12 	bl	8001e58 <HAL_GetTick>
 8007034:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007036:	e009      	b.n	800704c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007038:	f7fa ff0e 	bl	8001e58 <HAL_GetTick>
 800703c:	4602      	mov	r2, r0
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	1ad3      	subs	r3, r2, r3
 8007042:	2b02      	cmp	r3, #2
 8007044:	d902      	bls.n	800704c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007046:	2303      	movs	r3, #3
 8007048:	73fb      	strb	r3, [r7, #15]
        break;
 800704a:	e005      	b.n	8007058 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800704c:	4b36      	ldr	r3, [pc, #216]	; (8007128 <RCCEx_PLLSAI1_Config+0x1e0>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007054:	2b00      	cmp	r3, #0
 8007056:	d1ef      	bne.n	8007038 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007058:	7bfb      	ldrb	r3, [r7, #15]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d15f      	bne.n	800711e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d110      	bne.n	8007086 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007064:	4b30      	ldr	r3, [pc, #192]	; (8007128 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007066:	691b      	ldr	r3, [r3, #16]
 8007068:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800706c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007070:	687a      	ldr	r2, [r7, #4]
 8007072:	6892      	ldr	r2, [r2, #8]
 8007074:	0211      	lsls	r1, r2, #8
 8007076:	687a      	ldr	r2, [r7, #4]
 8007078:	68d2      	ldr	r2, [r2, #12]
 800707a:	06d2      	lsls	r2, r2, #27
 800707c:	430a      	orrs	r2, r1
 800707e:	492a      	ldr	r1, [pc, #168]	; (8007128 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007080:	4313      	orrs	r3, r2
 8007082:	610b      	str	r3, [r1, #16]
 8007084:	e027      	b.n	80070d6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	2b01      	cmp	r3, #1
 800708a:	d112      	bne.n	80070b2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800708c:	4b26      	ldr	r3, [pc, #152]	; (8007128 <RCCEx_PLLSAI1_Config+0x1e0>)
 800708e:	691b      	ldr	r3, [r3, #16]
 8007090:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8007094:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007098:	687a      	ldr	r2, [r7, #4]
 800709a:	6892      	ldr	r2, [r2, #8]
 800709c:	0211      	lsls	r1, r2, #8
 800709e:	687a      	ldr	r2, [r7, #4]
 80070a0:	6912      	ldr	r2, [r2, #16]
 80070a2:	0852      	lsrs	r2, r2, #1
 80070a4:	3a01      	subs	r2, #1
 80070a6:	0552      	lsls	r2, r2, #21
 80070a8:	430a      	orrs	r2, r1
 80070aa:	491f      	ldr	r1, [pc, #124]	; (8007128 <RCCEx_PLLSAI1_Config+0x1e0>)
 80070ac:	4313      	orrs	r3, r2
 80070ae:	610b      	str	r3, [r1, #16]
 80070b0:	e011      	b.n	80070d6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80070b2:	4b1d      	ldr	r3, [pc, #116]	; (8007128 <RCCEx_PLLSAI1_Config+0x1e0>)
 80070b4:	691b      	ldr	r3, [r3, #16]
 80070b6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80070ba:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80070be:	687a      	ldr	r2, [r7, #4]
 80070c0:	6892      	ldr	r2, [r2, #8]
 80070c2:	0211      	lsls	r1, r2, #8
 80070c4:	687a      	ldr	r2, [r7, #4]
 80070c6:	6952      	ldr	r2, [r2, #20]
 80070c8:	0852      	lsrs	r2, r2, #1
 80070ca:	3a01      	subs	r2, #1
 80070cc:	0652      	lsls	r2, r2, #25
 80070ce:	430a      	orrs	r2, r1
 80070d0:	4915      	ldr	r1, [pc, #84]	; (8007128 <RCCEx_PLLSAI1_Config+0x1e0>)
 80070d2:	4313      	orrs	r3, r2
 80070d4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80070d6:	4b14      	ldr	r3, [pc, #80]	; (8007128 <RCCEx_PLLSAI1_Config+0x1e0>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a13      	ldr	r2, [pc, #76]	; (8007128 <RCCEx_PLLSAI1_Config+0x1e0>)
 80070dc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80070e0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070e2:	f7fa feb9 	bl	8001e58 <HAL_GetTick>
 80070e6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80070e8:	e009      	b.n	80070fe <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80070ea:	f7fa feb5 	bl	8001e58 <HAL_GetTick>
 80070ee:	4602      	mov	r2, r0
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	1ad3      	subs	r3, r2, r3
 80070f4:	2b02      	cmp	r3, #2
 80070f6:	d902      	bls.n	80070fe <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80070f8:	2303      	movs	r3, #3
 80070fa:	73fb      	strb	r3, [r7, #15]
          break;
 80070fc:	e005      	b.n	800710a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80070fe:	4b0a      	ldr	r3, [pc, #40]	; (8007128 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007106:	2b00      	cmp	r3, #0
 8007108:	d0ef      	beq.n	80070ea <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800710a:	7bfb      	ldrb	r3, [r7, #15]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d106      	bne.n	800711e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007110:	4b05      	ldr	r3, [pc, #20]	; (8007128 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007112:	691a      	ldr	r2, [r3, #16]
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	699b      	ldr	r3, [r3, #24]
 8007118:	4903      	ldr	r1, [pc, #12]	; (8007128 <RCCEx_PLLSAI1_Config+0x1e0>)
 800711a:	4313      	orrs	r3, r2
 800711c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800711e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007120:	4618      	mov	r0, r3
 8007122:	3710      	adds	r7, #16
 8007124:	46bd      	mov	sp, r7
 8007126:	bd80      	pop	{r7, pc}
 8007128:	40021000 	.word	0x40021000

0800712c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b082      	sub	sp, #8
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d101      	bne.n	800713e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800713a:	2301      	movs	r3, #1
 800713c:	e049      	b.n	80071d2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007144:	b2db      	uxtb	r3, r3
 8007146:	2b00      	cmp	r3, #0
 8007148:	d106      	bne.n	8007158 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2200      	movs	r2, #0
 800714e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f7fa fdb4 	bl	8001cc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2202      	movs	r2, #2
 800715c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681a      	ldr	r2, [r3, #0]
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	3304      	adds	r3, #4
 8007168:	4619      	mov	r1, r3
 800716a:	4610      	mov	r0, r2
 800716c:	f000 fae4 	bl	8007738 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2201      	movs	r2, #1
 8007174:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2201      	movs	r2, #1
 800717c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2201      	movs	r2, #1
 8007184:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2201      	movs	r2, #1
 800718c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2201      	movs	r2, #1
 8007194:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2201      	movs	r2, #1
 800719c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2201      	movs	r2, #1
 80071a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2201      	movs	r2, #1
 80071ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2201      	movs	r2, #1
 80071b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2201      	movs	r2, #1
 80071bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2201      	movs	r2, #1
 80071c4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2201      	movs	r2, #1
 80071cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80071d0:	2300      	movs	r3, #0
}
 80071d2:	4618      	mov	r0, r3
 80071d4:	3708      	adds	r7, #8
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bd80      	pop	{r7, pc}
	...

080071dc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80071dc:	b480      	push	{r7}
 80071de:	b085      	sub	sp, #20
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071ea:	b2db      	uxtb	r3, r3
 80071ec:	2b01      	cmp	r3, #1
 80071ee:	d001      	beq.n	80071f4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80071f0:	2301      	movs	r3, #1
 80071f2:	e033      	b.n	800725c <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2202      	movs	r2, #2
 80071f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4a19      	ldr	r2, [pc, #100]	; (8007268 <HAL_TIM_Base_Start+0x8c>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d009      	beq.n	800721a <HAL_TIM_Base_Start+0x3e>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800720e:	d004      	beq.n	800721a <HAL_TIM_Base_Start+0x3e>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	4a15      	ldr	r2, [pc, #84]	; (800726c <HAL_TIM_Base_Start+0x90>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d115      	bne.n	8007246 <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	689a      	ldr	r2, [r3, #8]
 8007220:	4b13      	ldr	r3, [pc, #76]	; (8007270 <HAL_TIM_Base_Start+0x94>)
 8007222:	4013      	ands	r3, r2
 8007224:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	2b06      	cmp	r3, #6
 800722a:	d015      	beq.n	8007258 <HAL_TIM_Base_Start+0x7c>
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007232:	d011      	beq.n	8007258 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	681a      	ldr	r2, [r3, #0]
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f042 0201 	orr.w	r2, r2, #1
 8007242:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007244:	e008      	b.n	8007258 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	681a      	ldr	r2, [r3, #0]
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f042 0201 	orr.w	r2, r2, #1
 8007254:	601a      	str	r2, [r3, #0]
 8007256:	e000      	b.n	800725a <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007258:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800725a:	2300      	movs	r3, #0
}
 800725c:	4618      	mov	r0, r3
 800725e:	3714      	adds	r7, #20
 8007260:	46bd      	mov	sp, r7
 8007262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007266:	4770      	bx	lr
 8007268:	40012c00 	.word	0x40012c00
 800726c:	40014000 	.word	0x40014000
 8007270:	00010007 	.word	0x00010007

08007274 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007274:	b480      	push	{r7}
 8007276:	b085      	sub	sp, #20
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007282:	b2db      	uxtb	r3, r3
 8007284:	2b01      	cmp	r3, #1
 8007286:	d001      	beq.n	800728c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007288:	2301      	movs	r3, #1
 800728a:	e03b      	b.n	8007304 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2202      	movs	r2, #2
 8007290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	68da      	ldr	r2, [r3, #12]
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f042 0201 	orr.w	r2, r2, #1
 80072a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4a19      	ldr	r2, [pc, #100]	; (8007310 <HAL_TIM_Base_Start_IT+0x9c>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d009      	beq.n	80072c2 <HAL_TIM_Base_Start_IT+0x4e>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072b6:	d004      	beq.n	80072c2 <HAL_TIM_Base_Start_IT+0x4e>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4a15      	ldr	r2, [pc, #84]	; (8007314 <HAL_TIM_Base_Start_IT+0xa0>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d115      	bne.n	80072ee <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	689a      	ldr	r2, [r3, #8]
 80072c8:	4b13      	ldr	r3, [pc, #76]	; (8007318 <HAL_TIM_Base_Start_IT+0xa4>)
 80072ca:	4013      	ands	r3, r2
 80072cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	2b06      	cmp	r3, #6
 80072d2:	d015      	beq.n	8007300 <HAL_TIM_Base_Start_IT+0x8c>
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072da:	d011      	beq.n	8007300 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	681a      	ldr	r2, [r3, #0]
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f042 0201 	orr.w	r2, r2, #1
 80072ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072ec:	e008      	b.n	8007300 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	681a      	ldr	r2, [r3, #0]
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f042 0201 	orr.w	r2, r2, #1
 80072fc:	601a      	str	r2, [r3, #0]
 80072fe:	e000      	b.n	8007302 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007300:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007302:	2300      	movs	r3, #0
}
 8007304:	4618      	mov	r0, r3
 8007306:	3714      	adds	r7, #20
 8007308:	46bd      	mov	sp, r7
 800730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730e:	4770      	bx	lr
 8007310:	40012c00 	.word	0x40012c00
 8007314:	40014000 	.word	0x40014000
 8007318:	00010007 	.word	0x00010007

0800731c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b082      	sub	sp, #8
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	691b      	ldr	r3, [r3, #16]
 800732a:	f003 0302 	and.w	r3, r3, #2
 800732e:	2b02      	cmp	r3, #2
 8007330:	d122      	bne.n	8007378 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	68db      	ldr	r3, [r3, #12]
 8007338:	f003 0302 	and.w	r3, r3, #2
 800733c:	2b02      	cmp	r3, #2
 800733e:	d11b      	bne.n	8007378 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f06f 0202 	mvn.w	r2, #2
 8007348:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2201      	movs	r2, #1
 800734e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	699b      	ldr	r3, [r3, #24]
 8007356:	f003 0303 	and.w	r3, r3, #3
 800735a:	2b00      	cmp	r3, #0
 800735c:	d003      	beq.n	8007366 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f000 f9cb 	bl	80076fa <HAL_TIM_IC_CaptureCallback>
 8007364:	e005      	b.n	8007372 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f000 f9bd 	bl	80076e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f000 f9ce 	bl	800770e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2200      	movs	r2, #0
 8007376:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	691b      	ldr	r3, [r3, #16]
 800737e:	f003 0304 	and.w	r3, r3, #4
 8007382:	2b04      	cmp	r3, #4
 8007384:	d122      	bne.n	80073cc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	68db      	ldr	r3, [r3, #12]
 800738c:	f003 0304 	and.w	r3, r3, #4
 8007390:	2b04      	cmp	r3, #4
 8007392:	d11b      	bne.n	80073cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f06f 0204 	mvn.w	r2, #4
 800739c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2202      	movs	r2, #2
 80073a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	699b      	ldr	r3, [r3, #24]
 80073aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d003      	beq.n	80073ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f000 f9a1 	bl	80076fa <HAL_TIM_IC_CaptureCallback>
 80073b8:	e005      	b.n	80073c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f000 f993 	bl	80076e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	f000 f9a4 	bl	800770e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2200      	movs	r2, #0
 80073ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	691b      	ldr	r3, [r3, #16]
 80073d2:	f003 0308 	and.w	r3, r3, #8
 80073d6:	2b08      	cmp	r3, #8
 80073d8:	d122      	bne.n	8007420 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	68db      	ldr	r3, [r3, #12]
 80073e0:	f003 0308 	and.w	r3, r3, #8
 80073e4:	2b08      	cmp	r3, #8
 80073e6:	d11b      	bne.n	8007420 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f06f 0208 	mvn.w	r2, #8
 80073f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2204      	movs	r2, #4
 80073f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	69db      	ldr	r3, [r3, #28]
 80073fe:	f003 0303 	and.w	r3, r3, #3
 8007402:	2b00      	cmp	r3, #0
 8007404:	d003      	beq.n	800740e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f000 f977 	bl	80076fa <HAL_TIM_IC_CaptureCallback>
 800740c:	e005      	b.n	800741a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f000 f969 	bl	80076e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f000 f97a 	bl	800770e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2200      	movs	r2, #0
 800741e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	691b      	ldr	r3, [r3, #16]
 8007426:	f003 0310 	and.w	r3, r3, #16
 800742a:	2b10      	cmp	r3, #16
 800742c:	d122      	bne.n	8007474 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	68db      	ldr	r3, [r3, #12]
 8007434:	f003 0310 	and.w	r3, r3, #16
 8007438:	2b10      	cmp	r3, #16
 800743a:	d11b      	bne.n	8007474 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f06f 0210 	mvn.w	r2, #16
 8007444:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2208      	movs	r2, #8
 800744a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	69db      	ldr	r3, [r3, #28]
 8007452:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007456:	2b00      	cmp	r3, #0
 8007458:	d003      	beq.n	8007462 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f000 f94d 	bl	80076fa <HAL_TIM_IC_CaptureCallback>
 8007460:	e005      	b.n	800746e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f000 f93f 	bl	80076e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f000 f950 	bl	800770e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2200      	movs	r2, #0
 8007472:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	691b      	ldr	r3, [r3, #16]
 800747a:	f003 0301 	and.w	r3, r3, #1
 800747e:	2b01      	cmp	r3, #1
 8007480:	d10e      	bne.n	80074a0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	68db      	ldr	r3, [r3, #12]
 8007488:	f003 0301 	and.w	r3, r3, #1
 800748c:	2b01      	cmp	r3, #1
 800748e:	d107      	bne.n	80074a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f06f 0201 	mvn.w	r2, #1
 8007498:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f7f9 ffbc 	bl	8001418 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	691b      	ldr	r3, [r3, #16]
 80074a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074aa:	2b80      	cmp	r3, #128	; 0x80
 80074ac:	d10e      	bne.n	80074cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	68db      	ldr	r3, [r3, #12]
 80074b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074b8:	2b80      	cmp	r3, #128	; 0x80
 80074ba:	d107      	bne.n	80074cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80074c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f000 faa4 	bl	8007a14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	691b      	ldr	r3, [r3, #16]
 80074d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074da:	d10e      	bne.n	80074fa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	68db      	ldr	r3, [r3, #12]
 80074e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074e6:	2b80      	cmp	r3, #128	; 0x80
 80074e8:	d107      	bne.n	80074fa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80074f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80074f4:	6878      	ldr	r0, [r7, #4]
 80074f6:	f000 fa97 	bl	8007a28 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	691b      	ldr	r3, [r3, #16]
 8007500:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007504:	2b40      	cmp	r3, #64	; 0x40
 8007506:	d10e      	bne.n	8007526 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	68db      	ldr	r3, [r3, #12]
 800750e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007512:	2b40      	cmp	r3, #64	; 0x40
 8007514:	d107      	bne.n	8007526 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800751e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f000 f8fe 	bl	8007722 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	691b      	ldr	r3, [r3, #16]
 800752c:	f003 0320 	and.w	r3, r3, #32
 8007530:	2b20      	cmp	r3, #32
 8007532:	d10e      	bne.n	8007552 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	68db      	ldr	r3, [r3, #12]
 800753a:	f003 0320 	and.w	r3, r3, #32
 800753e:	2b20      	cmp	r3, #32
 8007540:	d107      	bne.n	8007552 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f06f 0220 	mvn.w	r2, #32
 800754a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	f000 fa57 	bl	8007a00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007552:	bf00      	nop
 8007554:	3708      	adds	r7, #8
 8007556:	46bd      	mov	sp, r7
 8007558:	bd80      	pop	{r7, pc}

0800755a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800755a:	b580      	push	{r7, lr}
 800755c:	b084      	sub	sp, #16
 800755e:	af00      	add	r7, sp, #0
 8007560:	6078      	str	r0, [r7, #4]
 8007562:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800756a:	2b01      	cmp	r3, #1
 800756c:	d101      	bne.n	8007572 <HAL_TIM_ConfigClockSource+0x18>
 800756e:	2302      	movs	r3, #2
 8007570:	e0b5      	b.n	80076de <HAL_TIM_ConfigClockSource+0x184>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2201      	movs	r2, #1
 8007576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2202      	movs	r2, #2
 800757e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	689b      	ldr	r3, [r3, #8]
 8007588:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007590:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007594:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800759c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	68fa      	ldr	r2, [r7, #12]
 80075a4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075ae:	d03e      	beq.n	800762e <HAL_TIM_ConfigClockSource+0xd4>
 80075b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075b4:	f200 8087 	bhi.w	80076c6 <HAL_TIM_ConfigClockSource+0x16c>
 80075b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075bc:	f000 8085 	beq.w	80076ca <HAL_TIM_ConfigClockSource+0x170>
 80075c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075c4:	d87f      	bhi.n	80076c6 <HAL_TIM_ConfigClockSource+0x16c>
 80075c6:	2b70      	cmp	r3, #112	; 0x70
 80075c8:	d01a      	beq.n	8007600 <HAL_TIM_ConfigClockSource+0xa6>
 80075ca:	2b70      	cmp	r3, #112	; 0x70
 80075cc:	d87b      	bhi.n	80076c6 <HAL_TIM_ConfigClockSource+0x16c>
 80075ce:	2b60      	cmp	r3, #96	; 0x60
 80075d0:	d050      	beq.n	8007674 <HAL_TIM_ConfigClockSource+0x11a>
 80075d2:	2b60      	cmp	r3, #96	; 0x60
 80075d4:	d877      	bhi.n	80076c6 <HAL_TIM_ConfigClockSource+0x16c>
 80075d6:	2b50      	cmp	r3, #80	; 0x50
 80075d8:	d03c      	beq.n	8007654 <HAL_TIM_ConfigClockSource+0xfa>
 80075da:	2b50      	cmp	r3, #80	; 0x50
 80075dc:	d873      	bhi.n	80076c6 <HAL_TIM_ConfigClockSource+0x16c>
 80075de:	2b40      	cmp	r3, #64	; 0x40
 80075e0:	d058      	beq.n	8007694 <HAL_TIM_ConfigClockSource+0x13a>
 80075e2:	2b40      	cmp	r3, #64	; 0x40
 80075e4:	d86f      	bhi.n	80076c6 <HAL_TIM_ConfigClockSource+0x16c>
 80075e6:	2b30      	cmp	r3, #48	; 0x30
 80075e8:	d064      	beq.n	80076b4 <HAL_TIM_ConfigClockSource+0x15a>
 80075ea:	2b30      	cmp	r3, #48	; 0x30
 80075ec:	d86b      	bhi.n	80076c6 <HAL_TIM_ConfigClockSource+0x16c>
 80075ee:	2b20      	cmp	r3, #32
 80075f0:	d060      	beq.n	80076b4 <HAL_TIM_ConfigClockSource+0x15a>
 80075f2:	2b20      	cmp	r3, #32
 80075f4:	d867      	bhi.n	80076c6 <HAL_TIM_ConfigClockSource+0x16c>
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d05c      	beq.n	80076b4 <HAL_TIM_ConfigClockSource+0x15a>
 80075fa:	2b10      	cmp	r3, #16
 80075fc:	d05a      	beq.n	80076b4 <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80075fe:	e062      	b.n	80076c6 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6818      	ldr	r0, [r3, #0]
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	6899      	ldr	r1, [r3, #8]
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	685a      	ldr	r2, [r3, #4]
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	68db      	ldr	r3, [r3, #12]
 8007610:	f000 f970 	bl	80078f4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	689b      	ldr	r3, [r3, #8]
 800761a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007622:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	68fa      	ldr	r2, [r7, #12]
 800762a:	609a      	str	r2, [r3, #8]
      break;
 800762c:	e04e      	b.n	80076cc <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6818      	ldr	r0, [r3, #0]
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	6899      	ldr	r1, [r3, #8]
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	685a      	ldr	r2, [r3, #4]
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	68db      	ldr	r3, [r3, #12]
 800763e:	f000 f959 	bl	80078f4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	689a      	ldr	r2, [r3, #8]
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007650:	609a      	str	r2, [r3, #8]
      break;
 8007652:	e03b      	b.n	80076cc <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6818      	ldr	r0, [r3, #0]
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	6859      	ldr	r1, [r3, #4]
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	68db      	ldr	r3, [r3, #12]
 8007660:	461a      	mov	r2, r3
 8007662:	f000 f8cd 	bl	8007800 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	2150      	movs	r1, #80	; 0x50
 800766c:	4618      	mov	r0, r3
 800766e:	f000 f926 	bl	80078be <TIM_ITRx_SetConfig>
      break;
 8007672:	e02b      	b.n	80076cc <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6818      	ldr	r0, [r3, #0]
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	6859      	ldr	r1, [r3, #4]
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	68db      	ldr	r3, [r3, #12]
 8007680:	461a      	mov	r2, r3
 8007682:	f000 f8ec 	bl	800785e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	2160      	movs	r1, #96	; 0x60
 800768c:	4618      	mov	r0, r3
 800768e:	f000 f916 	bl	80078be <TIM_ITRx_SetConfig>
      break;
 8007692:	e01b      	b.n	80076cc <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6818      	ldr	r0, [r3, #0]
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	6859      	ldr	r1, [r3, #4]
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	68db      	ldr	r3, [r3, #12]
 80076a0:	461a      	mov	r2, r3
 80076a2:	f000 f8ad 	bl	8007800 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	2140      	movs	r1, #64	; 0x40
 80076ac:	4618      	mov	r0, r3
 80076ae:	f000 f906 	bl	80078be <TIM_ITRx_SetConfig>
      break;
 80076b2:	e00b      	b.n	80076cc <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681a      	ldr	r2, [r3, #0]
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4619      	mov	r1, r3
 80076be:	4610      	mov	r0, r2
 80076c0:	f000 f8fd 	bl	80078be <TIM_ITRx_SetConfig>
        break;
 80076c4:	e002      	b.n	80076cc <HAL_TIM_ConfigClockSource+0x172>
      break;
 80076c6:	bf00      	nop
 80076c8:	e000      	b.n	80076cc <HAL_TIM_ConfigClockSource+0x172>
      break;
 80076ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2201      	movs	r2, #1
 80076d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2200      	movs	r2, #0
 80076d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80076dc:	2300      	movs	r3, #0
}
 80076de:	4618      	mov	r0, r3
 80076e0:	3710      	adds	r7, #16
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}

080076e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80076e6:	b480      	push	{r7}
 80076e8:	b083      	sub	sp, #12
 80076ea:	af00      	add	r7, sp, #0
 80076ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80076ee:	bf00      	nop
 80076f0:	370c      	adds	r7, #12
 80076f2:	46bd      	mov	sp, r7
 80076f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f8:	4770      	bx	lr

080076fa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80076fa:	b480      	push	{r7}
 80076fc:	b083      	sub	sp, #12
 80076fe:	af00      	add	r7, sp, #0
 8007700:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007702:	bf00      	nop
 8007704:	370c      	adds	r7, #12
 8007706:	46bd      	mov	sp, r7
 8007708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770c:	4770      	bx	lr

0800770e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800770e:	b480      	push	{r7}
 8007710:	b083      	sub	sp, #12
 8007712:	af00      	add	r7, sp, #0
 8007714:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007716:	bf00      	nop
 8007718:	370c      	adds	r7, #12
 800771a:	46bd      	mov	sp, r7
 800771c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007720:	4770      	bx	lr

08007722 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007722:	b480      	push	{r7}
 8007724:	b083      	sub	sp, #12
 8007726:	af00      	add	r7, sp, #0
 8007728:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800772a:	bf00      	nop
 800772c:	370c      	adds	r7, #12
 800772e:	46bd      	mov	sp, r7
 8007730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007734:	4770      	bx	lr
	...

08007738 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007738:	b480      	push	{r7}
 800773a:	b085      	sub	sp, #20
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
 8007740:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	4a2a      	ldr	r2, [pc, #168]	; (80077f4 <TIM_Base_SetConfig+0xbc>)
 800774c:	4293      	cmp	r3, r2
 800774e:	d003      	beq.n	8007758 <TIM_Base_SetConfig+0x20>
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007756:	d108      	bne.n	800776a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800775e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	685b      	ldr	r3, [r3, #4]
 8007764:	68fa      	ldr	r2, [r7, #12]
 8007766:	4313      	orrs	r3, r2
 8007768:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	4a21      	ldr	r2, [pc, #132]	; (80077f4 <TIM_Base_SetConfig+0xbc>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d00b      	beq.n	800778a <TIM_Base_SetConfig+0x52>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007778:	d007      	beq.n	800778a <TIM_Base_SetConfig+0x52>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	4a1e      	ldr	r2, [pc, #120]	; (80077f8 <TIM_Base_SetConfig+0xc0>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d003      	beq.n	800778a <TIM_Base_SetConfig+0x52>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	4a1d      	ldr	r2, [pc, #116]	; (80077fc <TIM_Base_SetConfig+0xc4>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d108      	bne.n	800779c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007790:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	68db      	ldr	r3, [r3, #12]
 8007796:	68fa      	ldr	r2, [r7, #12]
 8007798:	4313      	orrs	r3, r2
 800779a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	695b      	ldr	r3, [r3, #20]
 80077a6:	4313      	orrs	r3, r2
 80077a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	68fa      	ldr	r2, [r7, #12]
 80077ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	689a      	ldr	r2, [r3, #8]
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	681a      	ldr	r2, [r3, #0]
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	4a0c      	ldr	r2, [pc, #48]	; (80077f4 <TIM_Base_SetConfig+0xbc>)
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d007      	beq.n	80077d8 <TIM_Base_SetConfig+0xa0>
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	4a0b      	ldr	r2, [pc, #44]	; (80077f8 <TIM_Base_SetConfig+0xc0>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d003      	beq.n	80077d8 <TIM_Base_SetConfig+0xa0>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	4a0a      	ldr	r2, [pc, #40]	; (80077fc <TIM_Base_SetConfig+0xc4>)
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d103      	bne.n	80077e0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	691a      	ldr	r2, [r3, #16]
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2201      	movs	r2, #1
 80077e4:	615a      	str	r2, [r3, #20]
}
 80077e6:	bf00      	nop
 80077e8:	3714      	adds	r7, #20
 80077ea:	46bd      	mov	sp, r7
 80077ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f0:	4770      	bx	lr
 80077f2:	bf00      	nop
 80077f4:	40012c00 	.word	0x40012c00
 80077f8:	40014000 	.word	0x40014000
 80077fc:	40014400 	.word	0x40014400

08007800 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007800:	b480      	push	{r7}
 8007802:	b087      	sub	sp, #28
 8007804:	af00      	add	r7, sp, #0
 8007806:	60f8      	str	r0, [r7, #12]
 8007808:	60b9      	str	r1, [r7, #8]
 800780a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	6a1b      	ldr	r3, [r3, #32]
 8007810:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	6a1b      	ldr	r3, [r3, #32]
 8007816:	f023 0201 	bic.w	r2, r3, #1
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	699b      	ldr	r3, [r3, #24]
 8007822:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800782a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	011b      	lsls	r3, r3, #4
 8007830:	693a      	ldr	r2, [r7, #16]
 8007832:	4313      	orrs	r3, r2
 8007834:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	f023 030a 	bic.w	r3, r3, #10
 800783c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800783e:	697a      	ldr	r2, [r7, #20]
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	4313      	orrs	r3, r2
 8007844:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	693a      	ldr	r2, [r7, #16]
 800784a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	697a      	ldr	r2, [r7, #20]
 8007850:	621a      	str	r2, [r3, #32]
}
 8007852:	bf00      	nop
 8007854:	371c      	adds	r7, #28
 8007856:	46bd      	mov	sp, r7
 8007858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785c:	4770      	bx	lr

0800785e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800785e:	b480      	push	{r7}
 8007860:	b087      	sub	sp, #28
 8007862:	af00      	add	r7, sp, #0
 8007864:	60f8      	str	r0, [r7, #12]
 8007866:	60b9      	str	r1, [r7, #8]
 8007868:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	6a1b      	ldr	r3, [r3, #32]
 800786e:	f023 0210 	bic.w	r2, r3, #16
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	699b      	ldr	r3, [r3, #24]
 800787a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	6a1b      	ldr	r3, [r3, #32]
 8007880:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007882:	697b      	ldr	r3, [r7, #20]
 8007884:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007888:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	031b      	lsls	r3, r3, #12
 800788e:	697a      	ldr	r2, [r7, #20]
 8007890:	4313      	orrs	r3, r2
 8007892:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007894:	693b      	ldr	r3, [r7, #16]
 8007896:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800789a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	011b      	lsls	r3, r3, #4
 80078a0:	693a      	ldr	r2, [r7, #16]
 80078a2:	4313      	orrs	r3, r2
 80078a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	697a      	ldr	r2, [r7, #20]
 80078aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	693a      	ldr	r2, [r7, #16]
 80078b0:	621a      	str	r2, [r3, #32]
}
 80078b2:	bf00      	nop
 80078b4:	371c      	adds	r7, #28
 80078b6:	46bd      	mov	sp, r7
 80078b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078bc:	4770      	bx	lr

080078be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80078be:	b480      	push	{r7}
 80078c0:	b085      	sub	sp, #20
 80078c2:	af00      	add	r7, sp, #0
 80078c4:	6078      	str	r0, [r7, #4]
 80078c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	689b      	ldr	r3, [r3, #8]
 80078cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80078d6:	683a      	ldr	r2, [r7, #0]
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	4313      	orrs	r3, r2
 80078dc:	f043 0307 	orr.w	r3, r3, #7
 80078e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	68fa      	ldr	r2, [r7, #12]
 80078e6:	609a      	str	r2, [r3, #8]
}
 80078e8:	bf00      	nop
 80078ea:	3714      	adds	r7, #20
 80078ec:	46bd      	mov	sp, r7
 80078ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f2:	4770      	bx	lr

080078f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80078f4:	b480      	push	{r7}
 80078f6:	b087      	sub	sp, #28
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	60f8      	str	r0, [r7, #12]
 80078fc:	60b9      	str	r1, [r7, #8]
 80078fe:	607a      	str	r2, [r7, #4]
 8007900:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	689b      	ldr	r3, [r3, #8]
 8007906:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007908:	697b      	ldr	r3, [r7, #20]
 800790a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800790e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	021a      	lsls	r2, r3, #8
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	431a      	orrs	r2, r3
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	4313      	orrs	r3, r2
 800791c:	697a      	ldr	r2, [r7, #20]
 800791e:	4313      	orrs	r3, r2
 8007920:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	697a      	ldr	r2, [r7, #20]
 8007926:	609a      	str	r2, [r3, #8]
}
 8007928:	bf00      	nop
 800792a:	371c      	adds	r7, #28
 800792c:	46bd      	mov	sp, r7
 800792e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007932:	4770      	bx	lr

08007934 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007934:	b480      	push	{r7}
 8007936:	b085      	sub	sp, #20
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
 800793c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007944:	2b01      	cmp	r3, #1
 8007946:	d101      	bne.n	800794c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007948:	2302      	movs	r3, #2
 800794a:	e04f      	b.n	80079ec <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2201      	movs	r2, #1
 8007950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2202      	movs	r2, #2
 8007958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	685b      	ldr	r3, [r3, #4]
 8007962:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	689b      	ldr	r3, [r3, #8]
 800796a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	4a21      	ldr	r2, [pc, #132]	; (80079f8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007972:	4293      	cmp	r3, r2
 8007974:	d108      	bne.n	8007988 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800797c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	685b      	ldr	r3, [r3, #4]
 8007982:	68fa      	ldr	r2, [r7, #12]
 8007984:	4313      	orrs	r3, r2
 8007986:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800798e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	68fa      	ldr	r2, [r7, #12]
 8007996:	4313      	orrs	r3, r2
 8007998:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	68fa      	ldr	r2, [r7, #12]
 80079a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	4a14      	ldr	r2, [pc, #80]	; (80079f8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d009      	beq.n	80079c0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079b4:	d004      	beq.n	80079c0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	4a10      	ldr	r2, [pc, #64]	; (80079fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80079bc:	4293      	cmp	r3, r2
 80079be:	d10c      	bne.n	80079da <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80079c6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	689b      	ldr	r3, [r3, #8]
 80079cc:	68ba      	ldr	r2, [r7, #8]
 80079ce:	4313      	orrs	r3, r2
 80079d0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	68ba      	ldr	r2, [r7, #8]
 80079d8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2201      	movs	r2, #1
 80079de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2200      	movs	r2, #0
 80079e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80079ea:	2300      	movs	r3, #0
}
 80079ec:	4618      	mov	r0, r3
 80079ee:	3714      	adds	r7, #20
 80079f0:	46bd      	mov	sp, r7
 80079f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f6:	4770      	bx	lr
 80079f8:	40012c00 	.word	0x40012c00
 80079fc:	40014000 	.word	0x40014000

08007a00 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007a00:	b480      	push	{r7}
 8007a02:	b083      	sub	sp, #12
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007a08:	bf00      	nop
 8007a0a:	370c      	adds	r7, #12
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a12:	4770      	bx	lr

08007a14 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007a14:	b480      	push	{r7}
 8007a16:	b083      	sub	sp, #12
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007a1c:	bf00      	nop
 8007a1e:	370c      	adds	r7, #12
 8007a20:	46bd      	mov	sp, r7
 8007a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a26:	4770      	bx	lr

08007a28 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007a28:	b480      	push	{r7}
 8007a2a:	b083      	sub	sp, #12
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007a30:	bf00      	nop
 8007a32:	370c      	adds	r7, #12
 8007a34:	46bd      	mov	sp, r7
 8007a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3a:	4770      	bx	lr

08007a3c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007a3c:	b084      	sub	sp, #16
 8007a3e:	b480      	push	{r7}
 8007a40:	b083      	sub	sp, #12
 8007a42:	af00      	add	r7, sp, #0
 8007a44:	6078      	str	r0, [r7, #4]
 8007a46:	f107 0014 	add.w	r0, r7, #20
 8007a4a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007a4e:	2300      	movs	r3, #0
}
 8007a50:	4618      	mov	r0, r3
 8007a52:	370c      	adds	r7, #12
 8007a54:	46bd      	mov	sp, r7
 8007a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5a:	b004      	add	sp, #16
 8007a5c:	4770      	bx	lr

08007a5e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8007a5e:	b480      	push	{r7}
 8007a60:	b085      	sub	sp, #20
 8007a62:	af00      	add	r7, sp, #0
 8007a64:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2200      	movs	r2, #0
 8007a6a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007a6e:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8007a72:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	b29a      	uxth	r2, r3
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007a7e:	2300      	movs	r3, #0
}
 8007a80:	4618      	mov	r0, r3
 8007a82:	3714      	adds	r7, #20
 8007a84:	46bd      	mov	sp, r7
 8007a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8a:	4770      	bx	lr

08007a8c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b085      	sub	sp, #20
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007a94:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8007a98:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007aa0:	b29a      	uxth	r2, r3
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	b29b      	uxth	r3, r3
 8007aa6:	43db      	mvns	r3, r3
 8007aa8:	b29b      	uxth	r3, r3
 8007aaa:	4013      	ands	r3, r2
 8007aac:	b29a      	uxth	r2, r3
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007ab4:	2300      	movs	r3, #0
}
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	3714      	adds	r7, #20
 8007aba:	46bd      	mov	sp, r7
 8007abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac0:	4770      	bx	lr

08007ac2 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8007ac2:	b480      	push	{r7}
 8007ac4:	b083      	sub	sp, #12
 8007ac6:	af00      	add	r7, sp, #0
 8007ac8:	6078      	str	r0, [r7, #4]
 8007aca:	460b      	mov	r3, r1
 8007acc:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007ace:	2300      	movs	r3, #0
}
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	370c      	adds	r7, #12
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ada:	4770      	bx	lr

08007adc <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007adc:	b084      	sub	sp, #16
 8007ade:	b480      	push	{r7}
 8007ae0:	b083      	sub	sp, #12
 8007ae2:	af00      	add	r7, sp, #0
 8007ae4:	6078      	str	r0, [r7, #4]
 8007ae6:	f107 0014 	add.w	r0, r7, #20
 8007aea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2201      	movs	r2, #1
 8007af2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2200      	movs	r2, #0
 8007afa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2200      	movs	r2, #0
 8007b02:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2200      	movs	r2, #0
 8007b0a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8007b0e:	2300      	movs	r3, #0
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	370c      	adds	r7, #12
 8007b14:	46bd      	mov	sp, r7
 8007b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1a:	b004      	add	sp, #16
 8007b1c:	4770      	bx	lr
	...

08007b20 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007b20:	b480      	push	{r7}
 8007b22:	b09b      	sub	sp, #108	; 0x6c
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
 8007b28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007b30:	687a      	ldr	r2, [r7, #4]
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	781b      	ldrb	r3, [r3, #0]
 8007b36:	009b      	lsls	r3, r3, #2
 8007b38:	4413      	add	r3, r2
 8007b3a:	881b      	ldrh	r3, [r3, #0]
 8007b3c:	b29b      	uxth	r3, r3
 8007b3e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8007b42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b46:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	78db      	ldrb	r3, [r3, #3]
 8007b4e:	2b03      	cmp	r3, #3
 8007b50:	d81f      	bhi.n	8007b92 <USB_ActivateEndpoint+0x72>
 8007b52:	a201      	add	r2, pc, #4	; (adr r2, 8007b58 <USB_ActivateEndpoint+0x38>)
 8007b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b58:	08007b69 	.word	0x08007b69
 8007b5c:	08007b85 	.word	0x08007b85
 8007b60:	08007b9b 	.word	0x08007b9b
 8007b64:	08007b77 	.word	0x08007b77
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8007b68:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007b6c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007b70:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8007b74:	e012      	b.n	8007b9c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8007b76:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007b7a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8007b7e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8007b82:	e00b      	b.n	8007b9c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8007b84:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007b88:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007b8c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8007b90:	e004      	b.n	8007b9c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8007b92:	2301      	movs	r3, #1
 8007b94:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8007b98:	e000      	b.n	8007b9c <USB_ActivateEndpoint+0x7c>
      break;
 8007b9a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8007b9c:	687a      	ldr	r2, [r7, #4]
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	781b      	ldrb	r3, [r3, #0]
 8007ba2:	009b      	lsls	r3, r3, #2
 8007ba4:	441a      	add	r2, r3
 8007ba6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007baa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007bae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007bb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bba:	b29b      	uxth	r3, r3
 8007bbc:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8007bbe:	687a      	ldr	r2, [r7, #4]
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	781b      	ldrb	r3, [r3, #0]
 8007bc4:	009b      	lsls	r3, r3, #2
 8007bc6:	4413      	add	r3, r2
 8007bc8:	881b      	ldrh	r3, [r3, #0]
 8007bca:	b29b      	uxth	r3, r3
 8007bcc:	b21b      	sxth	r3, r3
 8007bce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007bd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bd6:	b21a      	sxth	r2, r3
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	781b      	ldrb	r3, [r3, #0]
 8007bdc:	b21b      	sxth	r3, r3
 8007bde:	4313      	orrs	r3, r2
 8007be0:	b21b      	sxth	r3, r3
 8007be2:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8007be6:	687a      	ldr	r2, [r7, #4]
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	781b      	ldrb	r3, [r3, #0]
 8007bec:	009b      	lsls	r3, r3, #2
 8007bee:	441a      	add	r2, r3
 8007bf0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8007bf4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007bf8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007bfc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c04:	b29b      	uxth	r3, r3
 8007c06:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	7b1b      	ldrb	r3, [r3, #12]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	f040 8149 	bne.w	8007ea4 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	785b      	ldrb	r3, [r3, #1]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	f000 8084 	beq.w	8007d24 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	617b      	str	r3, [r7, #20]
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c26:	b29b      	uxth	r3, r3
 8007c28:	461a      	mov	r2, r3
 8007c2a:	697b      	ldr	r3, [r7, #20]
 8007c2c:	4413      	add	r3, r2
 8007c2e:	617b      	str	r3, [r7, #20]
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	781b      	ldrb	r3, [r3, #0]
 8007c34:	00da      	lsls	r2, r3, #3
 8007c36:	697b      	ldr	r3, [r7, #20]
 8007c38:	4413      	add	r3, r2
 8007c3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007c3e:	613b      	str	r3, [r7, #16]
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	88db      	ldrh	r3, [r3, #6]
 8007c44:	085b      	lsrs	r3, r3, #1
 8007c46:	b29b      	uxth	r3, r3
 8007c48:	005b      	lsls	r3, r3, #1
 8007c4a:	b29a      	uxth	r2, r3
 8007c4c:	693b      	ldr	r3, [r7, #16]
 8007c4e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007c50:	687a      	ldr	r2, [r7, #4]
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	781b      	ldrb	r3, [r3, #0]
 8007c56:	009b      	lsls	r3, r3, #2
 8007c58:	4413      	add	r3, r2
 8007c5a:	881b      	ldrh	r3, [r3, #0]
 8007c5c:	81fb      	strh	r3, [r7, #14]
 8007c5e:	89fb      	ldrh	r3, [r7, #14]
 8007c60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d01b      	beq.n	8007ca0 <USB_ActivateEndpoint+0x180>
 8007c68:	687a      	ldr	r2, [r7, #4]
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	781b      	ldrb	r3, [r3, #0]
 8007c6e:	009b      	lsls	r3, r3, #2
 8007c70:	4413      	add	r3, r2
 8007c72:	881b      	ldrh	r3, [r3, #0]
 8007c74:	b29b      	uxth	r3, r3
 8007c76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c7e:	81bb      	strh	r3, [r7, #12]
 8007c80:	687a      	ldr	r2, [r7, #4]
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	781b      	ldrb	r3, [r3, #0]
 8007c86:	009b      	lsls	r3, r3, #2
 8007c88:	441a      	add	r2, r3
 8007c8a:	89bb      	ldrh	r3, [r7, #12]
 8007c8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c98:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007c9c:	b29b      	uxth	r3, r3
 8007c9e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	78db      	ldrb	r3, [r3, #3]
 8007ca4:	2b01      	cmp	r3, #1
 8007ca6:	d020      	beq.n	8007cea <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007ca8:	687a      	ldr	r2, [r7, #4]
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	781b      	ldrb	r3, [r3, #0]
 8007cae:	009b      	lsls	r3, r3, #2
 8007cb0:	4413      	add	r3, r2
 8007cb2:	881b      	ldrh	r3, [r3, #0]
 8007cb4:	b29b      	uxth	r3, r3
 8007cb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007cbe:	813b      	strh	r3, [r7, #8]
 8007cc0:	893b      	ldrh	r3, [r7, #8]
 8007cc2:	f083 0320 	eor.w	r3, r3, #32
 8007cc6:	813b      	strh	r3, [r7, #8]
 8007cc8:	687a      	ldr	r2, [r7, #4]
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	781b      	ldrb	r3, [r3, #0]
 8007cce:	009b      	lsls	r3, r3, #2
 8007cd0:	441a      	add	r2, r3
 8007cd2:	893b      	ldrh	r3, [r7, #8]
 8007cd4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007cd8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007cdc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ce0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ce4:	b29b      	uxth	r3, r3
 8007ce6:	8013      	strh	r3, [r2, #0]
 8007ce8:	e27f      	b.n	80081ea <USB_ActivateEndpoint+0x6ca>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007cea:	687a      	ldr	r2, [r7, #4]
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	781b      	ldrb	r3, [r3, #0]
 8007cf0:	009b      	lsls	r3, r3, #2
 8007cf2:	4413      	add	r3, r2
 8007cf4:	881b      	ldrh	r3, [r3, #0]
 8007cf6:	b29b      	uxth	r3, r3
 8007cf8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cfc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d00:	817b      	strh	r3, [r7, #10]
 8007d02:	687a      	ldr	r2, [r7, #4]
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	781b      	ldrb	r3, [r3, #0]
 8007d08:	009b      	lsls	r3, r3, #2
 8007d0a:	441a      	add	r2, r3
 8007d0c:	897b      	ldrh	r3, [r7, #10]
 8007d0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d1e:	b29b      	uxth	r3, r3
 8007d20:	8013      	strh	r3, [r2, #0]
 8007d22:	e262      	b.n	80081ea <USB_ActivateEndpoint+0x6ca>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d2e:	b29b      	uxth	r3, r3
 8007d30:	461a      	mov	r2, r3
 8007d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d34:	4413      	add	r3, r2
 8007d36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	781b      	ldrb	r3, [r3, #0]
 8007d3c:	00da      	lsls	r2, r3, #3
 8007d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d40:	4413      	add	r3, r2
 8007d42:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007d46:	62bb      	str	r3, [r7, #40]	; 0x28
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	88db      	ldrh	r3, [r3, #6]
 8007d4c:	085b      	lsrs	r3, r3, #1
 8007d4e:	b29b      	uxth	r3, r3
 8007d50:	005b      	lsls	r3, r3, #1
 8007d52:	b29a      	uxth	r2, r3
 8007d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d56:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	627b      	str	r3, [r7, #36]	; 0x24
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d62:	b29b      	uxth	r3, r3
 8007d64:	461a      	mov	r2, r3
 8007d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d68:	4413      	add	r3, r2
 8007d6a:	627b      	str	r3, [r7, #36]	; 0x24
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	781b      	ldrb	r3, [r3, #0]
 8007d70:	00da      	lsls	r2, r3, #3
 8007d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d74:	4413      	add	r3, r2
 8007d76:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007d7a:	623b      	str	r3, [r7, #32]
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	691b      	ldr	r3, [r3, #16]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d112      	bne.n	8007daa <USB_ActivateEndpoint+0x28a>
 8007d84:	6a3b      	ldr	r3, [r7, #32]
 8007d86:	881b      	ldrh	r3, [r3, #0]
 8007d88:	b29b      	uxth	r3, r3
 8007d8a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007d8e:	b29a      	uxth	r2, r3
 8007d90:	6a3b      	ldr	r3, [r7, #32]
 8007d92:	801a      	strh	r2, [r3, #0]
 8007d94:	6a3b      	ldr	r3, [r7, #32]
 8007d96:	881b      	ldrh	r3, [r3, #0]
 8007d98:	b29b      	uxth	r3, r3
 8007d9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007da2:	b29a      	uxth	r2, r3
 8007da4:	6a3b      	ldr	r3, [r7, #32]
 8007da6:	801a      	strh	r2, [r3, #0]
 8007da8:	e02f      	b.n	8007e0a <USB_ActivateEndpoint+0x2ea>
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	691b      	ldr	r3, [r3, #16]
 8007dae:	2b3e      	cmp	r3, #62	; 0x3e
 8007db0:	d813      	bhi.n	8007dda <USB_ActivateEndpoint+0x2ba>
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	691b      	ldr	r3, [r3, #16]
 8007db6:	085b      	lsrs	r3, r3, #1
 8007db8:	663b      	str	r3, [r7, #96]	; 0x60
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	691b      	ldr	r3, [r3, #16]
 8007dbe:	f003 0301 	and.w	r3, r3, #1
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d002      	beq.n	8007dcc <USB_ActivateEndpoint+0x2ac>
 8007dc6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007dc8:	3301      	adds	r3, #1
 8007dca:	663b      	str	r3, [r7, #96]	; 0x60
 8007dcc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007dce:	b29b      	uxth	r3, r3
 8007dd0:	029b      	lsls	r3, r3, #10
 8007dd2:	b29a      	uxth	r2, r3
 8007dd4:	6a3b      	ldr	r3, [r7, #32]
 8007dd6:	801a      	strh	r2, [r3, #0]
 8007dd8:	e017      	b.n	8007e0a <USB_ActivateEndpoint+0x2ea>
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	691b      	ldr	r3, [r3, #16]
 8007dde:	095b      	lsrs	r3, r3, #5
 8007de0:	663b      	str	r3, [r7, #96]	; 0x60
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	691b      	ldr	r3, [r3, #16]
 8007de6:	f003 031f 	and.w	r3, r3, #31
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d102      	bne.n	8007df4 <USB_ActivateEndpoint+0x2d4>
 8007dee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007df0:	3b01      	subs	r3, #1
 8007df2:	663b      	str	r3, [r7, #96]	; 0x60
 8007df4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007df6:	b29b      	uxth	r3, r3
 8007df8:	029b      	lsls	r3, r3, #10
 8007dfa:	b29b      	uxth	r3, r3
 8007dfc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e04:	b29a      	uxth	r2, r3
 8007e06:	6a3b      	ldr	r3, [r7, #32]
 8007e08:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007e0a:	687a      	ldr	r2, [r7, #4]
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	781b      	ldrb	r3, [r3, #0]
 8007e10:	009b      	lsls	r3, r3, #2
 8007e12:	4413      	add	r3, r2
 8007e14:	881b      	ldrh	r3, [r3, #0]
 8007e16:	83fb      	strh	r3, [r7, #30]
 8007e18:	8bfb      	ldrh	r3, [r7, #30]
 8007e1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d01b      	beq.n	8007e5a <USB_ActivateEndpoint+0x33a>
 8007e22:	687a      	ldr	r2, [r7, #4]
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	781b      	ldrb	r3, [r3, #0]
 8007e28:	009b      	lsls	r3, r3, #2
 8007e2a:	4413      	add	r3, r2
 8007e2c:	881b      	ldrh	r3, [r3, #0]
 8007e2e:	b29b      	uxth	r3, r3
 8007e30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e38:	83bb      	strh	r3, [r7, #28]
 8007e3a:	687a      	ldr	r2, [r7, #4]
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	781b      	ldrb	r3, [r3, #0]
 8007e40:	009b      	lsls	r3, r3, #2
 8007e42:	441a      	add	r2, r3
 8007e44:	8bbb      	ldrh	r3, [r7, #28]
 8007e46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e4e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007e52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e56:	b29b      	uxth	r3, r3
 8007e58:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007e5a:	687a      	ldr	r2, [r7, #4]
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	781b      	ldrb	r3, [r3, #0]
 8007e60:	009b      	lsls	r3, r3, #2
 8007e62:	4413      	add	r3, r2
 8007e64:	881b      	ldrh	r3, [r3, #0]
 8007e66:	b29b      	uxth	r3, r3
 8007e68:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007e6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e70:	837b      	strh	r3, [r7, #26]
 8007e72:	8b7b      	ldrh	r3, [r7, #26]
 8007e74:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007e78:	837b      	strh	r3, [r7, #26]
 8007e7a:	8b7b      	ldrh	r3, [r7, #26]
 8007e7c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007e80:	837b      	strh	r3, [r7, #26]
 8007e82:	687a      	ldr	r2, [r7, #4]
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	781b      	ldrb	r3, [r3, #0]
 8007e88:	009b      	lsls	r3, r3, #2
 8007e8a:	441a      	add	r2, r3
 8007e8c:	8b7b      	ldrh	r3, [r7, #26]
 8007e8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e9e:	b29b      	uxth	r3, r3
 8007ea0:	8013      	strh	r3, [r2, #0]
 8007ea2:	e1a2      	b.n	80081ea <USB_ActivateEndpoint+0x6ca>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8007ea4:	687a      	ldr	r2, [r7, #4]
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	781b      	ldrb	r3, [r3, #0]
 8007eaa:	009b      	lsls	r3, r3, #2
 8007eac:	4413      	add	r3, r2
 8007eae:	881b      	ldrh	r3, [r3, #0]
 8007eb0:	b29b      	uxth	r3, r3
 8007eb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007eb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007eba:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8007ebe:	687a      	ldr	r2, [r7, #4]
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	781b      	ldrb	r3, [r3, #0]
 8007ec4:	009b      	lsls	r3, r3, #2
 8007ec6:	441a      	add	r2, r3
 8007ec8:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8007ecc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ed0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ed4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007ed8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007edc:	b29b      	uxth	r3, r3
 8007ede:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	65bb      	str	r3, [r7, #88]	; 0x58
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007eea:	b29b      	uxth	r3, r3
 8007eec:	461a      	mov	r2, r3
 8007eee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007ef0:	4413      	add	r3, r2
 8007ef2:	65bb      	str	r3, [r7, #88]	; 0x58
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	781b      	ldrb	r3, [r3, #0]
 8007ef8:	00da      	lsls	r2, r3, #3
 8007efa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007efc:	4413      	add	r3, r2
 8007efe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007f02:	657b      	str	r3, [r7, #84]	; 0x54
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	891b      	ldrh	r3, [r3, #8]
 8007f08:	085b      	lsrs	r3, r3, #1
 8007f0a:	b29b      	uxth	r3, r3
 8007f0c:	005b      	lsls	r3, r3, #1
 8007f0e:	b29a      	uxth	r2, r3
 8007f10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f12:	801a      	strh	r2, [r3, #0]
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	653b      	str	r3, [r7, #80]	; 0x50
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f1e:	b29b      	uxth	r3, r3
 8007f20:	461a      	mov	r2, r3
 8007f22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f24:	4413      	add	r3, r2
 8007f26:	653b      	str	r3, [r7, #80]	; 0x50
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	781b      	ldrb	r3, [r3, #0]
 8007f2c:	00da      	lsls	r2, r3, #3
 8007f2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f30:	4413      	add	r3, r2
 8007f32:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007f36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	895b      	ldrh	r3, [r3, #10]
 8007f3c:	085b      	lsrs	r3, r3, #1
 8007f3e:	b29b      	uxth	r3, r3
 8007f40:	005b      	lsls	r3, r3, #1
 8007f42:	b29a      	uxth	r2, r3
 8007f44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f46:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	785b      	ldrb	r3, [r3, #1]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	f040 8091 	bne.w	8008074 <USB_ActivateEndpoint+0x554>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007f52:	687a      	ldr	r2, [r7, #4]
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	781b      	ldrb	r3, [r3, #0]
 8007f58:	009b      	lsls	r3, r3, #2
 8007f5a:	4413      	add	r3, r2
 8007f5c:	881b      	ldrh	r3, [r3, #0]
 8007f5e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8007f60:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007f62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d01b      	beq.n	8007fa2 <USB_ActivateEndpoint+0x482>
 8007f6a:	687a      	ldr	r2, [r7, #4]
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	781b      	ldrb	r3, [r3, #0]
 8007f70:	009b      	lsls	r3, r3, #2
 8007f72:	4413      	add	r3, r2
 8007f74:	881b      	ldrh	r3, [r3, #0]
 8007f76:	b29b      	uxth	r3, r3
 8007f78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f80:	877b      	strh	r3, [r7, #58]	; 0x3a
 8007f82:	687a      	ldr	r2, [r7, #4]
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	781b      	ldrb	r3, [r3, #0]
 8007f88:	009b      	lsls	r3, r3, #2
 8007f8a:	441a      	add	r2, r3
 8007f8c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8007f8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f96:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007f9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f9e:	b29b      	uxth	r3, r3
 8007fa0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007fa2:	687a      	ldr	r2, [r7, #4]
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	781b      	ldrb	r3, [r3, #0]
 8007fa8:	009b      	lsls	r3, r3, #2
 8007faa:	4413      	add	r3, r2
 8007fac:	881b      	ldrh	r3, [r3, #0]
 8007fae:	873b      	strh	r3, [r7, #56]	; 0x38
 8007fb0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007fb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d01b      	beq.n	8007ff2 <USB_ActivateEndpoint+0x4d2>
 8007fba:	687a      	ldr	r2, [r7, #4]
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	781b      	ldrb	r3, [r3, #0]
 8007fc0:	009b      	lsls	r3, r3, #2
 8007fc2:	4413      	add	r3, r2
 8007fc4:	881b      	ldrh	r3, [r3, #0]
 8007fc6:	b29b      	uxth	r3, r3
 8007fc8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007fcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fd0:	86fb      	strh	r3, [r7, #54]	; 0x36
 8007fd2:	687a      	ldr	r2, [r7, #4]
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	781b      	ldrb	r3, [r3, #0]
 8007fd8:	009b      	lsls	r3, r3, #2
 8007fda:	441a      	add	r2, r3
 8007fdc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007fde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007fe2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007fe6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007fea:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007fee:	b29b      	uxth	r3, r3
 8007ff0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007ff2:	687a      	ldr	r2, [r7, #4]
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	781b      	ldrb	r3, [r3, #0]
 8007ff8:	009b      	lsls	r3, r3, #2
 8007ffa:	4413      	add	r3, r2
 8007ffc:	881b      	ldrh	r3, [r3, #0]
 8007ffe:	b29b      	uxth	r3, r3
 8008000:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008004:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008008:	86bb      	strh	r3, [r7, #52]	; 0x34
 800800a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800800c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008010:	86bb      	strh	r3, [r7, #52]	; 0x34
 8008012:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008014:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008018:	86bb      	strh	r3, [r7, #52]	; 0x34
 800801a:	687a      	ldr	r2, [r7, #4]
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	781b      	ldrb	r3, [r3, #0]
 8008020:	009b      	lsls	r3, r3, #2
 8008022:	441a      	add	r2, r3
 8008024:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008026:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800802a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800802e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008032:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008036:	b29b      	uxth	r3, r3
 8008038:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800803a:	687a      	ldr	r2, [r7, #4]
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	781b      	ldrb	r3, [r3, #0]
 8008040:	009b      	lsls	r3, r3, #2
 8008042:	4413      	add	r3, r2
 8008044:	881b      	ldrh	r3, [r3, #0]
 8008046:	b29b      	uxth	r3, r3
 8008048:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800804c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008050:	867b      	strh	r3, [r7, #50]	; 0x32
 8008052:	687a      	ldr	r2, [r7, #4]
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	781b      	ldrb	r3, [r3, #0]
 8008058:	009b      	lsls	r3, r3, #2
 800805a:	441a      	add	r2, r3
 800805c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800805e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008062:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008066:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800806a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800806e:	b29b      	uxth	r3, r3
 8008070:	8013      	strh	r3, [r2, #0]
 8008072:	e0ba      	b.n	80081ea <USB_ActivateEndpoint+0x6ca>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008074:	687a      	ldr	r2, [r7, #4]
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	781b      	ldrb	r3, [r3, #0]
 800807a:	009b      	lsls	r3, r3, #2
 800807c:	4413      	add	r3, r2
 800807e:	881b      	ldrh	r3, [r3, #0]
 8008080:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8008084:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8008088:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800808c:	2b00      	cmp	r3, #0
 800808e:	d01d      	beq.n	80080cc <USB_ActivateEndpoint+0x5ac>
 8008090:	687a      	ldr	r2, [r7, #4]
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	781b      	ldrb	r3, [r3, #0]
 8008096:	009b      	lsls	r3, r3, #2
 8008098:	4413      	add	r3, r2
 800809a:	881b      	ldrh	r3, [r3, #0]
 800809c:	b29b      	uxth	r3, r3
 800809e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080a6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80080aa:	687a      	ldr	r2, [r7, #4]
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	781b      	ldrb	r3, [r3, #0]
 80080b0:	009b      	lsls	r3, r3, #2
 80080b2:	441a      	add	r2, r3
 80080b4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80080b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80080c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080c8:	b29b      	uxth	r3, r3
 80080ca:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80080cc:	687a      	ldr	r2, [r7, #4]
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	781b      	ldrb	r3, [r3, #0]
 80080d2:	009b      	lsls	r3, r3, #2
 80080d4:	4413      	add	r3, r2
 80080d6:	881b      	ldrh	r3, [r3, #0]
 80080d8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80080dc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80080e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d01d      	beq.n	8008124 <USB_ActivateEndpoint+0x604>
 80080e8:	687a      	ldr	r2, [r7, #4]
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	781b      	ldrb	r3, [r3, #0]
 80080ee:	009b      	lsls	r3, r3, #2
 80080f0:	4413      	add	r3, r2
 80080f2:	881b      	ldrh	r3, [r3, #0]
 80080f4:	b29b      	uxth	r3, r3
 80080f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080fe:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8008102:	687a      	ldr	r2, [r7, #4]
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	781b      	ldrb	r3, [r3, #0]
 8008108:	009b      	lsls	r3, r3, #2
 800810a:	441a      	add	r2, r3
 800810c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8008110:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008114:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008118:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800811c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008120:	b29b      	uxth	r3, r3
 8008122:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	78db      	ldrb	r3, [r3, #3]
 8008128:	2b01      	cmp	r3, #1
 800812a:	d024      	beq.n	8008176 <USB_ActivateEndpoint+0x656>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800812c:	687a      	ldr	r2, [r7, #4]
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	781b      	ldrb	r3, [r3, #0]
 8008132:	009b      	lsls	r3, r3, #2
 8008134:	4413      	add	r3, r2
 8008136:	881b      	ldrh	r3, [r3, #0]
 8008138:	b29b      	uxth	r3, r3
 800813a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800813e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008142:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8008146:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800814a:	f083 0320 	eor.w	r3, r3, #32
 800814e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8008152:	687a      	ldr	r2, [r7, #4]
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	781b      	ldrb	r3, [r3, #0]
 8008158:	009b      	lsls	r3, r3, #2
 800815a:	441a      	add	r2, r3
 800815c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008160:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008164:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008168:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800816c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008170:	b29b      	uxth	r3, r3
 8008172:	8013      	strh	r3, [r2, #0]
 8008174:	e01d      	b.n	80081b2 <USB_ActivateEndpoint+0x692>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008176:	687a      	ldr	r2, [r7, #4]
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	781b      	ldrb	r3, [r3, #0]
 800817c:	009b      	lsls	r3, r3, #2
 800817e:	4413      	add	r3, r2
 8008180:	881b      	ldrh	r3, [r3, #0]
 8008182:	b29b      	uxth	r3, r3
 8008184:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008188:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800818c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8008190:	687a      	ldr	r2, [r7, #4]
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	781b      	ldrb	r3, [r3, #0]
 8008196:	009b      	lsls	r3, r3, #2
 8008198:	441a      	add	r2, r3
 800819a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800819e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081ae:	b29b      	uxth	r3, r3
 80081b0:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80081b2:	687a      	ldr	r2, [r7, #4]
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	781b      	ldrb	r3, [r3, #0]
 80081b8:	009b      	lsls	r3, r3, #2
 80081ba:	4413      	add	r3, r2
 80081bc:	881b      	ldrh	r3, [r3, #0]
 80081be:	b29b      	uxth	r3, r3
 80081c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80081c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081c8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80081ca:	687a      	ldr	r2, [r7, #4]
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	781b      	ldrb	r3, [r3, #0]
 80081d0:	009b      	lsls	r3, r3, #2
 80081d2:	441a      	add	r2, r3
 80081d4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80081d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081e6:	b29b      	uxth	r3, r3
 80081e8:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80081ea:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80081ee:	4618      	mov	r0, r3
 80081f0:	376c      	adds	r7, #108	; 0x6c
 80081f2:	46bd      	mov	sp, r7
 80081f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f8:	4770      	bx	lr
 80081fa:	bf00      	nop

080081fc <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80081fc:	b480      	push	{r7}
 80081fe:	b08d      	sub	sp, #52	; 0x34
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
 8008204:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	7b1b      	ldrb	r3, [r3, #12]
 800820a:	2b00      	cmp	r3, #0
 800820c:	f040 808e 	bne.w	800832c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	785b      	ldrb	r3, [r3, #1]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d044      	beq.n	80082a2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008218:	687a      	ldr	r2, [r7, #4]
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	781b      	ldrb	r3, [r3, #0]
 800821e:	009b      	lsls	r3, r3, #2
 8008220:	4413      	add	r3, r2
 8008222:	881b      	ldrh	r3, [r3, #0]
 8008224:	81bb      	strh	r3, [r7, #12]
 8008226:	89bb      	ldrh	r3, [r7, #12]
 8008228:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800822c:	2b00      	cmp	r3, #0
 800822e:	d01b      	beq.n	8008268 <USB_DeactivateEndpoint+0x6c>
 8008230:	687a      	ldr	r2, [r7, #4]
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	781b      	ldrb	r3, [r3, #0]
 8008236:	009b      	lsls	r3, r3, #2
 8008238:	4413      	add	r3, r2
 800823a:	881b      	ldrh	r3, [r3, #0]
 800823c:	b29b      	uxth	r3, r3
 800823e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008242:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008246:	817b      	strh	r3, [r7, #10]
 8008248:	687a      	ldr	r2, [r7, #4]
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	781b      	ldrb	r3, [r3, #0]
 800824e:	009b      	lsls	r3, r3, #2
 8008250:	441a      	add	r2, r3
 8008252:	897b      	ldrh	r3, [r7, #10]
 8008254:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008258:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800825c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008260:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008264:	b29b      	uxth	r3, r3
 8008266:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008268:	687a      	ldr	r2, [r7, #4]
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	781b      	ldrb	r3, [r3, #0]
 800826e:	009b      	lsls	r3, r3, #2
 8008270:	4413      	add	r3, r2
 8008272:	881b      	ldrh	r3, [r3, #0]
 8008274:	b29b      	uxth	r3, r3
 8008276:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800827a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800827e:	813b      	strh	r3, [r7, #8]
 8008280:	687a      	ldr	r2, [r7, #4]
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	781b      	ldrb	r3, [r3, #0]
 8008286:	009b      	lsls	r3, r3, #2
 8008288:	441a      	add	r2, r3
 800828a:	893b      	ldrh	r3, [r7, #8]
 800828c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008290:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008294:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008298:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800829c:	b29b      	uxth	r3, r3
 800829e:	8013      	strh	r3, [r2, #0]
 80082a0:	e192      	b.n	80085c8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80082a2:	687a      	ldr	r2, [r7, #4]
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	781b      	ldrb	r3, [r3, #0]
 80082a8:	009b      	lsls	r3, r3, #2
 80082aa:	4413      	add	r3, r2
 80082ac:	881b      	ldrh	r3, [r3, #0]
 80082ae:	827b      	strh	r3, [r7, #18]
 80082b0:	8a7b      	ldrh	r3, [r7, #18]
 80082b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d01b      	beq.n	80082f2 <USB_DeactivateEndpoint+0xf6>
 80082ba:	687a      	ldr	r2, [r7, #4]
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	781b      	ldrb	r3, [r3, #0]
 80082c0:	009b      	lsls	r3, r3, #2
 80082c2:	4413      	add	r3, r2
 80082c4:	881b      	ldrh	r3, [r3, #0]
 80082c6:	b29b      	uxth	r3, r3
 80082c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082d0:	823b      	strh	r3, [r7, #16]
 80082d2:	687a      	ldr	r2, [r7, #4]
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	781b      	ldrb	r3, [r3, #0]
 80082d8:	009b      	lsls	r3, r3, #2
 80082da:	441a      	add	r2, r3
 80082dc:	8a3b      	ldrh	r3, [r7, #16]
 80082de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80082ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082ee:	b29b      	uxth	r3, r3
 80082f0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80082f2:	687a      	ldr	r2, [r7, #4]
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	781b      	ldrb	r3, [r3, #0]
 80082f8:	009b      	lsls	r3, r3, #2
 80082fa:	4413      	add	r3, r2
 80082fc:	881b      	ldrh	r3, [r3, #0]
 80082fe:	b29b      	uxth	r3, r3
 8008300:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008304:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008308:	81fb      	strh	r3, [r7, #14]
 800830a:	687a      	ldr	r2, [r7, #4]
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	781b      	ldrb	r3, [r3, #0]
 8008310:	009b      	lsls	r3, r3, #2
 8008312:	441a      	add	r2, r3
 8008314:	89fb      	ldrh	r3, [r7, #14]
 8008316:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800831a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800831e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008322:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008326:	b29b      	uxth	r3, r3
 8008328:	8013      	strh	r3, [r2, #0]
 800832a:	e14d      	b.n	80085c8 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	785b      	ldrb	r3, [r3, #1]
 8008330:	2b00      	cmp	r3, #0
 8008332:	f040 80a5 	bne.w	8008480 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008336:	687a      	ldr	r2, [r7, #4]
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	781b      	ldrb	r3, [r3, #0]
 800833c:	009b      	lsls	r3, r3, #2
 800833e:	4413      	add	r3, r2
 8008340:	881b      	ldrh	r3, [r3, #0]
 8008342:	843b      	strh	r3, [r7, #32]
 8008344:	8c3b      	ldrh	r3, [r7, #32]
 8008346:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800834a:	2b00      	cmp	r3, #0
 800834c:	d01b      	beq.n	8008386 <USB_DeactivateEndpoint+0x18a>
 800834e:	687a      	ldr	r2, [r7, #4]
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	781b      	ldrb	r3, [r3, #0]
 8008354:	009b      	lsls	r3, r3, #2
 8008356:	4413      	add	r3, r2
 8008358:	881b      	ldrh	r3, [r3, #0]
 800835a:	b29b      	uxth	r3, r3
 800835c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008360:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008364:	83fb      	strh	r3, [r7, #30]
 8008366:	687a      	ldr	r2, [r7, #4]
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	781b      	ldrb	r3, [r3, #0]
 800836c:	009b      	lsls	r3, r3, #2
 800836e:	441a      	add	r2, r3
 8008370:	8bfb      	ldrh	r3, [r7, #30]
 8008372:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008376:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800837a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800837e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008382:	b29b      	uxth	r3, r3
 8008384:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008386:	687a      	ldr	r2, [r7, #4]
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	781b      	ldrb	r3, [r3, #0]
 800838c:	009b      	lsls	r3, r3, #2
 800838e:	4413      	add	r3, r2
 8008390:	881b      	ldrh	r3, [r3, #0]
 8008392:	83bb      	strh	r3, [r7, #28]
 8008394:	8bbb      	ldrh	r3, [r7, #28]
 8008396:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800839a:	2b00      	cmp	r3, #0
 800839c:	d01b      	beq.n	80083d6 <USB_DeactivateEndpoint+0x1da>
 800839e:	687a      	ldr	r2, [r7, #4]
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	781b      	ldrb	r3, [r3, #0]
 80083a4:	009b      	lsls	r3, r3, #2
 80083a6:	4413      	add	r3, r2
 80083a8:	881b      	ldrh	r3, [r3, #0]
 80083aa:	b29b      	uxth	r3, r3
 80083ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80083b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083b4:	837b      	strh	r3, [r7, #26]
 80083b6:	687a      	ldr	r2, [r7, #4]
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	781b      	ldrb	r3, [r3, #0]
 80083bc:	009b      	lsls	r3, r3, #2
 80083be:	441a      	add	r2, r3
 80083c0:	8b7b      	ldrh	r3, [r7, #26]
 80083c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80083ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083ce:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80083d2:	b29b      	uxth	r3, r3
 80083d4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80083d6:	687a      	ldr	r2, [r7, #4]
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	781b      	ldrb	r3, [r3, #0]
 80083dc:	009b      	lsls	r3, r3, #2
 80083de:	4413      	add	r3, r2
 80083e0:	881b      	ldrh	r3, [r3, #0]
 80083e2:	b29b      	uxth	r3, r3
 80083e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80083e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083ec:	833b      	strh	r3, [r7, #24]
 80083ee:	687a      	ldr	r2, [r7, #4]
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	781b      	ldrb	r3, [r3, #0]
 80083f4:	009b      	lsls	r3, r3, #2
 80083f6:	441a      	add	r2, r3
 80083f8:	8b3b      	ldrh	r3, [r7, #24]
 80083fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008402:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008406:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800840a:	b29b      	uxth	r3, r3
 800840c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800840e:	687a      	ldr	r2, [r7, #4]
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	781b      	ldrb	r3, [r3, #0]
 8008414:	009b      	lsls	r3, r3, #2
 8008416:	4413      	add	r3, r2
 8008418:	881b      	ldrh	r3, [r3, #0]
 800841a:	b29b      	uxth	r3, r3
 800841c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008420:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008424:	82fb      	strh	r3, [r7, #22]
 8008426:	687a      	ldr	r2, [r7, #4]
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	781b      	ldrb	r3, [r3, #0]
 800842c:	009b      	lsls	r3, r3, #2
 800842e:	441a      	add	r2, r3
 8008430:	8afb      	ldrh	r3, [r7, #22]
 8008432:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008436:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800843a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800843e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008442:	b29b      	uxth	r3, r3
 8008444:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008446:	687a      	ldr	r2, [r7, #4]
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	781b      	ldrb	r3, [r3, #0]
 800844c:	009b      	lsls	r3, r3, #2
 800844e:	4413      	add	r3, r2
 8008450:	881b      	ldrh	r3, [r3, #0]
 8008452:	b29b      	uxth	r3, r3
 8008454:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008458:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800845c:	82bb      	strh	r3, [r7, #20]
 800845e:	687a      	ldr	r2, [r7, #4]
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	781b      	ldrb	r3, [r3, #0]
 8008464:	009b      	lsls	r3, r3, #2
 8008466:	441a      	add	r2, r3
 8008468:	8abb      	ldrh	r3, [r7, #20]
 800846a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800846e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008472:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008476:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800847a:	b29b      	uxth	r3, r3
 800847c:	8013      	strh	r3, [r2, #0]
 800847e:	e0a3      	b.n	80085c8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008480:	687a      	ldr	r2, [r7, #4]
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	781b      	ldrb	r3, [r3, #0]
 8008486:	009b      	lsls	r3, r3, #2
 8008488:	4413      	add	r3, r2
 800848a:	881b      	ldrh	r3, [r3, #0]
 800848c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800848e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008490:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008494:	2b00      	cmp	r3, #0
 8008496:	d01b      	beq.n	80084d0 <USB_DeactivateEndpoint+0x2d4>
 8008498:	687a      	ldr	r2, [r7, #4]
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	781b      	ldrb	r3, [r3, #0]
 800849e:	009b      	lsls	r3, r3, #2
 80084a0:	4413      	add	r3, r2
 80084a2:	881b      	ldrh	r3, [r3, #0]
 80084a4:	b29b      	uxth	r3, r3
 80084a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80084aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084ae:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80084b0:	687a      	ldr	r2, [r7, #4]
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	781b      	ldrb	r3, [r3, #0]
 80084b6:	009b      	lsls	r3, r3, #2
 80084b8:	441a      	add	r2, r3
 80084ba:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80084bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80084c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084cc:	b29b      	uxth	r3, r3
 80084ce:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80084d0:	687a      	ldr	r2, [r7, #4]
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	781b      	ldrb	r3, [r3, #0]
 80084d6:	009b      	lsls	r3, r3, #2
 80084d8:	4413      	add	r3, r2
 80084da:	881b      	ldrh	r3, [r3, #0]
 80084dc:	857b      	strh	r3, [r7, #42]	; 0x2a
 80084de:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80084e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d01b      	beq.n	8008520 <USB_DeactivateEndpoint+0x324>
 80084e8:	687a      	ldr	r2, [r7, #4]
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	781b      	ldrb	r3, [r3, #0]
 80084ee:	009b      	lsls	r3, r3, #2
 80084f0:	4413      	add	r3, r2
 80084f2:	881b      	ldrh	r3, [r3, #0]
 80084f4:	b29b      	uxth	r3, r3
 80084f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80084fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084fe:	853b      	strh	r3, [r7, #40]	; 0x28
 8008500:	687a      	ldr	r2, [r7, #4]
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	781b      	ldrb	r3, [r3, #0]
 8008506:	009b      	lsls	r3, r3, #2
 8008508:	441a      	add	r2, r3
 800850a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800850c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008510:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008514:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008518:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800851c:	b29b      	uxth	r3, r3
 800851e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008520:	687a      	ldr	r2, [r7, #4]
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	781b      	ldrb	r3, [r3, #0]
 8008526:	009b      	lsls	r3, r3, #2
 8008528:	4413      	add	r3, r2
 800852a:	881b      	ldrh	r3, [r3, #0]
 800852c:	b29b      	uxth	r3, r3
 800852e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008532:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008536:	84fb      	strh	r3, [r7, #38]	; 0x26
 8008538:	687a      	ldr	r2, [r7, #4]
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	781b      	ldrb	r3, [r3, #0]
 800853e:	009b      	lsls	r3, r3, #2
 8008540:	441a      	add	r2, r3
 8008542:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008544:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008548:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800854c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008550:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008554:	b29b      	uxth	r3, r3
 8008556:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008558:	687a      	ldr	r2, [r7, #4]
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	781b      	ldrb	r3, [r3, #0]
 800855e:	009b      	lsls	r3, r3, #2
 8008560:	4413      	add	r3, r2
 8008562:	881b      	ldrh	r3, [r3, #0]
 8008564:	b29b      	uxth	r3, r3
 8008566:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800856a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800856e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8008570:	687a      	ldr	r2, [r7, #4]
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	781b      	ldrb	r3, [r3, #0]
 8008576:	009b      	lsls	r3, r3, #2
 8008578:	441a      	add	r2, r3
 800857a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800857c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008580:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008584:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008588:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800858c:	b29b      	uxth	r3, r3
 800858e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008590:	687a      	ldr	r2, [r7, #4]
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	781b      	ldrb	r3, [r3, #0]
 8008596:	009b      	lsls	r3, r3, #2
 8008598:	4413      	add	r3, r2
 800859a:	881b      	ldrh	r3, [r3, #0]
 800859c:	b29b      	uxth	r3, r3
 800859e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80085a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085a6:	847b      	strh	r3, [r7, #34]	; 0x22
 80085a8:	687a      	ldr	r2, [r7, #4]
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	781b      	ldrb	r3, [r3, #0]
 80085ae:	009b      	lsls	r3, r3, #2
 80085b0:	441a      	add	r2, r3
 80085b2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80085b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80085bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80085c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085c4:	b29b      	uxth	r3, r3
 80085c6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80085c8:	2300      	movs	r3, #0
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	3734      	adds	r7, #52	; 0x34
 80085ce:	46bd      	mov	sp, r7
 80085d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d4:	4770      	bx	lr

080085d6 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80085d6:	b580      	push	{r7, lr}
 80085d8:	b0cc      	sub	sp, #304	; 0x130
 80085da:	af00      	add	r7, sp, #0
 80085dc:	1d3b      	adds	r3, r7, #4
 80085de:	6018      	str	r0, [r3, #0]
 80085e0:	463b      	mov	r3, r7
 80085e2:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80085e4:	463b      	mov	r3, r7
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	785b      	ldrb	r3, [r3, #1]
 80085ea:	2b01      	cmp	r3, #1
 80085ec:	f040 872e 	bne.w	800944c <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80085f0:	463b      	mov	r3, r7
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	699a      	ldr	r2, [r3, #24]
 80085f6:	463b      	mov	r3, r7
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	691b      	ldr	r3, [r3, #16]
 80085fc:	429a      	cmp	r2, r3
 80085fe:	d905      	bls.n	800860c <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8008600:	463b      	mov	r3, r7
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	691b      	ldr	r3, [r3, #16]
 8008606:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800860a:	e004      	b.n	8008616 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800860c:	463b      	mov	r3, r7
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	699b      	ldr	r3, [r3, #24]
 8008612:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8008616:	463b      	mov	r3, r7
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	7b1b      	ldrb	r3, [r3, #12]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d134      	bne.n	800868a <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008620:	463b      	mov	r3, r7
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	6959      	ldr	r1, [r3, #20]
 8008626:	463b      	mov	r3, r7
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	88da      	ldrh	r2, [r3, #6]
 800862c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008630:	b29b      	uxth	r3, r3
 8008632:	1d38      	adds	r0, r7, #4
 8008634:	6800      	ldr	r0, [r0, #0]
 8008636:	f001 fc20 	bl	8009e7a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800863a:	f107 0310 	add.w	r3, r7, #16
 800863e:	1d3a      	adds	r2, r7, #4
 8008640:	6812      	ldr	r2, [r2, #0]
 8008642:	601a      	str	r2, [r3, #0]
 8008644:	1d3b      	adds	r3, r7, #4
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800864c:	b29b      	uxth	r3, r3
 800864e:	4619      	mov	r1, r3
 8008650:	f107 0310 	add.w	r3, r7, #16
 8008654:	f107 0210 	add.w	r2, r7, #16
 8008658:	6812      	ldr	r2, [r2, #0]
 800865a:	440a      	add	r2, r1
 800865c:	601a      	str	r2, [r3, #0]
 800865e:	463b      	mov	r3, r7
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	781b      	ldrb	r3, [r3, #0]
 8008664:	00da      	lsls	r2, r3, #3
 8008666:	f107 0310 	add.w	r3, r7, #16
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	4413      	add	r3, r2
 800866e:	f203 4202 	addw	r2, r3, #1026	; 0x402
 8008672:	f107 030c 	add.w	r3, r7, #12
 8008676:	601a      	str	r2, [r3, #0]
 8008678:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800867c:	b29a      	uxth	r2, r3
 800867e:	f107 030c 	add.w	r3, r7, #12
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	801a      	strh	r2, [r3, #0]
 8008686:	f000 beac 	b.w	80093e2 <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800868a:	463b      	mov	r3, r7
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	78db      	ldrb	r3, [r3, #3]
 8008690:	2b02      	cmp	r3, #2
 8008692:	f040 838c 	bne.w	8008dae <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8008696:	463b      	mov	r3, r7
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	6a1a      	ldr	r2, [r3, #32]
 800869c:	463b      	mov	r3, r7
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	691b      	ldr	r3, [r3, #16]
 80086a2:	429a      	cmp	r2, r3
 80086a4:	f240 8330 	bls.w	8008d08 <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80086a8:	1d3b      	adds	r3, r7, #4
 80086aa:	681a      	ldr	r2, [r3, #0]
 80086ac:	463b      	mov	r3, r7
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	781b      	ldrb	r3, [r3, #0]
 80086b2:	009b      	lsls	r3, r3, #2
 80086b4:	4413      	add	r3, r2
 80086b6:	881b      	ldrh	r3, [r3, #0]
 80086b8:	b29b      	uxth	r3, r3
 80086ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80086be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086c2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80086c6:	1d3b      	adds	r3, r7, #4
 80086c8:	681a      	ldr	r2, [r3, #0]
 80086ca:	463b      	mov	r3, r7
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	781b      	ldrb	r3, [r3, #0]
 80086d0:	009b      	lsls	r3, r3, #2
 80086d2:	441a      	add	r2, r3
 80086d4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80086d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80086dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80086e0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80086e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086e8:	b29b      	uxth	r3, r3
 80086ea:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80086ec:	463b      	mov	r3, r7
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	6a1a      	ldr	r2, [r3, #32]
 80086f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086f6:	1ad2      	subs	r2, r2, r3
 80086f8:	463b      	mov	r3, r7
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80086fe:	1d3b      	adds	r3, r7, #4
 8008700:	681a      	ldr	r2, [r3, #0]
 8008702:	463b      	mov	r3, r7
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	781b      	ldrb	r3, [r3, #0]
 8008708:	009b      	lsls	r3, r3, #2
 800870a:	4413      	add	r3, r2
 800870c:	881b      	ldrh	r3, [r3, #0]
 800870e:	b29b      	uxth	r3, r3
 8008710:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008714:	2b00      	cmp	r3, #0
 8008716:	f000 819e 	beq.w	8008a56 <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800871a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800871e:	1d3a      	adds	r2, r7, #4
 8008720:	6812      	ldr	r2, [r2, #0]
 8008722:	601a      	str	r2, [r3, #0]
 8008724:	463b      	mov	r3, r7
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	785b      	ldrb	r3, [r3, #1]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d17a      	bne.n	8008824 <USB_EPStartXfer+0x24e>
 800872e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008732:	1d3a      	adds	r2, r7, #4
 8008734:	6812      	ldr	r2, [r2, #0]
 8008736:	601a      	str	r2, [r3, #0]
 8008738:	1d3b      	adds	r3, r7, #4
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008740:	b29b      	uxth	r3, r3
 8008742:	4619      	mov	r1, r3
 8008744:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008748:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800874c:	6812      	ldr	r2, [r2, #0]
 800874e:	440a      	add	r2, r1
 8008750:	601a      	str	r2, [r3, #0]
 8008752:	463b      	mov	r3, r7
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	781b      	ldrb	r3, [r3, #0]
 8008758:	00da      	lsls	r2, r3, #3
 800875a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	4413      	add	r3, r2
 8008762:	f203 4206 	addw	r2, r3, #1030	; 0x406
 8008766:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800876a:	601a      	str	r2, [r3, #0]
 800876c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008770:	2b00      	cmp	r3, #0
 8008772:	d11a      	bne.n	80087aa <USB_EPStartXfer+0x1d4>
 8008774:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	881b      	ldrh	r3, [r3, #0]
 800877c:	b29b      	uxth	r3, r3
 800877e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008782:	b29a      	uxth	r2, r3
 8008784:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	801a      	strh	r2, [r3, #0]
 800878c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	881b      	ldrh	r3, [r3, #0]
 8008794:	b29b      	uxth	r3, r3
 8008796:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800879a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800879e:	b29a      	uxth	r2, r3
 80087a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	801a      	strh	r2, [r3, #0]
 80087a8:	e062      	b.n	8008870 <USB_EPStartXfer+0x29a>
 80087aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087ae:	2b3e      	cmp	r3, #62	; 0x3e
 80087b0:	d819      	bhi.n	80087e6 <USB_EPStartXfer+0x210>
 80087b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087b6:	085b      	lsrs	r3, r3, #1
 80087b8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80087bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087c0:	f003 0301 	and.w	r3, r3, #1
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d004      	beq.n	80087d2 <USB_EPStartXfer+0x1fc>
 80087c8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80087cc:	3301      	adds	r3, #1
 80087ce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80087d2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80087d6:	b29b      	uxth	r3, r3
 80087d8:	029b      	lsls	r3, r3, #10
 80087da:	b29a      	uxth	r2, r3
 80087dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	801a      	strh	r2, [r3, #0]
 80087e4:	e044      	b.n	8008870 <USB_EPStartXfer+0x29a>
 80087e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087ea:	095b      	lsrs	r3, r3, #5
 80087ec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80087f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087f4:	f003 031f 	and.w	r3, r3, #31
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d104      	bne.n	8008806 <USB_EPStartXfer+0x230>
 80087fc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008800:	3b01      	subs	r3, #1
 8008802:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008806:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800880a:	b29b      	uxth	r3, r3
 800880c:	029b      	lsls	r3, r3, #10
 800880e:	b29b      	uxth	r3, r3
 8008810:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008814:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008818:	b29a      	uxth	r2, r3
 800881a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	801a      	strh	r2, [r3, #0]
 8008822:	e025      	b.n	8008870 <USB_EPStartXfer+0x29a>
 8008824:	463b      	mov	r3, r7
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	785b      	ldrb	r3, [r3, #1]
 800882a:	2b01      	cmp	r3, #1
 800882c:	d120      	bne.n	8008870 <USB_EPStartXfer+0x29a>
 800882e:	1d3b      	adds	r3, r7, #4
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008836:	b29b      	uxth	r3, r3
 8008838:	4619      	mov	r1, r3
 800883a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800883e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8008842:	6812      	ldr	r2, [r2, #0]
 8008844:	440a      	add	r2, r1
 8008846:	601a      	str	r2, [r3, #0]
 8008848:	463b      	mov	r3, r7
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	781b      	ldrb	r3, [r3, #0]
 800884e:	00da      	lsls	r2, r3, #3
 8008850:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	4413      	add	r3, r2
 8008858:	f203 4206 	addw	r2, r3, #1030	; 0x406
 800885c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008860:	601a      	str	r2, [r3, #0]
 8008862:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008866:	b29a      	uxth	r2, r3
 8008868:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008870:	463b      	mov	r3, r7
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	895b      	ldrh	r3, [r3, #10]
 8008876:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800887a:	463b      	mov	r3, r7
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	6959      	ldr	r1, [r3, #20]
 8008880:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008884:	b29b      	uxth	r3, r3
 8008886:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800888a:	1d38      	adds	r0, r7, #4
 800888c:	6800      	ldr	r0, [r0, #0]
 800888e:	f001 faf4 	bl	8009e7a <USB_WritePMA>
            ep->xfer_buff += len;
 8008892:	463b      	mov	r3, r7
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	695a      	ldr	r2, [r3, #20]
 8008898:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800889c:	441a      	add	r2, r3
 800889e:	463b      	mov	r3, r7
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80088a4:	463b      	mov	r3, r7
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	6a1a      	ldr	r2, [r3, #32]
 80088aa:	463b      	mov	r3, r7
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	691b      	ldr	r3, [r3, #16]
 80088b0:	429a      	cmp	r2, r3
 80088b2:	d909      	bls.n	80088c8 <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 80088b4:	463b      	mov	r3, r7
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	6a1a      	ldr	r2, [r3, #32]
 80088ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088be:	1ad2      	subs	r2, r2, r3
 80088c0:	463b      	mov	r3, r7
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	621a      	str	r2, [r3, #32]
 80088c6:	e008      	b.n	80088da <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 80088c8:	463b      	mov	r3, r7
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	6a1b      	ldr	r3, [r3, #32]
 80088ce:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80088d2:	463b      	mov	r3, r7
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	2200      	movs	r2, #0
 80088d8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80088da:	463b      	mov	r3, r7
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	785b      	ldrb	r3, [r3, #1]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d17a      	bne.n	80089da <USB_EPStartXfer+0x404>
 80088e4:	f107 0318 	add.w	r3, r7, #24
 80088e8:	1d3a      	adds	r2, r7, #4
 80088ea:	6812      	ldr	r2, [r2, #0]
 80088ec:	601a      	str	r2, [r3, #0]
 80088ee:	1d3b      	adds	r3, r7, #4
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80088f6:	b29b      	uxth	r3, r3
 80088f8:	4619      	mov	r1, r3
 80088fa:	f107 0318 	add.w	r3, r7, #24
 80088fe:	f107 0218 	add.w	r2, r7, #24
 8008902:	6812      	ldr	r2, [r2, #0]
 8008904:	440a      	add	r2, r1
 8008906:	601a      	str	r2, [r3, #0]
 8008908:	463b      	mov	r3, r7
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	781b      	ldrb	r3, [r3, #0]
 800890e:	00da      	lsls	r2, r3, #3
 8008910:	f107 0318 	add.w	r3, r7, #24
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	4413      	add	r3, r2
 8008918:	f203 4202 	addw	r2, r3, #1026	; 0x402
 800891c:	f107 0314 	add.w	r3, r7, #20
 8008920:	601a      	str	r2, [r3, #0]
 8008922:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008926:	2b00      	cmp	r3, #0
 8008928:	d11a      	bne.n	8008960 <USB_EPStartXfer+0x38a>
 800892a:	f107 0314 	add.w	r3, r7, #20
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	881b      	ldrh	r3, [r3, #0]
 8008932:	b29b      	uxth	r3, r3
 8008934:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008938:	b29a      	uxth	r2, r3
 800893a:	f107 0314 	add.w	r3, r7, #20
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	801a      	strh	r2, [r3, #0]
 8008942:	f107 0314 	add.w	r3, r7, #20
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	881b      	ldrh	r3, [r3, #0]
 800894a:	b29b      	uxth	r3, r3
 800894c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008950:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008954:	b29a      	uxth	r2, r3
 8008956:	f107 0314 	add.w	r3, r7, #20
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	801a      	strh	r2, [r3, #0]
 800895e:	e067      	b.n	8008a30 <USB_EPStartXfer+0x45a>
 8008960:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008964:	2b3e      	cmp	r3, #62	; 0x3e
 8008966:	d819      	bhi.n	800899c <USB_EPStartXfer+0x3c6>
 8008968:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800896c:	085b      	lsrs	r3, r3, #1
 800896e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008972:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008976:	f003 0301 	and.w	r3, r3, #1
 800897a:	2b00      	cmp	r3, #0
 800897c:	d004      	beq.n	8008988 <USB_EPStartXfer+0x3b2>
 800897e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008982:	3301      	adds	r3, #1
 8008984:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008988:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800898c:	b29b      	uxth	r3, r3
 800898e:	029b      	lsls	r3, r3, #10
 8008990:	b29a      	uxth	r2, r3
 8008992:	f107 0314 	add.w	r3, r7, #20
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	801a      	strh	r2, [r3, #0]
 800899a:	e049      	b.n	8008a30 <USB_EPStartXfer+0x45a>
 800899c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089a0:	095b      	lsrs	r3, r3, #5
 80089a2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80089a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089aa:	f003 031f 	and.w	r3, r3, #31
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d104      	bne.n	80089bc <USB_EPStartXfer+0x3e6>
 80089b2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80089b6:	3b01      	subs	r3, #1
 80089b8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80089bc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80089c0:	b29b      	uxth	r3, r3
 80089c2:	029b      	lsls	r3, r3, #10
 80089c4:	b29b      	uxth	r3, r3
 80089c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80089ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80089ce:	b29a      	uxth	r2, r3
 80089d0:	f107 0314 	add.w	r3, r7, #20
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	801a      	strh	r2, [r3, #0]
 80089d8:	e02a      	b.n	8008a30 <USB_EPStartXfer+0x45a>
 80089da:	463b      	mov	r3, r7
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	785b      	ldrb	r3, [r3, #1]
 80089e0:	2b01      	cmp	r3, #1
 80089e2:	d125      	bne.n	8008a30 <USB_EPStartXfer+0x45a>
 80089e4:	f107 0320 	add.w	r3, r7, #32
 80089e8:	1d3a      	adds	r2, r7, #4
 80089ea:	6812      	ldr	r2, [r2, #0]
 80089ec:	601a      	str	r2, [r3, #0]
 80089ee:	1d3b      	adds	r3, r7, #4
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80089f6:	b29b      	uxth	r3, r3
 80089f8:	4619      	mov	r1, r3
 80089fa:	f107 0320 	add.w	r3, r7, #32
 80089fe:	f107 0220 	add.w	r2, r7, #32
 8008a02:	6812      	ldr	r2, [r2, #0]
 8008a04:	440a      	add	r2, r1
 8008a06:	601a      	str	r2, [r3, #0]
 8008a08:	463b      	mov	r3, r7
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	781b      	ldrb	r3, [r3, #0]
 8008a0e:	00da      	lsls	r2, r3, #3
 8008a10:	f107 0320 	add.w	r3, r7, #32
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	4413      	add	r3, r2
 8008a18:	f203 4202 	addw	r2, r3, #1026	; 0x402
 8008a1c:	f107 031c 	add.w	r3, r7, #28
 8008a20:	601a      	str	r2, [r3, #0]
 8008a22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a26:	b29a      	uxth	r2, r3
 8008a28:	f107 031c 	add.w	r3, r7, #28
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008a30:	463b      	mov	r3, r7
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	891b      	ldrh	r3, [r3, #8]
 8008a36:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008a3a:	463b      	mov	r3, r7
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	6959      	ldr	r1, [r3, #20]
 8008a40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a44:	b29b      	uxth	r3, r3
 8008a46:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008a4a:	1d38      	adds	r0, r7, #4
 8008a4c:	6800      	ldr	r0, [r0, #0]
 8008a4e:	f001 fa14 	bl	8009e7a <USB_WritePMA>
 8008a52:	f000 bcc6 	b.w	80093e2 <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008a56:	463b      	mov	r3, r7
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	785b      	ldrb	r3, [r3, #1]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d164      	bne.n	8008b2a <USB_EPStartXfer+0x554>
 8008a60:	1d3b      	adds	r3, r7, #4
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	64bb      	str	r3, [r7, #72]	; 0x48
 8008a66:	1d3b      	adds	r3, r7, #4
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a6e:	b29b      	uxth	r3, r3
 8008a70:	461a      	mov	r2, r3
 8008a72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a74:	4413      	add	r3, r2
 8008a76:	64bb      	str	r3, [r7, #72]	; 0x48
 8008a78:	463b      	mov	r3, r7
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	781b      	ldrb	r3, [r3, #0]
 8008a7e:	00da      	lsls	r2, r3, #3
 8008a80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a82:	4413      	add	r3, r2
 8008a84:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008a88:	647b      	str	r3, [r7, #68]	; 0x44
 8008a8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d112      	bne.n	8008ab8 <USB_EPStartXfer+0x4e2>
 8008a92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a94:	881b      	ldrh	r3, [r3, #0]
 8008a96:	b29b      	uxth	r3, r3
 8008a98:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008a9c:	b29a      	uxth	r2, r3
 8008a9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008aa0:	801a      	strh	r2, [r3, #0]
 8008aa2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008aa4:	881b      	ldrh	r3, [r3, #0]
 8008aa6:	b29b      	uxth	r3, r3
 8008aa8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008aac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ab0:	b29a      	uxth	r2, r3
 8008ab2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ab4:	801a      	strh	r2, [r3, #0]
 8008ab6:	e057      	b.n	8008b68 <USB_EPStartXfer+0x592>
 8008ab8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008abc:	2b3e      	cmp	r3, #62	; 0x3e
 8008abe:	d817      	bhi.n	8008af0 <USB_EPStartXfer+0x51a>
 8008ac0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ac4:	085b      	lsrs	r3, r3, #1
 8008ac6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8008aca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ace:	f003 0301 	and.w	r3, r3, #1
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d004      	beq.n	8008ae0 <USB_EPStartXfer+0x50a>
 8008ad6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008ada:	3301      	adds	r3, #1
 8008adc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8008ae0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008ae4:	b29b      	uxth	r3, r3
 8008ae6:	029b      	lsls	r3, r3, #10
 8008ae8:	b29a      	uxth	r2, r3
 8008aea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008aec:	801a      	strh	r2, [r3, #0]
 8008aee:	e03b      	b.n	8008b68 <USB_EPStartXfer+0x592>
 8008af0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008af4:	095b      	lsrs	r3, r3, #5
 8008af6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8008afa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008afe:	f003 031f 	and.w	r3, r3, #31
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d104      	bne.n	8008b10 <USB_EPStartXfer+0x53a>
 8008b06:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008b0a:	3b01      	subs	r3, #1
 8008b0c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8008b10:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008b14:	b29b      	uxth	r3, r3
 8008b16:	029b      	lsls	r3, r3, #10
 8008b18:	b29b      	uxth	r3, r3
 8008b1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b22:	b29a      	uxth	r2, r3
 8008b24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b26:	801a      	strh	r2, [r3, #0]
 8008b28:	e01e      	b.n	8008b68 <USB_EPStartXfer+0x592>
 8008b2a:	463b      	mov	r3, r7
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	785b      	ldrb	r3, [r3, #1]
 8008b30:	2b01      	cmp	r3, #1
 8008b32:	d119      	bne.n	8008b68 <USB_EPStartXfer+0x592>
 8008b34:	1d3b      	adds	r3, r7, #4
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	653b      	str	r3, [r7, #80]	; 0x50
 8008b3a:	1d3b      	adds	r3, r7, #4
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b42:	b29b      	uxth	r3, r3
 8008b44:	461a      	mov	r2, r3
 8008b46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b48:	4413      	add	r3, r2
 8008b4a:	653b      	str	r3, [r7, #80]	; 0x50
 8008b4c:	463b      	mov	r3, r7
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	781b      	ldrb	r3, [r3, #0]
 8008b52:	00da      	lsls	r2, r3, #3
 8008b54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b56:	4413      	add	r3, r2
 8008b58:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008b5c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008b5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b62:	b29a      	uxth	r2, r3
 8008b64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b66:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008b68:	463b      	mov	r3, r7
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	891b      	ldrh	r3, [r3, #8]
 8008b6e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008b72:	463b      	mov	r3, r7
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	6959      	ldr	r1, [r3, #20]
 8008b78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b7c:	b29b      	uxth	r3, r3
 8008b7e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008b82:	1d38      	adds	r0, r7, #4
 8008b84:	6800      	ldr	r0, [r0, #0]
 8008b86:	f001 f978 	bl	8009e7a <USB_WritePMA>
            ep->xfer_buff += len;
 8008b8a:	463b      	mov	r3, r7
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	695a      	ldr	r2, [r3, #20]
 8008b90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b94:	441a      	add	r2, r3
 8008b96:	463b      	mov	r3, r7
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008b9c:	463b      	mov	r3, r7
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	6a1a      	ldr	r2, [r3, #32]
 8008ba2:	463b      	mov	r3, r7
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	691b      	ldr	r3, [r3, #16]
 8008ba8:	429a      	cmp	r2, r3
 8008baa:	d909      	bls.n	8008bc0 <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 8008bac:	463b      	mov	r3, r7
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	6a1a      	ldr	r2, [r3, #32]
 8008bb2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008bb6:	1ad2      	subs	r2, r2, r3
 8008bb8:	463b      	mov	r3, r7
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	621a      	str	r2, [r3, #32]
 8008bbe:	e008      	b.n	8008bd2 <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 8008bc0:	463b      	mov	r3, r7
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	6a1b      	ldr	r3, [r3, #32]
 8008bc6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8008bca:	463b      	mov	r3, r7
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	2200      	movs	r2, #0
 8008bd0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008bd2:	1d3b      	adds	r3, r7, #4
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	643b      	str	r3, [r7, #64]	; 0x40
 8008bd8:	463b      	mov	r3, r7
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	785b      	ldrb	r3, [r3, #1]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d164      	bne.n	8008cac <USB_EPStartXfer+0x6d6>
 8008be2:	1d3b      	adds	r3, r7, #4
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	63bb      	str	r3, [r7, #56]	; 0x38
 8008be8:	1d3b      	adds	r3, r7, #4
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008bf0:	b29b      	uxth	r3, r3
 8008bf2:	461a      	mov	r2, r3
 8008bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bf6:	4413      	add	r3, r2
 8008bf8:	63bb      	str	r3, [r7, #56]	; 0x38
 8008bfa:	463b      	mov	r3, r7
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	781b      	ldrb	r3, [r3, #0]
 8008c00:	00da      	lsls	r2, r3, #3
 8008c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c04:	4413      	add	r3, r2
 8008c06:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008c0a:	637b      	str	r3, [r7, #52]	; 0x34
 8008c0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d112      	bne.n	8008c3a <USB_EPStartXfer+0x664>
 8008c14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c16:	881b      	ldrh	r3, [r3, #0]
 8008c18:	b29b      	uxth	r3, r3
 8008c1a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008c1e:	b29a      	uxth	r2, r3
 8008c20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c22:	801a      	strh	r2, [r3, #0]
 8008c24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c26:	881b      	ldrh	r3, [r3, #0]
 8008c28:	b29b      	uxth	r3, r3
 8008c2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c32:	b29a      	uxth	r2, r3
 8008c34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c36:	801a      	strh	r2, [r3, #0]
 8008c38:	e054      	b.n	8008ce4 <USB_EPStartXfer+0x70e>
 8008c3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c3e:	2b3e      	cmp	r3, #62	; 0x3e
 8008c40:	d817      	bhi.n	8008c72 <USB_EPStartXfer+0x69c>
 8008c42:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c46:	085b      	lsrs	r3, r3, #1
 8008c48:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8008c4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c50:	f003 0301 	and.w	r3, r3, #1
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d004      	beq.n	8008c62 <USB_EPStartXfer+0x68c>
 8008c58:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008c5c:	3301      	adds	r3, #1
 8008c5e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8008c62:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008c66:	b29b      	uxth	r3, r3
 8008c68:	029b      	lsls	r3, r3, #10
 8008c6a:	b29a      	uxth	r2, r3
 8008c6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c6e:	801a      	strh	r2, [r3, #0]
 8008c70:	e038      	b.n	8008ce4 <USB_EPStartXfer+0x70e>
 8008c72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c76:	095b      	lsrs	r3, r3, #5
 8008c78:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8008c7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c80:	f003 031f 	and.w	r3, r3, #31
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d104      	bne.n	8008c92 <USB_EPStartXfer+0x6bc>
 8008c88:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008c8c:	3b01      	subs	r3, #1
 8008c8e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8008c92:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008c96:	b29b      	uxth	r3, r3
 8008c98:	029b      	lsls	r3, r3, #10
 8008c9a:	b29b      	uxth	r3, r3
 8008c9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ca0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ca4:	b29a      	uxth	r2, r3
 8008ca6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ca8:	801a      	strh	r2, [r3, #0]
 8008caa:	e01b      	b.n	8008ce4 <USB_EPStartXfer+0x70e>
 8008cac:	463b      	mov	r3, r7
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	785b      	ldrb	r3, [r3, #1]
 8008cb2:	2b01      	cmp	r3, #1
 8008cb4:	d116      	bne.n	8008ce4 <USB_EPStartXfer+0x70e>
 8008cb6:	1d3b      	adds	r3, r7, #4
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008cbe:	b29b      	uxth	r3, r3
 8008cc0:	461a      	mov	r2, r3
 8008cc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008cc4:	4413      	add	r3, r2
 8008cc6:	643b      	str	r3, [r7, #64]	; 0x40
 8008cc8:	463b      	mov	r3, r7
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	781b      	ldrb	r3, [r3, #0]
 8008cce:	00da      	lsls	r2, r3, #3
 8008cd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008cd2:	4413      	add	r3, r2
 8008cd4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008cd8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008cda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008cde:	b29a      	uxth	r2, r3
 8008ce0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ce2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008ce4:	463b      	mov	r3, r7
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	895b      	ldrh	r3, [r3, #10]
 8008cea:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008cee:	463b      	mov	r3, r7
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	6959      	ldr	r1, [r3, #20]
 8008cf4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008cf8:	b29b      	uxth	r3, r3
 8008cfa:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008cfe:	1d38      	adds	r0, r7, #4
 8008d00:	6800      	ldr	r0, [r0, #0]
 8008d02:	f001 f8ba 	bl	8009e7a <USB_WritePMA>
 8008d06:	e36c      	b.n	80093e2 <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8008d08:	463b      	mov	r3, r7
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	6a1b      	ldr	r3, [r3, #32]
 8008d0e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8008d12:	1d3b      	adds	r3, r7, #4
 8008d14:	681a      	ldr	r2, [r3, #0]
 8008d16:	463b      	mov	r3, r7
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	781b      	ldrb	r3, [r3, #0]
 8008d1c:	009b      	lsls	r3, r3, #2
 8008d1e:	4413      	add	r3, r2
 8008d20:	881b      	ldrh	r3, [r3, #0]
 8008d22:	b29b      	uxth	r3, r3
 8008d24:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8008d28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d2c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8008d30:	1d3b      	adds	r3, r7, #4
 8008d32:	681a      	ldr	r2, [r3, #0]
 8008d34:	463b      	mov	r3, r7
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	781b      	ldrb	r3, [r3, #0]
 8008d3a:	009b      	lsls	r3, r3, #2
 8008d3c:	441a      	add	r2, r3
 8008d3e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8008d42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d52:	b29b      	uxth	r3, r3
 8008d54:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008d56:	1d3b      	adds	r3, r7, #4
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008d5c:	1d3b      	adds	r3, r7, #4
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d64:	b29b      	uxth	r3, r3
 8008d66:	461a      	mov	r2, r3
 8008d68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008d6a:	4413      	add	r3, r2
 8008d6c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008d6e:	463b      	mov	r3, r7
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	781b      	ldrb	r3, [r3, #0]
 8008d74:	00da      	lsls	r2, r3, #3
 8008d76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008d78:	4413      	add	r3, r2
 8008d7a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008d7e:	65bb      	str	r3, [r7, #88]	; 0x58
 8008d80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d84:	b29a      	uxth	r2, r3
 8008d86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008d88:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008d8a:	463b      	mov	r3, r7
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	891b      	ldrh	r3, [r3, #8]
 8008d90:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008d94:	463b      	mov	r3, r7
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	6959      	ldr	r1, [r3, #20]
 8008d9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d9e:	b29b      	uxth	r3, r3
 8008da0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008da4:	1d38      	adds	r0, r7, #4
 8008da6:	6800      	ldr	r0, [r0, #0]
 8008da8:	f001 f867 	bl	8009e7a <USB_WritePMA>
 8008dac:	e319      	b.n	80093e2 <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8008dae:	1d3b      	adds	r3, r7, #4
 8008db0:	681a      	ldr	r2, [r3, #0]
 8008db2:	463b      	mov	r3, r7
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	781b      	ldrb	r3, [r3, #0]
 8008db8:	009b      	lsls	r3, r3, #2
 8008dba:	4413      	add	r3, r2
 8008dbc:	881b      	ldrh	r3, [r3, #0]
 8008dbe:	b29b      	uxth	r3, r3
 8008dc0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008dc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008dc8:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8008dcc:	1d3b      	adds	r3, r7, #4
 8008dce:	681a      	ldr	r2, [r3, #0]
 8008dd0:	463b      	mov	r3, r7
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	781b      	ldrb	r3, [r3, #0]
 8008dd6:	009b      	lsls	r3, r3, #2
 8008dd8:	441a      	add	r2, r3
 8008dda:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8008dde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008de2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008de6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008dea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008dee:	b29b      	uxth	r3, r3
 8008df0:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8008df2:	463b      	mov	r3, r7
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	6a1a      	ldr	r2, [r3, #32]
 8008df8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008dfc:	1ad2      	subs	r2, r2, r3
 8008dfe:	463b      	mov	r3, r7
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008e04:	1d3b      	adds	r3, r7, #4
 8008e06:	681a      	ldr	r2, [r3, #0]
 8008e08:	463b      	mov	r3, r7
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	781b      	ldrb	r3, [r3, #0]
 8008e0e:	009b      	lsls	r3, r3, #2
 8008e10:	4413      	add	r3, r2
 8008e12:	881b      	ldrh	r3, [r3, #0]
 8008e14:	b29b      	uxth	r3, r3
 8008e16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	f000 8162 	beq.w	80090e4 <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008e20:	1d3b      	adds	r3, r7, #4
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008e28:	463b      	mov	r3, r7
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	785b      	ldrb	r3, [r3, #1]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d164      	bne.n	8008efc <USB_EPStartXfer+0x926>
 8008e32:	1d3b      	adds	r3, r7, #4
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	67bb      	str	r3, [r7, #120]	; 0x78
 8008e38:	1d3b      	adds	r3, r7, #4
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e40:	b29b      	uxth	r3, r3
 8008e42:	461a      	mov	r2, r3
 8008e44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008e46:	4413      	add	r3, r2
 8008e48:	67bb      	str	r3, [r7, #120]	; 0x78
 8008e4a:	463b      	mov	r3, r7
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	781b      	ldrb	r3, [r3, #0]
 8008e50:	00da      	lsls	r2, r3, #3
 8008e52:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008e54:	4413      	add	r3, r2
 8008e56:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008e5a:	677b      	str	r3, [r7, #116]	; 0x74
 8008e5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d112      	bne.n	8008e8a <USB_EPStartXfer+0x8b4>
 8008e64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008e66:	881b      	ldrh	r3, [r3, #0]
 8008e68:	b29b      	uxth	r3, r3
 8008e6a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008e6e:	b29a      	uxth	r2, r3
 8008e70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008e72:	801a      	strh	r2, [r3, #0]
 8008e74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008e76:	881b      	ldrh	r3, [r3, #0]
 8008e78:	b29b      	uxth	r3, r3
 8008e7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e82:	b29a      	uxth	r2, r3
 8008e84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008e86:	801a      	strh	r2, [r3, #0]
 8008e88:	e057      	b.n	8008f3a <USB_EPStartXfer+0x964>
 8008e8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e8e:	2b3e      	cmp	r3, #62	; 0x3e
 8008e90:	d817      	bhi.n	8008ec2 <USB_EPStartXfer+0x8ec>
 8008e92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e96:	085b      	lsrs	r3, r3, #1
 8008e98:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008e9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ea0:	f003 0301 	and.w	r3, r3, #1
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d004      	beq.n	8008eb2 <USB_EPStartXfer+0x8dc>
 8008ea8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008eac:	3301      	adds	r3, #1
 8008eae:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008eb2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008eb6:	b29b      	uxth	r3, r3
 8008eb8:	029b      	lsls	r3, r3, #10
 8008eba:	b29a      	uxth	r2, r3
 8008ebc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008ebe:	801a      	strh	r2, [r3, #0]
 8008ec0:	e03b      	b.n	8008f3a <USB_EPStartXfer+0x964>
 8008ec2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ec6:	095b      	lsrs	r3, r3, #5
 8008ec8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008ecc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ed0:	f003 031f 	and.w	r3, r3, #31
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d104      	bne.n	8008ee2 <USB_EPStartXfer+0x90c>
 8008ed8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008edc:	3b01      	subs	r3, #1
 8008ede:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008ee2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008ee6:	b29b      	uxth	r3, r3
 8008ee8:	029b      	lsls	r3, r3, #10
 8008eea:	b29b      	uxth	r3, r3
 8008eec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ef0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ef4:	b29a      	uxth	r2, r3
 8008ef6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008ef8:	801a      	strh	r2, [r3, #0]
 8008efa:	e01e      	b.n	8008f3a <USB_EPStartXfer+0x964>
 8008efc:	463b      	mov	r3, r7
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	785b      	ldrb	r3, [r3, #1]
 8008f02:	2b01      	cmp	r3, #1
 8008f04:	d119      	bne.n	8008f3a <USB_EPStartXfer+0x964>
 8008f06:	1d3b      	adds	r3, r7, #4
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f0e:	b29b      	uxth	r3, r3
 8008f10:	461a      	mov	r2, r3
 8008f12:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008f16:	4413      	add	r3, r2
 8008f18:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008f1c:	463b      	mov	r3, r7
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	781b      	ldrb	r3, [r3, #0]
 8008f22:	00da      	lsls	r2, r3, #3
 8008f24:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008f28:	4413      	add	r3, r2
 8008f2a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008f2e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008f30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f34:	b29a      	uxth	r2, r3
 8008f36:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008f38:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8008f3a:	463b      	mov	r3, r7
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	895b      	ldrh	r3, [r3, #10]
 8008f40:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008f44:	463b      	mov	r3, r7
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	6959      	ldr	r1, [r3, #20]
 8008f4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f4e:	b29b      	uxth	r3, r3
 8008f50:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008f54:	1d38      	adds	r0, r7, #4
 8008f56:	6800      	ldr	r0, [r0, #0]
 8008f58:	f000 ff8f 	bl	8009e7a <USB_WritePMA>
          ep->xfer_buff += len;
 8008f5c:	463b      	mov	r3, r7
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	695a      	ldr	r2, [r3, #20]
 8008f62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f66:	441a      	add	r2, r3
 8008f68:	463b      	mov	r3, r7
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8008f6e:	463b      	mov	r3, r7
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	6a1a      	ldr	r2, [r3, #32]
 8008f74:	463b      	mov	r3, r7
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	691b      	ldr	r3, [r3, #16]
 8008f7a:	429a      	cmp	r2, r3
 8008f7c:	d909      	bls.n	8008f92 <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 8008f7e:	463b      	mov	r3, r7
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	6a1a      	ldr	r2, [r3, #32]
 8008f84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f88:	1ad2      	subs	r2, r2, r3
 8008f8a:	463b      	mov	r3, r7
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	621a      	str	r2, [r3, #32]
 8008f90:	e008      	b.n	8008fa4 <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 8008f92:	463b      	mov	r3, r7
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	6a1b      	ldr	r3, [r3, #32]
 8008f98:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8008f9c:	463b      	mov	r3, r7
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8008fa4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	f000 821a 	beq.w	80093e2 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008fae:	463b      	mov	r3, r7
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	785b      	ldrb	r3, [r3, #1]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d164      	bne.n	8009082 <USB_EPStartXfer+0xaac>
 8008fb8:	1d3b      	adds	r3, r7, #4
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	66bb      	str	r3, [r7, #104]	; 0x68
 8008fbe:	1d3b      	adds	r3, r7, #4
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008fc6:	b29b      	uxth	r3, r3
 8008fc8:	461a      	mov	r2, r3
 8008fca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008fcc:	4413      	add	r3, r2
 8008fce:	66bb      	str	r3, [r7, #104]	; 0x68
 8008fd0:	463b      	mov	r3, r7
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	781b      	ldrb	r3, [r3, #0]
 8008fd6:	00da      	lsls	r2, r3, #3
 8008fd8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008fda:	4413      	add	r3, r2
 8008fdc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008fe0:	667b      	str	r3, [r7, #100]	; 0x64
 8008fe2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d112      	bne.n	8009010 <USB_EPStartXfer+0xa3a>
 8008fea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008fec:	881b      	ldrh	r3, [r3, #0]
 8008fee:	b29b      	uxth	r3, r3
 8008ff0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008ff4:	b29a      	uxth	r2, r3
 8008ff6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008ff8:	801a      	strh	r2, [r3, #0]
 8008ffa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008ffc:	881b      	ldrh	r3, [r3, #0]
 8008ffe:	b29b      	uxth	r3, r3
 8009000:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009004:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009008:	b29a      	uxth	r2, r3
 800900a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800900c:	801a      	strh	r2, [r3, #0]
 800900e:	e057      	b.n	80090c0 <USB_EPStartXfer+0xaea>
 8009010:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009014:	2b3e      	cmp	r3, #62	; 0x3e
 8009016:	d817      	bhi.n	8009048 <USB_EPStartXfer+0xa72>
 8009018:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800901c:	085b      	lsrs	r3, r3, #1
 800901e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8009022:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009026:	f003 0301 	and.w	r3, r3, #1
 800902a:	2b00      	cmp	r3, #0
 800902c:	d004      	beq.n	8009038 <USB_EPStartXfer+0xa62>
 800902e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009032:	3301      	adds	r3, #1
 8009034:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8009038:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800903c:	b29b      	uxth	r3, r3
 800903e:	029b      	lsls	r3, r3, #10
 8009040:	b29a      	uxth	r2, r3
 8009042:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009044:	801a      	strh	r2, [r3, #0]
 8009046:	e03b      	b.n	80090c0 <USB_EPStartXfer+0xaea>
 8009048:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800904c:	095b      	lsrs	r3, r3, #5
 800904e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8009052:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009056:	f003 031f 	and.w	r3, r3, #31
 800905a:	2b00      	cmp	r3, #0
 800905c:	d104      	bne.n	8009068 <USB_EPStartXfer+0xa92>
 800905e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009062:	3b01      	subs	r3, #1
 8009064:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8009068:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800906c:	b29b      	uxth	r3, r3
 800906e:	029b      	lsls	r3, r3, #10
 8009070:	b29b      	uxth	r3, r3
 8009072:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009076:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800907a:	b29a      	uxth	r2, r3
 800907c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800907e:	801a      	strh	r2, [r3, #0]
 8009080:	e01e      	b.n	80090c0 <USB_EPStartXfer+0xaea>
 8009082:	463b      	mov	r3, r7
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	785b      	ldrb	r3, [r3, #1]
 8009088:	2b01      	cmp	r3, #1
 800908a:	d119      	bne.n	80090c0 <USB_EPStartXfer+0xaea>
 800908c:	1d3b      	adds	r3, r7, #4
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	673b      	str	r3, [r7, #112]	; 0x70
 8009092:	1d3b      	adds	r3, r7, #4
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800909a:	b29b      	uxth	r3, r3
 800909c:	461a      	mov	r2, r3
 800909e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80090a0:	4413      	add	r3, r2
 80090a2:	673b      	str	r3, [r7, #112]	; 0x70
 80090a4:	463b      	mov	r3, r7
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	781b      	ldrb	r3, [r3, #0]
 80090aa:	00da      	lsls	r2, r3, #3
 80090ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80090ae:	4413      	add	r3, r2
 80090b0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80090b4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80090b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80090ba:	b29a      	uxth	r2, r3
 80090bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80090be:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80090c0:	463b      	mov	r3, r7
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	891b      	ldrh	r3, [r3, #8]
 80090c6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80090ca:	463b      	mov	r3, r7
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	6959      	ldr	r1, [r3, #20]
 80090d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80090d4:	b29b      	uxth	r3, r3
 80090d6:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80090da:	1d38      	adds	r0, r7, #4
 80090dc:	6800      	ldr	r0, [r0, #0]
 80090de:	f000 fecc 	bl	8009e7a <USB_WritePMA>
 80090e2:	e17e      	b.n	80093e2 <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80090e4:	463b      	mov	r3, r7
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	785b      	ldrb	r3, [r3, #1]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d16f      	bne.n	80091ce <USB_EPStartXfer+0xbf8>
 80090ee:	1d3b      	adds	r3, r7, #4
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80090f6:	1d3b      	adds	r3, r7, #4
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80090fe:	b29b      	uxth	r3, r3
 8009100:	461a      	mov	r2, r3
 8009102:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009106:	4413      	add	r3, r2
 8009108:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800910c:	463b      	mov	r3, r7
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	781b      	ldrb	r3, [r3, #0]
 8009112:	00da      	lsls	r2, r3, #3
 8009114:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009118:	4413      	add	r3, r2
 800911a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800911e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009122:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009126:	2b00      	cmp	r3, #0
 8009128:	d116      	bne.n	8009158 <USB_EPStartXfer+0xb82>
 800912a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800912e:	881b      	ldrh	r3, [r3, #0]
 8009130:	b29b      	uxth	r3, r3
 8009132:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009136:	b29a      	uxth	r2, r3
 8009138:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800913c:	801a      	strh	r2, [r3, #0]
 800913e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009142:	881b      	ldrh	r3, [r3, #0]
 8009144:	b29b      	uxth	r3, r3
 8009146:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800914a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800914e:	b29a      	uxth	r2, r3
 8009150:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009154:	801a      	strh	r2, [r3, #0]
 8009156:	e05f      	b.n	8009218 <USB_EPStartXfer+0xc42>
 8009158:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800915c:	2b3e      	cmp	r3, #62	; 0x3e
 800915e:	d818      	bhi.n	8009192 <USB_EPStartXfer+0xbbc>
 8009160:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009164:	085b      	lsrs	r3, r3, #1
 8009166:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800916a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800916e:	f003 0301 	and.w	r3, r3, #1
 8009172:	2b00      	cmp	r3, #0
 8009174:	d004      	beq.n	8009180 <USB_EPStartXfer+0xbaa>
 8009176:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800917a:	3301      	adds	r3, #1
 800917c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8009180:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8009184:	b29b      	uxth	r3, r3
 8009186:	029b      	lsls	r3, r3, #10
 8009188:	b29a      	uxth	r2, r3
 800918a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800918e:	801a      	strh	r2, [r3, #0]
 8009190:	e042      	b.n	8009218 <USB_EPStartXfer+0xc42>
 8009192:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009196:	095b      	lsrs	r3, r3, #5
 8009198:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800919c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80091a0:	f003 031f 	and.w	r3, r3, #31
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d104      	bne.n	80091b2 <USB_EPStartXfer+0xbdc>
 80091a8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80091ac:	3b01      	subs	r3, #1
 80091ae:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80091b2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80091b6:	b29b      	uxth	r3, r3
 80091b8:	029b      	lsls	r3, r3, #10
 80091ba:	b29b      	uxth	r3, r3
 80091bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80091c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80091c4:	b29a      	uxth	r2, r3
 80091c6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80091ca:	801a      	strh	r2, [r3, #0]
 80091cc:	e024      	b.n	8009218 <USB_EPStartXfer+0xc42>
 80091ce:	463b      	mov	r3, r7
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	785b      	ldrb	r3, [r3, #1]
 80091d4:	2b01      	cmp	r3, #1
 80091d6:	d11f      	bne.n	8009218 <USB_EPStartXfer+0xc42>
 80091d8:	1d3b      	adds	r3, r7, #4
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80091e0:	1d3b      	adds	r3, r7, #4
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80091e8:	b29b      	uxth	r3, r3
 80091ea:	461a      	mov	r2, r3
 80091ec:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80091f0:	4413      	add	r3, r2
 80091f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80091f6:	463b      	mov	r3, r7
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	781b      	ldrb	r3, [r3, #0]
 80091fc:	00da      	lsls	r2, r3, #3
 80091fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009202:	4413      	add	r3, r2
 8009204:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009208:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800920c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009210:	b29a      	uxth	r2, r3
 8009212:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009216:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009218:	463b      	mov	r3, r7
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	891b      	ldrh	r3, [r3, #8]
 800921e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009222:	463b      	mov	r3, r7
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	6959      	ldr	r1, [r3, #20]
 8009228:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800922c:	b29b      	uxth	r3, r3
 800922e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009232:	1d38      	adds	r0, r7, #4
 8009234:	6800      	ldr	r0, [r0, #0]
 8009236:	f000 fe20 	bl	8009e7a <USB_WritePMA>
          ep->xfer_buff += len;
 800923a:	463b      	mov	r3, r7
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	695a      	ldr	r2, [r3, #20]
 8009240:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009244:	441a      	add	r2, r3
 8009246:	463b      	mov	r3, r7
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800924c:	463b      	mov	r3, r7
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	6a1a      	ldr	r2, [r3, #32]
 8009252:	463b      	mov	r3, r7
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	691b      	ldr	r3, [r3, #16]
 8009258:	429a      	cmp	r2, r3
 800925a:	d909      	bls.n	8009270 <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 800925c:	463b      	mov	r3, r7
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	6a1a      	ldr	r2, [r3, #32]
 8009262:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009266:	1ad2      	subs	r2, r2, r3
 8009268:	463b      	mov	r3, r7
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	621a      	str	r2, [r3, #32]
 800926e:	e008      	b.n	8009282 <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 8009270:	463b      	mov	r3, r7
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	6a1b      	ldr	r3, [r3, #32]
 8009276:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800927a:	463b      	mov	r3, r7
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	2200      	movs	r2, #0
 8009280:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8009282:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009286:	2b00      	cmp	r3, #0
 8009288:	f000 80ab 	beq.w	80093e2 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800928c:	1d3b      	adds	r3, r7, #4
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009294:	463b      	mov	r3, r7
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	785b      	ldrb	r3, [r3, #1]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d16f      	bne.n	800937e <USB_EPStartXfer+0xda8>
 800929e:	1d3b      	adds	r3, r7, #4
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80092a6:	1d3b      	adds	r3, r7, #4
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80092ae:	b29b      	uxth	r3, r3
 80092b0:	461a      	mov	r2, r3
 80092b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80092b6:	4413      	add	r3, r2
 80092b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80092bc:	463b      	mov	r3, r7
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	781b      	ldrb	r3, [r3, #0]
 80092c2:	00da      	lsls	r2, r3, #3
 80092c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80092c8:	4413      	add	r3, r2
 80092ca:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80092ce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80092d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d116      	bne.n	8009308 <USB_EPStartXfer+0xd32>
 80092da:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80092de:	881b      	ldrh	r3, [r3, #0]
 80092e0:	b29b      	uxth	r3, r3
 80092e2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80092e6:	b29a      	uxth	r2, r3
 80092e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80092ec:	801a      	strh	r2, [r3, #0]
 80092ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80092f2:	881b      	ldrh	r3, [r3, #0]
 80092f4:	b29b      	uxth	r3, r3
 80092f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80092fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80092fe:	b29a      	uxth	r2, r3
 8009300:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009304:	801a      	strh	r2, [r3, #0]
 8009306:	e05b      	b.n	80093c0 <USB_EPStartXfer+0xdea>
 8009308:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800930c:	2b3e      	cmp	r3, #62	; 0x3e
 800930e:	d818      	bhi.n	8009342 <USB_EPStartXfer+0xd6c>
 8009310:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009314:	085b      	lsrs	r3, r3, #1
 8009316:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800931a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800931e:	f003 0301 	and.w	r3, r3, #1
 8009322:	2b00      	cmp	r3, #0
 8009324:	d004      	beq.n	8009330 <USB_EPStartXfer+0xd5a>
 8009326:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800932a:	3301      	adds	r3, #1
 800932c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009330:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009334:	b29b      	uxth	r3, r3
 8009336:	029b      	lsls	r3, r3, #10
 8009338:	b29a      	uxth	r2, r3
 800933a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800933e:	801a      	strh	r2, [r3, #0]
 8009340:	e03e      	b.n	80093c0 <USB_EPStartXfer+0xdea>
 8009342:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009346:	095b      	lsrs	r3, r3, #5
 8009348:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800934c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009350:	f003 031f 	and.w	r3, r3, #31
 8009354:	2b00      	cmp	r3, #0
 8009356:	d104      	bne.n	8009362 <USB_EPStartXfer+0xd8c>
 8009358:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800935c:	3b01      	subs	r3, #1
 800935e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009362:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009366:	b29b      	uxth	r3, r3
 8009368:	029b      	lsls	r3, r3, #10
 800936a:	b29b      	uxth	r3, r3
 800936c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009370:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009374:	b29a      	uxth	r2, r3
 8009376:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800937a:	801a      	strh	r2, [r3, #0]
 800937c:	e020      	b.n	80093c0 <USB_EPStartXfer+0xdea>
 800937e:	463b      	mov	r3, r7
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	785b      	ldrb	r3, [r3, #1]
 8009384:	2b01      	cmp	r3, #1
 8009386:	d11b      	bne.n	80093c0 <USB_EPStartXfer+0xdea>
 8009388:	1d3b      	adds	r3, r7, #4
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009390:	b29b      	uxth	r3, r3
 8009392:	461a      	mov	r2, r3
 8009394:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009398:	4413      	add	r3, r2
 800939a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800939e:	463b      	mov	r3, r7
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	781b      	ldrb	r3, [r3, #0]
 80093a4:	00da      	lsls	r2, r3, #3
 80093a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80093aa:	4413      	add	r3, r2
 80093ac:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80093b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80093b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80093b8:	b29a      	uxth	r2, r3
 80093ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80093be:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80093c0:	463b      	mov	r3, r7
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	895b      	ldrh	r3, [r3, #10]
 80093c6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80093ca:	463b      	mov	r3, r7
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	6959      	ldr	r1, [r3, #20]
 80093d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80093d4:	b29b      	uxth	r3, r3
 80093d6:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80093da:	1d38      	adds	r0, r7, #4
 80093dc:	6800      	ldr	r0, [r0, #0]
 80093de:	f000 fd4c 	bl	8009e7a <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80093e2:	1d3b      	adds	r3, r7, #4
 80093e4:	681a      	ldr	r2, [r3, #0]
 80093e6:	463b      	mov	r3, r7
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	781b      	ldrb	r3, [r3, #0]
 80093ec:	009b      	lsls	r3, r3, #2
 80093ee:	4413      	add	r3, r2
 80093f0:	881b      	ldrh	r3, [r3, #0]
 80093f2:	b29b      	uxth	r3, r3
 80093f4:	f107 020a 	add.w	r2, r7, #10
 80093f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80093fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009400:	8013      	strh	r3, [r2, #0]
 8009402:	f107 030a 	add.w	r3, r7, #10
 8009406:	f107 020a 	add.w	r2, r7, #10
 800940a:	8812      	ldrh	r2, [r2, #0]
 800940c:	f082 0210 	eor.w	r2, r2, #16
 8009410:	801a      	strh	r2, [r3, #0]
 8009412:	f107 030a 	add.w	r3, r7, #10
 8009416:	f107 020a 	add.w	r2, r7, #10
 800941a:	8812      	ldrh	r2, [r2, #0]
 800941c:	f082 0220 	eor.w	r2, r2, #32
 8009420:	801a      	strh	r2, [r3, #0]
 8009422:	1d3b      	adds	r3, r7, #4
 8009424:	681a      	ldr	r2, [r3, #0]
 8009426:	463b      	mov	r3, r7
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	781b      	ldrb	r3, [r3, #0]
 800942c:	009b      	lsls	r3, r3, #2
 800942e:	441a      	add	r2, r3
 8009430:	f107 030a 	add.w	r3, r7, #10
 8009434:	881b      	ldrh	r3, [r3, #0]
 8009436:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800943a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800943e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009442:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009446:	b29b      	uxth	r3, r3
 8009448:	8013      	strh	r3, [r2, #0]
 800944a:	e3b5      	b.n	8009bb8 <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800944c:	463b      	mov	r3, r7
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	7b1b      	ldrb	r3, [r3, #12]
 8009452:	2b00      	cmp	r3, #0
 8009454:	f040 8090 	bne.w	8009578 <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8009458:	463b      	mov	r3, r7
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	699a      	ldr	r2, [r3, #24]
 800945e:	463b      	mov	r3, r7
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	691b      	ldr	r3, [r3, #16]
 8009464:	429a      	cmp	r2, r3
 8009466:	d90e      	bls.n	8009486 <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 8009468:	463b      	mov	r3, r7
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	691b      	ldr	r3, [r3, #16]
 800946e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8009472:	463b      	mov	r3, r7
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	699a      	ldr	r2, [r3, #24]
 8009478:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800947c:	1ad2      	subs	r2, r2, r3
 800947e:	463b      	mov	r3, r7
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	619a      	str	r2, [r3, #24]
 8009484:	e008      	b.n	8009498 <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 8009486:	463b      	mov	r3, r7
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	699b      	ldr	r3, [r3, #24]
 800948c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8009490:	463b      	mov	r3, r7
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	2200      	movs	r2, #0
 8009496:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8009498:	1d3b      	adds	r3, r7, #4
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80094a0:	1d3b      	adds	r3, r7, #4
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80094a8:	b29b      	uxth	r3, r3
 80094aa:	461a      	mov	r2, r3
 80094ac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80094b0:	4413      	add	r3, r2
 80094b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80094b6:	463b      	mov	r3, r7
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	781b      	ldrb	r3, [r3, #0]
 80094bc:	00da      	lsls	r2, r3, #3
 80094be:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80094c2:	4413      	add	r3, r2
 80094c4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80094c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80094cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d116      	bne.n	8009502 <USB_EPStartXfer+0xf2c>
 80094d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80094d8:	881b      	ldrh	r3, [r3, #0]
 80094da:	b29b      	uxth	r3, r3
 80094dc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80094e0:	b29a      	uxth	r2, r3
 80094e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80094e6:	801a      	strh	r2, [r3, #0]
 80094e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80094ec:	881b      	ldrh	r3, [r3, #0]
 80094ee:	b29b      	uxth	r3, r3
 80094f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80094f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80094f8:	b29a      	uxth	r2, r3
 80094fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80094fe:	801a      	strh	r2, [r3, #0]
 8009500:	e32c      	b.n	8009b5c <USB_EPStartXfer+0x1586>
 8009502:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009506:	2b3e      	cmp	r3, #62	; 0x3e
 8009508:	d818      	bhi.n	800953c <USB_EPStartXfer+0xf66>
 800950a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800950e:	085b      	lsrs	r3, r3, #1
 8009510:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009514:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009518:	f003 0301 	and.w	r3, r3, #1
 800951c:	2b00      	cmp	r3, #0
 800951e:	d004      	beq.n	800952a <USB_EPStartXfer+0xf54>
 8009520:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009524:	3301      	adds	r3, #1
 8009526:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800952a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800952e:	b29b      	uxth	r3, r3
 8009530:	029b      	lsls	r3, r3, #10
 8009532:	b29a      	uxth	r2, r3
 8009534:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009538:	801a      	strh	r2, [r3, #0]
 800953a:	e30f      	b.n	8009b5c <USB_EPStartXfer+0x1586>
 800953c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009540:	095b      	lsrs	r3, r3, #5
 8009542:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009546:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800954a:	f003 031f 	and.w	r3, r3, #31
 800954e:	2b00      	cmp	r3, #0
 8009550:	d104      	bne.n	800955c <USB_EPStartXfer+0xf86>
 8009552:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009556:	3b01      	subs	r3, #1
 8009558:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800955c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009560:	b29b      	uxth	r3, r3
 8009562:	029b      	lsls	r3, r3, #10
 8009564:	b29b      	uxth	r3, r3
 8009566:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800956a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800956e:	b29a      	uxth	r2, r3
 8009570:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009574:	801a      	strh	r2, [r3, #0]
 8009576:	e2f1      	b.n	8009b5c <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8009578:	463b      	mov	r3, r7
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	78db      	ldrb	r3, [r3, #3]
 800957e:	2b02      	cmp	r3, #2
 8009580:	f040 818f 	bne.w	80098a2 <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8009584:	463b      	mov	r3, r7
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	785b      	ldrb	r3, [r3, #1]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d175      	bne.n	800967a <USB_EPStartXfer+0x10a4>
 800958e:	1d3b      	adds	r3, r7, #4
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009596:	1d3b      	adds	r3, r7, #4
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800959e:	b29b      	uxth	r3, r3
 80095a0:	461a      	mov	r2, r3
 80095a2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80095a6:	4413      	add	r3, r2
 80095a8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80095ac:	463b      	mov	r3, r7
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	781b      	ldrb	r3, [r3, #0]
 80095b2:	00da      	lsls	r2, r3, #3
 80095b4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80095b8:	4413      	add	r3, r2
 80095ba:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80095be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80095c2:	463b      	mov	r3, r7
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	691b      	ldr	r3, [r3, #16]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d116      	bne.n	80095fa <USB_EPStartXfer+0x1024>
 80095cc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80095d0:	881b      	ldrh	r3, [r3, #0]
 80095d2:	b29b      	uxth	r3, r3
 80095d4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80095d8:	b29a      	uxth	r2, r3
 80095da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80095de:	801a      	strh	r2, [r3, #0]
 80095e0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80095e4:	881b      	ldrh	r3, [r3, #0]
 80095e6:	b29b      	uxth	r3, r3
 80095e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80095ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80095f0:	b29a      	uxth	r2, r3
 80095f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80095f6:	801a      	strh	r2, [r3, #0]
 80095f8:	e065      	b.n	80096c6 <USB_EPStartXfer+0x10f0>
 80095fa:	463b      	mov	r3, r7
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	691b      	ldr	r3, [r3, #16]
 8009600:	2b3e      	cmp	r3, #62	; 0x3e
 8009602:	d81a      	bhi.n	800963a <USB_EPStartXfer+0x1064>
 8009604:	463b      	mov	r3, r7
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	691b      	ldr	r3, [r3, #16]
 800960a:	085b      	lsrs	r3, r3, #1
 800960c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009610:	463b      	mov	r3, r7
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	691b      	ldr	r3, [r3, #16]
 8009616:	f003 0301 	and.w	r3, r3, #1
 800961a:	2b00      	cmp	r3, #0
 800961c:	d004      	beq.n	8009628 <USB_EPStartXfer+0x1052>
 800961e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009622:	3301      	adds	r3, #1
 8009624:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009628:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800962c:	b29b      	uxth	r3, r3
 800962e:	029b      	lsls	r3, r3, #10
 8009630:	b29a      	uxth	r2, r3
 8009632:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009636:	801a      	strh	r2, [r3, #0]
 8009638:	e045      	b.n	80096c6 <USB_EPStartXfer+0x10f0>
 800963a:	463b      	mov	r3, r7
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	691b      	ldr	r3, [r3, #16]
 8009640:	095b      	lsrs	r3, r3, #5
 8009642:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009646:	463b      	mov	r3, r7
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	691b      	ldr	r3, [r3, #16]
 800964c:	f003 031f 	and.w	r3, r3, #31
 8009650:	2b00      	cmp	r3, #0
 8009652:	d104      	bne.n	800965e <USB_EPStartXfer+0x1088>
 8009654:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009658:	3b01      	subs	r3, #1
 800965a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800965e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009662:	b29b      	uxth	r3, r3
 8009664:	029b      	lsls	r3, r3, #10
 8009666:	b29b      	uxth	r3, r3
 8009668:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800966c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009670:	b29a      	uxth	r2, r3
 8009672:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009676:	801a      	strh	r2, [r3, #0]
 8009678:	e025      	b.n	80096c6 <USB_EPStartXfer+0x10f0>
 800967a:	463b      	mov	r3, r7
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	785b      	ldrb	r3, [r3, #1]
 8009680:	2b01      	cmp	r3, #1
 8009682:	d120      	bne.n	80096c6 <USB_EPStartXfer+0x10f0>
 8009684:	1d3b      	adds	r3, r7, #4
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800968c:	1d3b      	adds	r3, r7, #4
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009694:	b29b      	uxth	r3, r3
 8009696:	461a      	mov	r2, r3
 8009698:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800969c:	4413      	add	r3, r2
 800969e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80096a2:	463b      	mov	r3, r7
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	781b      	ldrb	r3, [r3, #0]
 80096a8:	00da      	lsls	r2, r3, #3
 80096aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80096ae:	4413      	add	r3, r2
 80096b0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80096b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80096b8:	463b      	mov	r3, r7
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	691b      	ldr	r3, [r3, #16]
 80096be:	b29a      	uxth	r2, r3
 80096c0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80096c4:	801a      	strh	r2, [r3, #0]
 80096c6:	1d3b      	adds	r3, r7, #4
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80096ce:	463b      	mov	r3, r7
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	785b      	ldrb	r3, [r3, #1]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d175      	bne.n	80097c4 <USB_EPStartXfer+0x11ee>
 80096d8:	1d3b      	adds	r3, r7, #4
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80096e0:	1d3b      	adds	r3, r7, #4
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80096e8:	b29b      	uxth	r3, r3
 80096ea:	461a      	mov	r2, r3
 80096ec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80096f0:	4413      	add	r3, r2
 80096f2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80096f6:	463b      	mov	r3, r7
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	781b      	ldrb	r3, [r3, #0]
 80096fc:	00da      	lsls	r2, r3, #3
 80096fe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009702:	4413      	add	r3, r2
 8009704:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009708:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800970c:	463b      	mov	r3, r7
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	691b      	ldr	r3, [r3, #16]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d116      	bne.n	8009744 <USB_EPStartXfer+0x116e>
 8009716:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800971a:	881b      	ldrh	r3, [r3, #0]
 800971c:	b29b      	uxth	r3, r3
 800971e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009722:	b29a      	uxth	r2, r3
 8009724:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009728:	801a      	strh	r2, [r3, #0]
 800972a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800972e:	881b      	ldrh	r3, [r3, #0]
 8009730:	b29b      	uxth	r3, r3
 8009732:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009736:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800973a:	b29a      	uxth	r2, r3
 800973c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009740:	801a      	strh	r2, [r3, #0]
 8009742:	e061      	b.n	8009808 <USB_EPStartXfer+0x1232>
 8009744:	463b      	mov	r3, r7
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	691b      	ldr	r3, [r3, #16]
 800974a:	2b3e      	cmp	r3, #62	; 0x3e
 800974c:	d81a      	bhi.n	8009784 <USB_EPStartXfer+0x11ae>
 800974e:	463b      	mov	r3, r7
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	691b      	ldr	r3, [r3, #16]
 8009754:	085b      	lsrs	r3, r3, #1
 8009756:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800975a:	463b      	mov	r3, r7
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	691b      	ldr	r3, [r3, #16]
 8009760:	f003 0301 	and.w	r3, r3, #1
 8009764:	2b00      	cmp	r3, #0
 8009766:	d004      	beq.n	8009772 <USB_EPStartXfer+0x119c>
 8009768:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800976c:	3301      	adds	r3, #1
 800976e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009772:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009776:	b29b      	uxth	r3, r3
 8009778:	029b      	lsls	r3, r3, #10
 800977a:	b29a      	uxth	r2, r3
 800977c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009780:	801a      	strh	r2, [r3, #0]
 8009782:	e041      	b.n	8009808 <USB_EPStartXfer+0x1232>
 8009784:	463b      	mov	r3, r7
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	691b      	ldr	r3, [r3, #16]
 800978a:	095b      	lsrs	r3, r3, #5
 800978c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009790:	463b      	mov	r3, r7
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	691b      	ldr	r3, [r3, #16]
 8009796:	f003 031f 	and.w	r3, r3, #31
 800979a:	2b00      	cmp	r3, #0
 800979c:	d104      	bne.n	80097a8 <USB_EPStartXfer+0x11d2>
 800979e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80097a2:	3b01      	subs	r3, #1
 80097a4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80097a8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80097ac:	b29b      	uxth	r3, r3
 80097ae:	029b      	lsls	r3, r3, #10
 80097b0:	b29b      	uxth	r3, r3
 80097b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80097b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80097ba:	b29a      	uxth	r2, r3
 80097bc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80097c0:	801a      	strh	r2, [r3, #0]
 80097c2:	e021      	b.n	8009808 <USB_EPStartXfer+0x1232>
 80097c4:	463b      	mov	r3, r7
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	785b      	ldrb	r3, [r3, #1]
 80097ca:	2b01      	cmp	r3, #1
 80097cc:	d11c      	bne.n	8009808 <USB_EPStartXfer+0x1232>
 80097ce:	1d3b      	adds	r3, r7, #4
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80097d6:	b29b      	uxth	r3, r3
 80097d8:	461a      	mov	r2, r3
 80097da:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80097de:	4413      	add	r3, r2
 80097e0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80097e4:	463b      	mov	r3, r7
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	781b      	ldrb	r3, [r3, #0]
 80097ea:	00da      	lsls	r2, r3, #3
 80097ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80097f0:	4413      	add	r3, r2
 80097f2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80097f6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80097fa:	463b      	mov	r3, r7
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	691b      	ldr	r3, [r3, #16]
 8009800:	b29a      	uxth	r2, r3
 8009802:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009806:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8009808:	463b      	mov	r3, r7
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	69db      	ldr	r3, [r3, #28]
 800980e:	2b00      	cmp	r3, #0
 8009810:	f000 81a4 	beq.w	8009b5c <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8009814:	1d3b      	adds	r3, r7, #4
 8009816:	681a      	ldr	r2, [r3, #0]
 8009818:	463b      	mov	r3, r7
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	781b      	ldrb	r3, [r3, #0]
 800981e:	009b      	lsls	r3, r3, #2
 8009820:	4413      	add	r3, r2
 8009822:	881b      	ldrh	r3, [r3, #0]
 8009824:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009828:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800982c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009830:	2b00      	cmp	r3, #0
 8009832:	d005      	beq.n	8009840 <USB_EPStartXfer+0x126a>
 8009834:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8009838:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800983c:	2b00      	cmp	r3, #0
 800983e:	d10d      	bne.n	800985c <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009840:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8009844:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009848:	2b00      	cmp	r3, #0
 800984a:	f040 8187 	bne.w	8009b5c <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800984e:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8009852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009856:	2b00      	cmp	r3, #0
 8009858:	f040 8180 	bne.w	8009b5c <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800985c:	1d3b      	adds	r3, r7, #4
 800985e:	681a      	ldr	r2, [r3, #0]
 8009860:	463b      	mov	r3, r7
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	781b      	ldrb	r3, [r3, #0]
 8009866:	009b      	lsls	r3, r3, #2
 8009868:	4413      	add	r3, r2
 800986a:	881b      	ldrh	r3, [r3, #0]
 800986c:	b29b      	uxth	r3, r3
 800986e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009872:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009876:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800987a:	1d3b      	adds	r3, r7, #4
 800987c:	681a      	ldr	r2, [r3, #0]
 800987e:	463b      	mov	r3, r7
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	781b      	ldrb	r3, [r3, #0]
 8009884:	009b      	lsls	r3, r3, #2
 8009886:	441a      	add	r2, r3
 8009888:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800988c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009890:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009894:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009898:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800989c:	b29b      	uxth	r3, r3
 800989e:	8013      	strh	r3, [r2, #0]
 80098a0:	e15c      	b.n	8009b5c <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80098a2:	463b      	mov	r3, r7
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	78db      	ldrb	r3, [r3, #3]
 80098a8:	2b01      	cmp	r3, #1
 80098aa:	f040 8155 	bne.w	8009b58 <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80098ae:	463b      	mov	r3, r7
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	699a      	ldr	r2, [r3, #24]
 80098b4:	463b      	mov	r3, r7
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	691b      	ldr	r3, [r3, #16]
 80098ba:	429a      	cmp	r2, r3
 80098bc:	d90e      	bls.n	80098dc <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 80098be:	463b      	mov	r3, r7
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	691b      	ldr	r3, [r3, #16]
 80098c4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 80098c8:	463b      	mov	r3, r7
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	699a      	ldr	r2, [r3, #24]
 80098ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80098d2:	1ad2      	subs	r2, r2, r3
 80098d4:	463b      	mov	r3, r7
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	619a      	str	r2, [r3, #24]
 80098da:	e008      	b.n	80098ee <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 80098dc:	463b      	mov	r3, r7
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	699b      	ldr	r3, [r3, #24]
 80098e2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 80098e6:	463b      	mov	r3, r7
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	2200      	movs	r2, #0
 80098ec:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80098ee:	463b      	mov	r3, r7
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	785b      	ldrb	r3, [r3, #1]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d16f      	bne.n	80099d8 <USB_EPStartXfer+0x1402>
 80098f8:	1d3b      	adds	r3, r7, #4
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009900:	1d3b      	adds	r3, r7, #4
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009908:	b29b      	uxth	r3, r3
 800990a:	461a      	mov	r2, r3
 800990c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009910:	4413      	add	r3, r2
 8009912:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009916:	463b      	mov	r3, r7
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	781b      	ldrb	r3, [r3, #0]
 800991c:	00da      	lsls	r2, r3, #3
 800991e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009922:	4413      	add	r3, r2
 8009924:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009928:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800992c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009930:	2b00      	cmp	r3, #0
 8009932:	d116      	bne.n	8009962 <USB_EPStartXfer+0x138c>
 8009934:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009938:	881b      	ldrh	r3, [r3, #0]
 800993a:	b29b      	uxth	r3, r3
 800993c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009940:	b29a      	uxth	r2, r3
 8009942:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009946:	801a      	strh	r2, [r3, #0]
 8009948:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800994c:	881b      	ldrh	r3, [r3, #0]
 800994e:	b29b      	uxth	r3, r3
 8009950:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009954:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009958:	b29a      	uxth	r2, r3
 800995a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800995e:	801a      	strh	r2, [r3, #0]
 8009960:	e05f      	b.n	8009a22 <USB_EPStartXfer+0x144c>
 8009962:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009966:	2b3e      	cmp	r3, #62	; 0x3e
 8009968:	d818      	bhi.n	800999c <USB_EPStartXfer+0x13c6>
 800996a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800996e:	085b      	lsrs	r3, r3, #1
 8009970:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009974:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009978:	f003 0301 	and.w	r3, r3, #1
 800997c:	2b00      	cmp	r3, #0
 800997e:	d004      	beq.n	800998a <USB_EPStartXfer+0x13b4>
 8009980:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009984:	3301      	adds	r3, #1
 8009986:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800998a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800998e:	b29b      	uxth	r3, r3
 8009990:	029b      	lsls	r3, r3, #10
 8009992:	b29a      	uxth	r2, r3
 8009994:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009998:	801a      	strh	r2, [r3, #0]
 800999a:	e042      	b.n	8009a22 <USB_EPStartXfer+0x144c>
 800999c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80099a0:	095b      	lsrs	r3, r3, #5
 80099a2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80099a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80099aa:	f003 031f 	and.w	r3, r3, #31
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d104      	bne.n	80099bc <USB_EPStartXfer+0x13e6>
 80099b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80099b6:	3b01      	subs	r3, #1
 80099b8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80099bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80099c0:	b29b      	uxth	r3, r3
 80099c2:	029b      	lsls	r3, r3, #10
 80099c4:	b29b      	uxth	r3, r3
 80099c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80099ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80099ce:	b29a      	uxth	r2, r3
 80099d0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80099d4:	801a      	strh	r2, [r3, #0]
 80099d6:	e024      	b.n	8009a22 <USB_EPStartXfer+0x144c>
 80099d8:	463b      	mov	r3, r7
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	785b      	ldrb	r3, [r3, #1]
 80099de:	2b01      	cmp	r3, #1
 80099e0:	d11f      	bne.n	8009a22 <USB_EPStartXfer+0x144c>
 80099e2:	1d3b      	adds	r3, r7, #4
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80099ea:	1d3b      	adds	r3, r7, #4
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80099f2:	b29b      	uxth	r3, r3
 80099f4:	461a      	mov	r2, r3
 80099f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80099fa:	4413      	add	r3, r2
 80099fc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009a00:	463b      	mov	r3, r7
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	781b      	ldrb	r3, [r3, #0]
 8009a06:	00da      	lsls	r2, r3, #3
 8009a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a0c:	4413      	add	r3, r2
 8009a0e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009a12:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009a16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a1a:	b29a      	uxth	r2, r3
 8009a1c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009a20:	801a      	strh	r2, [r3, #0]
 8009a22:	1d3b      	adds	r3, r7, #4
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009a2a:	463b      	mov	r3, r7
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	785b      	ldrb	r3, [r3, #1]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d16f      	bne.n	8009b14 <USB_EPStartXfer+0x153e>
 8009a34:	1d3b      	adds	r3, r7, #4
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009a3c:	1d3b      	adds	r3, r7, #4
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009a44:	b29b      	uxth	r3, r3
 8009a46:	461a      	mov	r2, r3
 8009a48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009a4c:	4413      	add	r3, r2
 8009a4e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009a52:	463b      	mov	r3, r7
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	781b      	ldrb	r3, [r3, #0]
 8009a58:	00da      	lsls	r2, r3, #3
 8009a5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009a5e:	4413      	add	r3, r2
 8009a60:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009a64:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009a68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d116      	bne.n	8009a9e <USB_EPStartXfer+0x14c8>
 8009a70:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009a74:	881b      	ldrh	r3, [r3, #0]
 8009a76:	b29b      	uxth	r3, r3
 8009a78:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009a7c:	b29a      	uxth	r2, r3
 8009a7e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009a82:	801a      	strh	r2, [r3, #0]
 8009a84:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009a88:	881b      	ldrh	r3, [r3, #0]
 8009a8a:	b29b      	uxth	r3, r3
 8009a8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a94:	b29a      	uxth	r2, r3
 8009a96:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009a9a:	801a      	strh	r2, [r3, #0]
 8009a9c:	e05e      	b.n	8009b5c <USB_EPStartXfer+0x1586>
 8009a9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009aa2:	2b3e      	cmp	r3, #62	; 0x3e
 8009aa4:	d818      	bhi.n	8009ad8 <USB_EPStartXfer+0x1502>
 8009aa6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009aaa:	085b      	lsrs	r3, r3, #1
 8009aac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009ab0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009ab4:	f003 0301 	and.w	r3, r3, #1
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d004      	beq.n	8009ac6 <USB_EPStartXfer+0x14f0>
 8009abc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009ac0:	3301      	adds	r3, #1
 8009ac2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009ac6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009aca:	b29b      	uxth	r3, r3
 8009acc:	029b      	lsls	r3, r3, #10
 8009ace:	b29a      	uxth	r2, r3
 8009ad0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009ad4:	801a      	strh	r2, [r3, #0]
 8009ad6:	e041      	b.n	8009b5c <USB_EPStartXfer+0x1586>
 8009ad8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009adc:	095b      	lsrs	r3, r3, #5
 8009ade:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009ae2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009ae6:	f003 031f 	and.w	r3, r3, #31
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d104      	bne.n	8009af8 <USB_EPStartXfer+0x1522>
 8009aee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009af2:	3b01      	subs	r3, #1
 8009af4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009af8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009afc:	b29b      	uxth	r3, r3
 8009afe:	029b      	lsls	r3, r3, #10
 8009b00:	b29b      	uxth	r3, r3
 8009b02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b0a:	b29a      	uxth	r2, r3
 8009b0c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009b10:	801a      	strh	r2, [r3, #0]
 8009b12:	e023      	b.n	8009b5c <USB_EPStartXfer+0x1586>
 8009b14:	463b      	mov	r3, r7
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	785b      	ldrb	r3, [r3, #1]
 8009b1a:	2b01      	cmp	r3, #1
 8009b1c:	d11e      	bne.n	8009b5c <USB_EPStartXfer+0x1586>
 8009b1e:	1d3b      	adds	r3, r7, #4
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009b26:	b29b      	uxth	r3, r3
 8009b28:	461a      	mov	r2, r3
 8009b2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b2e:	4413      	add	r3, r2
 8009b30:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009b34:	463b      	mov	r3, r7
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	781b      	ldrb	r3, [r3, #0]
 8009b3a:	00da      	lsls	r2, r3, #3
 8009b3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b40:	4413      	add	r3, r2
 8009b42:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009b46:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009b4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b4e:	b29a      	uxth	r2, r3
 8009b50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009b54:	801a      	strh	r2, [r3, #0]
 8009b56:	e001      	b.n	8009b5c <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 8009b58:	2301      	movs	r3, #1
 8009b5a:	e02e      	b.n	8009bba <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009b5c:	1d3b      	adds	r3, r7, #4
 8009b5e:	681a      	ldr	r2, [r3, #0]
 8009b60:	463b      	mov	r3, r7
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	781b      	ldrb	r3, [r3, #0]
 8009b66:	009b      	lsls	r3, r3, #2
 8009b68:	4413      	add	r3, r2
 8009b6a:	881b      	ldrh	r3, [r3, #0]
 8009b6c:	b29b      	uxth	r3, r3
 8009b6e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009b72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b76:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8009b7a:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8009b7e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009b82:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8009b86:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8009b8a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009b8e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8009b92:	1d3b      	adds	r3, r7, #4
 8009b94:	681a      	ldr	r2, [r3, #0]
 8009b96:	463b      	mov	r3, r7
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	781b      	ldrb	r3, [r3, #0]
 8009b9c:	009b      	lsls	r3, r3, #2
 8009b9e:	441a      	add	r2, r3
 8009ba0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8009ba4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ba8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009bac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009bb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009bb4:	b29b      	uxth	r3, r3
 8009bb6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009bb8:	2300      	movs	r3, #0
}
 8009bba:	4618      	mov	r0, r3
 8009bbc:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	bd80      	pop	{r7, pc}

08009bc4 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009bc4:	b480      	push	{r7}
 8009bc6:	b085      	sub	sp, #20
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
 8009bcc:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8009bce:	683b      	ldr	r3, [r7, #0]
 8009bd0:	785b      	ldrb	r3, [r3, #1]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d020      	beq.n	8009c18 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8009bd6:	687a      	ldr	r2, [r7, #4]
 8009bd8:	683b      	ldr	r3, [r7, #0]
 8009bda:	781b      	ldrb	r3, [r3, #0]
 8009bdc:	009b      	lsls	r3, r3, #2
 8009bde:	4413      	add	r3, r2
 8009be0:	881b      	ldrh	r3, [r3, #0]
 8009be2:	b29b      	uxth	r3, r3
 8009be4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009be8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009bec:	81bb      	strh	r3, [r7, #12]
 8009bee:	89bb      	ldrh	r3, [r7, #12]
 8009bf0:	f083 0310 	eor.w	r3, r3, #16
 8009bf4:	81bb      	strh	r3, [r7, #12]
 8009bf6:	687a      	ldr	r2, [r7, #4]
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	781b      	ldrb	r3, [r3, #0]
 8009bfc:	009b      	lsls	r3, r3, #2
 8009bfe:	441a      	add	r2, r3
 8009c00:	89bb      	ldrh	r3, [r7, #12]
 8009c02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c12:	b29b      	uxth	r3, r3
 8009c14:	8013      	strh	r3, [r2, #0]
 8009c16:	e01f      	b.n	8009c58 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8009c18:	687a      	ldr	r2, [r7, #4]
 8009c1a:	683b      	ldr	r3, [r7, #0]
 8009c1c:	781b      	ldrb	r3, [r3, #0]
 8009c1e:	009b      	lsls	r3, r3, #2
 8009c20:	4413      	add	r3, r2
 8009c22:	881b      	ldrh	r3, [r3, #0]
 8009c24:	b29b      	uxth	r3, r3
 8009c26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009c2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c2e:	81fb      	strh	r3, [r7, #14]
 8009c30:	89fb      	ldrh	r3, [r7, #14]
 8009c32:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009c36:	81fb      	strh	r3, [r7, #14]
 8009c38:	687a      	ldr	r2, [r7, #4]
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	781b      	ldrb	r3, [r3, #0]
 8009c3e:	009b      	lsls	r3, r3, #2
 8009c40:	441a      	add	r2, r3
 8009c42:	89fb      	ldrh	r3, [r7, #14]
 8009c44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c54:	b29b      	uxth	r3, r3
 8009c56:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009c58:	2300      	movs	r3, #0
}
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	3714      	adds	r7, #20
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c64:	4770      	bx	lr

08009c66 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009c66:	b480      	push	{r7}
 8009c68:	b087      	sub	sp, #28
 8009c6a:	af00      	add	r7, sp, #0
 8009c6c:	6078      	str	r0, [r7, #4]
 8009c6e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009c70:	683b      	ldr	r3, [r7, #0]
 8009c72:	7b1b      	ldrb	r3, [r3, #12]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	f040 809d 	bne.w	8009db4 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8009c7a:	683b      	ldr	r3, [r7, #0]
 8009c7c:	785b      	ldrb	r3, [r3, #1]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d04c      	beq.n	8009d1c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009c82:	687a      	ldr	r2, [r7, #4]
 8009c84:	683b      	ldr	r3, [r7, #0]
 8009c86:	781b      	ldrb	r3, [r3, #0]
 8009c88:	009b      	lsls	r3, r3, #2
 8009c8a:	4413      	add	r3, r2
 8009c8c:	881b      	ldrh	r3, [r3, #0]
 8009c8e:	823b      	strh	r3, [r7, #16]
 8009c90:	8a3b      	ldrh	r3, [r7, #16]
 8009c92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d01b      	beq.n	8009cd2 <USB_EPClearStall+0x6c>
 8009c9a:	687a      	ldr	r2, [r7, #4]
 8009c9c:	683b      	ldr	r3, [r7, #0]
 8009c9e:	781b      	ldrb	r3, [r3, #0]
 8009ca0:	009b      	lsls	r3, r3, #2
 8009ca2:	4413      	add	r3, r2
 8009ca4:	881b      	ldrh	r3, [r3, #0]
 8009ca6:	b29b      	uxth	r3, r3
 8009ca8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009cac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009cb0:	81fb      	strh	r3, [r7, #14]
 8009cb2:	687a      	ldr	r2, [r7, #4]
 8009cb4:	683b      	ldr	r3, [r7, #0]
 8009cb6:	781b      	ldrb	r3, [r3, #0]
 8009cb8:	009b      	lsls	r3, r3, #2
 8009cba:	441a      	add	r2, r3
 8009cbc:	89fb      	ldrh	r3, [r7, #14]
 8009cbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009cc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009cc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009cca:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009cce:	b29b      	uxth	r3, r3
 8009cd0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009cd2:	683b      	ldr	r3, [r7, #0]
 8009cd4:	78db      	ldrb	r3, [r3, #3]
 8009cd6:	2b01      	cmp	r3, #1
 8009cd8:	d06c      	beq.n	8009db4 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009cda:	687a      	ldr	r2, [r7, #4]
 8009cdc:	683b      	ldr	r3, [r7, #0]
 8009cde:	781b      	ldrb	r3, [r3, #0]
 8009ce0:	009b      	lsls	r3, r3, #2
 8009ce2:	4413      	add	r3, r2
 8009ce4:	881b      	ldrh	r3, [r3, #0]
 8009ce6:	b29b      	uxth	r3, r3
 8009ce8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009cec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009cf0:	81bb      	strh	r3, [r7, #12]
 8009cf2:	89bb      	ldrh	r3, [r7, #12]
 8009cf4:	f083 0320 	eor.w	r3, r3, #32
 8009cf8:	81bb      	strh	r3, [r7, #12]
 8009cfa:	687a      	ldr	r2, [r7, #4]
 8009cfc:	683b      	ldr	r3, [r7, #0]
 8009cfe:	781b      	ldrb	r3, [r3, #0]
 8009d00:	009b      	lsls	r3, r3, #2
 8009d02:	441a      	add	r2, r3
 8009d04:	89bb      	ldrh	r3, [r7, #12]
 8009d06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009d0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009d0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d16:	b29b      	uxth	r3, r3
 8009d18:	8013      	strh	r3, [r2, #0]
 8009d1a:	e04b      	b.n	8009db4 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009d1c:	687a      	ldr	r2, [r7, #4]
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	781b      	ldrb	r3, [r3, #0]
 8009d22:	009b      	lsls	r3, r3, #2
 8009d24:	4413      	add	r3, r2
 8009d26:	881b      	ldrh	r3, [r3, #0]
 8009d28:	82fb      	strh	r3, [r7, #22]
 8009d2a:	8afb      	ldrh	r3, [r7, #22]
 8009d2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d01b      	beq.n	8009d6c <USB_EPClearStall+0x106>
 8009d34:	687a      	ldr	r2, [r7, #4]
 8009d36:	683b      	ldr	r3, [r7, #0]
 8009d38:	781b      	ldrb	r3, [r3, #0]
 8009d3a:	009b      	lsls	r3, r3, #2
 8009d3c:	4413      	add	r3, r2
 8009d3e:	881b      	ldrh	r3, [r3, #0]
 8009d40:	b29b      	uxth	r3, r3
 8009d42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d4a:	82bb      	strh	r3, [r7, #20]
 8009d4c:	687a      	ldr	r2, [r7, #4]
 8009d4e:	683b      	ldr	r3, [r7, #0]
 8009d50:	781b      	ldrb	r3, [r3, #0]
 8009d52:	009b      	lsls	r3, r3, #2
 8009d54:	441a      	add	r2, r3
 8009d56:	8abb      	ldrh	r3, [r7, #20]
 8009d58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009d5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009d60:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009d64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d68:	b29b      	uxth	r3, r3
 8009d6a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009d6c:	687a      	ldr	r2, [r7, #4]
 8009d6e:	683b      	ldr	r3, [r7, #0]
 8009d70:	781b      	ldrb	r3, [r3, #0]
 8009d72:	009b      	lsls	r3, r3, #2
 8009d74:	4413      	add	r3, r2
 8009d76:	881b      	ldrh	r3, [r3, #0]
 8009d78:	b29b      	uxth	r3, r3
 8009d7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009d7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d82:	827b      	strh	r3, [r7, #18]
 8009d84:	8a7b      	ldrh	r3, [r7, #18]
 8009d86:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009d8a:	827b      	strh	r3, [r7, #18]
 8009d8c:	8a7b      	ldrh	r3, [r7, #18]
 8009d8e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009d92:	827b      	strh	r3, [r7, #18]
 8009d94:	687a      	ldr	r2, [r7, #4]
 8009d96:	683b      	ldr	r3, [r7, #0]
 8009d98:	781b      	ldrb	r3, [r3, #0]
 8009d9a:	009b      	lsls	r3, r3, #2
 8009d9c:	441a      	add	r2, r3
 8009d9e:	8a7b      	ldrh	r3, [r7, #18]
 8009da0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009da4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009da8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009dac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009db0:	b29b      	uxth	r3, r3
 8009db2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8009db4:	2300      	movs	r3, #0
}
 8009db6:	4618      	mov	r0, r3
 8009db8:	371c      	adds	r7, #28
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc0:	4770      	bx	lr

08009dc2 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8009dc2:	b480      	push	{r7}
 8009dc4:	b083      	sub	sp, #12
 8009dc6:	af00      	add	r7, sp, #0
 8009dc8:	6078      	str	r0, [r7, #4]
 8009dca:	460b      	mov	r3, r1
 8009dcc:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8009dce:	78fb      	ldrb	r3, [r7, #3]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d103      	bne.n	8009ddc <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	2280      	movs	r2, #128	; 0x80
 8009dd8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8009ddc:	2300      	movs	r3, #0
}
 8009dde:	4618      	mov	r0, r3
 8009de0:	370c      	adds	r7, #12
 8009de2:	46bd      	mov	sp, r7
 8009de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de8:	4770      	bx	lr

08009dea <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8009dea:	b480      	push	{r7}
 8009dec:	b083      	sub	sp, #12
 8009dee:	af00      	add	r7, sp, #0
 8009df0:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009df8:	b29b      	uxth	r3, r3
 8009dfa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009dfe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009e02:	b29a      	uxth	r2, r3
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8009e0a:	2300      	movs	r3, #0
}
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	370c      	adds	r7, #12
 8009e10:	46bd      	mov	sp, r7
 8009e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e16:	4770      	bx	lr

08009e18 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8009e18:	b480      	push	{r7}
 8009e1a:	b083      	sub	sp, #12
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009e26:	b29b      	uxth	r3, r3
 8009e28:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8009e2c:	b29a      	uxth	r2, r3
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8009e34:	2300      	movs	r3, #0
}
 8009e36:	4618      	mov	r0, r3
 8009e38:	370c      	adds	r7, #12
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e40:	4770      	bx	lr

08009e42 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8009e42:	b480      	push	{r7}
 8009e44:	b085      	sub	sp, #20
 8009e46:	af00      	add	r7, sp, #0
 8009e48:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009e50:	b29b      	uxth	r3, r3
 8009e52:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8009e54:	68fb      	ldr	r3, [r7, #12]
}
 8009e56:	4618      	mov	r0, r3
 8009e58:	3714      	adds	r7, #20
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e60:	4770      	bx	lr

08009e62 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8009e62:	b480      	push	{r7}
 8009e64:	b083      	sub	sp, #12
 8009e66:	af00      	add	r7, sp, #0
 8009e68:	6078      	str	r0, [r7, #4]
 8009e6a:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8009e6c:	2300      	movs	r3, #0
}
 8009e6e:	4618      	mov	r0, r3
 8009e70:	370c      	adds	r7, #12
 8009e72:	46bd      	mov	sp, r7
 8009e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e78:	4770      	bx	lr

08009e7a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009e7a:	b480      	push	{r7}
 8009e7c:	b08d      	sub	sp, #52	; 0x34
 8009e7e:	af00      	add	r7, sp, #0
 8009e80:	60f8      	str	r0, [r7, #12]
 8009e82:	60b9      	str	r1, [r7, #8]
 8009e84:	4611      	mov	r1, r2
 8009e86:	461a      	mov	r2, r3
 8009e88:	460b      	mov	r3, r1
 8009e8a:	80fb      	strh	r3, [r7, #6]
 8009e8c:	4613      	mov	r3, r2
 8009e8e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009e90:	88bb      	ldrh	r3, [r7, #4]
 8009e92:	3301      	adds	r3, #1
 8009e94:	085b      	lsrs	r3, r3, #1
 8009e96:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009e9c:	68bb      	ldr	r3, [r7, #8]
 8009e9e:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009ea0:	88fa      	ldrh	r2, [r7, #6]
 8009ea2:	69fb      	ldr	r3, [r7, #28]
 8009ea4:	4413      	add	r3, r2
 8009ea6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009eaa:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8009eac:	6a3b      	ldr	r3, [r7, #32]
 8009eae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009eb0:	e01b      	b.n	8009eea <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8009eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eb4:	781b      	ldrb	r3, [r3, #0]
 8009eb6:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8009eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eba:	3301      	adds	r3, #1
 8009ebc:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8009ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ec0:	781b      	ldrb	r3, [r3, #0]
 8009ec2:	b29b      	uxth	r3, r3
 8009ec4:	021b      	lsls	r3, r3, #8
 8009ec6:	b29b      	uxth	r3, r3
 8009ec8:	461a      	mov	r2, r3
 8009eca:	69bb      	ldr	r3, [r7, #24]
 8009ecc:	4313      	orrs	r3, r2
 8009ece:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8009ed0:	697b      	ldr	r3, [r7, #20]
 8009ed2:	b29a      	uxth	r2, r3
 8009ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ed6:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8009ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eda:	3302      	adds	r3, #2
 8009edc:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8009ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ee0:	3301      	adds	r3, #1
 8009ee2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8009ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ee6:	3b01      	subs	r3, #1
 8009ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d1e0      	bne.n	8009eb2 <USB_WritePMA+0x38>
  }
}
 8009ef0:	bf00      	nop
 8009ef2:	bf00      	nop
 8009ef4:	3734      	adds	r7, #52	; 0x34
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efc:	4770      	bx	lr

08009efe <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009efe:	b480      	push	{r7}
 8009f00:	b08b      	sub	sp, #44	; 0x2c
 8009f02:	af00      	add	r7, sp, #0
 8009f04:	60f8      	str	r0, [r7, #12]
 8009f06:	60b9      	str	r1, [r7, #8]
 8009f08:	4611      	mov	r1, r2
 8009f0a:	461a      	mov	r2, r3
 8009f0c:	460b      	mov	r3, r1
 8009f0e:	80fb      	strh	r3, [r7, #6]
 8009f10:	4613      	mov	r3, r2
 8009f12:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8009f14:	88bb      	ldrh	r3, [r7, #4]
 8009f16:	085b      	lsrs	r3, r3, #1
 8009f18:	b29b      	uxth	r3, r3
 8009f1a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009f20:	68bb      	ldr	r3, [r7, #8]
 8009f22:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009f24:	88fa      	ldrh	r2, [r7, #6]
 8009f26:	697b      	ldr	r3, [r7, #20]
 8009f28:	4413      	add	r3, r2
 8009f2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009f2e:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8009f30:	69bb      	ldr	r3, [r7, #24]
 8009f32:	627b      	str	r3, [r7, #36]	; 0x24
 8009f34:	e018      	b.n	8009f68 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8009f36:	6a3b      	ldr	r3, [r7, #32]
 8009f38:	881b      	ldrh	r3, [r3, #0]
 8009f3a:	b29b      	uxth	r3, r3
 8009f3c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8009f3e:	6a3b      	ldr	r3, [r7, #32]
 8009f40:	3302      	adds	r3, #2
 8009f42:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009f44:	693b      	ldr	r3, [r7, #16]
 8009f46:	b2da      	uxtb	r2, r3
 8009f48:	69fb      	ldr	r3, [r7, #28]
 8009f4a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009f4c:	69fb      	ldr	r3, [r7, #28]
 8009f4e:	3301      	adds	r3, #1
 8009f50:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8009f52:	693b      	ldr	r3, [r7, #16]
 8009f54:	0a1b      	lsrs	r3, r3, #8
 8009f56:	b2da      	uxtb	r2, r3
 8009f58:	69fb      	ldr	r3, [r7, #28]
 8009f5a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009f5c:	69fb      	ldr	r3, [r7, #28]
 8009f5e:	3301      	adds	r3, #1
 8009f60:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8009f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f64:	3b01      	subs	r3, #1
 8009f66:	627b      	str	r3, [r7, #36]	; 0x24
 8009f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d1e3      	bne.n	8009f36 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8009f6e:	88bb      	ldrh	r3, [r7, #4]
 8009f70:	f003 0301 	and.w	r3, r3, #1
 8009f74:	b29b      	uxth	r3, r3
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d007      	beq.n	8009f8a <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8009f7a:	6a3b      	ldr	r3, [r7, #32]
 8009f7c:	881b      	ldrh	r3, [r3, #0]
 8009f7e:	b29b      	uxth	r3, r3
 8009f80:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009f82:	693b      	ldr	r3, [r7, #16]
 8009f84:	b2da      	uxtb	r2, r3
 8009f86:	69fb      	ldr	r3, [r7, #28]
 8009f88:	701a      	strb	r2, [r3, #0]
  }
}
 8009f8a:	bf00      	nop
 8009f8c:	372c      	adds	r7, #44	; 0x2c
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f94:	4770      	bx	lr

08009f96 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009f96:	b580      	push	{r7, lr}
 8009f98:	b084      	sub	sp, #16
 8009f9a:	af00      	add	r7, sp, #0
 8009f9c:	6078      	str	r0, [r7, #4]
 8009f9e:	460b      	mov	r3, r1
 8009fa0:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8009fa2:	2010      	movs	r0, #16
 8009fa4:	f001 ff6c 	bl	800be80 <USBD_static_malloc>
 8009fa8:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d105      	bne.n	8009fbc <USBD_HID_Init+0x26>
  {
    pdev->pClassData = NULL;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8009fb8:	2302      	movs	r3, #2
 8009fba:	e01b      	b.n	8009ff4 <USBD_HID_Init+0x5e>
  }

  pdev->pClassData = (void *)hhid;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	68fa      	ldr	r2, [r7, #12]
 8009fc0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	7c1b      	ldrb	r3, [r3, #16]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d103      	bne.n	8009fd4 <USBD_HID_Init+0x3e>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	2207      	movs	r2, #7
 8009fd0:	875a      	strh	r2, [r3, #58]	; 0x3a
 8009fd2:	e002      	b.n	8009fda <USBD_HID_Init+0x44>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	220a      	movs	r2, #10
 8009fd8:	875a      	strh	r2, [r3, #58]	; 0x3a
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8009fda:	2304      	movs	r3, #4
 8009fdc:	2203      	movs	r2, #3
 8009fde:	2181      	movs	r1, #129	; 0x81
 8009fe0:	6878      	ldr	r0, [r7, #4]
 8009fe2:	f001 fd63 	bl	800baac <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	2201      	movs	r2, #1
 8009fea:	871a      	strh	r2, [r3, #56]	; 0x38

  hhid->state = HID_IDLE;
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	2200      	movs	r2, #0
 8009ff0:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8009ff2:	2300      	movs	r3, #0
}
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	3710      	adds	r7, #16
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	bd80      	pop	{r7, pc}

08009ffc <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	b082      	sub	sp, #8
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]
 800a004:	460b      	mov	r3, r1
 800a006:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 800a008:	2181      	movs	r1, #129	; 0x81
 800a00a:	6878      	ldr	r0, [r7, #4]
 800a00c:	f001 fd8c 	bl	800bb28 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	2200      	movs	r2, #0
 800a014:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	2200      	movs	r2, #0
 800a01a:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Free allocated memory */
  if (pdev->pClassData != NULL)
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a022:	2b00      	cmp	r3, #0
 800a024:	d009      	beq.n	800a03a <USBD_HID_DeInit+0x3e>
  {
    (void)USBD_free(pdev->pClassData);
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a02c:	4618      	mov	r0, r3
 800a02e:	f001 ff35 	bl	800be9c <USBD_static_free>
    pdev->pClassData = NULL;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	2200      	movs	r2, #0
 800a036:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a03a:	2300      	movs	r3, #0
}
 800a03c:	4618      	mov	r0, r3
 800a03e:	3708      	adds	r7, #8
 800a040:	46bd      	mov	sp, r7
 800a042:	bd80      	pop	{r7, pc}

0800a044 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a044:	b580      	push	{r7, lr}
 800a046:	b086      	sub	sp, #24
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
 800a04c:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a054:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800a056:	2300      	movs	r3, #0
 800a058:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 800a05a:	2300      	movs	r3, #0
 800a05c:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	2b00      	cmp	r3, #0
 800a062:	d101      	bne.n	800a068 <USBD_HID_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800a064:	2303      	movs	r3, #3
 800a066:	e0e8      	b.n	800a23a <USBD_HID_Setup+0x1f6>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a068:	683b      	ldr	r3, [r7, #0]
 800a06a:	781b      	ldrb	r3, [r3, #0]
 800a06c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a070:	2b00      	cmp	r3, #0
 800a072:	d046      	beq.n	800a102 <USBD_HID_Setup+0xbe>
 800a074:	2b20      	cmp	r3, #32
 800a076:	f040 80d8 	bne.w	800a22a <USBD_HID_Setup+0x1e6>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 800a07a:	683b      	ldr	r3, [r7, #0]
 800a07c:	785b      	ldrb	r3, [r3, #1]
 800a07e:	3b02      	subs	r3, #2
 800a080:	2b09      	cmp	r3, #9
 800a082:	d836      	bhi.n	800a0f2 <USBD_HID_Setup+0xae>
 800a084:	a201      	add	r2, pc, #4	; (adr r2, 800a08c <USBD_HID_Setup+0x48>)
 800a086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a08a:	bf00      	nop
 800a08c:	0800a0e3 	.word	0x0800a0e3
 800a090:	0800a0c3 	.word	0x0800a0c3
 800a094:	0800a0f3 	.word	0x0800a0f3
 800a098:	0800a0f3 	.word	0x0800a0f3
 800a09c:	0800a0f3 	.word	0x0800a0f3
 800a0a0:	0800a0f3 	.word	0x0800a0f3
 800a0a4:	0800a0f3 	.word	0x0800a0f3
 800a0a8:	0800a0f3 	.word	0x0800a0f3
 800a0ac:	0800a0d1 	.word	0x0800a0d1
 800a0b0:	0800a0b5 	.word	0x0800a0b5
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 800a0b4:	683b      	ldr	r3, [r7, #0]
 800a0b6:	885b      	ldrh	r3, [r3, #2]
 800a0b8:	b2db      	uxtb	r3, r3
 800a0ba:	461a      	mov	r2, r3
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	601a      	str	r2, [r3, #0]
          break;
 800a0c0:	e01e      	b.n	800a100 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	2201      	movs	r2, #1
 800a0c6:	4619      	mov	r1, r3
 800a0c8:	6878      	ldr	r0, [r7, #4]
 800a0ca:	f001 f9d8 	bl	800b47e <USBD_CtlSendData>
          break;
 800a0ce:	e017      	b.n	800a100 <USBD_HID_Setup+0xbc>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800a0d0:	683b      	ldr	r3, [r7, #0]
 800a0d2:	885b      	ldrh	r3, [r3, #2]
 800a0d4:	0a1b      	lsrs	r3, r3, #8
 800a0d6:	b29b      	uxth	r3, r3
 800a0d8:	b2db      	uxtb	r3, r3
 800a0da:	461a      	mov	r2, r3
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	605a      	str	r2, [r3, #4]
          break;
 800a0e0:	e00e      	b.n	800a100 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	3304      	adds	r3, #4
 800a0e6:	2201      	movs	r2, #1
 800a0e8:	4619      	mov	r1, r3
 800a0ea:	6878      	ldr	r0, [r7, #4]
 800a0ec:	f001 f9c7 	bl	800b47e <USBD_CtlSendData>
          break;
 800a0f0:	e006      	b.n	800a100 <USBD_HID_Setup+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800a0f2:	6839      	ldr	r1, [r7, #0]
 800a0f4:	6878      	ldr	r0, [r7, #4]
 800a0f6:	f001 f951 	bl	800b39c <USBD_CtlError>
          ret = USBD_FAIL;
 800a0fa:	2303      	movs	r3, #3
 800a0fc:	75fb      	strb	r3, [r7, #23]
          break;
 800a0fe:	bf00      	nop
      }
      break;
 800a100:	e09a      	b.n	800a238 <USBD_HID_Setup+0x1f4>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a102:	683b      	ldr	r3, [r7, #0]
 800a104:	785b      	ldrb	r3, [r3, #1]
 800a106:	2b0b      	cmp	r3, #11
 800a108:	f200 8086 	bhi.w	800a218 <USBD_HID_Setup+0x1d4>
 800a10c:	a201      	add	r2, pc, #4	; (adr r2, 800a114 <USBD_HID_Setup+0xd0>)
 800a10e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a112:	bf00      	nop
 800a114:	0800a145 	.word	0x0800a145
 800a118:	0800a227 	.word	0x0800a227
 800a11c:	0800a219 	.word	0x0800a219
 800a120:	0800a219 	.word	0x0800a219
 800a124:	0800a219 	.word	0x0800a219
 800a128:	0800a219 	.word	0x0800a219
 800a12c:	0800a16f 	.word	0x0800a16f
 800a130:	0800a219 	.word	0x0800a219
 800a134:	0800a219 	.word	0x0800a219
 800a138:	0800a219 	.word	0x0800a219
 800a13c:	0800a1c7 	.word	0x0800a1c7
 800a140:	0800a1f1 	.word	0x0800a1f1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a14a:	b2db      	uxtb	r3, r3
 800a14c:	2b03      	cmp	r3, #3
 800a14e:	d107      	bne.n	800a160 <USBD_HID_Setup+0x11c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a150:	f107 030a 	add.w	r3, r7, #10
 800a154:	2202      	movs	r2, #2
 800a156:	4619      	mov	r1, r3
 800a158:	6878      	ldr	r0, [r7, #4]
 800a15a:	f001 f990 	bl	800b47e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a15e:	e063      	b.n	800a228 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 800a160:	6839      	ldr	r1, [r7, #0]
 800a162:	6878      	ldr	r0, [r7, #4]
 800a164:	f001 f91a 	bl	800b39c <USBD_CtlError>
            ret = USBD_FAIL;
 800a168:	2303      	movs	r3, #3
 800a16a:	75fb      	strb	r3, [r7, #23]
          break;
 800a16c:	e05c      	b.n	800a228 <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 800a16e:	683b      	ldr	r3, [r7, #0]
 800a170:	885b      	ldrh	r3, [r3, #2]
 800a172:	0a1b      	lsrs	r3, r3, #8
 800a174:	b29b      	uxth	r3, r3
 800a176:	2b22      	cmp	r3, #34	; 0x22
 800a178:	d108      	bne.n	800a18c <USBD_HID_Setup+0x148>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 800a17a:	683b      	ldr	r3, [r7, #0]
 800a17c:	88db      	ldrh	r3, [r3, #6]
 800a17e:	2b4a      	cmp	r3, #74	; 0x4a
 800a180:	bf28      	it	cs
 800a182:	234a      	movcs	r3, #74	; 0x4a
 800a184:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 800a186:	4b2f      	ldr	r3, [pc, #188]	; (800a244 <USBD_HID_Setup+0x200>)
 800a188:	613b      	str	r3, [r7, #16]
 800a18a:	e015      	b.n	800a1b8 <USBD_HID_Setup+0x174>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 800a18c:	683b      	ldr	r3, [r7, #0]
 800a18e:	885b      	ldrh	r3, [r3, #2]
 800a190:	0a1b      	lsrs	r3, r3, #8
 800a192:	b29b      	uxth	r3, r3
 800a194:	2b21      	cmp	r3, #33	; 0x21
 800a196:	d108      	bne.n	800a1aa <USBD_HID_Setup+0x166>
          {
            pbuf = USBD_HID_Desc;
 800a198:	4b2b      	ldr	r3, [pc, #172]	; (800a248 <USBD_HID_Setup+0x204>)
 800a19a:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 800a19c:	683b      	ldr	r3, [r7, #0]
 800a19e:	88db      	ldrh	r3, [r3, #6]
 800a1a0:	2b09      	cmp	r3, #9
 800a1a2:	bf28      	it	cs
 800a1a4:	2309      	movcs	r3, #9
 800a1a6:	82bb      	strh	r3, [r7, #20]
 800a1a8:	e006      	b.n	800a1b8 <USBD_HID_Setup+0x174>
          }
          else
          {
            USBD_CtlError(pdev, req);
 800a1aa:	6839      	ldr	r1, [r7, #0]
 800a1ac:	6878      	ldr	r0, [r7, #4]
 800a1ae:	f001 f8f5 	bl	800b39c <USBD_CtlError>
            ret = USBD_FAIL;
 800a1b2:	2303      	movs	r3, #3
 800a1b4:	75fb      	strb	r3, [r7, #23]
            break;
 800a1b6:	e037      	b.n	800a228 <USBD_HID_Setup+0x1e4>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 800a1b8:	8abb      	ldrh	r3, [r7, #20]
 800a1ba:	461a      	mov	r2, r3
 800a1bc:	6939      	ldr	r1, [r7, #16]
 800a1be:	6878      	ldr	r0, [r7, #4]
 800a1c0:	f001 f95d 	bl	800b47e <USBD_CtlSendData>
          break;
 800a1c4:	e030      	b.n	800a228 <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1cc:	b2db      	uxtb	r3, r3
 800a1ce:	2b03      	cmp	r3, #3
 800a1d0:	d107      	bne.n	800a1e2 <USBD_HID_Setup+0x19e>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	3308      	adds	r3, #8
 800a1d6:	2201      	movs	r2, #1
 800a1d8:	4619      	mov	r1, r3
 800a1da:	6878      	ldr	r0, [r7, #4]
 800a1dc:	f001 f94f 	bl	800b47e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a1e0:	e022      	b.n	800a228 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 800a1e2:	6839      	ldr	r1, [r7, #0]
 800a1e4:	6878      	ldr	r0, [r7, #4]
 800a1e6:	f001 f8d9 	bl	800b39c <USBD_CtlError>
            ret = USBD_FAIL;
 800a1ea:	2303      	movs	r3, #3
 800a1ec:	75fb      	strb	r3, [r7, #23]
          break;
 800a1ee:	e01b      	b.n	800a228 <USBD_HID_Setup+0x1e4>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1f6:	b2db      	uxtb	r3, r3
 800a1f8:	2b03      	cmp	r3, #3
 800a1fa:	d106      	bne.n	800a20a <USBD_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 800a1fc:	683b      	ldr	r3, [r7, #0]
 800a1fe:	885b      	ldrh	r3, [r3, #2]
 800a200:	b2db      	uxtb	r3, r3
 800a202:	461a      	mov	r2, r3
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a208:	e00e      	b.n	800a228 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 800a20a:	6839      	ldr	r1, [r7, #0]
 800a20c:	6878      	ldr	r0, [r7, #4]
 800a20e:	f001 f8c5 	bl	800b39c <USBD_CtlError>
            ret = USBD_FAIL;
 800a212:	2303      	movs	r3, #3
 800a214:	75fb      	strb	r3, [r7, #23]
          break;
 800a216:	e007      	b.n	800a228 <USBD_HID_Setup+0x1e4>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a218:	6839      	ldr	r1, [r7, #0]
 800a21a:	6878      	ldr	r0, [r7, #4]
 800a21c:	f001 f8be 	bl	800b39c <USBD_CtlError>
          ret = USBD_FAIL;
 800a220:	2303      	movs	r3, #3
 800a222:	75fb      	strb	r3, [r7, #23]
          break;
 800a224:	e000      	b.n	800a228 <USBD_HID_Setup+0x1e4>
          break;
 800a226:	bf00      	nop
      }
      break;
 800a228:	e006      	b.n	800a238 <USBD_HID_Setup+0x1f4>

    default:
      USBD_CtlError(pdev, req);
 800a22a:	6839      	ldr	r1, [r7, #0]
 800a22c:	6878      	ldr	r0, [r7, #4]
 800a22e:	f001 f8b5 	bl	800b39c <USBD_CtlError>
      ret = USBD_FAIL;
 800a232:	2303      	movs	r3, #3
 800a234:	75fb      	strb	r3, [r7, #23]
      break;
 800a236:	bf00      	nop
  }

  return (uint8_t)ret;
 800a238:	7dfb      	ldrb	r3, [r7, #23]
}
 800a23a:	4618      	mov	r0, r3
 800a23c:	3718      	adds	r7, #24
 800a23e:	46bd      	mov	sp, r7
 800a240:	bd80      	pop	{r7, pc}
 800a242:	bf00      	nop
 800a244:	200000dc 	.word	0x200000dc
 800a248:	200000c4 	.word	0x200000c4

0800a24c <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b086      	sub	sp, #24
 800a250:	af00      	add	r7, sp, #0
 800a252:	60f8      	str	r0, [r7, #12]
 800a254:	60b9      	str	r1, [r7, #8]
 800a256:	4613      	mov	r3, r2
 800a258:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a260:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 800a262:	697b      	ldr	r3, [r7, #20]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d101      	bne.n	800a26c <USBD_HID_SendReport+0x20>
  {
    return (uint8_t)USBD_FAIL;
 800a268:	2303      	movs	r3, #3
 800a26a:	e013      	b.n	800a294 <USBD_HID_SendReport+0x48>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a272:	b2db      	uxtb	r3, r3
 800a274:	2b03      	cmp	r3, #3
 800a276:	d10c      	bne.n	800a292 <USBD_HID_SendReport+0x46>
  {
    if (hhid->state == HID_IDLE)
 800a278:	697b      	ldr	r3, [r7, #20]
 800a27a:	7b1b      	ldrb	r3, [r3, #12]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d108      	bne.n	800a292 <USBD_HID_SendReport+0x46>
    {
      hhid->state = HID_BUSY;
 800a280:	697b      	ldr	r3, [r7, #20]
 800a282:	2201      	movs	r2, #1
 800a284:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HID_EPIN_ADDR, report, len);
 800a286:	88fb      	ldrh	r3, [r7, #6]
 800a288:	68ba      	ldr	r2, [r7, #8]
 800a28a:	2181      	movs	r1, #129	; 0x81
 800a28c:	68f8      	ldr	r0, [r7, #12]
 800a28e:	f001 fd51 	bl	800bd34 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 800a292:	2300      	movs	r3, #0
}
 800a294:	4618      	mov	r0, r3
 800a296:	3718      	adds	r7, #24
 800a298:	46bd      	mov	sp, r7
 800a29a:	bd80      	pop	{r7, pc}

0800a29c <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 800a29c:	b480      	push	{r7}
 800a29e:	b083      	sub	sp, #12
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	2222      	movs	r2, #34	; 0x22
 800a2a8:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 800a2aa:	4b03      	ldr	r3, [pc, #12]	; (800a2b8 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	370c      	adds	r7, #12
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b6:	4770      	bx	lr
 800a2b8:	20000058 	.word	0x20000058

0800a2bc <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 800a2bc:	b480      	push	{r7}
 800a2be:	b083      	sub	sp, #12
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	2222      	movs	r2, #34	; 0x22
 800a2c8:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgHSDesc;
 800a2ca:	4b03      	ldr	r3, [pc, #12]	; (800a2d8 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	370c      	adds	r7, #12
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d6:	4770      	bx	lr
 800a2d8:	2000007c 	.word	0x2000007c

0800a2dc <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a2dc:	b480      	push	{r7}
 800a2de:	b083      	sub	sp, #12
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2222      	movs	r2, #34	; 0x22
 800a2e8:	801a      	strh	r2, [r3, #0]

  return USBD_HID_OtherSpeedCfgDesc;
 800a2ea:	4b03      	ldr	r3, [pc, #12]	; (800a2f8 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	370c      	adds	r7, #12
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f6:	4770      	bx	lr
 800a2f8:	200000a0 	.word	0x200000a0

0800a2fc <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a2fc:	b480      	push	{r7}
 800a2fe:	b083      	sub	sp, #12
 800a300:	af00      	add	r7, sp, #0
 800a302:	6078      	str	r0, [r7, #4]
 800a304:	460b      	mov	r3, r1
 800a306:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a30e:	2200      	movs	r2, #0
 800a310:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800a312:	2300      	movs	r3, #0
}
 800a314:	4618      	mov	r0, r3
 800a316:	370c      	adds	r7, #12
 800a318:	46bd      	mov	sp, r7
 800a31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31e:	4770      	bx	lr

0800a320 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800a320:	b480      	push	{r7}
 800a322:	b083      	sub	sp, #12
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	220a      	movs	r2, #10
 800a32c:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 800a32e:	4b03      	ldr	r3, [pc, #12]	; (800a33c <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 800a330:	4618      	mov	r0, r3
 800a332:	370c      	adds	r7, #12
 800a334:	46bd      	mov	sp, r7
 800a336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33a:	4770      	bx	lr
 800a33c:	200000d0 	.word	0x200000d0

0800a340 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a340:	b580      	push	{r7, lr}
 800a342:	b086      	sub	sp, #24
 800a344:	af00      	add	r7, sp, #0
 800a346:	60f8      	str	r0, [r7, #12]
 800a348:	60b9      	str	r1, [r7, #8]
 800a34a:	4613      	mov	r3, r2
 800a34c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	2b00      	cmp	r3, #0
 800a352:	d101      	bne.n	800a358 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a354:	2303      	movs	r3, #3
 800a356:	e01f      	b.n	800a398 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	2200      	movs	r2, #0
 800a35c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	2200      	movs	r2, #0
 800a364:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	2200      	movs	r2, #0
 800a36c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a370:	68bb      	ldr	r3, [r7, #8]
 800a372:	2b00      	cmp	r3, #0
 800a374:	d003      	beq.n	800a37e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	68ba      	ldr	r2, [r7, #8]
 800a37a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	2201      	movs	r2, #1
 800a382:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	79fa      	ldrb	r2, [r7, #7]
 800a38a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a38c:	68f8      	ldr	r0, [r7, #12]
 800a38e:	f001 fb0b 	bl	800b9a8 <USBD_LL_Init>
 800a392:	4603      	mov	r3, r0
 800a394:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a396:	7dfb      	ldrb	r3, [r7, #23]
}
 800a398:	4618      	mov	r0, r3
 800a39a:	3718      	adds	r7, #24
 800a39c:	46bd      	mov	sp, r7
 800a39e:	bd80      	pop	{r7, pc}

0800a3a0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b084      	sub	sp, #16
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
 800a3a8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a3ae:	683b      	ldr	r3, [r7, #0]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d101      	bne.n	800a3b8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800a3b4:	2303      	movs	r3, #3
 800a3b6:	e016      	b.n	800a3e6 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	683a      	ldr	r2, [r7, #0]
 800a3bc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d00b      	beq.n	800a3e4 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3d4:	f107 020e 	add.w	r2, r7, #14
 800a3d8:	4610      	mov	r0, r2
 800a3da:	4798      	blx	r3
 800a3dc:	4602      	mov	r2, r0
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800a3e4:	2300      	movs	r3, #0
}
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	3710      	adds	r7, #16
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bd80      	pop	{r7, pc}

0800a3ee <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a3ee:	b580      	push	{r7, lr}
 800a3f0:	b082      	sub	sp, #8
 800a3f2:	af00      	add	r7, sp, #0
 800a3f4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a3f6:	6878      	ldr	r0, [r7, #4]
 800a3f8:	f001 fb26 	bl	800ba48 <USBD_LL_Start>
 800a3fc:	4603      	mov	r3, r0
}
 800a3fe:	4618      	mov	r0, r3
 800a400:	3708      	adds	r7, #8
 800a402:	46bd      	mov	sp, r7
 800a404:	bd80      	pop	{r7, pc}

0800a406 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a406:	b480      	push	{r7}
 800a408:	b083      	sub	sp, #12
 800a40a:	af00      	add	r7, sp, #0
 800a40c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a40e:	2300      	movs	r3, #0
}
 800a410:	4618      	mov	r0, r3
 800a412:	370c      	adds	r7, #12
 800a414:	46bd      	mov	sp, r7
 800a416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41a:	4770      	bx	lr

0800a41c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b084      	sub	sp, #16
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
 800a424:	460b      	mov	r3, r1
 800a426:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a428:	2303      	movs	r3, #3
 800a42a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a432:	2b00      	cmp	r3, #0
 800a434:	d009      	beq.n	800a44a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	78fa      	ldrb	r2, [r7, #3]
 800a440:	4611      	mov	r1, r2
 800a442:	6878      	ldr	r0, [r7, #4]
 800a444:	4798      	blx	r3
 800a446:	4603      	mov	r3, r0
 800a448:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a44a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a44c:	4618      	mov	r0, r3
 800a44e:	3710      	adds	r7, #16
 800a450:	46bd      	mov	sp, r7
 800a452:	bd80      	pop	{r7, pc}

0800a454 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a454:	b580      	push	{r7, lr}
 800a456:	b082      	sub	sp, #8
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
 800a45c:	460b      	mov	r3, r1
 800a45e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a466:	2b00      	cmp	r3, #0
 800a468:	d007      	beq.n	800a47a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a470:	685b      	ldr	r3, [r3, #4]
 800a472:	78fa      	ldrb	r2, [r7, #3]
 800a474:	4611      	mov	r1, r2
 800a476:	6878      	ldr	r0, [r7, #4]
 800a478:	4798      	blx	r3
  }

  return USBD_OK;
 800a47a:	2300      	movs	r3, #0
}
 800a47c:	4618      	mov	r0, r3
 800a47e:	3708      	adds	r7, #8
 800a480:	46bd      	mov	sp, r7
 800a482:	bd80      	pop	{r7, pc}

0800a484 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a484:	b580      	push	{r7, lr}
 800a486:	b084      	sub	sp, #16
 800a488:	af00      	add	r7, sp, #0
 800a48a:	6078      	str	r0, [r7, #4]
 800a48c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a494:	6839      	ldr	r1, [r7, #0]
 800a496:	4618      	mov	r0, r3
 800a498:	f000 ff46 	bl	800b328 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	2201      	movs	r2, #1
 800a4a0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a4aa:	461a      	mov	r2, r3
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a4b8:	f003 031f 	and.w	r3, r3, #31
 800a4bc:	2b02      	cmp	r3, #2
 800a4be:	d01a      	beq.n	800a4f6 <USBD_LL_SetupStage+0x72>
 800a4c0:	2b02      	cmp	r3, #2
 800a4c2:	d822      	bhi.n	800a50a <USBD_LL_SetupStage+0x86>
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d002      	beq.n	800a4ce <USBD_LL_SetupStage+0x4a>
 800a4c8:	2b01      	cmp	r3, #1
 800a4ca:	d00a      	beq.n	800a4e2 <USBD_LL_SetupStage+0x5e>
 800a4cc:	e01d      	b.n	800a50a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a4d4:	4619      	mov	r1, r3
 800a4d6:	6878      	ldr	r0, [r7, #4]
 800a4d8:	f000 f9ee 	bl	800a8b8 <USBD_StdDevReq>
 800a4dc:	4603      	mov	r3, r0
 800a4de:	73fb      	strb	r3, [r7, #15]
      break;
 800a4e0:	e020      	b.n	800a524 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a4e8:	4619      	mov	r1, r3
 800a4ea:	6878      	ldr	r0, [r7, #4]
 800a4ec:	f000 fa52 	bl	800a994 <USBD_StdItfReq>
 800a4f0:	4603      	mov	r3, r0
 800a4f2:	73fb      	strb	r3, [r7, #15]
      break;
 800a4f4:	e016      	b.n	800a524 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a4fc:	4619      	mov	r1, r3
 800a4fe:	6878      	ldr	r0, [r7, #4]
 800a500:	f000 fa91 	bl	800aa26 <USBD_StdEPReq>
 800a504:	4603      	mov	r3, r0
 800a506:	73fb      	strb	r3, [r7, #15]
      break;
 800a508:	e00c      	b.n	800a524 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a510:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a514:	b2db      	uxtb	r3, r3
 800a516:	4619      	mov	r1, r3
 800a518:	6878      	ldr	r0, [r7, #4]
 800a51a:	f001 fb3b 	bl	800bb94 <USBD_LL_StallEP>
 800a51e:	4603      	mov	r3, r0
 800a520:	73fb      	strb	r3, [r7, #15]
      break;
 800a522:	bf00      	nop
  }

  return ret;
 800a524:	7bfb      	ldrb	r3, [r7, #15]
}
 800a526:	4618      	mov	r0, r3
 800a528:	3710      	adds	r7, #16
 800a52a:	46bd      	mov	sp, r7
 800a52c:	bd80      	pop	{r7, pc}

0800a52e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a52e:	b580      	push	{r7, lr}
 800a530:	b086      	sub	sp, #24
 800a532:	af00      	add	r7, sp, #0
 800a534:	60f8      	str	r0, [r7, #12]
 800a536:	460b      	mov	r3, r1
 800a538:	607a      	str	r2, [r7, #4]
 800a53a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a53c:	7afb      	ldrb	r3, [r7, #11]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d138      	bne.n	800a5b4 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a548:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a550:	2b03      	cmp	r3, #3
 800a552:	d14a      	bne.n	800a5ea <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800a554:	693b      	ldr	r3, [r7, #16]
 800a556:	689a      	ldr	r2, [r3, #8]
 800a558:	693b      	ldr	r3, [r7, #16]
 800a55a:	68db      	ldr	r3, [r3, #12]
 800a55c:	429a      	cmp	r2, r3
 800a55e:	d913      	bls.n	800a588 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a560:	693b      	ldr	r3, [r7, #16]
 800a562:	689a      	ldr	r2, [r3, #8]
 800a564:	693b      	ldr	r3, [r7, #16]
 800a566:	68db      	ldr	r3, [r3, #12]
 800a568:	1ad2      	subs	r2, r2, r3
 800a56a:	693b      	ldr	r3, [r7, #16]
 800a56c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a56e:	693b      	ldr	r3, [r7, #16]
 800a570:	68da      	ldr	r2, [r3, #12]
 800a572:	693b      	ldr	r3, [r7, #16]
 800a574:	689b      	ldr	r3, [r3, #8]
 800a576:	4293      	cmp	r3, r2
 800a578:	bf28      	it	cs
 800a57a:	4613      	movcs	r3, r2
 800a57c:	461a      	mov	r2, r3
 800a57e:	6879      	ldr	r1, [r7, #4]
 800a580:	68f8      	ldr	r0, [r7, #12]
 800a582:	f000 ffa8 	bl	800b4d6 <USBD_CtlContinueRx>
 800a586:	e030      	b.n	800a5ea <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a58e:	b2db      	uxtb	r3, r3
 800a590:	2b03      	cmp	r3, #3
 800a592:	d10b      	bne.n	800a5ac <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a59a:	691b      	ldr	r3, [r3, #16]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d005      	beq.n	800a5ac <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5a6:	691b      	ldr	r3, [r3, #16]
 800a5a8:	68f8      	ldr	r0, [r7, #12]
 800a5aa:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a5ac:	68f8      	ldr	r0, [r7, #12]
 800a5ae:	f000 ffa3 	bl	800b4f8 <USBD_CtlSendStatus>
 800a5b2:	e01a      	b.n	800a5ea <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a5ba:	b2db      	uxtb	r3, r3
 800a5bc:	2b03      	cmp	r3, #3
 800a5be:	d114      	bne.n	800a5ea <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5c6:	699b      	ldr	r3, [r3, #24]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d00e      	beq.n	800a5ea <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5d2:	699b      	ldr	r3, [r3, #24]
 800a5d4:	7afa      	ldrb	r2, [r7, #11]
 800a5d6:	4611      	mov	r1, r2
 800a5d8:	68f8      	ldr	r0, [r7, #12]
 800a5da:	4798      	blx	r3
 800a5dc:	4603      	mov	r3, r0
 800a5de:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800a5e0:	7dfb      	ldrb	r3, [r7, #23]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d001      	beq.n	800a5ea <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800a5e6:	7dfb      	ldrb	r3, [r7, #23]
 800a5e8:	e000      	b.n	800a5ec <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800a5ea:	2300      	movs	r3, #0
}
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	3718      	adds	r7, #24
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	bd80      	pop	{r7, pc}

0800a5f4 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	b086      	sub	sp, #24
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	60f8      	str	r0, [r7, #12]
 800a5fc:	460b      	mov	r3, r1
 800a5fe:	607a      	str	r2, [r7, #4]
 800a600:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a602:	7afb      	ldrb	r3, [r7, #11]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d16b      	bne.n	800a6e0 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	3314      	adds	r3, #20
 800a60c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a614:	2b02      	cmp	r3, #2
 800a616:	d156      	bne.n	800a6c6 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800a618:	693b      	ldr	r3, [r7, #16]
 800a61a:	689a      	ldr	r2, [r3, #8]
 800a61c:	693b      	ldr	r3, [r7, #16]
 800a61e:	68db      	ldr	r3, [r3, #12]
 800a620:	429a      	cmp	r2, r3
 800a622:	d914      	bls.n	800a64e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a624:	693b      	ldr	r3, [r7, #16]
 800a626:	689a      	ldr	r2, [r3, #8]
 800a628:	693b      	ldr	r3, [r7, #16]
 800a62a:	68db      	ldr	r3, [r3, #12]
 800a62c:	1ad2      	subs	r2, r2, r3
 800a62e:	693b      	ldr	r3, [r7, #16]
 800a630:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a632:	693b      	ldr	r3, [r7, #16]
 800a634:	689b      	ldr	r3, [r3, #8]
 800a636:	461a      	mov	r2, r3
 800a638:	6879      	ldr	r1, [r7, #4]
 800a63a:	68f8      	ldr	r0, [r7, #12]
 800a63c:	f000 ff3a 	bl	800b4b4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a640:	2300      	movs	r3, #0
 800a642:	2200      	movs	r2, #0
 800a644:	2100      	movs	r1, #0
 800a646:	68f8      	ldr	r0, [r7, #12]
 800a648:	f001 fbac 	bl	800bda4 <USBD_LL_PrepareReceive>
 800a64c:	e03b      	b.n	800a6c6 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a64e:	693b      	ldr	r3, [r7, #16]
 800a650:	68da      	ldr	r2, [r3, #12]
 800a652:	693b      	ldr	r3, [r7, #16]
 800a654:	689b      	ldr	r3, [r3, #8]
 800a656:	429a      	cmp	r2, r3
 800a658:	d11c      	bne.n	800a694 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a65a:	693b      	ldr	r3, [r7, #16]
 800a65c:	685a      	ldr	r2, [r3, #4]
 800a65e:	693b      	ldr	r3, [r7, #16]
 800a660:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a662:	429a      	cmp	r2, r3
 800a664:	d316      	bcc.n	800a694 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a666:	693b      	ldr	r3, [r7, #16]
 800a668:	685a      	ldr	r2, [r3, #4]
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a670:	429a      	cmp	r2, r3
 800a672:	d20f      	bcs.n	800a694 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a674:	2200      	movs	r2, #0
 800a676:	2100      	movs	r1, #0
 800a678:	68f8      	ldr	r0, [r7, #12]
 800a67a:	f000 ff1b 	bl	800b4b4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	2200      	movs	r2, #0
 800a682:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a686:	2300      	movs	r3, #0
 800a688:	2200      	movs	r2, #0
 800a68a:	2100      	movs	r1, #0
 800a68c:	68f8      	ldr	r0, [r7, #12]
 800a68e:	f001 fb89 	bl	800bda4 <USBD_LL_PrepareReceive>
 800a692:	e018      	b.n	800a6c6 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a69a:	b2db      	uxtb	r3, r3
 800a69c:	2b03      	cmp	r3, #3
 800a69e:	d10b      	bne.n	800a6b8 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6a6:	68db      	ldr	r3, [r3, #12]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d005      	beq.n	800a6b8 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6b2:	68db      	ldr	r3, [r3, #12]
 800a6b4:	68f8      	ldr	r0, [r7, #12]
 800a6b6:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a6b8:	2180      	movs	r1, #128	; 0x80
 800a6ba:	68f8      	ldr	r0, [r7, #12]
 800a6bc:	f001 fa6a 	bl	800bb94 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a6c0:	68f8      	ldr	r0, [r7, #12]
 800a6c2:	f000 ff2c 	bl	800b51e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a6cc:	2b01      	cmp	r3, #1
 800a6ce:	d122      	bne.n	800a716 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800a6d0:	68f8      	ldr	r0, [r7, #12]
 800a6d2:	f7ff fe98 	bl	800a406 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	2200      	movs	r2, #0
 800a6da:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a6de:	e01a      	b.n	800a716 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6e6:	b2db      	uxtb	r3, r3
 800a6e8:	2b03      	cmp	r3, #3
 800a6ea:	d114      	bne.n	800a716 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6f2:	695b      	ldr	r3, [r3, #20]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d00e      	beq.n	800a716 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6fe:	695b      	ldr	r3, [r3, #20]
 800a700:	7afa      	ldrb	r2, [r7, #11]
 800a702:	4611      	mov	r1, r2
 800a704:	68f8      	ldr	r0, [r7, #12]
 800a706:	4798      	blx	r3
 800a708:	4603      	mov	r3, r0
 800a70a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800a70c:	7dfb      	ldrb	r3, [r7, #23]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d001      	beq.n	800a716 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800a712:	7dfb      	ldrb	r3, [r7, #23]
 800a714:	e000      	b.n	800a718 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800a716:	2300      	movs	r3, #0
}
 800a718:	4618      	mov	r0, r3
 800a71a:	3718      	adds	r7, #24
 800a71c:	46bd      	mov	sp, r7
 800a71e:	bd80      	pop	{r7, pc}

0800a720 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a720:	b580      	push	{r7, lr}
 800a722:	b082      	sub	sp, #8
 800a724:	af00      	add	r7, sp, #0
 800a726:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	2201      	movs	r2, #1
 800a72c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2200      	movs	r2, #0
 800a734:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	2200      	movs	r2, #0
 800a73c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	2200      	movs	r2, #0
 800a742:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d101      	bne.n	800a754 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800a750:	2303      	movs	r3, #3
 800a752:	e02f      	b.n	800a7b4 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d00f      	beq.n	800a77e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a764:	685b      	ldr	r3, [r3, #4]
 800a766:	2b00      	cmp	r3, #0
 800a768:	d009      	beq.n	800a77e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a770:	685b      	ldr	r3, [r3, #4]
 800a772:	687a      	ldr	r2, [r7, #4]
 800a774:	6852      	ldr	r2, [r2, #4]
 800a776:	b2d2      	uxtb	r2, r2
 800a778:	4611      	mov	r1, r2
 800a77a:	6878      	ldr	r0, [r7, #4]
 800a77c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a77e:	2340      	movs	r3, #64	; 0x40
 800a780:	2200      	movs	r2, #0
 800a782:	2100      	movs	r1, #0
 800a784:	6878      	ldr	r0, [r7, #4]
 800a786:	f001 f991 	bl	800baac <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	2201      	movs	r2, #1
 800a78e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	2240      	movs	r2, #64	; 0x40
 800a796:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a79a:	2340      	movs	r3, #64	; 0x40
 800a79c:	2200      	movs	r2, #0
 800a79e:	2180      	movs	r1, #128	; 0x80
 800a7a0:	6878      	ldr	r0, [r7, #4]
 800a7a2:	f001 f983 	bl	800baac <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	2201      	movs	r2, #1
 800a7aa:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	2240      	movs	r2, #64	; 0x40
 800a7b0:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800a7b2:	2300      	movs	r3, #0
}
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	3708      	adds	r7, #8
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	bd80      	pop	{r7, pc}

0800a7bc <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a7bc:	b480      	push	{r7}
 800a7be:	b083      	sub	sp, #12
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	6078      	str	r0, [r7, #4]
 800a7c4:	460b      	mov	r3, r1
 800a7c6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	78fa      	ldrb	r2, [r7, #3]
 800a7cc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a7ce:	2300      	movs	r3, #0
}
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	370c      	adds	r7, #12
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7da:	4770      	bx	lr

0800a7dc <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a7dc:	b480      	push	{r7}
 800a7de:	b083      	sub	sp, #12
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7ea:	b2da      	uxtb	r2, r3
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	2204      	movs	r2, #4
 800a7f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a7fa:	2300      	movs	r3, #0
}
 800a7fc:	4618      	mov	r0, r3
 800a7fe:	370c      	adds	r7, #12
 800a800:	46bd      	mov	sp, r7
 800a802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a806:	4770      	bx	lr

0800a808 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a808:	b480      	push	{r7}
 800a80a:	b083      	sub	sp, #12
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a816:	b2db      	uxtb	r3, r3
 800a818:	2b04      	cmp	r3, #4
 800a81a:	d106      	bne.n	800a82a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800a822:	b2da      	uxtb	r2, r3
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a82a:	2300      	movs	r3, #0
}
 800a82c:	4618      	mov	r0, r3
 800a82e:	370c      	adds	r7, #12
 800a830:	46bd      	mov	sp, r7
 800a832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a836:	4770      	bx	lr

0800a838 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	b082      	sub	sp, #8
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a846:	2b00      	cmp	r3, #0
 800a848:	d101      	bne.n	800a84e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800a84a:	2303      	movs	r3, #3
 800a84c:	e012      	b.n	800a874 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a854:	b2db      	uxtb	r3, r3
 800a856:	2b03      	cmp	r3, #3
 800a858:	d10b      	bne.n	800a872 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a860:	69db      	ldr	r3, [r3, #28]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d005      	beq.n	800a872 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a86c:	69db      	ldr	r3, [r3, #28]
 800a86e:	6878      	ldr	r0, [r7, #4]
 800a870:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a872:	2300      	movs	r3, #0
}
 800a874:	4618      	mov	r0, r3
 800a876:	3708      	adds	r7, #8
 800a878:	46bd      	mov	sp, r7
 800a87a:	bd80      	pop	{r7, pc}

0800a87c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a87c:	b480      	push	{r7}
 800a87e:	b087      	sub	sp, #28
 800a880:	af00      	add	r7, sp, #0
 800a882:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a888:	697b      	ldr	r3, [r7, #20]
 800a88a:	781b      	ldrb	r3, [r3, #0]
 800a88c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a88e:	697b      	ldr	r3, [r7, #20]
 800a890:	3301      	adds	r3, #1
 800a892:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a894:	697b      	ldr	r3, [r7, #20]
 800a896:	781b      	ldrb	r3, [r3, #0]
 800a898:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a89a:	8a3b      	ldrh	r3, [r7, #16]
 800a89c:	021b      	lsls	r3, r3, #8
 800a89e:	b21a      	sxth	r2, r3
 800a8a0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a8a4:	4313      	orrs	r3, r2
 800a8a6:	b21b      	sxth	r3, r3
 800a8a8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a8aa:	89fb      	ldrh	r3, [r7, #14]
}
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	371c      	adds	r7, #28
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b6:	4770      	bx	lr

0800a8b8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b084      	sub	sp, #16
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
 800a8c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a8c6:	683b      	ldr	r3, [r7, #0]
 800a8c8:	781b      	ldrb	r3, [r3, #0]
 800a8ca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a8ce:	2b40      	cmp	r3, #64	; 0x40
 800a8d0:	d005      	beq.n	800a8de <USBD_StdDevReq+0x26>
 800a8d2:	2b40      	cmp	r3, #64	; 0x40
 800a8d4:	d853      	bhi.n	800a97e <USBD_StdDevReq+0xc6>
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d00b      	beq.n	800a8f2 <USBD_StdDevReq+0x3a>
 800a8da:	2b20      	cmp	r3, #32
 800a8dc:	d14f      	bne.n	800a97e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8e4:	689b      	ldr	r3, [r3, #8]
 800a8e6:	6839      	ldr	r1, [r7, #0]
 800a8e8:	6878      	ldr	r0, [r7, #4]
 800a8ea:	4798      	blx	r3
 800a8ec:	4603      	mov	r3, r0
 800a8ee:	73fb      	strb	r3, [r7, #15]
      break;
 800a8f0:	e04a      	b.n	800a988 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a8f2:	683b      	ldr	r3, [r7, #0]
 800a8f4:	785b      	ldrb	r3, [r3, #1]
 800a8f6:	2b09      	cmp	r3, #9
 800a8f8:	d83b      	bhi.n	800a972 <USBD_StdDevReq+0xba>
 800a8fa:	a201      	add	r2, pc, #4	; (adr r2, 800a900 <USBD_StdDevReq+0x48>)
 800a8fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a900:	0800a955 	.word	0x0800a955
 800a904:	0800a969 	.word	0x0800a969
 800a908:	0800a973 	.word	0x0800a973
 800a90c:	0800a95f 	.word	0x0800a95f
 800a910:	0800a973 	.word	0x0800a973
 800a914:	0800a933 	.word	0x0800a933
 800a918:	0800a929 	.word	0x0800a929
 800a91c:	0800a973 	.word	0x0800a973
 800a920:	0800a94b 	.word	0x0800a94b
 800a924:	0800a93d 	.word	0x0800a93d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a928:	6839      	ldr	r1, [r7, #0]
 800a92a:	6878      	ldr	r0, [r7, #4]
 800a92c:	f000 f9de 	bl	800acec <USBD_GetDescriptor>
          break;
 800a930:	e024      	b.n	800a97c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a932:	6839      	ldr	r1, [r7, #0]
 800a934:	6878      	ldr	r0, [r7, #4]
 800a936:	f000 fb6d 	bl	800b014 <USBD_SetAddress>
          break;
 800a93a:	e01f      	b.n	800a97c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a93c:	6839      	ldr	r1, [r7, #0]
 800a93e:	6878      	ldr	r0, [r7, #4]
 800a940:	f000 fbac 	bl	800b09c <USBD_SetConfig>
 800a944:	4603      	mov	r3, r0
 800a946:	73fb      	strb	r3, [r7, #15]
          break;
 800a948:	e018      	b.n	800a97c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a94a:	6839      	ldr	r1, [r7, #0]
 800a94c:	6878      	ldr	r0, [r7, #4]
 800a94e:	f000 fc4b 	bl	800b1e8 <USBD_GetConfig>
          break;
 800a952:	e013      	b.n	800a97c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a954:	6839      	ldr	r1, [r7, #0]
 800a956:	6878      	ldr	r0, [r7, #4]
 800a958:	f000 fc7c 	bl	800b254 <USBD_GetStatus>
          break;
 800a95c:	e00e      	b.n	800a97c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a95e:	6839      	ldr	r1, [r7, #0]
 800a960:	6878      	ldr	r0, [r7, #4]
 800a962:	f000 fcab 	bl	800b2bc <USBD_SetFeature>
          break;
 800a966:	e009      	b.n	800a97c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a968:	6839      	ldr	r1, [r7, #0]
 800a96a:	6878      	ldr	r0, [r7, #4]
 800a96c:	f000 fcba 	bl	800b2e4 <USBD_ClrFeature>
          break;
 800a970:	e004      	b.n	800a97c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800a972:	6839      	ldr	r1, [r7, #0]
 800a974:	6878      	ldr	r0, [r7, #4]
 800a976:	f000 fd11 	bl	800b39c <USBD_CtlError>
          break;
 800a97a:	bf00      	nop
      }
      break;
 800a97c:	e004      	b.n	800a988 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800a97e:	6839      	ldr	r1, [r7, #0]
 800a980:	6878      	ldr	r0, [r7, #4]
 800a982:	f000 fd0b 	bl	800b39c <USBD_CtlError>
      break;
 800a986:	bf00      	nop
  }

  return ret;
 800a988:	7bfb      	ldrb	r3, [r7, #15]
}
 800a98a:	4618      	mov	r0, r3
 800a98c:	3710      	adds	r7, #16
 800a98e:	46bd      	mov	sp, r7
 800a990:	bd80      	pop	{r7, pc}
 800a992:	bf00      	nop

0800a994 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a994:	b580      	push	{r7, lr}
 800a996:	b084      	sub	sp, #16
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
 800a99c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a99e:	2300      	movs	r3, #0
 800a9a0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a9a2:	683b      	ldr	r3, [r7, #0]
 800a9a4:	781b      	ldrb	r3, [r3, #0]
 800a9a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a9aa:	2b40      	cmp	r3, #64	; 0x40
 800a9ac:	d005      	beq.n	800a9ba <USBD_StdItfReq+0x26>
 800a9ae:	2b40      	cmp	r3, #64	; 0x40
 800a9b0:	d82f      	bhi.n	800aa12 <USBD_StdItfReq+0x7e>
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d001      	beq.n	800a9ba <USBD_StdItfReq+0x26>
 800a9b6:	2b20      	cmp	r3, #32
 800a9b8:	d12b      	bne.n	800aa12 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9c0:	b2db      	uxtb	r3, r3
 800a9c2:	3b01      	subs	r3, #1
 800a9c4:	2b02      	cmp	r3, #2
 800a9c6:	d81d      	bhi.n	800aa04 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a9c8:	683b      	ldr	r3, [r7, #0]
 800a9ca:	889b      	ldrh	r3, [r3, #4]
 800a9cc:	b2db      	uxtb	r3, r3
 800a9ce:	2b01      	cmp	r3, #1
 800a9d0:	d813      	bhi.n	800a9fa <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9d8:	689b      	ldr	r3, [r3, #8]
 800a9da:	6839      	ldr	r1, [r7, #0]
 800a9dc:	6878      	ldr	r0, [r7, #4]
 800a9de:	4798      	blx	r3
 800a9e0:	4603      	mov	r3, r0
 800a9e2:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a9e4:	683b      	ldr	r3, [r7, #0]
 800a9e6:	88db      	ldrh	r3, [r3, #6]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d110      	bne.n	800aa0e <USBD_StdItfReq+0x7a>
 800a9ec:	7bfb      	ldrb	r3, [r7, #15]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d10d      	bne.n	800aa0e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a9f2:	6878      	ldr	r0, [r7, #4]
 800a9f4:	f000 fd80 	bl	800b4f8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a9f8:	e009      	b.n	800aa0e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800a9fa:	6839      	ldr	r1, [r7, #0]
 800a9fc:	6878      	ldr	r0, [r7, #4]
 800a9fe:	f000 fccd 	bl	800b39c <USBD_CtlError>
          break;
 800aa02:	e004      	b.n	800aa0e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800aa04:	6839      	ldr	r1, [r7, #0]
 800aa06:	6878      	ldr	r0, [r7, #4]
 800aa08:	f000 fcc8 	bl	800b39c <USBD_CtlError>
          break;
 800aa0c:	e000      	b.n	800aa10 <USBD_StdItfReq+0x7c>
          break;
 800aa0e:	bf00      	nop
      }
      break;
 800aa10:	e004      	b.n	800aa1c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800aa12:	6839      	ldr	r1, [r7, #0]
 800aa14:	6878      	ldr	r0, [r7, #4]
 800aa16:	f000 fcc1 	bl	800b39c <USBD_CtlError>
      break;
 800aa1a:	bf00      	nop
  }

  return ret;
 800aa1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa1e:	4618      	mov	r0, r3
 800aa20:	3710      	adds	r7, #16
 800aa22:	46bd      	mov	sp, r7
 800aa24:	bd80      	pop	{r7, pc}

0800aa26 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa26:	b580      	push	{r7, lr}
 800aa28:	b084      	sub	sp, #16
 800aa2a:	af00      	add	r7, sp, #0
 800aa2c:	6078      	str	r0, [r7, #4]
 800aa2e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800aa30:	2300      	movs	r3, #0
 800aa32:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800aa34:	683b      	ldr	r3, [r7, #0]
 800aa36:	889b      	ldrh	r3, [r3, #4]
 800aa38:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aa3a:	683b      	ldr	r3, [r7, #0]
 800aa3c:	781b      	ldrb	r3, [r3, #0]
 800aa3e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800aa42:	2b40      	cmp	r3, #64	; 0x40
 800aa44:	d007      	beq.n	800aa56 <USBD_StdEPReq+0x30>
 800aa46:	2b40      	cmp	r3, #64	; 0x40
 800aa48:	f200 8145 	bhi.w	800acd6 <USBD_StdEPReq+0x2b0>
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d00c      	beq.n	800aa6a <USBD_StdEPReq+0x44>
 800aa50:	2b20      	cmp	r3, #32
 800aa52:	f040 8140 	bne.w	800acd6 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa5c:	689b      	ldr	r3, [r3, #8]
 800aa5e:	6839      	ldr	r1, [r7, #0]
 800aa60:	6878      	ldr	r0, [r7, #4]
 800aa62:	4798      	blx	r3
 800aa64:	4603      	mov	r3, r0
 800aa66:	73fb      	strb	r3, [r7, #15]
      break;
 800aa68:	e13a      	b.n	800ace0 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800aa6a:	683b      	ldr	r3, [r7, #0]
 800aa6c:	785b      	ldrb	r3, [r3, #1]
 800aa6e:	2b03      	cmp	r3, #3
 800aa70:	d007      	beq.n	800aa82 <USBD_StdEPReq+0x5c>
 800aa72:	2b03      	cmp	r3, #3
 800aa74:	f300 8129 	bgt.w	800acca <USBD_StdEPReq+0x2a4>
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d07f      	beq.n	800ab7c <USBD_StdEPReq+0x156>
 800aa7c:	2b01      	cmp	r3, #1
 800aa7e:	d03c      	beq.n	800aafa <USBD_StdEPReq+0xd4>
 800aa80:	e123      	b.n	800acca <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa88:	b2db      	uxtb	r3, r3
 800aa8a:	2b02      	cmp	r3, #2
 800aa8c:	d002      	beq.n	800aa94 <USBD_StdEPReq+0x6e>
 800aa8e:	2b03      	cmp	r3, #3
 800aa90:	d016      	beq.n	800aac0 <USBD_StdEPReq+0x9a>
 800aa92:	e02c      	b.n	800aaee <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aa94:	7bbb      	ldrb	r3, [r7, #14]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d00d      	beq.n	800aab6 <USBD_StdEPReq+0x90>
 800aa9a:	7bbb      	ldrb	r3, [r7, #14]
 800aa9c:	2b80      	cmp	r3, #128	; 0x80
 800aa9e:	d00a      	beq.n	800aab6 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800aaa0:	7bbb      	ldrb	r3, [r7, #14]
 800aaa2:	4619      	mov	r1, r3
 800aaa4:	6878      	ldr	r0, [r7, #4]
 800aaa6:	f001 f875 	bl	800bb94 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800aaaa:	2180      	movs	r1, #128	; 0x80
 800aaac:	6878      	ldr	r0, [r7, #4]
 800aaae:	f001 f871 	bl	800bb94 <USBD_LL_StallEP>
 800aab2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800aab4:	e020      	b.n	800aaf8 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800aab6:	6839      	ldr	r1, [r7, #0]
 800aab8:	6878      	ldr	r0, [r7, #4]
 800aaba:	f000 fc6f 	bl	800b39c <USBD_CtlError>
              break;
 800aabe:	e01b      	b.n	800aaf8 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800aac0:	683b      	ldr	r3, [r7, #0]
 800aac2:	885b      	ldrh	r3, [r3, #2]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d10e      	bne.n	800aae6 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800aac8:	7bbb      	ldrb	r3, [r7, #14]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d00b      	beq.n	800aae6 <USBD_StdEPReq+0xc0>
 800aace:	7bbb      	ldrb	r3, [r7, #14]
 800aad0:	2b80      	cmp	r3, #128	; 0x80
 800aad2:	d008      	beq.n	800aae6 <USBD_StdEPReq+0xc0>
 800aad4:	683b      	ldr	r3, [r7, #0]
 800aad6:	88db      	ldrh	r3, [r3, #6]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d104      	bne.n	800aae6 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800aadc:	7bbb      	ldrb	r3, [r7, #14]
 800aade:	4619      	mov	r1, r3
 800aae0:	6878      	ldr	r0, [r7, #4]
 800aae2:	f001 f857 	bl	800bb94 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800aae6:	6878      	ldr	r0, [r7, #4]
 800aae8:	f000 fd06 	bl	800b4f8 <USBD_CtlSendStatus>

              break;
 800aaec:	e004      	b.n	800aaf8 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800aaee:	6839      	ldr	r1, [r7, #0]
 800aaf0:	6878      	ldr	r0, [r7, #4]
 800aaf2:	f000 fc53 	bl	800b39c <USBD_CtlError>
              break;
 800aaf6:	bf00      	nop
          }
          break;
 800aaf8:	e0ec      	b.n	800acd4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab00:	b2db      	uxtb	r3, r3
 800ab02:	2b02      	cmp	r3, #2
 800ab04:	d002      	beq.n	800ab0c <USBD_StdEPReq+0xe6>
 800ab06:	2b03      	cmp	r3, #3
 800ab08:	d016      	beq.n	800ab38 <USBD_StdEPReq+0x112>
 800ab0a:	e030      	b.n	800ab6e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ab0c:	7bbb      	ldrb	r3, [r7, #14]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d00d      	beq.n	800ab2e <USBD_StdEPReq+0x108>
 800ab12:	7bbb      	ldrb	r3, [r7, #14]
 800ab14:	2b80      	cmp	r3, #128	; 0x80
 800ab16:	d00a      	beq.n	800ab2e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ab18:	7bbb      	ldrb	r3, [r7, #14]
 800ab1a:	4619      	mov	r1, r3
 800ab1c:	6878      	ldr	r0, [r7, #4]
 800ab1e:	f001 f839 	bl	800bb94 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ab22:	2180      	movs	r1, #128	; 0x80
 800ab24:	6878      	ldr	r0, [r7, #4]
 800ab26:	f001 f835 	bl	800bb94 <USBD_LL_StallEP>
 800ab2a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ab2c:	e025      	b.n	800ab7a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800ab2e:	6839      	ldr	r1, [r7, #0]
 800ab30:	6878      	ldr	r0, [r7, #4]
 800ab32:	f000 fc33 	bl	800b39c <USBD_CtlError>
              break;
 800ab36:	e020      	b.n	800ab7a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ab38:	683b      	ldr	r3, [r7, #0]
 800ab3a:	885b      	ldrh	r3, [r3, #2]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d11b      	bne.n	800ab78 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ab40:	7bbb      	ldrb	r3, [r7, #14]
 800ab42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d004      	beq.n	800ab54 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ab4a:	7bbb      	ldrb	r3, [r7, #14]
 800ab4c:	4619      	mov	r1, r3
 800ab4e:	6878      	ldr	r0, [r7, #4]
 800ab50:	f001 f856 	bl	800bc00 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800ab54:	6878      	ldr	r0, [r7, #4]
 800ab56:	f000 fccf 	bl	800b4f8 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab60:	689b      	ldr	r3, [r3, #8]
 800ab62:	6839      	ldr	r1, [r7, #0]
 800ab64:	6878      	ldr	r0, [r7, #4]
 800ab66:	4798      	blx	r3
 800ab68:	4603      	mov	r3, r0
 800ab6a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800ab6c:	e004      	b.n	800ab78 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800ab6e:	6839      	ldr	r1, [r7, #0]
 800ab70:	6878      	ldr	r0, [r7, #4]
 800ab72:	f000 fc13 	bl	800b39c <USBD_CtlError>
              break;
 800ab76:	e000      	b.n	800ab7a <USBD_StdEPReq+0x154>
              break;
 800ab78:	bf00      	nop
          }
          break;
 800ab7a:	e0ab      	b.n	800acd4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab82:	b2db      	uxtb	r3, r3
 800ab84:	2b02      	cmp	r3, #2
 800ab86:	d002      	beq.n	800ab8e <USBD_StdEPReq+0x168>
 800ab88:	2b03      	cmp	r3, #3
 800ab8a:	d032      	beq.n	800abf2 <USBD_StdEPReq+0x1cc>
 800ab8c:	e097      	b.n	800acbe <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ab8e:	7bbb      	ldrb	r3, [r7, #14]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d007      	beq.n	800aba4 <USBD_StdEPReq+0x17e>
 800ab94:	7bbb      	ldrb	r3, [r7, #14]
 800ab96:	2b80      	cmp	r3, #128	; 0x80
 800ab98:	d004      	beq.n	800aba4 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800ab9a:	6839      	ldr	r1, [r7, #0]
 800ab9c:	6878      	ldr	r0, [r7, #4]
 800ab9e:	f000 fbfd 	bl	800b39c <USBD_CtlError>
                break;
 800aba2:	e091      	b.n	800acc8 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aba4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	da0b      	bge.n	800abc4 <USBD_StdEPReq+0x19e>
 800abac:	7bbb      	ldrb	r3, [r7, #14]
 800abae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800abb2:	4613      	mov	r3, r2
 800abb4:	009b      	lsls	r3, r3, #2
 800abb6:	4413      	add	r3, r2
 800abb8:	009b      	lsls	r3, r3, #2
 800abba:	3310      	adds	r3, #16
 800abbc:	687a      	ldr	r2, [r7, #4]
 800abbe:	4413      	add	r3, r2
 800abc0:	3304      	adds	r3, #4
 800abc2:	e00b      	b.n	800abdc <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800abc4:	7bbb      	ldrb	r3, [r7, #14]
 800abc6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800abca:	4613      	mov	r3, r2
 800abcc:	009b      	lsls	r3, r3, #2
 800abce:	4413      	add	r3, r2
 800abd0:	009b      	lsls	r3, r3, #2
 800abd2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800abd6:	687a      	ldr	r2, [r7, #4]
 800abd8:	4413      	add	r3, r2
 800abda:	3304      	adds	r3, #4
 800abdc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800abde:	68bb      	ldr	r3, [r7, #8]
 800abe0:	2200      	movs	r2, #0
 800abe2:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800abe4:	68bb      	ldr	r3, [r7, #8]
 800abe6:	2202      	movs	r2, #2
 800abe8:	4619      	mov	r1, r3
 800abea:	6878      	ldr	r0, [r7, #4]
 800abec:	f000 fc47 	bl	800b47e <USBD_CtlSendData>
              break;
 800abf0:	e06a      	b.n	800acc8 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800abf2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	da11      	bge.n	800ac1e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800abfa:	7bbb      	ldrb	r3, [r7, #14]
 800abfc:	f003 020f 	and.w	r2, r3, #15
 800ac00:	6879      	ldr	r1, [r7, #4]
 800ac02:	4613      	mov	r3, r2
 800ac04:	009b      	lsls	r3, r3, #2
 800ac06:	4413      	add	r3, r2
 800ac08:	009b      	lsls	r3, r3, #2
 800ac0a:	440b      	add	r3, r1
 800ac0c:	3324      	adds	r3, #36	; 0x24
 800ac0e:	881b      	ldrh	r3, [r3, #0]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d117      	bne.n	800ac44 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800ac14:	6839      	ldr	r1, [r7, #0]
 800ac16:	6878      	ldr	r0, [r7, #4]
 800ac18:	f000 fbc0 	bl	800b39c <USBD_CtlError>
                  break;
 800ac1c:	e054      	b.n	800acc8 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ac1e:	7bbb      	ldrb	r3, [r7, #14]
 800ac20:	f003 020f 	and.w	r2, r3, #15
 800ac24:	6879      	ldr	r1, [r7, #4]
 800ac26:	4613      	mov	r3, r2
 800ac28:	009b      	lsls	r3, r3, #2
 800ac2a:	4413      	add	r3, r2
 800ac2c:	009b      	lsls	r3, r3, #2
 800ac2e:	440b      	add	r3, r1
 800ac30:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ac34:	881b      	ldrh	r3, [r3, #0]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d104      	bne.n	800ac44 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800ac3a:	6839      	ldr	r1, [r7, #0]
 800ac3c:	6878      	ldr	r0, [r7, #4]
 800ac3e:	f000 fbad 	bl	800b39c <USBD_CtlError>
                  break;
 800ac42:	e041      	b.n	800acc8 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ac44:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	da0b      	bge.n	800ac64 <USBD_StdEPReq+0x23e>
 800ac4c:	7bbb      	ldrb	r3, [r7, #14]
 800ac4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ac52:	4613      	mov	r3, r2
 800ac54:	009b      	lsls	r3, r3, #2
 800ac56:	4413      	add	r3, r2
 800ac58:	009b      	lsls	r3, r3, #2
 800ac5a:	3310      	adds	r3, #16
 800ac5c:	687a      	ldr	r2, [r7, #4]
 800ac5e:	4413      	add	r3, r2
 800ac60:	3304      	adds	r3, #4
 800ac62:	e00b      	b.n	800ac7c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ac64:	7bbb      	ldrb	r3, [r7, #14]
 800ac66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ac6a:	4613      	mov	r3, r2
 800ac6c:	009b      	lsls	r3, r3, #2
 800ac6e:	4413      	add	r3, r2
 800ac70:	009b      	lsls	r3, r3, #2
 800ac72:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ac76:	687a      	ldr	r2, [r7, #4]
 800ac78:	4413      	add	r3, r2
 800ac7a:	3304      	adds	r3, #4
 800ac7c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ac7e:	7bbb      	ldrb	r3, [r7, #14]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d002      	beq.n	800ac8a <USBD_StdEPReq+0x264>
 800ac84:	7bbb      	ldrb	r3, [r7, #14]
 800ac86:	2b80      	cmp	r3, #128	; 0x80
 800ac88:	d103      	bne.n	800ac92 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800ac8a:	68bb      	ldr	r3, [r7, #8]
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	601a      	str	r2, [r3, #0]
 800ac90:	e00e      	b.n	800acb0 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ac92:	7bbb      	ldrb	r3, [r7, #14]
 800ac94:	4619      	mov	r1, r3
 800ac96:	6878      	ldr	r0, [r7, #4]
 800ac98:	f000 ffe8 	bl	800bc6c <USBD_LL_IsStallEP>
 800ac9c:	4603      	mov	r3, r0
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d003      	beq.n	800acaa <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800aca2:	68bb      	ldr	r3, [r7, #8]
 800aca4:	2201      	movs	r2, #1
 800aca6:	601a      	str	r2, [r3, #0]
 800aca8:	e002      	b.n	800acb0 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800acaa:	68bb      	ldr	r3, [r7, #8]
 800acac:	2200      	movs	r2, #0
 800acae:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800acb0:	68bb      	ldr	r3, [r7, #8]
 800acb2:	2202      	movs	r2, #2
 800acb4:	4619      	mov	r1, r3
 800acb6:	6878      	ldr	r0, [r7, #4]
 800acb8:	f000 fbe1 	bl	800b47e <USBD_CtlSendData>
              break;
 800acbc:	e004      	b.n	800acc8 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800acbe:	6839      	ldr	r1, [r7, #0]
 800acc0:	6878      	ldr	r0, [r7, #4]
 800acc2:	f000 fb6b 	bl	800b39c <USBD_CtlError>
              break;
 800acc6:	bf00      	nop
          }
          break;
 800acc8:	e004      	b.n	800acd4 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800acca:	6839      	ldr	r1, [r7, #0]
 800accc:	6878      	ldr	r0, [r7, #4]
 800acce:	f000 fb65 	bl	800b39c <USBD_CtlError>
          break;
 800acd2:	bf00      	nop
      }
      break;
 800acd4:	e004      	b.n	800ace0 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800acd6:	6839      	ldr	r1, [r7, #0]
 800acd8:	6878      	ldr	r0, [r7, #4]
 800acda:	f000 fb5f 	bl	800b39c <USBD_CtlError>
      break;
 800acde:	bf00      	nop
  }

  return ret;
 800ace0:	7bfb      	ldrb	r3, [r7, #15]
}
 800ace2:	4618      	mov	r0, r3
 800ace4:	3710      	adds	r7, #16
 800ace6:	46bd      	mov	sp, r7
 800ace8:	bd80      	pop	{r7, pc}
	...

0800acec <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800acec:	b580      	push	{r7, lr}
 800acee:	b084      	sub	sp, #16
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
 800acf4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800acf6:	2300      	movs	r3, #0
 800acf8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800acfa:	2300      	movs	r3, #0
 800acfc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800acfe:	2300      	movs	r3, #0
 800ad00:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ad02:	683b      	ldr	r3, [r7, #0]
 800ad04:	885b      	ldrh	r3, [r3, #2]
 800ad06:	0a1b      	lsrs	r3, r3, #8
 800ad08:	b29b      	uxth	r3, r3
 800ad0a:	3b01      	subs	r3, #1
 800ad0c:	2b0e      	cmp	r3, #14
 800ad0e:	f200 8152 	bhi.w	800afb6 <USBD_GetDescriptor+0x2ca>
 800ad12:	a201      	add	r2, pc, #4	; (adr r2, 800ad18 <USBD_GetDescriptor+0x2c>)
 800ad14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad18:	0800ad89 	.word	0x0800ad89
 800ad1c:	0800ada1 	.word	0x0800ada1
 800ad20:	0800ade1 	.word	0x0800ade1
 800ad24:	0800afb7 	.word	0x0800afb7
 800ad28:	0800afb7 	.word	0x0800afb7
 800ad2c:	0800af57 	.word	0x0800af57
 800ad30:	0800af83 	.word	0x0800af83
 800ad34:	0800afb7 	.word	0x0800afb7
 800ad38:	0800afb7 	.word	0x0800afb7
 800ad3c:	0800afb7 	.word	0x0800afb7
 800ad40:	0800afb7 	.word	0x0800afb7
 800ad44:	0800afb7 	.word	0x0800afb7
 800ad48:	0800afb7 	.word	0x0800afb7
 800ad4c:	0800afb7 	.word	0x0800afb7
 800ad50:	0800ad55 	.word	0x0800ad55
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad5a:	69db      	ldr	r3, [r3, #28]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d00b      	beq.n	800ad78 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad66:	69db      	ldr	r3, [r3, #28]
 800ad68:	687a      	ldr	r2, [r7, #4]
 800ad6a:	7c12      	ldrb	r2, [r2, #16]
 800ad6c:	f107 0108 	add.w	r1, r7, #8
 800ad70:	4610      	mov	r0, r2
 800ad72:	4798      	blx	r3
 800ad74:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ad76:	e126      	b.n	800afc6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ad78:	6839      	ldr	r1, [r7, #0]
 800ad7a:	6878      	ldr	r0, [r7, #4]
 800ad7c:	f000 fb0e 	bl	800b39c <USBD_CtlError>
        err++;
 800ad80:	7afb      	ldrb	r3, [r7, #11]
 800ad82:	3301      	adds	r3, #1
 800ad84:	72fb      	strb	r3, [r7, #11]
      break;
 800ad86:	e11e      	b.n	800afc6 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	687a      	ldr	r2, [r7, #4]
 800ad92:	7c12      	ldrb	r2, [r2, #16]
 800ad94:	f107 0108 	add.w	r1, r7, #8
 800ad98:	4610      	mov	r0, r2
 800ad9a:	4798      	blx	r3
 800ad9c:	60f8      	str	r0, [r7, #12]
      break;
 800ad9e:	e112      	b.n	800afc6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	7c1b      	ldrb	r3, [r3, #16]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d10d      	bne.n	800adc4 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800adae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adb0:	f107 0208 	add.w	r2, r7, #8
 800adb4:	4610      	mov	r0, r2
 800adb6:	4798      	blx	r3
 800adb8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	3301      	adds	r3, #1
 800adbe:	2202      	movs	r2, #2
 800adc0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800adc2:	e100      	b.n	800afc6 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800adca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adcc:	f107 0208 	add.w	r2, r7, #8
 800add0:	4610      	mov	r0, r2
 800add2:	4798      	blx	r3
 800add4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	3301      	adds	r3, #1
 800adda:	2202      	movs	r2, #2
 800addc:	701a      	strb	r2, [r3, #0]
      break;
 800adde:	e0f2      	b.n	800afc6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ade0:	683b      	ldr	r3, [r7, #0]
 800ade2:	885b      	ldrh	r3, [r3, #2]
 800ade4:	b2db      	uxtb	r3, r3
 800ade6:	2b05      	cmp	r3, #5
 800ade8:	f200 80ac 	bhi.w	800af44 <USBD_GetDescriptor+0x258>
 800adec:	a201      	add	r2, pc, #4	; (adr r2, 800adf4 <USBD_GetDescriptor+0x108>)
 800adee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adf2:	bf00      	nop
 800adf4:	0800ae0d 	.word	0x0800ae0d
 800adf8:	0800ae41 	.word	0x0800ae41
 800adfc:	0800ae75 	.word	0x0800ae75
 800ae00:	0800aea9 	.word	0x0800aea9
 800ae04:	0800aedd 	.word	0x0800aedd
 800ae08:	0800af11 	.word	0x0800af11
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae12:	685b      	ldr	r3, [r3, #4]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d00b      	beq.n	800ae30 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae1e:	685b      	ldr	r3, [r3, #4]
 800ae20:	687a      	ldr	r2, [r7, #4]
 800ae22:	7c12      	ldrb	r2, [r2, #16]
 800ae24:	f107 0108 	add.w	r1, r7, #8
 800ae28:	4610      	mov	r0, r2
 800ae2a:	4798      	blx	r3
 800ae2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ae2e:	e091      	b.n	800af54 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ae30:	6839      	ldr	r1, [r7, #0]
 800ae32:	6878      	ldr	r0, [r7, #4]
 800ae34:	f000 fab2 	bl	800b39c <USBD_CtlError>
            err++;
 800ae38:	7afb      	ldrb	r3, [r7, #11]
 800ae3a:	3301      	adds	r3, #1
 800ae3c:	72fb      	strb	r3, [r7, #11]
          break;
 800ae3e:	e089      	b.n	800af54 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae46:	689b      	ldr	r3, [r3, #8]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d00b      	beq.n	800ae64 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae52:	689b      	ldr	r3, [r3, #8]
 800ae54:	687a      	ldr	r2, [r7, #4]
 800ae56:	7c12      	ldrb	r2, [r2, #16]
 800ae58:	f107 0108 	add.w	r1, r7, #8
 800ae5c:	4610      	mov	r0, r2
 800ae5e:	4798      	blx	r3
 800ae60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ae62:	e077      	b.n	800af54 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ae64:	6839      	ldr	r1, [r7, #0]
 800ae66:	6878      	ldr	r0, [r7, #4]
 800ae68:	f000 fa98 	bl	800b39c <USBD_CtlError>
            err++;
 800ae6c:	7afb      	ldrb	r3, [r7, #11]
 800ae6e:	3301      	adds	r3, #1
 800ae70:	72fb      	strb	r3, [r7, #11]
          break;
 800ae72:	e06f      	b.n	800af54 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae7a:	68db      	ldr	r3, [r3, #12]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d00b      	beq.n	800ae98 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae86:	68db      	ldr	r3, [r3, #12]
 800ae88:	687a      	ldr	r2, [r7, #4]
 800ae8a:	7c12      	ldrb	r2, [r2, #16]
 800ae8c:	f107 0108 	add.w	r1, r7, #8
 800ae90:	4610      	mov	r0, r2
 800ae92:	4798      	blx	r3
 800ae94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ae96:	e05d      	b.n	800af54 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ae98:	6839      	ldr	r1, [r7, #0]
 800ae9a:	6878      	ldr	r0, [r7, #4]
 800ae9c:	f000 fa7e 	bl	800b39c <USBD_CtlError>
            err++;
 800aea0:	7afb      	ldrb	r3, [r7, #11]
 800aea2:	3301      	adds	r3, #1
 800aea4:	72fb      	strb	r3, [r7, #11]
          break;
 800aea6:	e055      	b.n	800af54 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aeae:	691b      	ldr	r3, [r3, #16]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d00b      	beq.n	800aecc <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aeba:	691b      	ldr	r3, [r3, #16]
 800aebc:	687a      	ldr	r2, [r7, #4]
 800aebe:	7c12      	ldrb	r2, [r2, #16]
 800aec0:	f107 0108 	add.w	r1, r7, #8
 800aec4:	4610      	mov	r0, r2
 800aec6:	4798      	blx	r3
 800aec8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aeca:	e043      	b.n	800af54 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800aecc:	6839      	ldr	r1, [r7, #0]
 800aece:	6878      	ldr	r0, [r7, #4]
 800aed0:	f000 fa64 	bl	800b39c <USBD_CtlError>
            err++;
 800aed4:	7afb      	ldrb	r3, [r7, #11]
 800aed6:	3301      	adds	r3, #1
 800aed8:	72fb      	strb	r3, [r7, #11]
          break;
 800aeda:	e03b      	b.n	800af54 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aee2:	695b      	ldr	r3, [r3, #20]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d00b      	beq.n	800af00 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aeee:	695b      	ldr	r3, [r3, #20]
 800aef0:	687a      	ldr	r2, [r7, #4]
 800aef2:	7c12      	ldrb	r2, [r2, #16]
 800aef4:	f107 0108 	add.w	r1, r7, #8
 800aef8:	4610      	mov	r0, r2
 800aefa:	4798      	blx	r3
 800aefc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aefe:	e029      	b.n	800af54 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800af00:	6839      	ldr	r1, [r7, #0]
 800af02:	6878      	ldr	r0, [r7, #4]
 800af04:	f000 fa4a 	bl	800b39c <USBD_CtlError>
            err++;
 800af08:	7afb      	ldrb	r3, [r7, #11]
 800af0a:	3301      	adds	r3, #1
 800af0c:	72fb      	strb	r3, [r7, #11]
          break;
 800af0e:	e021      	b.n	800af54 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af16:	699b      	ldr	r3, [r3, #24]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d00b      	beq.n	800af34 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af22:	699b      	ldr	r3, [r3, #24]
 800af24:	687a      	ldr	r2, [r7, #4]
 800af26:	7c12      	ldrb	r2, [r2, #16]
 800af28:	f107 0108 	add.w	r1, r7, #8
 800af2c:	4610      	mov	r0, r2
 800af2e:	4798      	blx	r3
 800af30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800af32:	e00f      	b.n	800af54 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800af34:	6839      	ldr	r1, [r7, #0]
 800af36:	6878      	ldr	r0, [r7, #4]
 800af38:	f000 fa30 	bl	800b39c <USBD_CtlError>
            err++;
 800af3c:	7afb      	ldrb	r3, [r7, #11]
 800af3e:	3301      	adds	r3, #1
 800af40:	72fb      	strb	r3, [r7, #11]
          break;
 800af42:	e007      	b.n	800af54 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800af44:	6839      	ldr	r1, [r7, #0]
 800af46:	6878      	ldr	r0, [r7, #4]
 800af48:	f000 fa28 	bl	800b39c <USBD_CtlError>
          err++;
 800af4c:	7afb      	ldrb	r3, [r7, #11]
 800af4e:	3301      	adds	r3, #1
 800af50:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800af52:	bf00      	nop
      }
      break;
 800af54:	e037      	b.n	800afc6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	7c1b      	ldrb	r3, [r3, #16]
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d109      	bne.n	800af72 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af66:	f107 0208 	add.w	r2, r7, #8
 800af6a:	4610      	mov	r0, r2
 800af6c:	4798      	blx	r3
 800af6e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800af70:	e029      	b.n	800afc6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800af72:	6839      	ldr	r1, [r7, #0]
 800af74:	6878      	ldr	r0, [r7, #4]
 800af76:	f000 fa11 	bl	800b39c <USBD_CtlError>
        err++;
 800af7a:	7afb      	ldrb	r3, [r7, #11]
 800af7c:	3301      	adds	r3, #1
 800af7e:	72fb      	strb	r3, [r7, #11]
      break;
 800af80:	e021      	b.n	800afc6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	7c1b      	ldrb	r3, [r3, #16]
 800af86:	2b00      	cmp	r3, #0
 800af88:	d10d      	bne.n	800afa6 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af92:	f107 0208 	add.w	r2, r7, #8
 800af96:	4610      	mov	r0, r2
 800af98:	4798      	blx	r3
 800af9a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	3301      	adds	r3, #1
 800afa0:	2207      	movs	r2, #7
 800afa2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800afa4:	e00f      	b.n	800afc6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800afa6:	6839      	ldr	r1, [r7, #0]
 800afa8:	6878      	ldr	r0, [r7, #4]
 800afaa:	f000 f9f7 	bl	800b39c <USBD_CtlError>
        err++;
 800afae:	7afb      	ldrb	r3, [r7, #11]
 800afb0:	3301      	adds	r3, #1
 800afb2:	72fb      	strb	r3, [r7, #11]
      break;
 800afb4:	e007      	b.n	800afc6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800afb6:	6839      	ldr	r1, [r7, #0]
 800afb8:	6878      	ldr	r0, [r7, #4]
 800afba:	f000 f9ef 	bl	800b39c <USBD_CtlError>
      err++;
 800afbe:	7afb      	ldrb	r3, [r7, #11]
 800afc0:	3301      	adds	r3, #1
 800afc2:	72fb      	strb	r3, [r7, #11]
      break;
 800afc4:	bf00      	nop
  }

  if (err != 0U)
 800afc6:	7afb      	ldrb	r3, [r7, #11]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d11e      	bne.n	800b00a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800afcc:	683b      	ldr	r3, [r7, #0]
 800afce:	88db      	ldrh	r3, [r3, #6]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d016      	beq.n	800b002 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800afd4:	893b      	ldrh	r3, [r7, #8]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d00e      	beq.n	800aff8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800afda:	683b      	ldr	r3, [r7, #0]
 800afdc:	88da      	ldrh	r2, [r3, #6]
 800afde:	893b      	ldrh	r3, [r7, #8]
 800afe0:	4293      	cmp	r3, r2
 800afe2:	bf28      	it	cs
 800afe4:	4613      	movcs	r3, r2
 800afe6:	b29b      	uxth	r3, r3
 800afe8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800afea:	893b      	ldrh	r3, [r7, #8]
 800afec:	461a      	mov	r2, r3
 800afee:	68f9      	ldr	r1, [r7, #12]
 800aff0:	6878      	ldr	r0, [r7, #4]
 800aff2:	f000 fa44 	bl	800b47e <USBD_CtlSendData>
 800aff6:	e009      	b.n	800b00c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800aff8:	6839      	ldr	r1, [r7, #0]
 800affa:	6878      	ldr	r0, [r7, #4]
 800affc:	f000 f9ce 	bl	800b39c <USBD_CtlError>
 800b000:	e004      	b.n	800b00c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b002:	6878      	ldr	r0, [r7, #4]
 800b004:	f000 fa78 	bl	800b4f8 <USBD_CtlSendStatus>
 800b008:	e000      	b.n	800b00c <USBD_GetDescriptor+0x320>
    return;
 800b00a:	bf00      	nop
  }
}
 800b00c:	3710      	adds	r7, #16
 800b00e:	46bd      	mov	sp, r7
 800b010:	bd80      	pop	{r7, pc}
 800b012:	bf00      	nop

0800b014 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b014:	b580      	push	{r7, lr}
 800b016:	b084      	sub	sp, #16
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
 800b01c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b01e:	683b      	ldr	r3, [r7, #0]
 800b020:	889b      	ldrh	r3, [r3, #4]
 800b022:	2b00      	cmp	r3, #0
 800b024:	d131      	bne.n	800b08a <USBD_SetAddress+0x76>
 800b026:	683b      	ldr	r3, [r7, #0]
 800b028:	88db      	ldrh	r3, [r3, #6]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d12d      	bne.n	800b08a <USBD_SetAddress+0x76>
 800b02e:	683b      	ldr	r3, [r7, #0]
 800b030:	885b      	ldrh	r3, [r3, #2]
 800b032:	2b7f      	cmp	r3, #127	; 0x7f
 800b034:	d829      	bhi.n	800b08a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b036:	683b      	ldr	r3, [r7, #0]
 800b038:	885b      	ldrh	r3, [r3, #2]
 800b03a:	b2db      	uxtb	r3, r3
 800b03c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b040:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b048:	b2db      	uxtb	r3, r3
 800b04a:	2b03      	cmp	r3, #3
 800b04c:	d104      	bne.n	800b058 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b04e:	6839      	ldr	r1, [r7, #0]
 800b050:	6878      	ldr	r0, [r7, #4]
 800b052:	f000 f9a3 	bl	800b39c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b056:	e01d      	b.n	800b094 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	7bfa      	ldrb	r2, [r7, #15]
 800b05c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b060:	7bfb      	ldrb	r3, [r7, #15]
 800b062:	4619      	mov	r1, r3
 800b064:	6878      	ldr	r0, [r7, #4]
 800b066:	f000 fe2f 	bl	800bcc8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b06a:	6878      	ldr	r0, [r7, #4]
 800b06c:	f000 fa44 	bl	800b4f8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b070:	7bfb      	ldrb	r3, [r7, #15]
 800b072:	2b00      	cmp	r3, #0
 800b074:	d004      	beq.n	800b080 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	2202      	movs	r2, #2
 800b07a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b07e:	e009      	b.n	800b094 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	2201      	movs	r2, #1
 800b084:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b088:	e004      	b.n	800b094 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b08a:	6839      	ldr	r1, [r7, #0]
 800b08c:	6878      	ldr	r0, [r7, #4]
 800b08e:	f000 f985 	bl	800b39c <USBD_CtlError>
  }
}
 800b092:	bf00      	nop
 800b094:	bf00      	nop
 800b096:	3710      	adds	r7, #16
 800b098:	46bd      	mov	sp, r7
 800b09a:	bd80      	pop	{r7, pc}

0800b09c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b09c:	b580      	push	{r7, lr}
 800b09e:	b084      	sub	sp, #16
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	6078      	str	r0, [r7, #4]
 800b0a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b0aa:	683b      	ldr	r3, [r7, #0]
 800b0ac:	885b      	ldrh	r3, [r3, #2]
 800b0ae:	b2da      	uxtb	r2, r3
 800b0b0:	4b4c      	ldr	r3, [pc, #304]	; (800b1e4 <USBD_SetConfig+0x148>)
 800b0b2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b0b4:	4b4b      	ldr	r3, [pc, #300]	; (800b1e4 <USBD_SetConfig+0x148>)
 800b0b6:	781b      	ldrb	r3, [r3, #0]
 800b0b8:	2b01      	cmp	r3, #1
 800b0ba:	d905      	bls.n	800b0c8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b0bc:	6839      	ldr	r1, [r7, #0]
 800b0be:	6878      	ldr	r0, [r7, #4]
 800b0c0:	f000 f96c 	bl	800b39c <USBD_CtlError>
    return USBD_FAIL;
 800b0c4:	2303      	movs	r3, #3
 800b0c6:	e088      	b.n	800b1da <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0ce:	b2db      	uxtb	r3, r3
 800b0d0:	2b02      	cmp	r3, #2
 800b0d2:	d002      	beq.n	800b0da <USBD_SetConfig+0x3e>
 800b0d4:	2b03      	cmp	r3, #3
 800b0d6:	d025      	beq.n	800b124 <USBD_SetConfig+0x88>
 800b0d8:	e071      	b.n	800b1be <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b0da:	4b42      	ldr	r3, [pc, #264]	; (800b1e4 <USBD_SetConfig+0x148>)
 800b0dc:	781b      	ldrb	r3, [r3, #0]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d01c      	beq.n	800b11c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800b0e2:	4b40      	ldr	r3, [pc, #256]	; (800b1e4 <USBD_SetConfig+0x148>)
 800b0e4:	781b      	ldrb	r3, [r3, #0]
 800b0e6:	461a      	mov	r2, r3
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b0ec:	4b3d      	ldr	r3, [pc, #244]	; (800b1e4 <USBD_SetConfig+0x148>)
 800b0ee:	781b      	ldrb	r3, [r3, #0]
 800b0f0:	4619      	mov	r1, r3
 800b0f2:	6878      	ldr	r0, [r7, #4]
 800b0f4:	f7ff f992 	bl	800a41c <USBD_SetClassConfig>
 800b0f8:	4603      	mov	r3, r0
 800b0fa:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b0fc:	7bfb      	ldrb	r3, [r7, #15]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d004      	beq.n	800b10c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800b102:	6839      	ldr	r1, [r7, #0]
 800b104:	6878      	ldr	r0, [r7, #4]
 800b106:	f000 f949 	bl	800b39c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b10a:	e065      	b.n	800b1d8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b10c:	6878      	ldr	r0, [r7, #4]
 800b10e:	f000 f9f3 	bl	800b4f8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	2203      	movs	r2, #3
 800b116:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b11a:	e05d      	b.n	800b1d8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b11c:	6878      	ldr	r0, [r7, #4]
 800b11e:	f000 f9eb 	bl	800b4f8 <USBD_CtlSendStatus>
      break;
 800b122:	e059      	b.n	800b1d8 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b124:	4b2f      	ldr	r3, [pc, #188]	; (800b1e4 <USBD_SetConfig+0x148>)
 800b126:	781b      	ldrb	r3, [r3, #0]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d112      	bne.n	800b152 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	2202      	movs	r2, #2
 800b130:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b134:	4b2b      	ldr	r3, [pc, #172]	; (800b1e4 <USBD_SetConfig+0x148>)
 800b136:	781b      	ldrb	r3, [r3, #0]
 800b138:	461a      	mov	r2, r3
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b13e:	4b29      	ldr	r3, [pc, #164]	; (800b1e4 <USBD_SetConfig+0x148>)
 800b140:	781b      	ldrb	r3, [r3, #0]
 800b142:	4619      	mov	r1, r3
 800b144:	6878      	ldr	r0, [r7, #4]
 800b146:	f7ff f985 	bl	800a454 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b14a:	6878      	ldr	r0, [r7, #4]
 800b14c:	f000 f9d4 	bl	800b4f8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b150:	e042      	b.n	800b1d8 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800b152:	4b24      	ldr	r3, [pc, #144]	; (800b1e4 <USBD_SetConfig+0x148>)
 800b154:	781b      	ldrb	r3, [r3, #0]
 800b156:	461a      	mov	r2, r3
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	685b      	ldr	r3, [r3, #4]
 800b15c:	429a      	cmp	r2, r3
 800b15e:	d02a      	beq.n	800b1b6 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	685b      	ldr	r3, [r3, #4]
 800b164:	b2db      	uxtb	r3, r3
 800b166:	4619      	mov	r1, r3
 800b168:	6878      	ldr	r0, [r7, #4]
 800b16a:	f7ff f973 	bl	800a454 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b16e:	4b1d      	ldr	r3, [pc, #116]	; (800b1e4 <USBD_SetConfig+0x148>)
 800b170:	781b      	ldrb	r3, [r3, #0]
 800b172:	461a      	mov	r2, r3
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b178:	4b1a      	ldr	r3, [pc, #104]	; (800b1e4 <USBD_SetConfig+0x148>)
 800b17a:	781b      	ldrb	r3, [r3, #0]
 800b17c:	4619      	mov	r1, r3
 800b17e:	6878      	ldr	r0, [r7, #4]
 800b180:	f7ff f94c 	bl	800a41c <USBD_SetClassConfig>
 800b184:	4603      	mov	r3, r0
 800b186:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b188:	7bfb      	ldrb	r3, [r7, #15]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d00f      	beq.n	800b1ae <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800b18e:	6839      	ldr	r1, [r7, #0]
 800b190:	6878      	ldr	r0, [r7, #4]
 800b192:	f000 f903 	bl	800b39c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	685b      	ldr	r3, [r3, #4]
 800b19a:	b2db      	uxtb	r3, r3
 800b19c:	4619      	mov	r1, r3
 800b19e:	6878      	ldr	r0, [r7, #4]
 800b1a0:	f7ff f958 	bl	800a454 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	2202      	movs	r2, #2
 800b1a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b1ac:	e014      	b.n	800b1d8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b1ae:	6878      	ldr	r0, [r7, #4]
 800b1b0:	f000 f9a2 	bl	800b4f8 <USBD_CtlSendStatus>
      break;
 800b1b4:	e010      	b.n	800b1d8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b1b6:	6878      	ldr	r0, [r7, #4]
 800b1b8:	f000 f99e 	bl	800b4f8 <USBD_CtlSendStatus>
      break;
 800b1bc:	e00c      	b.n	800b1d8 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800b1be:	6839      	ldr	r1, [r7, #0]
 800b1c0:	6878      	ldr	r0, [r7, #4]
 800b1c2:	f000 f8eb 	bl	800b39c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b1c6:	4b07      	ldr	r3, [pc, #28]	; (800b1e4 <USBD_SetConfig+0x148>)
 800b1c8:	781b      	ldrb	r3, [r3, #0]
 800b1ca:	4619      	mov	r1, r3
 800b1cc:	6878      	ldr	r0, [r7, #4]
 800b1ce:	f7ff f941 	bl	800a454 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b1d2:	2303      	movs	r3, #3
 800b1d4:	73fb      	strb	r3, [r7, #15]
      break;
 800b1d6:	bf00      	nop
  }

  return ret;
 800b1d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1da:	4618      	mov	r0, r3
 800b1dc:	3710      	adds	r7, #16
 800b1de:	46bd      	mov	sp, r7
 800b1e0:	bd80      	pop	{r7, pc}
 800b1e2:	bf00      	nop
 800b1e4:	20000398 	.word	0x20000398

0800b1e8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b1e8:	b580      	push	{r7, lr}
 800b1ea:	b082      	sub	sp, #8
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	6078      	str	r0, [r7, #4]
 800b1f0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b1f2:	683b      	ldr	r3, [r7, #0]
 800b1f4:	88db      	ldrh	r3, [r3, #6]
 800b1f6:	2b01      	cmp	r3, #1
 800b1f8:	d004      	beq.n	800b204 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b1fa:	6839      	ldr	r1, [r7, #0]
 800b1fc:	6878      	ldr	r0, [r7, #4]
 800b1fe:	f000 f8cd 	bl	800b39c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b202:	e023      	b.n	800b24c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b20a:	b2db      	uxtb	r3, r3
 800b20c:	2b02      	cmp	r3, #2
 800b20e:	dc02      	bgt.n	800b216 <USBD_GetConfig+0x2e>
 800b210:	2b00      	cmp	r3, #0
 800b212:	dc03      	bgt.n	800b21c <USBD_GetConfig+0x34>
 800b214:	e015      	b.n	800b242 <USBD_GetConfig+0x5a>
 800b216:	2b03      	cmp	r3, #3
 800b218:	d00b      	beq.n	800b232 <USBD_GetConfig+0x4a>
 800b21a:	e012      	b.n	800b242 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	2200      	movs	r2, #0
 800b220:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	3308      	adds	r3, #8
 800b226:	2201      	movs	r2, #1
 800b228:	4619      	mov	r1, r3
 800b22a:	6878      	ldr	r0, [r7, #4]
 800b22c:	f000 f927 	bl	800b47e <USBD_CtlSendData>
        break;
 800b230:	e00c      	b.n	800b24c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	3304      	adds	r3, #4
 800b236:	2201      	movs	r2, #1
 800b238:	4619      	mov	r1, r3
 800b23a:	6878      	ldr	r0, [r7, #4]
 800b23c:	f000 f91f 	bl	800b47e <USBD_CtlSendData>
        break;
 800b240:	e004      	b.n	800b24c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b242:	6839      	ldr	r1, [r7, #0]
 800b244:	6878      	ldr	r0, [r7, #4]
 800b246:	f000 f8a9 	bl	800b39c <USBD_CtlError>
        break;
 800b24a:	bf00      	nop
}
 800b24c:	bf00      	nop
 800b24e:	3708      	adds	r7, #8
 800b250:	46bd      	mov	sp, r7
 800b252:	bd80      	pop	{r7, pc}

0800b254 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b254:	b580      	push	{r7, lr}
 800b256:	b082      	sub	sp, #8
 800b258:	af00      	add	r7, sp, #0
 800b25a:	6078      	str	r0, [r7, #4]
 800b25c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b264:	b2db      	uxtb	r3, r3
 800b266:	3b01      	subs	r3, #1
 800b268:	2b02      	cmp	r3, #2
 800b26a:	d81e      	bhi.n	800b2aa <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b26c:	683b      	ldr	r3, [r7, #0]
 800b26e:	88db      	ldrh	r3, [r3, #6]
 800b270:	2b02      	cmp	r3, #2
 800b272:	d004      	beq.n	800b27e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b274:	6839      	ldr	r1, [r7, #0]
 800b276:	6878      	ldr	r0, [r7, #4]
 800b278:	f000 f890 	bl	800b39c <USBD_CtlError>
        break;
 800b27c:	e01a      	b.n	800b2b4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	2201      	movs	r2, #1
 800b282:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d005      	beq.n	800b29a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	68db      	ldr	r3, [r3, #12]
 800b292:	f043 0202 	orr.w	r2, r3, #2
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	330c      	adds	r3, #12
 800b29e:	2202      	movs	r2, #2
 800b2a0:	4619      	mov	r1, r3
 800b2a2:	6878      	ldr	r0, [r7, #4]
 800b2a4:	f000 f8eb 	bl	800b47e <USBD_CtlSendData>
      break;
 800b2a8:	e004      	b.n	800b2b4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b2aa:	6839      	ldr	r1, [r7, #0]
 800b2ac:	6878      	ldr	r0, [r7, #4]
 800b2ae:	f000 f875 	bl	800b39c <USBD_CtlError>
      break;
 800b2b2:	bf00      	nop
  }
}
 800b2b4:	bf00      	nop
 800b2b6:	3708      	adds	r7, #8
 800b2b8:	46bd      	mov	sp, r7
 800b2ba:	bd80      	pop	{r7, pc}

0800b2bc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b2bc:	b580      	push	{r7, lr}
 800b2be:	b082      	sub	sp, #8
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	6078      	str	r0, [r7, #4]
 800b2c4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b2c6:	683b      	ldr	r3, [r7, #0]
 800b2c8:	885b      	ldrh	r3, [r3, #2]
 800b2ca:	2b01      	cmp	r3, #1
 800b2cc:	d106      	bne.n	800b2dc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	2201      	movs	r2, #1
 800b2d2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b2d6:	6878      	ldr	r0, [r7, #4]
 800b2d8:	f000 f90e 	bl	800b4f8 <USBD_CtlSendStatus>
  }
}
 800b2dc:	bf00      	nop
 800b2de:	3708      	adds	r7, #8
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	bd80      	pop	{r7, pc}

0800b2e4 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b2e4:	b580      	push	{r7, lr}
 800b2e6:	b082      	sub	sp, #8
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	6078      	str	r0, [r7, #4]
 800b2ec:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b2f4:	b2db      	uxtb	r3, r3
 800b2f6:	3b01      	subs	r3, #1
 800b2f8:	2b02      	cmp	r3, #2
 800b2fa:	d80b      	bhi.n	800b314 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b2fc:	683b      	ldr	r3, [r7, #0]
 800b2fe:	885b      	ldrh	r3, [r3, #2]
 800b300:	2b01      	cmp	r3, #1
 800b302:	d10c      	bne.n	800b31e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	2200      	movs	r2, #0
 800b308:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b30c:	6878      	ldr	r0, [r7, #4]
 800b30e:	f000 f8f3 	bl	800b4f8 <USBD_CtlSendStatus>
      }
      break;
 800b312:	e004      	b.n	800b31e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b314:	6839      	ldr	r1, [r7, #0]
 800b316:	6878      	ldr	r0, [r7, #4]
 800b318:	f000 f840 	bl	800b39c <USBD_CtlError>
      break;
 800b31c:	e000      	b.n	800b320 <USBD_ClrFeature+0x3c>
      break;
 800b31e:	bf00      	nop
  }
}
 800b320:	bf00      	nop
 800b322:	3708      	adds	r7, #8
 800b324:	46bd      	mov	sp, r7
 800b326:	bd80      	pop	{r7, pc}

0800b328 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b328:	b580      	push	{r7, lr}
 800b32a:	b084      	sub	sp, #16
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	6078      	str	r0, [r7, #4]
 800b330:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b332:	683b      	ldr	r3, [r7, #0]
 800b334:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	781a      	ldrb	r2, [r3, #0]
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	3301      	adds	r3, #1
 800b342:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	781a      	ldrb	r2, [r3, #0]
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	3301      	adds	r3, #1
 800b350:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b352:	68f8      	ldr	r0, [r7, #12]
 800b354:	f7ff fa92 	bl	800a87c <SWAPBYTE>
 800b358:	4603      	mov	r3, r0
 800b35a:	461a      	mov	r2, r3
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	3301      	adds	r3, #1
 800b364:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	3301      	adds	r3, #1
 800b36a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b36c:	68f8      	ldr	r0, [r7, #12]
 800b36e:	f7ff fa85 	bl	800a87c <SWAPBYTE>
 800b372:	4603      	mov	r3, r0
 800b374:	461a      	mov	r2, r3
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	3301      	adds	r3, #1
 800b37e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	3301      	adds	r3, #1
 800b384:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b386:	68f8      	ldr	r0, [r7, #12]
 800b388:	f7ff fa78 	bl	800a87c <SWAPBYTE>
 800b38c:	4603      	mov	r3, r0
 800b38e:	461a      	mov	r2, r3
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	80da      	strh	r2, [r3, #6]
}
 800b394:	bf00      	nop
 800b396:	3710      	adds	r7, #16
 800b398:	46bd      	mov	sp, r7
 800b39a:	bd80      	pop	{r7, pc}

0800b39c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b39c:	b580      	push	{r7, lr}
 800b39e:	b082      	sub	sp, #8
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	6078      	str	r0, [r7, #4]
 800b3a4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b3a6:	2180      	movs	r1, #128	; 0x80
 800b3a8:	6878      	ldr	r0, [r7, #4]
 800b3aa:	f000 fbf3 	bl	800bb94 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b3ae:	2100      	movs	r1, #0
 800b3b0:	6878      	ldr	r0, [r7, #4]
 800b3b2:	f000 fbef 	bl	800bb94 <USBD_LL_StallEP>
}
 800b3b6:	bf00      	nop
 800b3b8:	3708      	adds	r7, #8
 800b3ba:	46bd      	mov	sp, r7
 800b3bc:	bd80      	pop	{r7, pc}

0800b3be <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b3be:	b580      	push	{r7, lr}
 800b3c0:	b086      	sub	sp, #24
 800b3c2:	af00      	add	r7, sp, #0
 800b3c4:	60f8      	str	r0, [r7, #12]
 800b3c6:	60b9      	str	r1, [r7, #8]
 800b3c8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d036      	beq.n	800b442 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b3d8:	6938      	ldr	r0, [r7, #16]
 800b3da:	f000 f836 	bl	800b44a <USBD_GetLen>
 800b3de:	4603      	mov	r3, r0
 800b3e0:	3301      	adds	r3, #1
 800b3e2:	b29b      	uxth	r3, r3
 800b3e4:	005b      	lsls	r3, r3, #1
 800b3e6:	b29a      	uxth	r2, r3
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b3ec:	7dfb      	ldrb	r3, [r7, #23]
 800b3ee:	68ba      	ldr	r2, [r7, #8]
 800b3f0:	4413      	add	r3, r2
 800b3f2:	687a      	ldr	r2, [r7, #4]
 800b3f4:	7812      	ldrb	r2, [r2, #0]
 800b3f6:	701a      	strb	r2, [r3, #0]
  idx++;
 800b3f8:	7dfb      	ldrb	r3, [r7, #23]
 800b3fa:	3301      	adds	r3, #1
 800b3fc:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b3fe:	7dfb      	ldrb	r3, [r7, #23]
 800b400:	68ba      	ldr	r2, [r7, #8]
 800b402:	4413      	add	r3, r2
 800b404:	2203      	movs	r2, #3
 800b406:	701a      	strb	r2, [r3, #0]
  idx++;
 800b408:	7dfb      	ldrb	r3, [r7, #23]
 800b40a:	3301      	adds	r3, #1
 800b40c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b40e:	e013      	b.n	800b438 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b410:	7dfb      	ldrb	r3, [r7, #23]
 800b412:	68ba      	ldr	r2, [r7, #8]
 800b414:	4413      	add	r3, r2
 800b416:	693a      	ldr	r2, [r7, #16]
 800b418:	7812      	ldrb	r2, [r2, #0]
 800b41a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b41c:	693b      	ldr	r3, [r7, #16]
 800b41e:	3301      	adds	r3, #1
 800b420:	613b      	str	r3, [r7, #16]
    idx++;
 800b422:	7dfb      	ldrb	r3, [r7, #23]
 800b424:	3301      	adds	r3, #1
 800b426:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b428:	7dfb      	ldrb	r3, [r7, #23]
 800b42a:	68ba      	ldr	r2, [r7, #8]
 800b42c:	4413      	add	r3, r2
 800b42e:	2200      	movs	r2, #0
 800b430:	701a      	strb	r2, [r3, #0]
    idx++;
 800b432:	7dfb      	ldrb	r3, [r7, #23]
 800b434:	3301      	adds	r3, #1
 800b436:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b438:	693b      	ldr	r3, [r7, #16]
 800b43a:	781b      	ldrb	r3, [r3, #0]
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d1e7      	bne.n	800b410 <USBD_GetString+0x52>
 800b440:	e000      	b.n	800b444 <USBD_GetString+0x86>
    return;
 800b442:	bf00      	nop
  }
}
 800b444:	3718      	adds	r7, #24
 800b446:	46bd      	mov	sp, r7
 800b448:	bd80      	pop	{r7, pc}

0800b44a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b44a:	b480      	push	{r7}
 800b44c:	b085      	sub	sp, #20
 800b44e:	af00      	add	r7, sp, #0
 800b450:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b452:	2300      	movs	r3, #0
 800b454:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b45a:	e005      	b.n	800b468 <USBD_GetLen+0x1e>
  {
    len++;
 800b45c:	7bfb      	ldrb	r3, [r7, #15]
 800b45e:	3301      	adds	r3, #1
 800b460:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b462:	68bb      	ldr	r3, [r7, #8]
 800b464:	3301      	adds	r3, #1
 800b466:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b468:	68bb      	ldr	r3, [r7, #8]
 800b46a:	781b      	ldrb	r3, [r3, #0]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d1f5      	bne.n	800b45c <USBD_GetLen+0x12>
  }

  return len;
 800b470:	7bfb      	ldrb	r3, [r7, #15]
}
 800b472:	4618      	mov	r0, r3
 800b474:	3714      	adds	r7, #20
 800b476:	46bd      	mov	sp, r7
 800b478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b47c:	4770      	bx	lr

0800b47e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b47e:	b580      	push	{r7, lr}
 800b480:	b084      	sub	sp, #16
 800b482:	af00      	add	r7, sp, #0
 800b484:	60f8      	str	r0, [r7, #12]
 800b486:	60b9      	str	r1, [r7, #8]
 800b488:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	2202      	movs	r2, #2
 800b48e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	687a      	ldr	r2, [r7, #4]
 800b496:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	687a      	ldr	r2, [r7, #4]
 800b49c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	68ba      	ldr	r2, [r7, #8]
 800b4a2:	2100      	movs	r1, #0
 800b4a4:	68f8      	ldr	r0, [r7, #12]
 800b4a6:	f000 fc45 	bl	800bd34 <USBD_LL_Transmit>

  return USBD_OK;
 800b4aa:	2300      	movs	r3, #0
}
 800b4ac:	4618      	mov	r0, r3
 800b4ae:	3710      	adds	r7, #16
 800b4b0:	46bd      	mov	sp, r7
 800b4b2:	bd80      	pop	{r7, pc}

0800b4b4 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b4b4:	b580      	push	{r7, lr}
 800b4b6:	b084      	sub	sp, #16
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	60f8      	str	r0, [r7, #12]
 800b4bc:	60b9      	str	r1, [r7, #8]
 800b4be:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	68ba      	ldr	r2, [r7, #8]
 800b4c4:	2100      	movs	r1, #0
 800b4c6:	68f8      	ldr	r0, [r7, #12]
 800b4c8:	f000 fc34 	bl	800bd34 <USBD_LL_Transmit>

  return USBD_OK;
 800b4cc:	2300      	movs	r3, #0
}
 800b4ce:	4618      	mov	r0, r3
 800b4d0:	3710      	adds	r7, #16
 800b4d2:	46bd      	mov	sp, r7
 800b4d4:	bd80      	pop	{r7, pc}

0800b4d6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b4d6:	b580      	push	{r7, lr}
 800b4d8:	b084      	sub	sp, #16
 800b4da:	af00      	add	r7, sp, #0
 800b4dc:	60f8      	str	r0, [r7, #12]
 800b4de:	60b9      	str	r1, [r7, #8]
 800b4e0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	68ba      	ldr	r2, [r7, #8]
 800b4e6:	2100      	movs	r1, #0
 800b4e8:	68f8      	ldr	r0, [r7, #12]
 800b4ea:	f000 fc5b 	bl	800bda4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b4ee:	2300      	movs	r3, #0
}
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	3710      	adds	r7, #16
 800b4f4:	46bd      	mov	sp, r7
 800b4f6:	bd80      	pop	{r7, pc}

0800b4f8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b4f8:	b580      	push	{r7, lr}
 800b4fa:	b082      	sub	sp, #8
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	2204      	movs	r2, #4
 800b504:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b508:	2300      	movs	r3, #0
 800b50a:	2200      	movs	r2, #0
 800b50c:	2100      	movs	r1, #0
 800b50e:	6878      	ldr	r0, [r7, #4]
 800b510:	f000 fc10 	bl	800bd34 <USBD_LL_Transmit>

  return USBD_OK;
 800b514:	2300      	movs	r3, #0
}
 800b516:	4618      	mov	r0, r3
 800b518:	3708      	adds	r7, #8
 800b51a:	46bd      	mov	sp, r7
 800b51c:	bd80      	pop	{r7, pc}

0800b51e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b51e:	b580      	push	{r7, lr}
 800b520:	b082      	sub	sp, #8
 800b522:	af00      	add	r7, sp, #0
 800b524:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	2205      	movs	r2, #5
 800b52a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b52e:	2300      	movs	r3, #0
 800b530:	2200      	movs	r2, #0
 800b532:	2100      	movs	r1, #0
 800b534:	6878      	ldr	r0, [r7, #4]
 800b536:	f000 fc35 	bl	800bda4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b53a:	2300      	movs	r3, #0
}
 800b53c:	4618      	mov	r0, r3
 800b53e:	3708      	adds	r7, #8
 800b540:	46bd      	mov	sp, r7
 800b542:	bd80      	pop	{r7, pc}

0800b544 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b544:	b580      	push	{r7, lr}
 800b546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b548:	2200      	movs	r2, #0
 800b54a:	490e      	ldr	r1, [pc, #56]	; (800b584 <MX_USB_DEVICE_Init+0x40>)
 800b54c:	480e      	ldr	r0, [pc, #56]	; (800b588 <MX_USB_DEVICE_Init+0x44>)
 800b54e:	f7fe fef7 	bl	800a340 <USBD_Init>
 800b552:	4603      	mov	r3, r0
 800b554:	2b00      	cmp	r3, #0
 800b556:	d001      	beq.n	800b55c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b558:	f7f6 f9ac 	bl	80018b4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 800b55c:	490b      	ldr	r1, [pc, #44]	; (800b58c <MX_USB_DEVICE_Init+0x48>)
 800b55e:	480a      	ldr	r0, [pc, #40]	; (800b588 <MX_USB_DEVICE_Init+0x44>)
 800b560:	f7fe ff1e 	bl	800a3a0 <USBD_RegisterClass>
 800b564:	4603      	mov	r3, r0
 800b566:	2b00      	cmp	r3, #0
 800b568:	d001      	beq.n	800b56e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b56a:	f7f6 f9a3 	bl	80018b4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b56e:	4806      	ldr	r0, [pc, #24]	; (800b588 <MX_USB_DEVICE_Init+0x44>)
 800b570:	f7fe ff3d 	bl	800a3ee <USBD_Start>
 800b574:	4603      	mov	r3, r0
 800b576:	2b00      	cmp	r3, #0
 800b578:	d001      	beq.n	800b57e <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 800b57a:	f7f6 f99b 	bl	80018b4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b57e:	bf00      	nop
 800b580:	bd80      	pop	{r7, pc}
 800b582:	bf00      	nop
 800b584:	20000128 	.word	0x20000128
 800b588:	20000908 	.word	0x20000908
 800b58c:	20000020 	.word	0x20000020

0800b590 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b590:	b480      	push	{r7}
 800b592:	b083      	sub	sp, #12
 800b594:	af00      	add	r7, sp, #0
 800b596:	4603      	mov	r3, r0
 800b598:	6039      	str	r1, [r7, #0]
 800b59a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b59c:	683b      	ldr	r3, [r7, #0]
 800b59e:	2212      	movs	r2, #18
 800b5a0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b5a2:	4b03      	ldr	r3, [pc, #12]	; (800b5b0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	370c      	adds	r7, #12
 800b5a8:	46bd      	mov	sp, r7
 800b5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ae:	4770      	bx	lr
 800b5b0:	20000148 	.word	0x20000148

0800b5b4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b5b4:	b480      	push	{r7}
 800b5b6:	b083      	sub	sp, #12
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	4603      	mov	r3, r0
 800b5bc:	6039      	str	r1, [r7, #0]
 800b5be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b5c0:	683b      	ldr	r3, [r7, #0]
 800b5c2:	2204      	movs	r2, #4
 800b5c4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b5c6:	4b03      	ldr	r3, [pc, #12]	; (800b5d4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	370c      	adds	r7, #12
 800b5cc:	46bd      	mov	sp, r7
 800b5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d2:	4770      	bx	lr
 800b5d4:	20000168 	.word	0x20000168

0800b5d8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b5d8:	b580      	push	{r7, lr}
 800b5da:	b082      	sub	sp, #8
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	4603      	mov	r3, r0
 800b5e0:	6039      	str	r1, [r7, #0]
 800b5e2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b5e4:	79fb      	ldrb	r3, [r7, #7]
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d105      	bne.n	800b5f6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b5ea:	683a      	ldr	r2, [r7, #0]
 800b5ec:	4907      	ldr	r1, [pc, #28]	; (800b60c <USBD_FS_ProductStrDescriptor+0x34>)
 800b5ee:	4808      	ldr	r0, [pc, #32]	; (800b610 <USBD_FS_ProductStrDescriptor+0x38>)
 800b5f0:	f7ff fee5 	bl	800b3be <USBD_GetString>
 800b5f4:	e004      	b.n	800b600 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b5f6:	683a      	ldr	r2, [r7, #0]
 800b5f8:	4904      	ldr	r1, [pc, #16]	; (800b60c <USBD_FS_ProductStrDescriptor+0x34>)
 800b5fa:	4805      	ldr	r0, [pc, #20]	; (800b610 <USBD_FS_ProductStrDescriptor+0x38>)
 800b5fc:	f7ff fedf 	bl	800b3be <USBD_GetString>
  }
  return USBD_StrDesc;
 800b600:	4b02      	ldr	r3, [pc, #8]	; (800b60c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b602:	4618      	mov	r0, r3
 800b604:	3708      	adds	r7, #8
 800b606:	46bd      	mov	sp, r7
 800b608:	bd80      	pop	{r7, pc}
 800b60a:	bf00      	nop
 800b60c:	20000bd8 	.word	0x20000bd8
 800b610:	0800f1b0 	.word	0x0800f1b0

0800b614 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b614:	b580      	push	{r7, lr}
 800b616:	b082      	sub	sp, #8
 800b618:	af00      	add	r7, sp, #0
 800b61a:	4603      	mov	r3, r0
 800b61c:	6039      	str	r1, [r7, #0]
 800b61e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b620:	683a      	ldr	r2, [r7, #0]
 800b622:	4904      	ldr	r1, [pc, #16]	; (800b634 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b624:	4804      	ldr	r0, [pc, #16]	; (800b638 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b626:	f7ff feca 	bl	800b3be <USBD_GetString>
  return USBD_StrDesc;
 800b62a:	4b02      	ldr	r3, [pc, #8]	; (800b634 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b62c:	4618      	mov	r0, r3
 800b62e:	3708      	adds	r7, #8
 800b630:	46bd      	mov	sp, r7
 800b632:	bd80      	pop	{r7, pc}
 800b634:	20000bd8 	.word	0x20000bd8
 800b638:	0800f1b8 	.word	0x0800f1b8

0800b63c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b63c:	b580      	push	{r7, lr}
 800b63e:	b082      	sub	sp, #8
 800b640:	af00      	add	r7, sp, #0
 800b642:	4603      	mov	r3, r0
 800b644:	6039      	str	r1, [r7, #0]
 800b646:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b648:	683b      	ldr	r3, [r7, #0]
 800b64a:	221a      	movs	r2, #26
 800b64c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b64e:	f000 f855 	bl	800b6fc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b652:	4b02      	ldr	r3, [pc, #8]	; (800b65c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b654:	4618      	mov	r0, r3
 800b656:	3708      	adds	r7, #8
 800b658:	46bd      	mov	sp, r7
 800b65a:	bd80      	pop	{r7, pc}
 800b65c:	2000016c 	.word	0x2000016c

0800b660 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b660:	b580      	push	{r7, lr}
 800b662:	b082      	sub	sp, #8
 800b664:	af00      	add	r7, sp, #0
 800b666:	4603      	mov	r3, r0
 800b668:	6039      	str	r1, [r7, #0]
 800b66a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b66c:	79fb      	ldrb	r3, [r7, #7]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d105      	bne.n	800b67e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b672:	683a      	ldr	r2, [r7, #0]
 800b674:	4907      	ldr	r1, [pc, #28]	; (800b694 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b676:	4808      	ldr	r0, [pc, #32]	; (800b698 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b678:	f7ff fea1 	bl	800b3be <USBD_GetString>
 800b67c:	e004      	b.n	800b688 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b67e:	683a      	ldr	r2, [r7, #0]
 800b680:	4904      	ldr	r1, [pc, #16]	; (800b694 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b682:	4805      	ldr	r0, [pc, #20]	; (800b698 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b684:	f7ff fe9b 	bl	800b3be <USBD_GetString>
  }
  return USBD_StrDesc;
 800b688:	4b02      	ldr	r3, [pc, #8]	; (800b694 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b68a:	4618      	mov	r0, r3
 800b68c:	3708      	adds	r7, #8
 800b68e:	46bd      	mov	sp, r7
 800b690:	bd80      	pop	{r7, pc}
 800b692:	bf00      	nop
 800b694:	20000bd8 	.word	0x20000bd8
 800b698:	0800f1cc 	.word	0x0800f1cc

0800b69c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b69c:	b580      	push	{r7, lr}
 800b69e:	b082      	sub	sp, #8
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	4603      	mov	r3, r0
 800b6a4:	6039      	str	r1, [r7, #0]
 800b6a6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b6a8:	79fb      	ldrb	r3, [r7, #7]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d105      	bne.n	800b6ba <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b6ae:	683a      	ldr	r2, [r7, #0]
 800b6b0:	4907      	ldr	r1, [pc, #28]	; (800b6d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b6b2:	4808      	ldr	r0, [pc, #32]	; (800b6d4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b6b4:	f7ff fe83 	bl	800b3be <USBD_GetString>
 800b6b8:	e004      	b.n	800b6c4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b6ba:	683a      	ldr	r2, [r7, #0]
 800b6bc:	4904      	ldr	r1, [pc, #16]	; (800b6d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b6be:	4805      	ldr	r0, [pc, #20]	; (800b6d4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b6c0:	f7ff fe7d 	bl	800b3be <USBD_GetString>
  }
  return USBD_StrDesc;
 800b6c4:	4b02      	ldr	r3, [pc, #8]	; (800b6d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	3708      	adds	r7, #8
 800b6ca:	46bd      	mov	sp, r7
 800b6cc:	bd80      	pop	{r7, pc}
 800b6ce:	bf00      	nop
 800b6d0:	20000bd8 	.word	0x20000bd8
 800b6d4:	0800f1d8 	.word	0x0800f1d8

0800b6d8 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b6d8:	b480      	push	{r7}
 800b6da:	b083      	sub	sp, #12
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	4603      	mov	r3, r0
 800b6e0:	6039      	str	r1, [r7, #0]
 800b6e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800b6e4:	683b      	ldr	r3, [r7, #0]
 800b6e6:	220c      	movs	r2, #12
 800b6e8:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800b6ea:	4b03      	ldr	r3, [pc, #12]	; (800b6f8 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	370c      	adds	r7, #12
 800b6f0:	46bd      	mov	sp, r7
 800b6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f6:	4770      	bx	lr
 800b6f8:	2000015c 	.word	0x2000015c

0800b6fc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b6fc:	b580      	push	{r7, lr}
 800b6fe:	b084      	sub	sp, #16
 800b700:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b702:	4b0f      	ldr	r3, [pc, #60]	; (800b740 <Get_SerialNum+0x44>)
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b708:	4b0e      	ldr	r3, [pc, #56]	; (800b744 <Get_SerialNum+0x48>)
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b70e:	4b0e      	ldr	r3, [pc, #56]	; (800b748 <Get_SerialNum+0x4c>)
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b714:	68fa      	ldr	r2, [r7, #12]
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	4413      	add	r3, r2
 800b71a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d009      	beq.n	800b736 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b722:	2208      	movs	r2, #8
 800b724:	4909      	ldr	r1, [pc, #36]	; (800b74c <Get_SerialNum+0x50>)
 800b726:	68f8      	ldr	r0, [r7, #12]
 800b728:	f000 f814 	bl	800b754 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b72c:	2204      	movs	r2, #4
 800b72e:	4908      	ldr	r1, [pc, #32]	; (800b750 <Get_SerialNum+0x54>)
 800b730:	68b8      	ldr	r0, [r7, #8]
 800b732:	f000 f80f 	bl	800b754 <IntToUnicode>
  }
}
 800b736:	bf00      	nop
 800b738:	3710      	adds	r7, #16
 800b73a:	46bd      	mov	sp, r7
 800b73c:	bd80      	pop	{r7, pc}
 800b73e:	bf00      	nop
 800b740:	1fff7590 	.word	0x1fff7590
 800b744:	1fff7594 	.word	0x1fff7594
 800b748:	1fff7598 	.word	0x1fff7598
 800b74c:	2000016e 	.word	0x2000016e
 800b750:	2000017e 	.word	0x2000017e

0800b754 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b754:	b480      	push	{r7}
 800b756:	b087      	sub	sp, #28
 800b758:	af00      	add	r7, sp, #0
 800b75a:	60f8      	str	r0, [r7, #12]
 800b75c:	60b9      	str	r1, [r7, #8]
 800b75e:	4613      	mov	r3, r2
 800b760:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b762:	2300      	movs	r3, #0
 800b764:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b766:	2300      	movs	r3, #0
 800b768:	75fb      	strb	r3, [r7, #23]
 800b76a:	e027      	b.n	800b7bc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	0f1b      	lsrs	r3, r3, #28
 800b770:	2b09      	cmp	r3, #9
 800b772:	d80b      	bhi.n	800b78c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	0f1b      	lsrs	r3, r3, #28
 800b778:	b2da      	uxtb	r2, r3
 800b77a:	7dfb      	ldrb	r3, [r7, #23]
 800b77c:	005b      	lsls	r3, r3, #1
 800b77e:	4619      	mov	r1, r3
 800b780:	68bb      	ldr	r3, [r7, #8]
 800b782:	440b      	add	r3, r1
 800b784:	3230      	adds	r2, #48	; 0x30
 800b786:	b2d2      	uxtb	r2, r2
 800b788:	701a      	strb	r2, [r3, #0]
 800b78a:	e00a      	b.n	800b7a2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	0f1b      	lsrs	r3, r3, #28
 800b790:	b2da      	uxtb	r2, r3
 800b792:	7dfb      	ldrb	r3, [r7, #23]
 800b794:	005b      	lsls	r3, r3, #1
 800b796:	4619      	mov	r1, r3
 800b798:	68bb      	ldr	r3, [r7, #8]
 800b79a:	440b      	add	r3, r1
 800b79c:	3237      	adds	r2, #55	; 0x37
 800b79e:	b2d2      	uxtb	r2, r2
 800b7a0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	011b      	lsls	r3, r3, #4
 800b7a6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b7a8:	7dfb      	ldrb	r3, [r7, #23]
 800b7aa:	005b      	lsls	r3, r3, #1
 800b7ac:	3301      	adds	r3, #1
 800b7ae:	68ba      	ldr	r2, [r7, #8]
 800b7b0:	4413      	add	r3, r2
 800b7b2:	2200      	movs	r2, #0
 800b7b4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b7b6:	7dfb      	ldrb	r3, [r7, #23]
 800b7b8:	3301      	adds	r3, #1
 800b7ba:	75fb      	strb	r3, [r7, #23]
 800b7bc:	7dfa      	ldrb	r2, [r7, #23]
 800b7be:	79fb      	ldrb	r3, [r7, #7]
 800b7c0:	429a      	cmp	r2, r3
 800b7c2:	d3d3      	bcc.n	800b76c <IntToUnicode+0x18>
  }
}
 800b7c4:	bf00      	nop
 800b7c6:	bf00      	nop
 800b7c8:	371c      	adds	r7, #28
 800b7ca:	46bd      	mov	sp, r7
 800b7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d0:	4770      	bx	lr
	...

0800b7d4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b7d4:	b580      	push	{r7, lr}
 800b7d6:	b088      	sub	sp, #32
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	4a1a      	ldr	r2, [pc, #104]	; (800b84c <HAL_PCD_MspInit+0x78>)
 800b7e2:	4293      	cmp	r3, r2
 800b7e4:	d12d      	bne.n	800b842 <HAL_PCD_MspInit+0x6e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */
		GPIO_InitTypeDef GPIO_InitStruct;
		GPIO_InitStruct.Pin = GPIO_PIN_12;
 800b7e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b7ea:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b7ec:	2301      	movs	r3, #1
 800b7ee:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b7f0:	2300      	movs	r3, #0
 800b7f2:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800b7f4:	2302      	movs	r3, #2
 800b7f6:	61bb      	str	r3, [r7, #24]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b7f8:	f107 030c 	add.w	r3, r7, #12
 800b7fc:	4619      	mov	r1, r3
 800b7fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b802:	f7f7 ff0d 	bl	8003620 <HAL_GPIO_Init>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800b806:	2200      	movs	r2, #0
 800b808:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b80c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b810:	f7f8 f870 	bl	80038f4 <HAL_GPIO_WritePin>
		HAL_Delay(5);
 800b814:	2005      	movs	r0, #5
 800b816:	f7f6 fb2b 	bl	8001e70 <HAL_Delay>

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800b81a:	4b0d      	ldr	r3, [pc, #52]	; (800b850 <HAL_PCD_MspInit+0x7c>)
 800b81c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b81e:	4a0c      	ldr	r2, [pc, #48]	; (800b850 <HAL_PCD_MspInit+0x7c>)
 800b820:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b824:	6593      	str	r3, [r2, #88]	; 0x58
 800b826:	4b0a      	ldr	r3, [pc, #40]	; (800b850 <HAL_PCD_MspInit+0x7c>)
 800b828:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b82a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b82e:	60bb      	str	r3, [r7, #8]
 800b830:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 1, 0);
 800b832:	2200      	movs	r2, #0
 800b834:	2101      	movs	r1, #1
 800b836:	2043      	movs	r0, #67	; 0x43
 800b838:	f7f7 fcb5 	bl	80031a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800b83c:	2043      	movs	r0, #67	; 0x43
 800b83e:	f7f7 fcce 	bl	80031de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800b842:	bf00      	nop
 800b844:	3720      	adds	r7, #32
 800b846:	46bd      	mov	sp, r7
 800b848:	bd80      	pop	{r7, pc}
 800b84a:	bf00      	nop
 800b84c:	40006800 	.word	0x40006800
 800b850:	40021000 	.word	0x40021000

0800b854 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b854:	b580      	push	{r7, lr}
 800b856:	b082      	sub	sp, #8
 800b858:	af00      	add	r7, sp, #0
 800b85a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800b868:	4619      	mov	r1, r3
 800b86a:	4610      	mov	r0, r2
 800b86c:	f7fe fe0a 	bl	800a484 <USBD_LL_SetupStage>
}
 800b870:	bf00      	nop
 800b872:	3708      	adds	r7, #8
 800b874:	46bd      	mov	sp, r7
 800b876:	bd80      	pop	{r7, pc}

0800b878 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b878:	b580      	push	{r7, lr}
 800b87a:	b082      	sub	sp, #8
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	6078      	str	r0, [r7, #4]
 800b880:	460b      	mov	r3, r1
 800b882:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800b88a:	78fa      	ldrb	r2, [r7, #3]
 800b88c:	6879      	ldr	r1, [r7, #4]
 800b88e:	4613      	mov	r3, r2
 800b890:	009b      	lsls	r3, r3, #2
 800b892:	4413      	add	r3, r2
 800b894:	00db      	lsls	r3, r3, #3
 800b896:	440b      	add	r3, r1
 800b898:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800b89c:	681a      	ldr	r2, [r3, #0]
 800b89e:	78fb      	ldrb	r3, [r7, #3]
 800b8a0:	4619      	mov	r1, r3
 800b8a2:	f7fe fe44 	bl	800a52e <USBD_LL_DataOutStage>
}
 800b8a6:	bf00      	nop
 800b8a8:	3708      	adds	r7, #8
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	bd80      	pop	{r7, pc}

0800b8ae <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b8ae:	b580      	push	{r7, lr}
 800b8b0:	b082      	sub	sp, #8
 800b8b2:	af00      	add	r7, sp, #0
 800b8b4:	6078      	str	r0, [r7, #4]
 800b8b6:	460b      	mov	r3, r1
 800b8b8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800b8c0:	78fa      	ldrb	r2, [r7, #3]
 800b8c2:	6879      	ldr	r1, [r7, #4]
 800b8c4:	4613      	mov	r3, r2
 800b8c6:	009b      	lsls	r3, r3, #2
 800b8c8:	4413      	add	r3, r2
 800b8ca:	00db      	lsls	r3, r3, #3
 800b8cc:	440b      	add	r3, r1
 800b8ce:	333c      	adds	r3, #60	; 0x3c
 800b8d0:	681a      	ldr	r2, [r3, #0]
 800b8d2:	78fb      	ldrb	r3, [r7, #3]
 800b8d4:	4619      	mov	r1, r3
 800b8d6:	f7fe fe8d 	bl	800a5f4 <USBD_LL_DataInStage>
}
 800b8da:	bf00      	nop
 800b8dc:	3708      	adds	r7, #8
 800b8de:	46bd      	mov	sp, r7
 800b8e0:	bd80      	pop	{r7, pc}

0800b8e2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b8e2:	b580      	push	{r7, lr}
 800b8e4:	b082      	sub	sp, #8
 800b8e6:	af00      	add	r7, sp, #0
 800b8e8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800b8f0:	4618      	mov	r0, r3
 800b8f2:	f7fe ffa1 	bl	800a838 <USBD_LL_SOF>
}
 800b8f6:	bf00      	nop
 800b8f8:	3708      	adds	r7, #8
 800b8fa:	46bd      	mov	sp, r7
 800b8fc:	bd80      	pop	{r7, pc}

0800b8fe <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b8fe:	b580      	push	{r7, lr}
 800b900:	b084      	sub	sp, #16
 800b902:	af00      	add	r7, sp, #0
 800b904:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b906:	2301      	movs	r3, #1
 800b908:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	689b      	ldr	r3, [r3, #8]
 800b90e:	2b02      	cmp	r3, #2
 800b910:	d001      	beq.n	800b916 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b912:	f7f5 ffcf 	bl	80018b4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800b91c:	7bfa      	ldrb	r2, [r7, #15]
 800b91e:	4611      	mov	r1, r2
 800b920:	4618      	mov	r0, r3
 800b922:	f7fe ff4b 	bl	800a7bc <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800b92c:	4618      	mov	r0, r3
 800b92e:	f7fe fef7 	bl	800a720 <USBD_LL_Reset>
}
 800b932:	bf00      	nop
 800b934:	3710      	adds	r7, #16
 800b936:	46bd      	mov	sp, r7
 800b938:	bd80      	pop	{r7, pc}
	...

0800b93c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b93c:	b580      	push	{r7, lr}
 800b93e:	b082      	sub	sp, #8
 800b940:	af00      	add	r7, sp, #0
 800b942:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800b94a:	4618      	mov	r0, r3
 800b94c:	f7fe ff46 	bl	800a7dc <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
	if (hpcd->Init.low_power_enable) {
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	699b      	ldr	r3, [r3, #24]
 800b954:	2b00      	cmp	r3, #0
 800b956:	d005      	beq.n	800b964 <HAL_PCD_SuspendCallback+0x28>
		/* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
		SCB->SCR |= (uint32_t) ((uint32_t) (SCB_SCR_SLEEPDEEP_Msk
 800b958:	4b04      	ldr	r3, [pc, #16]	; (800b96c <HAL_PCD_SuspendCallback+0x30>)
 800b95a:	691b      	ldr	r3, [r3, #16]
 800b95c:	4a03      	ldr	r2, [pc, #12]	; (800b96c <HAL_PCD_SuspendCallback+0x30>)
 800b95e:	f043 0306 	orr.w	r3, r3, #6
 800b962:	6113      	str	r3, [r2, #16]
				| SCB_SCR_SLEEPONEXIT_Msk));
	}
  /* USER CODE END 2 */
}
 800b964:	bf00      	nop
 800b966:	3708      	adds	r7, #8
 800b968:	46bd      	mov	sp, r7
 800b96a:	bd80      	pop	{r7, pc}
 800b96c:	e000ed00 	.word	0xe000ed00

0800b970 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b970:	b580      	push	{r7, lr}
 800b972:	b082      	sub	sp, #8
 800b974:	af00      	add	r7, sp, #0
 800b976:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
	if (hpcd->Init.low_power_enable) {
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	699b      	ldr	r3, [r3, #24]
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d007      	beq.n	800b990 <HAL_PCD_ResumeCallback+0x20>
		/* Reset SLEEPDEEP bit of Cortex System Control Register. */
		SCB->SCR &= (uint32_t) ~((uint32_t) (SCB_SCR_SLEEPDEEP_Msk
 800b980:	4b08      	ldr	r3, [pc, #32]	; (800b9a4 <HAL_PCD_ResumeCallback+0x34>)
 800b982:	691b      	ldr	r3, [r3, #16]
 800b984:	4a07      	ldr	r2, [pc, #28]	; (800b9a4 <HAL_PCD_ResumeCallback+0x34>)
 800b986:	f023 0306 	bic.w	r3, r3, #6
 800b98a:	6113      	str	r3, [r2, #16]
				| SCB_SCR_SLEEPONEXIT_Msk));
		SystemClockConfig_Resume();
 800b98c:	f000 fa90 	bl	800beb0 <SystemClockConfig_Resume>
	}
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800b996:	4618      	mov	r0, r3
 800b998:	f7fe ff36 	bl	800a808 <USBD_LL_Resume>
}
 800b99c:	bf00      	nop
 800b99e:	3708      	adds	r7, #8
 800b9a0:	46bd      	mov	sp, r7
 800b9a2:	bd80      	pop	{r7, pc}
 800b9a4:	e000ed00 	.word	0xe000ed00

0800b9a8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b9a8:	b580      	push	{r7, lr}
 800b9aa:	b082      	sub	sp, #8
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800b9b0:	f7fa fa86 	bl	8005ec0 <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800b9b4:	4a22      	ldr	r2, [pc, #136]	; (800ba40 <USBD_LL_Init+0x98>)
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  pdev->pData = &hpcd_USB_FS;
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	4a20      	ldr	r2, [pc, #128]	; (800ba40 <USBD_LL_Init+0x98>)
 800b9c0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800b9c4:	4b1e      	ldr	r3, [pc, #120]	; (800ba40 <USBD_LL_Init+0x98>)
 800b9c6:	4a1f      	ldr	r2, [pc, #124]	; (800ba44 <USBD_LL_Init+0x9c>)
 800b9c8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800b9ca:	4b1d      	ldr	r3, [pc, #116]	; (800ba40 <USBD_LL_Init+0x98>)
 800b9cc:	2208      	movs	r2, #8
 800b9ce:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800b9d0:	4b1b      	ldr	r3, [pc, #108]	; (800ba40 <USBD_LL_Init+0x98>)
 800b9d2:	2202      	movs	r2, #2
 800b9d4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b9d6:	4b1a      	ldr	r3, [pc, #104]	; (800ba40 <USBD_LL_Init+0x98>)
 800b9d8:	2202      	movs	r2, #2
 800b9da:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800b9dc:	4b18      	ldr	r3, [pc, #96]	; (800ba40 <USBD_LL_Init+0x98>)
 800b9de:	2200      	movs	r2, #0
 800b9e0:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800b9e2:	4b17      	ldr	r3, [pc, #92]	; (800ba40 <USBD_LL_Init+0x98>)
 800b9e4:	2200      	movs	r2, #0
 800b9e6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800b9e8:	4b15      	ldr	r3, [pc, #84]	; (800ba40 <USBD_LL_Init+0x98>)
 800b9ea:	2200      	movs	r2, #0
 800b9ec:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800b9ee:	4b14      	ldr	r3, [pc, #80]	; (800ba40 <USBD_LL_Init+0x98>)
 800b9f0:	2200      	movs	r2, #0
 800b9f2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800b9f4:	4812      	ldr	r0, [pc, #72]	; (800ba40 <USBD_LL_Init+0x98>)
 800b9f6:	f7f8 fd38 	bl	800446a <HAL_PCD_Init>
 800b9fa:	4603      	mov	r3, r0
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d001      	beq.n	800ba04 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800ba00:	f7f5 ff58 	bl	80018b4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
	HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*) pdev->pData, 0x00, PCD_SNG_BUF,
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ba0a:	2318      	movs	r3, #24
 800ba0c:	2200      	movs	r2, #0
 800ba0e:	2100      	movs	r1, #0
 800ba10:	f7fa f975 	bl	8005cfe <HAL_PCDEx_PMAConfig>
			0x18);
	HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*) pdev->pData, 0x80, PCD_SNG_BUF,
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ba1a:	2358      	movs	r3, #88	; 0x58
 800ba1c:	2200      	movs	r2, #0
 800ba1e:	2180      	movs	r1, #128	; 0x80
 800ba20:	f7fa f96d 	bl	8005cfe <HAL_PCDEx_PMAConfig>
			0x58);
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
	HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*) pdev->pData, 0x81, PCD_SNG_BUF,
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ba2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ba2e:	2200      	movs	r2, #0
 800ba30:	2181      	movs	r1, #129	; 0x81
 800ba32:	f7fa f964 	bl	8005cfe <HAL_PCDEx_PMAConfig>
			0x100);
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 800ba36:	2300      	movs	r3, #0
}
 800ba38:	4618      	mov	r0, r3
 800ba3a:	3708      	adds	r7, #8
 800ba3c:	46bd      	mov	sp, r7
 800ba3e:	bd80      	pop	{r7, pc}
 800ba40:	20000dd8 	.word	0x20000dd8
 800ba44:	40006800 	.word	0x40006800

0800ba48 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ba48:	b580      	push	{r7, lr}
 800ba4a:	b084      	sub	sp, #16
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba50:	2300      	movs	r3, #0
 800ba52:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba54:	2300      	movs	r3, #0
 800ba56:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ba5e:	4618      	mov	r0, r3
 800ba60:	f7f8 fe15 	bl	800468e <HAL_PCD_Start>
 800ba64:	4603      	mov	r3, r0
 800ba66:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800ba68:	7bbb      	ldrb	r3, [r7, #14]
 800ba6a:	2b03      	cmp	r3, #3
 800ba6c:	d816      	bhi.n	800ba9c <USBD_LL_Start+0x54>
 800ba6e:	a201      	add	r2, pc, #4	; (adr r2, 800ba74 <USBD_LL_Start+0x2c>)
 800ba70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba74:	0800ba85 	.word	0x0800ba85
 800ba78:	0800ba8b 	.word	0x0800ba8b
 800ba7c:	0800ba91 	.word	0x0800ba91
 800ba80:	0800ba97 	.word	0x0800ba97
    case HAL_OK :
      usb_status = USBD_OK;
 800ba84:	2300      	movs	r3, #0
 800ba86:	73fb      	strb	r3, [r7, #15]
    break;
 800ba88:	e00b      	b.n	800baa2 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ba8a:	2303      	movs	r3, #3
 800ba8c:	73fb      	strb	r3, [r7, #15]
    break;
 800ba8e:	e008      	b.n	800baa2 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ba90:	2301      	movs	r3, #1
 800ba92:	73fb      	strb	r3, [r7, #15]
    break;
 800ba94:	e005      	b.n	800baa2 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ba96:	2303      	movs	r3, #3
 800ba98:	73fb      	strb	r3, [r7, #15]
    break;
 800ba9a:	e002      	b.n	800baa2 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800ba9c:	2303      	movs	r3, #3
 800ba9e:	73fb      	strb	r3, [r7, #15]
    break;
 800baa0:	bf00      	nop
  }
  return usb_status;
 800baa2:	7bfb      	ldrb	r3, [r7, #15]
}
 800baa4:	4618      	mov	r0, r3
 800baa6:	3710      	adds	r7, #16
 800baa8:	46bd      	mov	sp, r7
 800baaa:	bd80      	pop	{r7, pc}

0800baac <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800baac:	b580      	push	{r7, lr}
 800baae:	b084      	sub	sp, #16
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	6078      	str	r0, [r7, #4]
 800bab4:	4608      	mov	r0, r1
 800bab6:	4611      	mov	r1, r2
 800bab8:	461a      	mov	r2, r3
 800baba:	4603      	mov	r3, r0
 800babc:	70fb      	strb	r3, [r7, #3]
 800babe:	460b      	mov	r3, r1
 800bac0:	70bb      	strb	r3, [r7, #2]
 800bac2:	4613      	mov	r3, r2
 800bac4:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bac6:	2300      	movs	r3, #0
 800bac8:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800baca:	2300      	movs	r3, #0
 800bacc:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bad4:	78bb      	ldrb	r3, [r7, #2]
 800bad6:	883a      	ldrh	r2, [r7, #0]
 800bad8:	78f9      	ldrb	r1, [r7, #3]
 800bada:	f7f8 ff6d 	bl	80049b8 <HAL_PCD_EP_Open>
 800bade:	4603      	mov	r3, r0
 800bae0:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800bae2:	7bbb      	ldrb	r3, [r7, #14]
 800bae4:	2b03      	cmp	r3, #3
 800bae6:	d817      	bhi.n	800bb18 <USBD_LL_OpenEP+0x6c>
 800bae8:	a201      	add	r2, pc, #4	; (adr r2, 800baf0 <USBD_LL_OpenEP+0x44>)
 800baea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800baee:	bf00      	nop
 800baf0:	0800bb01 	.word	0x0800bb01
 800baf4:	0800bb07 	.word	0x0800bb07
 800baf8:	0800bb0d 	.word	0x0800bb0d
 800bafc:	0800bb13 	.word	0x0800bb13
    case HAL_OK :
      usb_status = USBD_OK;
 800bb00:	2300      	movs	r3, #0
 800bb02:	73fb      	strb	r3, [r7, #15]
    break;
 800bb04:	e00b      	b.n	800bb1e <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bb06:	2303      	movs	r3, #3
 800bb08:	73fb      	strb	r3, [r7, #15]
    break;
 800bb0a:	e008      	b.n	800bb1e <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bb0c:	2301      	movs	r3, #1
 800bb0e:	73fb      	strb	r3, [r7, #15]
    break;
 800bb10:	e005      	b.n	800bb1e <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bb12:	2303      	movs	r3, #3
 800bb14:	73fb      	strb	r3, [r7, #15]
    break;
 800bb16:	e002      	b.n	800bb1e <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800bb18:	2303      	movs	r3, #3
 800bb1a:	73fb      	strb	r3, [r7, #15]
    break;
 800bb1c:	bf00      	nop
  }
  return usb_status;
 800bb1e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb20:	4618      	mov	r0, r3
 800bb22:	3710      	adds	r7, #16
 800bb24:	46bd      	mov	sp, r7
 800bb26:	bd80      	pop	{r7, pc}

0800bb28 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bb28:	b580      	push	{r7, lr}
 800bb2a:	b084      	sub	sp, #16
 800bb2c:	af00      	add	r7, sp, #0
 800bb2e:	6078      	str	r0, [r7, #4]
 800bb30:	460b      	mov	r3, r1
 800bb32:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb34:	2300      	movs	r3, #0
 800bb36:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb38:	2300      	movs	r3, #0
 800bb3a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bb42:	78fa      	ldrb	r2, [r7, #3]
 800bb44:	4611      	mov	r1, r2
 800bb46:	4618      	mov	r0, r3
 800bb48:	f7f8 ff9c 	bl	8004a84 <HAL_PCD_EP_Close>
 800bb4c:	4603      	mov	r3, r0
 800bb4e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800bb50:	7bbb      	ldrb	r3, [r7, #14]
 800bb52:	2b03      	cmp	r3, #3
 800bb54:	d816      	bhi.n	800bb84 <USBD_LL_CloseEP+0x5c>
 800bb56:	a201      	add	r2, pc, #4	; (adr r2, 800bb5c <USBD_LL_CloseEP+0x34>)
 800bb58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb5c:	0800bb6d 	.word	0x0800bb6d
 800bb60:	0800bb73 	.word	0x0800bb73
 800bb64:	0800bb79 	.word	0x0800bb79
 800bb68:	0800bb7f 	.word	0x0800bb7f
    case HAL_OK :
      usb_status = USBD_OK;
 800bb6c:	2300      	movs	r3, #0
 800bb6e:	73fb      	strb	r3, [r7, #15]
    break;
 800bb70:	e00b      	b.n	800bb8a <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bb72:	2303      	movs	r3, #3
 800bb74:	73fb      	strb	r3, [r7, #15]
    break;
 800bb76:	e008      	b.n	800bb8a <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bb78:	2301      	movs	r3, #1
 800bb7a:	73fb      	strb	r3, [r7, #15]
    break;
 800bb7c:	e005      	b.n	800bb8a <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bb7e:	2303      	movs	r3, #3
 800bb80:	73fb      	strb	r3, [r7, #15]
    break;
 800bb82:	e002      	b.n	800bb8a <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800bb84:	2303      	movs	r3, #3
 800bb86:	73fb      	strb	r3, [r7, #15]
    break;
 800bb88:	bf00      	nop
  }
  return usb_status;
 800bb8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb8c:	4618      	mov	r0, r3
 800bb8e:	3710      	adds	r7, #16
 800bb90:	46bd      	mov	sp, r7
 800bb92:	bd80      	pop	{r7, pc}

0800bb94 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bb94:	b580      	push	{r7, lr}
 800bb96:	b084      	sub	sp, #16
 800bb98:	af00      	add	r7, sp, #0
 800bb9a:	6078      	str	r0, [r7, #4]
 800bb9c:	460b      	mov	r3, r1
 800bb9e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bba0:	2300      	movs	r3, #0
 800bba2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bba4:	2300      	movs	r3, #0
 800bba6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bbae:	78fa      	ldrb	r2, [r7, #3]
 800bbb0:	4611      	mov	r1, r2
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	f7f9 f82e 	bl	8004c14 <HAL_PCD_EP_SetStall>
 800bbb8:	4603      	mov	r3, r0
 800bbba:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800bbbc:	7bbb      	ldrb	r3, [r7, #14]
 800bbbe:	2b03      	cmp	r3, #3
 800bbc0:	d816      	bhi.n	800bbf0 <USBD_LL_StallEP+0x5c>
 800bbc2:	a201      	add	r2, pc, #4	; (adr r2, 800bbc8 <USBD_LL_StallEP+0x34>)
 800bbc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbc8:	0800bbd9 	.word	0x0800bbd9
 800bbcc:	0800bbdf 	.word	0x0800bbdf
 800bbd0:	0800bbe5 	.word	0x0800bbe5
 800bbd4:	0800bbeb 	.word	0x0800bbeb
    case HAL_OK :
      usb_status = USBD_OK;
 800bbd8:	2300      	movs	r3, #0
 800bbda:	73fb      	strb	r3, [r7, #15]
    break;
 800bbdc:	e00b      	b.n	800bbf6 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bbde:	2303      	movs	r3, #3
 800bbe0:	73fb      	strb	r3, [r7, #15]
    break;
 800bbe2:	e008      	b.n	800bbf6 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bbe4:	2301      	movs	r3, #1
 800bbe6:	73fb      	strb	r3, [r7, #15]
    break;
 800bbe8:	e005      	b.n	800bbf6 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bbea:	2303      	movs	r3, #3
 800bbec:	73fb      	strb	r3, [r7, #15]
    break;
 800bbee:	e002      	b.n	800bbf6 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800bbf0:	2303      	movs	r3, #3
 800bbf2:	73fb      	strb	r3, [r7, #15]
    break;
 800bbf4:	bf00      	nop
  }
  return usb_status;
 800bbf6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbf8:	4618      	mov	r0, r3
 800bbfa:	3710      	adds	r7, #16
 800bbfc:	46bd      	mov	sp, r7
 800bbfe:	bd80      	pop	{r7, pc}

0800bc00 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bc00:	b580      	push	{r7, lr}
 800bc02:	b084      	sub	sp, #16
 800bc04:	af00      	add	r7, sp, #0
 800bc06:	6078      	str	r0, [r7, #4]
 800bc08:	460b      	mov	r3, r1
 800bc0a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc0c:	2300      	movs	r3, #0
 800bc0e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc10:	2300      	movs	r3, #0
 800bc12:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bc1a:	78fa      	ldrb	r2, [r7, #3]
 800bc1c:	4611      	mov	r1, r2
 800bc1e:	4618      	mov	r0, r3
 800bc20:	f7f9 f858 	bl	8004cd4 <HAL_PCD_EP_ClrStall>
 800bc24:	4603      	mov	r3, r0
 800bc26:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800bc28:	7bbb      	ldrb	r3, [r7, #14]
 800bc2a:	2b03      	cmp	r3, #3
 800bc2c:	d816      	bhi.n	800bc5c <USBD_LL_ClearStallEP+0x5c>
 800bc2e:	a201      	add	r2, pc, #4	; (adr r2, 800bc34 <USBD_LL_ClearStallEP+0x34>)
 800bc30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc34:	0800bc45 	.word	0x0800bc45
 800bc38:	0800bc4b 	.word	0x0800bc4b
 800bc3c:	0800bc51 	.word	0x0800bc51
 800bc40:	0800bc57 	.word	0x0800bc57
    case HAL_OK :
      usb_status = USBD_OK;
 800bc44:	2300      	movs	r3, #0
 800bc46:	73fb      	strb	r3, [r7, #15]
    break;
 800bc48:	e00b      	b.n	800bc62 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bc4a:	2303      	movs	r3, #3
 800bc4c:	73fb      	strb	r3, [r7, #15]
    break;
 800bc4e:	e008      	b.n	800bc62 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bc50:	2301      	movs	r3, #1
 800bc52:	73fb      	strb	r3, [r7, #15]
    break;
 800bc54:	e005      	b.n	800bc62 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bc56:	2303      	movs	r3, #3
 800bc58:	73fb      	strb	r3, [r7, #15]
    break;
 800bc5a:	e002      	b.n	800bc62 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800bc5c:	2303      	movs	r3, #3
 800bc5e:	73fb      	strb	r3, [r7, #15]
    break;
 800bc60:	bf00      	nop
  }
  return usb_status;
 800bc62:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc64:	4618      	mov	r0, r3
 800bc66:	3710      	adds	r7, #16
 800bc68:	46bd      	mov	sp, r7
 800bc6a:	bd80      	pop	{r7, pc}

0800bc6c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bc6c:	b480      	push	{r7}
 800bc6e:	b085      	sub	sp, #20
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	6078      	str	r0, [r7, #4]
 800bc74:	460b      	mov	r3, r1
 800bc76:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bc7e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800bc80:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	da0c      	bge.n	800bca2 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bc88:	78fb      	ldrb	r3, [r7, #3]
 800bc8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bc8e:	68f9      	ldr	r1, [r7, #12]
 800bc90:	1c5a      	adds	r2, r3, #1
 800bc92:	4613      	mov	r3, r2
 800bc94:	009b      	lsls	r3, r3, #2
 800bc96:	4413      	add	r3, r2
 800bc98:	00db      	lsls	r3, r3, #3
 800bc9a:	440b      	add	r3, r1
 800bc9c:	3302      	adds	r3, #2
 800bc9e:	781b      	ldrb	r3, [r3, #0]
 800bca0:	e00b      	b.n	800bcba <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800bca2:	78fb      	ldrb	r3, [r7, #3]
 800bca4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bca8:	68f9      	ldr	r1, [r7, #12]
 800bcaa:	4613      	mov	r3, r2
 800bcac:	009b      	lsls	r3, r3, #2
 800bcae:	4413      	add	r3, r2
 800bcb0:	00db      	lsls	r3, r3, #3
 800bcb2:	440b      	add	r3, r1
 800bcb4:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800bcb8:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bcba:	4618      	mov	r0, r3
 800bcbc:	3714      	adds	r7, #20
 800bcbe:	46bd      	mov	sp, r7
 800bcc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc4:	4770      	bx	lr
	...

0800bcc8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bcc8:	b580      	push	{r7, lr}
 800bcca:	b084      	sub	sp, #16
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	6078      	str	r0, [r7, #4]
 800bcd0:	460b      	mov	r3, r1
 800bcd2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bcd4:	2300      	movs	r3, #0
 800bcd6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bcd8:	2300      	movs	r3, #0
 800bcda:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bce2:	78fa      	ldrb	r2, [r7, #3]
 800bce4:	4611      	mov	r1, r2
 800bce6:	4618      	mov	r0, r3
 800bce8:	f7f8 fe41 	bl	800496e <HAL_PCD_SetAddress>
 800bcec:	4603      	mov	r3, r0
 800bcee:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800bcf0:	7bbb      	ldrb	r3, [r7, #14]
 800bcf2:	2b03      	cmp	r3, #3
 800bcf4:	d816      	bhi.n	800bd24 <USBD_LL_SetUSBAddress+0x5c>
 800bcf6:	a201      	add	r2, pc, #4	; (adr r2, 800bcfc <USBD_LL_SetUSBAddress+0x34>)
 800bcf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcfc:	0800bd0d 	.word	0x0800bd0d
 800bd00:	0800bd13 	.word	0x0800bd13
 800bd04:	0800bd19 	.word	0x0800bd19
 800bd08:	0800bd1f 	.word	0x0800bd1f
    case HAL_OK :
      usb_status = USBD_OK;
 800bd0c:	2300      	movs	r3, #0
 800bd0e:	73fb      	strb	r3, [r7, #15]
    break;
 800bd10:	e00b      	b.n	800bd2a <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bd12:	2303      	movs	r3, #3
 800bd14:	73fb      	strb	r3, [r7, #15]
    break;
 800bd16:	e008      	b.n	800bd2a <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bd18:	2301      	movs	r3, #1
 800bd1a:	73fb      	strb	r3, [r7, #15]
    break;
 800bd1c:	e005      	b.n	800bd2a <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bd1e:	2303      	movs	r3, #3
 800bd20:	73fb      	strb	r3, [r7, #15]
    break;
 800bd22:	e002      	b.n	800bd2a <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800bd24:	2303      	movs	r3, #3
 800bd26:	73fb      	strb	r3, [r7, #15]
    break;
 800bd28:	bf00      	nop
  }
  return usb_status;
 800bd2a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	3710      	adds	r7, #16
 800bd30:	46bd      	mov	sp, r7
 800bd32:	bd80      	pop	{r7, pc}

0800bd34 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bd34:	b580      	push	{r7, lr}
 800bd36:	b086      	sub	sp, #24
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	60f8      	str	r0, [r7, #12]
 800bd3c:	607a      	str	r2, [r7, #4]
 800bd3e:	603b      	str	r3, [r7, #0]
 800bd40:	460b      	mov	r3, r1
 800bd42:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd44:	2300      	movs	r3, #0
 800bd46:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd48:	2300      	movs	r3, #0
 800bd4a:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bd52:	7af9      	ldrb	r1, [r7, #11]
 800bd54:	683b      	ldr	r3, [r7, #0]
 800bd56:	687a      	ldr	r2, [r7, #4]
 800bd58:	f7f8 ff19 	bl	8004b8e <HAL_PCD_EP_Transmit>
 800bd5c:	4603      	mov	r3, r0
 800bd5e:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800bd60:	7dbb      	ldrb	r3, [r7, #22]
 800bd62:	2b03      	cmp	r3, #3
 800bd64:	d816      	bhi.n	800bd94 <USBD_LL_Transmit+0x60>
 800bd66:	a201      	add	r2, pc, #4	; (adr r2, 800bd6c <USBD_LL_Transmit+0x38>)
 800bd68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd6c:	0800bd7d 	.word	0x0800bd7d
 800bd70:	0800bd83 	.word	0x0800bd83
 800bd74:	0800bd89 	.word	0x0800bd89
 800bd78:	0800bd8f 	.word	0x0800bd8f
    case HAL_OK :
      usb_status = USBD_OK;
 800bd7c:	2300      	movs	r3, #0
 800bd7e:	75fb      	strb	r3, [r7, #23]
    break;
 800bd80:	e00b      	b.n	800bd9a <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bd82:	2303      	movs	r3, #3
 800bd84:	75fb      	strb	r3, [r7, #23]
    break;
 800bd86:	e008      	b.n	800bd9a <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bd88:	2301      	movs	r3, #1
 800bd8a:	75fb      	strb	r3, [r7, #23]
    break;
 800bd8c:	e005      	b.n	800bd9a <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bd8e:	2303      	movs	r3, #3
 800bd90:	75fb      	strb	r3, [r7, #23]
    break;
 800bd92:	e002      	b.n	800bd9a <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800bd94:	2303      	movs	r3, #3
 800bd96:	75fb      	strb	r3, [r7, #23]
    break;
 800bd98:	bf00      	nop
  }
  return usb_status;
 800bd9a:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	3718      	adds	r7, #24
 800bda0:	46bd      	mov	sp, r7
 800bda2:	bd80      	pop	{r7, pc}

0800bda4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bda4:	b580      	push	{r7, lr}
 800bda6:	b086      	sub	sp, #24
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	60f8      	str	r0, [r7, #12]
 800bdac:	607a      	str	r2, [r7, #4]
 800bdae:	603b      	str	r3, [r7, #0]
 800bdb0:	460b      	mov	r3, r1
 800bdb2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bdb4:	2300      	movs	r3, #0
 800bdb6:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bdb8:	2300      	movs	r3, #0
 800bdba:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bdc2:	7af9      	ldrb	r1, [r7, #11]
 800bdc4:	683b      	ldr	r3, [r7, #0]
 800bdc6:	687a      	ldr	r2, [r7, #4]
 800bdc8:	f7f8 fea4 	bl	8004b14 <HAL_PCD_EP_Receive>
 800bdcc:	4603      	mov	r3, r0
 800bdce:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800bdd0:	7dbb      	ldrb	r3, [r7, #22]
 800bdd2:	2b03      	cmp	r3, #3
 800bdd4:	d816      	bhi.n	800be04 <USBD_LL_PrepareReceive+0x60>
 800bdd6:	a201      	add	r2, pc, #4	; (adr r2, 800bddc <USBD_LL_PrepareReceive+0x38>)
 800bdd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bddc:	0800bded 	.word	0x0800bded
 800bde0:	0800bdf3 	.word	0x0800bdf3
 800bde4:	0800bdf9 	.word	0x0800bdf9
 800bde8:	0800bdff 	.word	0x0800bdff
    case HAL_OK :
      usb_status = USBD_OK;
 800bdec:	2300      	movs	r3, #0
 800bdee:	75fb      	strb	r3, [r7, #23]
    break;
 800bdf0:	e00b      	b.n	800be0a <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bdf2:	2303      	movs	r3, #3
 800bdf4:	75fb      	strb	r3, [r7, #23]
    break;
 800bdf6:	e008      	b.n	800be0a <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bdf8:	2301      	movs	r3, #1
 800bdfa:	75fb      	strb	r3, [r7, #23]
    break;
 800bdfc:	e005      	b.n	800be0a <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bdfe:	2303      	movs	r3, #3
 800be00:	75fb      	strb	r3, [r7, #23]
    break;
 800be02:	e002      	b.n	800be0a <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800be04:	2303      	movs	r3, #3
 800be06:	75fb      	strb	r3, [r7, #23]
    break;
 800be08:	bf00      	nop
  }
  return usb_status;
 800be0a:	7dfb      	ldrb	r3, [r7, #23]
}
 800be0c:	4618      	mov	r0, r3
 800be0e:	3718      	adds	r7, #24
 800be10:	46bd      	mov	sp, r7
 800be12:	bd80      	pop	{r7, pc}

0800be14 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800be14:	b580      	push	{r7, lr}
 800be16:	b082      	sub	sp, #8
 800be18:	af00      	add	r7, sp, #0
 800be1a:	6078      	str	r0, [r7, #4]
 800be1c:	460b      	mov	r3, r1
 800be1e:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800be20:	78fb      	ldrb	r3, [r7, #3]
 800be22:	2b00      	cmp	r3, #0
 800be24:	d002      	beq.n	800be2c <HAL_PCDEx_LPM_Callback+0x18>
 800be26:	2b01      	cmp	r3, #1
 800be28:	d013      	beq.n	800be52 <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800be2a:	e023      	b.n	800be74 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	699b      	ldr	r3, [r3, #24]
 800be30:	2b00      	cmp	r3, #0
 800be32:	d007      	beq.n	800be44 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800be34:	f000 f83c 	bl	800beb0 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800be38:	4b10      	ldr	r3, [pc, #64]	; (800be7c <HAL_PCDEx_LPM_Callback+0x68>)
 800be3a:	691b      	ldr	r3, [r3, #16]
 800be3c:	4a0f      	ldr	r2, [pc, #60]	; (800be7c <HAL_PCDEx_LPM_Callback+0x68>)
 800be3e:	f023 0306 	bic.w	r3, r3, #6
 800be42:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800be4a:	4618      	mov	r0, r3
 800be4c:	f7fe fcdc 	bl	800a808 <USBD_LL_Resume>
    break;
 800be50:	e010      	b.n	800be74 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800be58:	4618      	mov	r0, r3
 800be5a:	f7fe fcbf 	bl	800a7dc <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	699b      	ldr	r3, [r3, #24]
 800be62:	2b00      	cmp	r3, #0
 800be64:	d005      	beq.n	800be72 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800be66:	4b05      	ldr	r3, [pc, #20]	; (800be7c <HAL_PCDEx_LPM_Callback+0x68>)
 800be68:	691b      	ldr	r3, [r3, #16]
 800be6a:	4a04      	ldr	r2, [pc, #16]	; (800be7c <HAL_PCDEx_LPM_Callback+0x68>)
 800be6c:	f043 0306 	orr.w	r3, r3, #6
 800be70:	6113      	str	r3, [r2, #16]
    break;
 800be72:	bf00      	nop
}
 800be74:	bf00      	nop
 800be76:	3708      	adds	r7, #8
 800be78:	46bd      	mov	sp, r7
 800be7a:	bd80      	pop	{r7, pc}
 800be7c:	e000ed00 	.word	0xe000ed00

0800be80 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800be80:	b480      	push	{r7}
 800be82:	b083      	sub	sp, #12
 800be84:	af00      	add	r7, sp, #0
 800be86:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800be88:	4b03      	ldr	r3, [pc, #12]	; (800be98 <USBD_static_malloc+0x18>)
}
 800be8a:	4618      	mov	r0, r3
 800be8c:	370c      	adds	r7, #12
 800be8e:	46bd      	mov	sp, r7
 800be90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be94:	4770      	bx	lr
 800be96:	bf00      	nop
 800be98:	2000039c 	.word	0x2000039c

0800be9c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800be9c:	b480      	push	{r7}
 800be9e:	b083      	sub	sp, #12
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	6078      	str	r0, [r7, #4]

}
 800bea4:	bf00      	nop
 800bea6:	370c      	adds	r7, #12
 800bea8:	46bd      	mov	sp, r7
 800beaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beae:	4770      	bx	lr

0800beb0 <SystemClockConfig_Resume>:
/**
 * @brief  Configures system clock after wake-up from USB resume callBack:
 *         enable HSI, PLL and select PLL as system clock source.
 * @retval None
 */
static void SystemClockConfig_Resume(void) {
 800beb0:	b580      	push	{r7, lr}
 800beb2:	af00      	add	r7, sp, #0
	SystemClock_Config();
 800beb4:	f7f5 fc44 	bl	8001740 <SystemClock_Config>
}
 800beb8:	bf00      	nop
 800beba:	bd80      	pop	{r7, pc}

0800bebc <__errno>:
 800bebc:	4b01      	ldr	r3, [pc, #4]	; (800bec4 <__errno+0x8>)
 800bebe:	6818      	ldr	r0, [r3, #0]
 800bec0:	4770      	bx	lr
 800bec2:	bf00      	nop
 800bec4:	20000188 	.word	0x20000188

0800bec8 <__libc_init_array>:
 800bec8:	b570      	push	{r4, r5, r6, lr}
 800beca:	4d0d      	ldr	r5, [pc, #52]	; (800bf00 <__libc_init_array+0x38>)
 800becc:	4c0d      	ldr	r4, [pc, #52]	; (800bf04 <__libc_init_array+0x3c>)
 800bece:	1b64      	subs	r4, r4, r5
 800bed0:	10a4      	asrs	r4, r4, #2
 800bed2:	2600      	movs	r6, #0
 800bed4:	42a6      	cmp	r6, r4
 800bed6:	d109      	bne.n	800beec <__libc_init_array+0x24>
 800bed8:	4d0b      	ldr	r5, [pc, #44]	; (800bf08 <__libc_init_array+0x40>)
 800beda:	4c0c      	ldr	r4, [pc, #48]	; (800bf0c <__libc_init_array+0x44>)
 800bedc:	f003 f95c 	bl	800f198 <_init>
 800bee0:	1b64      	subs	r4, r4, r5
 800bee2:	10a4      	asrs	r4, r4, #2
 800bee4:	2600      	movs	r6, #0
 800bee6:	42a6      	cmp	r6, r4
 800bee8:	d105      	bne.n	800bef6 <__libc_init_array+0x2e>
 800beea:	bd70      	pop	{r4, r5, r6, pc}
 800beec:	f855 3b04 	ldr.w	r3, [r5], #4
 800bef0:	4798      	blx	r3
 800bef2:	3601      	adds	r6, #1
 800bef4:	e7ee      	b.n	800bed4 <__libc_init_array+0xc>
 800bef6:	f855 3b04 	ldr.w	r3, [r5], #4
 800befa:	4798      	blx	r3
 800befc:	3601      	adds	r6, #1
 800befe:	e7f2      	b.n	800bee6 <__libc_init_array+0x1e>
 800bf00:	0800f62c 	.word	0x0800f62c
 800bf04:	0800f62c 	.word	0x0800f62c
 800bf08:	0800f62c 	.word	0x0800f62c
 800bf0c:	0800f630 	.word	0x0800f630

0800bf10 <memset>:
 800bf10:	4402      	add	r2, r0
 800bf12:	4603      	mov	r3, r0
 800bf14:	4293      	cmp	r3, r2
 800bf16:	d100      	bne.n	800bf1a <memset+0xa>
 800bf18:	4770      	bx	lr
 800bf1a:	f803 1b01 	strb.w	r1, [r3], #1
 800bf1e:	e7f9      	b.n	800bf14 <memset+0x4>

0800bf20 <__cvt>:
 800bf20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bf24:	ec55 4b10 	vmov	r4, r5, d0
 800bf28:	2d00      	cmp	r5, #0
 800bf2a:	460e      	mov	r6, r1
 800bf2c:	4619      	mov	r1, r3
 800bf2e:	462b      	mov	r3, r5
 800bf30:	bfbb      	ittet	lt
 800bf32:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800bf36:	461d      	movlt	r5, r3
 800bf38:	2300      	movge	r3, #0
 800bf3a:	232d      	movlt	r3, #45	; 0x2d
 800bf3c:	700b      	strb	r3, [r1, #0]
 800bf3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bf40:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800bf44:	4691      	mov	r9, r2
 800bf46:	f023 0820 	bic.w	r8, r3, #32
 800bf4a:	bfbc      	itt	lt
 800bf4c:	4622      	movlt	r2, r4
 800bf4e:	4614      	movlt	r4, r2
 800bf50:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bf54:	d005      	beq.n	800bf62 <__cvt+0x42>
 800bf56:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800bf5a:	d100      	bne.n	800bf5e <__cvt+0x3e>
 800bf5c:	3601      	adds	r6, #1
 800bf5e:	2102      	movs	r1, #2
 800bf60:	e000      	b.n	800bf64 <__cvt+0x44>
 800bf62:	2103      	movs	r1, #3
 800bf64:	ab03      	add	r3, sp, #12
 800bf66:	9301      	str	r3, [sp, #4]
 800bf68:	ab02      	add	r3, sp, #8
 800bf6a:	9300      	str	r3, [sp, #0]
 800bf6c:	ec45 4b10 	vmov	d0, r4, r5
 800bf70:	4653      	mov	r3, sl
 800bf72:	4632      	mov	r2, r6
 800bf74:	f000 fccc 	bl	800c910 <_dtoa_r>
 800bf78:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800bf7c:	4607      	mov	r7, r0
 800bf7e:	d102      	bne.n	800bf86 <__cvt+0x66>
 800bf80:	f019 0f01 	tst.w	r9, #1
 800bf84:	d022      	beq.n	800bfcc <__cvt+0xac>
 800bf86:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bf8a:	eb07 0906 	add.w	r9, r7, r6
 800bf8e:	d110      	bne.n	800bfb2 <__cvt+0x92>
 800bf90:	783b      	ldrb	r3, [r7, #0]
 800bf92:	2b30      	cmp	r3, #48	; 0x30
 800bf94:	d10a      	bne.n	800bfac <__cvt+0x8c>
 800bf96:	2200      	movs	r2, #0
 800bf98:	2300      	movs	r3, #0
 800bf9a:	4620      	mov	r0, r4
 800bf9c:	4629      	mov	r1, r5
 800bf9e:	f7f4 fd93 	bl	8000ac8 <__aeabi_dcmpeq>
 800bfa2:	b918      	cbnz	r0, 800bfac <__cvt+0x8c>
 800bfa4:	f1c6 0601 	rsb	r6, r6, #1
 800bfa8:	f8ca 6000 	str.w	r6, [sl]
 800bfac:	f8da 3000 	ldr.w	r3, [sl]
 800bfb0:	4499      	add	r9, r3
 800bfb2:	2200      	movs	r2, #0
 800bfb4:	2300      	movs	r3, #0
 800bfb6:	4620      	mov	r0, r4
 800bfb8:	4629      	mov	r1, r5
 800bfba:	f7f4 fd85 	bl	8000ac8 <__aeabi_dcmpeq>
 800bfbe:	b108      	cbz	r0, 800bfc4 <__cvt+0xa4>
 800bfc0:	f8cd 900c 	str.w	r9, [sp, #12]
 800bfc4:	2230      	movs	r2, #48	; 0x30
 800bfc6:	9b03      	ldr	r3, [sp, #12]
 800bfc8:	454b      	cmp	r3, r9
 800bfca:	d307      	bcc.n	800bfdc <__cvt+0xbc>
 800bfcc:	9b03      	ldr	r3, [sp, #12]
 800bfce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bfd0:	1bdb      	subs	r3, r3, r7
 800bfd2:	4638      	mov	r0, r7
 800bfd4:	6013      	str	r3, [r2, #0]
 800bfd6:	b004      	add	sp, #16
 800bfd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfdc:	1c59      	adds	r1, r3, #1
 800bfde:	9103      	str	r1, [sp, #12]
 800bfe0:	701a      	strb	r2, [r3, #0]
 800bfe2:	e7f0      	b.n	800bfc6 <__cvt+0xa6>

0800bfe4 <__exponent>:
 800bfe4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bfe6:	4603      	mov	r3, r0
 800bfe8:	2900      	cmp	r1, #0
 800bfea:	bfb8      	it	lt
 800bfec:	4249      	neglt	r1, r1
 800bfee:	f803 2b02 	strb.w	r2, [r3], #2
 800bff2:	bfb4      	ite	lt
 800bff4:	222d      	movlt	r2, #45	; 0x2d
 800bff6:	222b      	movge	r2, #43	; 0x2b
 800bff8:	2909      	cmp	r1, #9
 800bffa:	7042      	strb	r2, [r0, #1]
 800bffc:	dd2a      	ble.n	800c054 <__exponent+0x70>
 800bffe:	f10d 0407 	add.w	r4, sp, #7
 800c002:	46a4      	mov	ip, r4
 800c004:	270a      	movs	r7, #10
 800c006:	46a6      	mov	lr, r4
 800c008:	460a      	mov	r2, r1
 800c00a:	fb91 f6f7 	sdiv	r6, r1, r7
 800c00e:	fb07 1516 	mls	r5, r7, r6, r1
 800c012:	3530      	adds	r5, #48	; 0x30
 800c014:	2a63      	cmp	r2, #99	; 0x63
 800c016:	f104 34ff 	add.w	r4, r4, #4294967295
 800c01a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800c01e:	4631      	mov	r1, r6
 800c020:	dcf1      	bgt.n	800c006 <__exponent+0x22>
 800c022:	3130      	adds	r1, #48	; 0x30
 800c024:	f1ae 0502 	sub.w	r5, lr, #2
 800c028:	f804 1c01 	strb.w	r1, [r4, #-1]
 800c02c:	1c44      	adds	r4, r0, #1
 800c02e:	4629      	mov	r1, r5
 800c030:	4561      	cmp	r1, ip
 800c032:	d30a      	bcc.n	800c04a <__exponent+0x66>
 800c034:	f10d 0209 	add.w	r2, sp, #9
 800c038:	eba2 020e 	sub.w	r2, r2, lr
 800c03c:	4565      	cmp	r5, ip
 800c03e:	bf88      	it	hi
 800c040:	2200      	movhi	r2, #0
 800c042:	4413      	add	r3, r2
 800c044:	1a18      	subs	r0, r3, r0
 800c046:	b003      	add	sp, #12
 800c048:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c04a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c04e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800c052:	e7ed      	b.n	800c030 <__exponent+0x4c>
 800c054:	2330      	movs	r3, #48	; 0x30
 800c056:	3130      	adds	r1, #48	; 0x30
 800c058:	7083      	strb	r3, [r0, #2]
 800c05a:	70c1      	strb	r1, [r0, #3]
 800c05c:	1d03      	adds	r3, r0, #4
 800c05e:	e7f1      	b.n	800c044 <__exponent+0x60>

0800c060 <_printf_float>:
 800c060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c064:	ed2d 8b02 	vpush	{d8}
 800c068:	b08d      	sub	sp, #52	; 0x34
 800c06a:	460c      	mov	r4, r1
 800c06c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c070:	4616      	mov	r6, r2
 800c072:	461f      	mov	r7, r3
 800c074:	4605      	mov	r5, r0
 800c076:	f001 fa37 	bl	800d4e8 <_localeconv_r>
 800c07a:	f8d0 a000 	ldr.w	sl, [r0]
 800c07e:	4650      	mov	r0, sl
 800c080:	f7f4 f8a6 	bl	80001d0 <strlen>
 800c084:	2300      	movs	r3, #0
 800c086:	930a      	str	r3, [sp, #40]	; 0x28
 800c088:	6823      	ldr	r3, [r4, #0]
 800c08a:	9305      	str	r3, [sp, #20]
 800c08c:	f8d8 3000 	ldr.w	r3, [r8]
 800c090:	f894 b018 	ldrb.w	fp, [r4, #24]
 800c094:	3307      	adds	r3, #7
 800c096:	f023 0307 	bic.w	r3, r3, #7
 800c09a:	f103 0208 	add.w	r2, r3, #8
 800c09e:	f8c8 2000 	str.w	r2, [r8]
 800c0a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0a6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c0aa:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800c0ae:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c0b2:	9307      	str	r3, [sp, #28]
 800c0b4:	f8cd 8018 	str.w	r8, [sp, #24]
 800c0b8:	ee08 0a10 	vmov	s16, r0
 800c0bc:	4b9f      	ldr	r3, [pc, #636]	; (800c33c <_printf_float+0x2dc>)
 800c0be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c0c2:	f04f 32ff 	mov.w	r2, #4294967295
 800c0c6:	f7f4 fd31 	bl	8000b2c <__aeabi_dcmpun>
 800c0ca:	bb88      	cbnz	r0, 800c130 <_printf_float+0xd0>
 800c0cc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c0d0:	4b9a      	ldr	r3, [pc, #616]	; (800c33c <_printf_float+0x2dc>)
 800c0d2:	f04f 32ff 	mov.w	r2, #4294967295
 800c0d6:	f7f4 fd0b 	bl	8000af0 <__aeabi_dcmple>
 800c0da:	bb48      	cbnz	r0, 800c130 <_printf_float+0xd0>
 800c0dc:	2200      	movs	r2, #0
 800c0de:	2300      	movs	r3, #0
 800c0e0:	4640      	mov	r0, r8
 800c0e2:	4649      	mov	r1, r9
 800c0e4:	f7f4 fcfa 	bl	8000adc <__aeabi_dcmplt>
 800c0e8:	b110      	cbz	r0, 800c0f0 <_printf_float+0x90>
 800c0ea:	232d      	movs	r3, #45	; 0x2d
 800c0ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c0f0:	4b93      	ldr	r3, [pc, #588]	; (800c340 <_printf_float+0x2e0>)
 800c0f2:	4894      	ldr	r0, [pc, #592]	; (800c344 <_printf_float+0x2e4>)
 800c0f4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800c0f8:	bf94      	ite	ls
 800c0fa:	4698      	movls	r8, r3
 800c0fc:	4680      	movhi	r8, r0
 800c0fe:	2303      	movs	r3, #3
 800c100:	6123      	str	r3, [r4, #16]
 800c102:	9b05      	ldr	r3, [sp, #20]
 800c104:	f023 0204 	bic.w	r2, r3, #4
 800c108:	6022      	str	r2, [r4, #0]
 800c10a:	f04f 0900 	mov.w	r9, #0
 800c10e:	9700      	str	r7, [sp, #0]
 800c110:	4633      	mov	r3, r6
 800c112:	aa0b      	add	r2, sp, #44	; 0x2c
 800c114:	4621      	mov	r1, r4
 800c116:	4628      	mov	r0, r5
 800c118:	f000 f9d8 	bl	800c4cc <_printf_common>
 800c11c:	3001      	adds	r0, #1
 800c11e:	f040 8090 	bne.w	800c242 <_printf_float+0x1e2>
 800c122:	f04f 30ff 	mov.w	r0, #4294967295
 800c126:	b00d      	add	sp, #52	; 0x34
 800c128:	ecbd 8b02 	vpop	{d8}
 800c12c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c130:	4642      	mov	r2, r8
 800c132:	464b      	mov	r3, r9
 800c134:	4640      	mov	r0, r8
 800c136:	4649      	mov	r1, r9
 800c138:	f7f4 fcf8 	bl	8000b2c <__aeabi_dcmpun>
 800c13c:	b140      	cbz	r0, 800c150 <_printf_float+0xf0>
 800c13e:	464b      	mov	r3, r9
 800c140:	2b00      	cmp	r3, #0
 800c142:	bfbc      	itt	lt
 800c144:	232d      	movlt	r3, #45	; 0x2d
 800c146:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c14a:	487f      	ldr	r0, [pc, #508]	; (800c348 <_printf_float+0x2e8>)
 800c14c:	4b7f      	ldr	r3, [pc, #508]	; (800c34c <_printf_float+0x2ec>)
 800c14e:	e7d1      	b.n	800c0f4 <_printf_float+0x94>
 800c150:	6863      	ldr	r3, [r4, #4]
 800c152:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800c156:	9206      	str	r2, [sp, #24]
 800c158:	1c5a      	adds	r2, r3, #1
 800c15a:	d13f      	bne.n	800c1dc <_printf_float+0x17c>
 800c15c:	2306      	movs	r3, #6
 800c15e:	6063      	str	r3, [r4, #4]
 800c160:	9b05      	ldr	r3, [sp, #20]
 800c162:	6861      	ldr	r1, [r4, #4]
 800c164:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800c168:	2300      	movs	r3, #0
 800c16a:	9303      	str	r3, [sp, #12]
 800c16c:	ab0a      	add	r3, sp, #40	; 0x28
 800c16e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800c172:	ab09      	add	r3, sp, #36	; 0x24
 800c174:	ec49 8b10 	vmov	d0, r8, r9
 800c178:	9300      	str	r3, [sp, #0]
 800c17a:	6022      	str	r2, [r4, #0]
 800c17c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c180:	4628      	mov	r0, r5
 800c182:	f7ff fecd 	bl	800bf20 <__cvt>
 800c186:	9b06      	ldr	r3, [sp, #24]
 800c188:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c18a:	2b47      	cmp	r3, #71	; 0x47
 800c18c:	4680      	mov	r8, r0
 800c18e:	d108      	bne.n	800c1a2 <_printf_float+0x142>
 800c190:	1cc8      	adds	r0, r1, #3
 800c192:	db02      	blt.n	800c19a <_printf_float+0x13a>
 800c194:	6863      	ldr	r3, [r4, #4]
 800c196:	4299      	cmp	r1, r3
 800c198:	dd41      	ble.n	800c21e <_printf_float+0x1be>
 800c19a:	f1ab 0b02 	sub.w	fp, fp, #2
 800c19e:	fa5f fb8b 	uxtb.w	fp, fp
 800c1a2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c1a6:	d820      	bhi.n	800c1ea <_printf_float+0x18a>
 800c1a8:	3901      	subs	r1, #1
 800c1aa:	465a      	mov	r2, fp
 800c1ac:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c1b0:	9109      	str	r1, [sp, #36]	; 0x24
 800c1b2:	f7ff ff17 	bl	800bfe4 <__exponent>
 800c1b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c1b8:	1813      	adds	r3, r2, r0
 800c1ba:	2a01      	cmp	r2, #1
 800c1bc:	4681      	mov	r9, r0
 800c1be:	6123      	str	r3, [r4, #16]
 800c1c0:	dc02      	bgt.n	800c1c8 <_printf_float+0x168>
 800c1c2:	6822      	ldr	r2, [r4, #0]
 800c1c4:	07d2      	lsls	r2, r2, #31
 800c1c6:	d501      	bpl.n	800c1cc <_printf_float+0x16c>
 800c1c8:	3301      	adds	r3, #1
 800c1ca:	6123      	str	r3, [r4, #16]
 800c1cc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d09c      	beq.n	800c10e <_printf_float+0xae>
 800c1d4:	232d      	movs	r3, #45	; 0x2d
 800c1d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c1da:	e798      	b.n	800c10e <_printf_float+0xae>
 800c1dc:	9a06      	ldr	r2, [sp, #24]
 800c1de:	2a47      	cmp	r2, #71	; 0x47
 800c1e0:	d1be      	bne.n	800c160 <_printf_float+0x100>
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d1bc      	bne.n	800c160 <_printf_float+0x100>
 800c1e6:	2301      	movs	r3, #1
 800c1e8:	e7b9      	b.n	800c15e <_printf_float+0xfe>
 800c1ea:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800c1ee:	d118      	bne.n	800c222 <_printf_float+0x1c2>
 800c1f0:	2900      	cmp	r1, #0
 800c1f2:	6863      	ldr	r3, [r4, #4]
 800c1f4:	dd0b      	ble.n	800c20e <_printf_float+0x1ae>
 800c1f6:	6121      	str	r1, [r4, #16]
 800c1f8:	b913      	cbnz	r3, 800c200 <_printf_float+0x1a0>
 800c1fa:	6822      	ldr	r2, [r4, #0]
 800c1fc:	07d0      	lsls	r0, r2, #31
 800c1fe:	d502      	bpl.n	800c206 <_printf_float+0x1a6>
 800c200:	3301      	adds	r3, #1
 800c202:	440b      	add	r3, r1
 800c204:	6123      	str	r3, [r4, #16]
 800c206:	65a1      	str	r1, [r4, #88]	; 0x58
 800c208:	f04f 0900 	mov.w	r9, #0
 800c20c:	e7de      	b.n	800c1cc <_printf_float+0x16c>
 800c20e:	b913      	cbnz	r3, 800c216 <_printf_float+0x1b6>
 800c210:	6822      	ldr	r2, [r4, #0]
 800c212:	07d2      	lsls	r2, r2, #31
 800c214:	d501      	bpl.n	800c21a <_printf_float+0x1ba>
 800c216:	3302      	adds	r3, #2
 800c218:	e7f4      	b.n	800c204 <_printf_float+0x1a4>
 800c21a:	2301      	movs	r3, #1
 800c21c:	e7f2      	b.n	800c204 <_printf_float+0x1a4>
 800c21e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800c222:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c224:	4299      	cmp	r1, r3
 800c226:	db05      	blt.n	800c234 <_printf_float+0x1d4>
 800c228:	6823      	ldr	r3, [r4, #0]
 800c22a:	6121      	str	r1, [r4, #16]
 800c22c:	07d8      	lsls	r0, r3, #31
 800c22e:	d5ea      	bpl.n	800c206 <_printf_float+0x1a6>
 800c230:	1c4b      	adds	r3, r1, #1
 800c232:	e7e7      	b.n	800c204 <_printf_float+0x1a4>
 800c234:	2900      	cmp	r1, #0
 800c236:	bfd4      	ite	le
 800c238:	f1c1 0202 	rsble	r2, r1, #2
 800c23c:	2201      	movgt	r2, #1
 800c23e:	4413      	add	r3, r2
 800c240:	e7e0      	b.n	800c204 <_printf_float+0x1a4>
 800c242:	6823      	ldr	r3, [r4, #0]
 800c244:	055a      	lsls	r2, r3, #21
 800c246:	d407      	bmi.n	800c258 <_printf_float+0x1f8>
 800c248:	6923      	ldr	r3, [r4, #16]
 800c24a:	4642      	mov	r2, r8
 800c24c:	4631      	mov	r1, r6
 800c24e:	4628      	mov	r0, r5
 800c250:	47b8      	blx	r7
 800c252:	3001      	adds	r0, #1
 800c254:	d12c      	bne.n	800c2b0 <_printf_float+0x250>
 800c256:	e764      	b.n	800c122 <_printf_float+0xc2>
 800c258:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c25c:	f240 80e0 	bls.w	800c420 <_printf_float+0x3c0>
 800c260:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c264:	2200      	movs	r2, #0
 800c266:	2300      	movs	r3, #0
 800c268:	f7f4 fc2e 	bl	8000ac8 <__aeabi_dcmpeq>
 800c26c:	2800      	cmp	r0, #0
 800c26e:	d034      	beq.n	800c2da <_printf_float+0x27a>
 800c270:	4a37      	ldr	r2, [pc, #220]	; (800c350 <_printf_float+0x2f0>)
 800c272:	2301      	movs	r3, #1
 800c274:	4631      	mov	r1, r6
 800c276:	4628      	mov	r0, r5
 800c278:	47b8      	blx	r7
 800c27a:	3001      	adds	r0, #1
 800c27c:	f43f af51 	beq.w	800c122 <_printf_float+0xc2>
 800c280:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c284:	429a      	cmp	r2, r3
 800c286:	db02      	blt.n	800c28e <_printf_float+0x22e>
 800c288:	6823      	ldr	r3, [r4, #0]
 800c28a:	07d8      	lsls	r0, r3, #31
 800c28c:	d510      	bpl.n	800c2b0 <_printf_float+0x250>
 800c28e:	ee18 3a10 	vmov	r3, s16
 800c292:	4652      	mov	r2, sl
 800c294:	4631      	mov	r1, r6
 800c296:	4628      	mov	r0, r5
 800c298:	47b8      	blx	r7
 800c29a:	3001      	adds	r0, #1
 800c29c:	f43f af41 	beq.w	800c122 <_printf_float+0xc2>
 800c2a0:	f04f 0800 	mov.w	r8, #0
 800c2a4:	f104 091a 	add.w	r9, r4, #26
 800c2a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c2aa:	3b01      	subs	r3, #1
 800c2ac:	4543      	cmp	r3, r8
 800c2ae:	dc09      	bgt.n	800c2c4 <_printf_float+0x264>
 800c2b0:	6823      	ldr	r3, [r4, #0]
 800c2b2:	079b      	lsls	r3, r3, #30
 800c2b4:	f100 8105 	bmi.w	800c4c2 <_printf_float+0x462>
 800c2b8:	68e0      	ldr	r0, [r4, #12]
 800c2ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c2bc:	4298      	cmp	r0, r3
 800c2be:	bfb8      	it	lt
 800c2c0:	4618      	movlt	r0, r3
 800c2c2:	e730      	b.n	800c126 <_printf_float+0xc6>
 800c2c4:	2301      	movs	r3, #1
 800c2c6:	464a      	mov	r2, r9
 800c2c8:	4631      	mov	r1, r6
 800c2ca:	4628      	mov	r0, r5
 800c2cc:	47b8      	blx	r7
 800c2ce:	3001      	adds	r0, #1
 800c2d0:	f43f af27 	beq.w	800c122 <_printf_float+0xc2>
 800c2d4:	f108 0801 	add.w	r8, r8, #1
 800c2d8:	e7e6      	b.n	800c2a8 <_printf_float+0x248>
 800c2da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	dc39      	bgt.n	800c354 <_printf_float+0x2f4>
 800c2e0:	4a1b      	ldr	r2, [pc, #108]	; (800c350 <_printf_float+0x2f0>)
 800c2e2:	2301      	movs	r3, #1
 800c2e4:	4631      	mov	r1, r6
 800c2e6:	4628      	mov	r0, r5
 800c2e8:	47b8      	blx	r7
 800c2ea:	3001      	adds	r0, #1
 800c2ec:	f43f af19 	beq.w	800c122 <_printf_float+0xc2>
 800c2f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c2f4:	4313      	orrs	r3, r2
 800c2f6:	d102      	bne.n	800c2fe <_printf_float+0x29e>
 800c2f8:	6823      	ldr	r3, [r4, #0]
 800c2fa:	07d9      	lsls	r1, r3, #31
 800c2fc:	d5d8      	bpl.n	800c2b0 <_printf_float+0x250>
 800c2fe:	ee18 3a10 	vmov	r3, s16
 800c302:	4652      	mov	r2, sl
 800c304:	4631      	mov	r1, r6
 800c306:	4628      	mov	r0, r5
 800c308:	47b8      	blx	r7
 800c30a:	3001      	adds	r0, #1
 800c30c:	f43f af09 	beq.w	800c122 <_printf_float+0xc2>
 800c310:	f04f 0900 	mov.w	r9, #0
 800c314:	f104 0a1a 	add.w	sl, r4, #26
 800c318:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c31a:	425b      	negs	r3, r3
 800c31c:	454b      	cmp	r3, r9
 800c31e:	dc01      	bgt.n	800c324 <_printf_float+0x2c4>
 800c320:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c322:	e792      	b.n	800c24a <_printf_float+0x1ea>
 800c324:	2301      	movs	r3, #1
 800c326:	4652      	mov	r2, sl
 800c328:	4631      	mov	r1, r6
 800c32a:	4628      	mov	r0, r5
 800c32c:	47b8      	blx	r7
 800c32e:	3001      	adds	r0, #1
 800c330:	f43f aef7 	beq.w	800c122 <_printf_float+0xc2>
 800c334:	f109 0901 	add.w	r9, r9, #1
 800c338:	e7ee      	b.n	800c318 <_printf_float+0x2b8>
 800c33a:	bf00      	nop
 800c33c:	7fefffff 	.word	0x7fefffff
 800c340:	0800f22c 	.word	0x0800f22c
 800c344:	0800f230 	.word	0x0800f230
 800c348:	0800f238 	.word	0x0800f238
 800c34c:	0800f234 	.word	0x0800f234
 800c350:	0800f23c 	.word	0x0800f23c
 800c354:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c356:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c358:	429a      	cmp	r2, r3
 800c35a:	bfa8      	it	ge
 800c35c:	461a      	movge	r2, r3
 800c35e:	2a00      	cmp	r2, #0
 800c360:	4691      	mov	r9, r2
 800c362:	dc37      	bgt.n	800c3d4 <_printf_float+0x374>
 800c364:	f04f 0b00 	mov.w	fp, #0
 800c368:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c36c:	f104 021a 	add.w	r2, r4, #26
 800c370:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c372:	9305      	str	r3, [sp, #20]
 800c374:	eba3 0309 	sub.w	r3, r3, r9
 800c378:	455b      	cmp	r3, fp
 800c37a:	dc33      	bgt.n	800c3e4 <_printf_float+0x384>
 800c37c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c380:	429a      	cmp	r2, r3
 800c382:	db3b      	blt.n	800c3fc <_printf_float+0x39c>
 800c384:	6823      	ldr	r3, [r4, #0]
 800c386:	07da      	lsls	r2, r3, #31
 800c388:	d438      	bmi.n	800c3fc <_printf_float+0x39c>
 800c38a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c38c:	9b05      	ldr	r3, [sp, #20]
 800c38e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c390:	1ad3      	subs	r3, r2, r3
 800c392:	eba2 0901 	sub.w	r9, r2, r1
 800c396:	4599      	cmp	r9, r3
 800c398:	bfa8      	it	ge
 800c39a:	4699      	movge	r9, r3
 800c39c:	f1b9 0f00 	cmp.w	r9, #0
 800c3a0:	dc35      	bgt.n	800c40e <_printf_float+0x3ae>
 800c3a2:	f04f 0800 	mov.w	r8, #0
 800c3a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c3aa:	f104 0a1a 	add.w	sl, r4, #26
 800c3ae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c3b2:	1a9b      	subs	r3, r3, r2
 800c3b4:	eba3 0309 	sub.w	r3, r3, r9
 800c3b8:	4543      	cmp	r3, r8
 800c3ba:	f77f af79 	ble.w	800c2b0 <_printf_float+0x250>
 800c3be:	2301      	movs	r3, #1
 800c3c0:	4652      	mov	r2, sl
 800c3c2:	4631      	mov	r1, r6
 800c3c4:	4628      	mov	r0, r5
 800c3c6:	47b8      	blx	r7
 800c3c8:	3001      	adds	r0, #1
 800c3ca:	f43f aeaa 	beq.w	800c122 <_printf_float+0xc2>
 800c3ce:	f108 0801 	add.w	r8, r8, #1
 800c3d2:	e7ec      	b.n	800c3ae <_printf_float+0x34e>
 800c3d4:	4613      	mov	r3, r2
 800c3d6:	4631      	mov	r1, r6
 800c3d8:	4642      	mov	r2, r8
 800c3da:	4628      	mov	r0, r5
 800c3dc:	47b8      	blx	r7
 800c3de:	3001      	adds	r0, #1
 800c3e0:	d1c0      	bne.n	800c364 <_printf_float+0x304>
 800c3e2:	e69e      	b.n	800c122 <_printf_float+0xc2>
 800c3e4:	2301      	movs	r3, #1
 800c3e6:	4631      	mov	r1, r6
 800c3e8:	4628      	mov	r0, r5
 800c3ea:	9205      	str	r2, [sp, #20]
 800c3ec:	47b8      	blx	r7
 800c3ee:	3001      	adds	r0, #1
 800c3f0:	f43f ae97 	beq.w	800c122 <_printf_float+0xc2>
 800c3f4:	9a05      	ldr	r2, [sp, #20]
 800c3f6:	f10b 0b01 	add.w	fp, fp, #1
 800c3fa:	e7b9      	b.n	800c370 <_printf_float+0x310>
 800c3fc:	ee18 3a10 	vmov	r3, s16
 800c400:	4652      	mov	r2, sl
 800c402:	4631      	mov	r1, r6
 800c404:	4628      	mov	r0, r5
 800c406:	47b8      	blx	r7
 800c408:	3001      	adds	r0, #1
 800c40a:	d1be      	bne.n	800c38a <_printf_float+0x32a>
 800c40c:	e689      	b.n	800c122 <_printf_float+0xc2>
 800c40e:	9a05      	ldr	r2, [sp, #20]
 800c410:	464b      	mov	r3, r9
 800c412:	4442      	add	r2, r8
 800c414:	4631      	mov	r1, r6
 800c416:	4628      	mov	r0, r5
 800c418:	47b8      	blx	r7
 800c41a:	3001      	adds	r0, #1
 800c41c:	d1c1      	bne.n	800c3a2 <_printf_float+0x342>
 800c41e:	e680      	b.n	800c122 <_printf_float+0xc2>
 800c420:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c422:	2a01      	cmp	r2, #1
 800c424:	dc01      	bgt.n	800c42a <_printf_float+0x3ca>
 800c426:	07db      	lsls	r3, r3, #31
 800c428:	d538      	bpl.n	800c49c <_printf_float+0x43c>
 800c42a:	2301      	movs	r3, #1
 800c42c:	4642      	mov	r2, r8
 800c42e:	4631      	mov	r1, r6
 800c430:	4628      	mov	r0, r5
 800c432:	47b8      	blx	r7
 800c434:	3001      	adds	r0, #1
 800c436:	f43f ae74 	beq.w	800c122 <_printf_float+0xc2>
 800c43a:	ee18 3a10 	vmov	r3, s16
 800c43e:	4652      	mov	r2, sl
 800c440:	4631      	mov	r1, r6
 800c442:	4628      	mov	r0, r5
 800c444:	47b8      	blx	r7
 800c446:	3001      	adds	r0, #1
 800c448:	f43f ae6b 	beq.w	800c122 <_printf_float+0xc2>
 800c44c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c450:	2200      	movs	r2, #0
 800c452:	2300      	movs	r3, #0
 800c454:	f7f4 fb38 	bl	8000ac8 <__aeabi_dcmpeq>
 800c458:	b9d8      	cbnz	r0, 800c492 <_printf_float+0x432>
 800c45a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c45c:	f108 0201 	add.w	r2, r8, #1
 800c460:	3b01      	subs	r3, #1
 800c462:	4631      	mov	r1, r6
 800c464:	4628      	mov	r0, r5
 800c466:	47b8      	blx	r7
 800c468:	3001      	adds	r0, #1
 800c46a:	d10e      	bne.n	800c48a <_printf_float+0x42a>
 800c46c:	e659      	b.n	800c122 <_printf_float+0xc2>
 800c46e:	2301      	movs	r3, #1
 800c470:	4652      	mov	r2, sl
 800c472:	4631      	mov	r1, r6
 800c474:	4628      	mov	r0, r5
 800c476:	47b8      	blx	r7
 800c478:	3001      	adds	r0, #1
 800c47a:	f43f ae52 	beq.w	800c122 <_printf_float+0xc2>
 800c47e:	f108 0801 	add.w	r8, r8, #1
 800c482:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c484:	3b01      	subs	r3, #1
 800c486:	4543      	cmp	r3, r8
 800c488:	dcf1      	bgt.n	800c46e <_printf_float+0x40e>
 800c48a:	464b      	mov	r3, r9
 800c48c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c490:	e6dc      	b.n	800c24c <_printf_float+0x1ec>
 800c492:	f04f 0800 	mov.w	r8, #0
 800c496:	f104 0a1a 	add.w	sl, r4, #26
 800c49a:	e7f2      	b.n	800c482 <_printf_float+0x422>
 800c49c:	2301      	movs	r3, #1
 800c49e:	4642      	mov	r2, r8
 800c4a0:	e7df      	b.n	800c462 <_printf_float+0x402>
 800c4a2:	2301      	movs	r3, #1
 800c4a4:	464a      	mov	r2, r9
 800c4a6:	4631      	mov	r1, r6
 800c4a8:	4628      	mov	r0, r5
 800c4aa:	47b8      	blx	r7
 800c4ac:	3001      	adds	r0, #1
 800c4ae:	f43f ae38 	beq.w	800c122 <_printf_float+0xc2>
 800c4b2:	f108 0801 	add.w	r8, r8, #1
 800c4b6:	68e3      	ldr	r3, [r4, #12]
 800c4b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c4ba:	1a5b      	subs	r3, r3, r1
 800c4bc:	4543      	cmp	r3, r8
 800c4be:	dcf0      	bgt.n	800c4a2 <_printf_float+0x442>
 800c4c0:	e6fa      	b.n	800c2b8 <_printf_float+0x258>
 800c4c2:	f04f 0800 	mov.w	r8, #0
 800c4c6:	f104 0919 	add.w	r9, r4, #25
 800c4ca:	e7f4      	b.n	800c4b6 <_printf_float+0x456>

0800c4cc <_printf_common>:
 800c4cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c4d0:	4616      	mov	r6, r2
 800c4d2:	4699      	mov	r9, r3
 800c4d4:	688a      	ldr	r2, [r1, #8]
 800c4d6:	690b      	ldr	r3, [r1, #16]
 800c4d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c4dc:	4293      	cmp	r3, r2
 800c4de:	bfb8      	it	lt
 800c4e0:	4613      	movlt	r3, r2
 800c4e2:	6033      	str	r3, [r6, #0]
 800c4e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c4e8:	4607      	mov	r7, r0
 800c4ea:	460c      	mov	r4, r1
 800c4ec:	b10a      	cbz	r2, 800c4f2 <_printf_common+0x26>
 800c4ee:	3301      	adds	r3, #1
 800c4f0:	6033      	str	r3, [r6, #0]
 800c4f2:	6823      	ldr	r3, [r4, #0]
 800c4f4:	0699      	lsls	r1, r3, #26
 800c4f6:	bf42      	ittt	mi
 800c4f8:	6833      	ldrmi	r3, [r6, #0]
 800c4fa:	3302      	addmi	r3, #2
 800c4fc:	6033      	strmi	r3, [r6, #0]
 800c4fe:	6825      	ldr	r5, [r4, #0]
 800c500:	f015 0506 	ands.w	r5, r5, #6
 800c504:	d106      	bne.n	800c514 <_printf_common+0x48>
 800c506:	f104 0a19 	add.w	sl, r4, #25
 800c50a:	68e3      	ldr	r3, [r4, #12]
 800c50c:	6832      	ldr	r2, [r6, #0]
 800c50e:	1a9b      	subs	r3, r3, r2
 800c510:	42ab      	cmp	r3, r5
 800c512:	dc26      	bgt.n	800c562 <_printf_common+0x96>
 800c514:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c518:	1e13      	subs	r3, r2, #0
 800c51a:	6822      	ldr	r2, [r4, #0]
 800c51c:	bf18      	it	ne
 800c51e:	2301      	movne	r3, #1
 800c520:	0692      	lsls	r2, r2, #26
 800c522:	d42b      	bmi.n	800c57c <_printf_common+0xb0>
 800c524:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c528:	4649      	mov	r1, r9
 800c52a:	4638      	mov	r0, r7
 800c52c:	47c0      	blx	r8
 800c52e:	3001      	adds	r0, #1
 800c530:	d01e      	beq.n	800c570 <_printf_common+0xa4>
 800c532:	6823      	ldr	r3, [r4, #0]
 800c534:	68e5      	ldr	r5, [r4, #12]
 800c536:	6832      	ldr	r2, [r6, #0]
 800c538:	f003 0306 	and.w	r3, r3, #6
 800c53c:	2b04      	cmp	r3, #4
 800c53e:	bf08      	it	eq
 800c540:	1aad      	subeq	r5, r5, r2
 800c542:	68a3      	ldr	r3, [r4, #8]
 800c544:	6922      	ldr	r2, [r4, #16]
 800c546:	bf0c      	ite	eq
 800c548:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c54c:	2500      	movne	r5, #0
 800c54e:	4293      	cmp	r3, r2
 800c550:	bfc4      	itt	gt
 800c552:	1a9b      	subgt	r3, r3, r2
 800c554:	18ed      	addgt	r5, r5, r3
 800c556:	2600      	movs	r6, #0
 800c558:	341a      	adds	r4, #26
 800c55a:	42b5      	cmp	r5, r6
 800c55c:	d11a      	bne.n	800c594 <_printf_common+0xc8>
 800c55e:	2000      	movs	r0, #0
 800c560:	e008      	b.n	800c574 <_printf_common+0xa8>
 800c562:	2301      	movs	r3, #1
 800c564:	4652      	mov	r2, sl
 800c566:	4649      	mov	r1, r9
 800c568:	4638      	mov	r0, r7
 800c56a:	47c0      	blx	r8
 800c56c:	3001      	adds	r0, #1
 800c56e:	d103      	bne.n	800c578 <_printf_common+0xac>
 800c570:	f04f 30ff 	mov.w	r0, #4294967295
 800c574:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c578:	3501      	adds	r5, #1
 800c57a:	e7c6      	b.n	800c50a <_printf_common+0x3e>
 800c57c:	18e1      	adds	r1, r4, r3
 800c57e:	1c5a      	adds	r2, r3, #1
 800c580:	2030      	movs	r0, #48	; 0x30
 800c582:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c586:	4422      	add	r2, r4
 800c588:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c58c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c590:	3302      	adds	r3, #2
 800c592:	e7c7      	b.n	800c524 <_printf_common+0x58>
 800c594:	2301      	movs	r3, #1
 800c596:	4622      	mov	r2, r4
 800c598:	4649      	mov	r1, r9
 800c59a:	4638      	mov	r0, r7
 800c59c:	47c0      	blx	r8
 800c59e:	3001      	adds	r0, #1
 800c5a0:	d0e6      	beq.n	800c570 <_printf_common+0xa4>
 800c5a2:	3601      	adds	r6, #1
 800c5a4:	e7d9      	b.n	800c55a <_printf_common+0x8e>
	...

0800c5a8 <_printf_i>:
 800c5a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c5ac:	460c      	mov	r4, r1
 800c5ae:	4691      	mov	r9, r2
 800c5b0:	7e27      	ldrb	r7, [r4, #24]
 800c5b2:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c5b4:	2f78      	cmp	r7, #120	; 0x78
 800c5b6:	4680      	mov	r8, r0
 800c5b8:	469a      	mov	sl, r3
 800c5ba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c5be:	d807      	bhi.n	800c5d0 <_printf_i+0x28>
 800c5c0:	2f62      	cmp	r7, #98	; 0x62
 800c5c2:	d80a      	bhi.n	800c5da <_printf_i+0x32>
 800c5c4:	2f00      	cmp	r7, #0
 800c5c6:	f000 80d8 	beq.w	800c77a <_printf_i+0x1d2>
 800c5ca:	2f58      	cmp	r7, #88	; 0x58
 800c5cc:	f000 80a3 	beq.w	800c716 <_printf_i+0x16e>
 800c5d0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c5d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c5d8:	e03a      	b.n	800c650 <_printf_i+0xa8>
 800c5da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c5de:	2b15      	cmp	r3, #21
 800c5e0:	d8f6      	bhi.n	800c5d0 <_printf_i+0x28>
 800c5e2:	a001      	add	r0, pc, #4	; (adr r0, 800c5e8 <_printf_i+0x40>)
 800c5e4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800c5e8:	0800c641 	.word	0x0800c641
 800c5ec:	0800c655 	.word	0x0800c655
 800c5f0:	0800c5d1 	.word	0x0800c5d1
 800c5f4:	0800c5d1 	.word	0x0800c5d1
 800c5f8:	0800c5d1 	.word	0x0800c5d1
 800c5fc:	0800c5d1 	.word	0x0800c5d1
 800c600:	0800c655 	.word	0x0800c655
 800c604:	0800c5d1 	.word	0x0800c5d1
 800c608:	0800c5d1 	.word	0x0800c5d1
 800c60c:	0800c5d1 	.word	0x0800c5d1
 800c610:	0800c5d1 	.word	0x0800c5d1
 800c614:	0800c761 	.word	0x0800c761
 800c618:	0800c685 	.word	0x0800c685
 800c61c:	0800c743 	.word	0x0800c743
 800c620:	0800c5d1 	.word	0x0800c5d1
 800c624:	0800c5d1 	.word	0x0800c5d1
 800c628:	0800c783 	.word	0x0800c783
 800c62c:	0800c5d1 	.word	0x0800c5d1
 800c630:	0800c685 	.word	0x0800c685
 800c634:	0800c5d1 	.word	0x0800c5d1
 800c638:	0800c5d1 	.word	0x0800c5d1
 800c63c:	0800c74b 	.word	0x0800c74b
 800c640:	680b      	ldr	r3, [r1, #0]
 800c642:	1d1a      	adds	r2, r3, #4
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	600a      	str	r2, [r1, #0]
 800c648:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c64c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c650:	2301      	movs	r3, #1
 800c652:	e0a3      	b.n	800c79c <_printf_i+0x1f4>
 800c654:	6825      	ldr	r5, [r4, #0]
 800c656:	6808      	ldr	r0, [r1, #0]
 800c658:	062e      	lsls	r6, r5, #24
 800c65a:	f100 0304 	add.w	r3, r0, #4
 800c65e:	d50a      	bpl.n	800c676 <_printf_i+0xce>
 800c660:	6805      	ldr	r5, [r0, #0]
 800c662:	600b      	str	r3, [r1, #0]
 800c664:	2d00      	cmp	r5, #0
 800c666:	da03      	bge.n	800c670 <_printf_i+0xc8>
 800c668:	232d      	movs	r3, #45	; 0x2d
 800c66a:	426d      	negs	r5, r5
 800c66c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c670:	485e      	ldr	r0, [pc, #376]	; (800c7ec <_printf_i+0x244>)
 800c672:	230a      	movs	r3, #10
 800c674:	e019      	b.n	800c6aa <_printf_i+0x102>
 800c676:	f015 0f40 	tst.w	r5, #64	; 0x40
 800c67a:	6805      	ldr	r5, [r0, #0]
 800c67c:	600b      	str	r3, [r1, #0]
 800c67e:	bf18      	it	ne
 800c680:	b22d      	sxthne	r5, r5
 800c682:	e7ef      	b.n	800c664 <_printf_i+0xbc>
 800c684:	680b      	ldr	r3, [r1, #0]
 800c686:	6825      	ldr	r5, [r4, #0]
 800c688:	1d18      	adds	r0, r3, #4
 800c68a:	6008      	str	r0, [r1, #0]
 800c68c:	0628      	lsls	r0, r5, #24
 800c68e:	d501      	bpl.n	800c694 <_printf_i+0xec>
 800c690:	681d      	ldr	r5, [r3, #0]
 800c692:	e002      	b.n	800c69a <_printf_i+0xf2>
 800c694:	0669      	lsls	r1, r5, #25
 800c696:	d5fb      	bpl.n	800c690 <_printf_i+0xe8>
 800c698:	881d      	ldrh	r5, [r3, #0]
 800c69a:	4854      	ldr	r0, [pc, #336]	; (800c7ec <_printf_i+0x244>)
 800c69c:	2f6f      	cmp	r7, #111	; 0x6f
 800c69e:	bf0c      	ite	eq
 800c6a0:	2308      	moveq	r3, #8
 800c6a2:	230a      	movne	r3, #10
 800c6a4:	2100      	movs	r1, #0
 800c6a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c6aa:	6866      	ldr	r6, [r4, #4]
 800c6ac:	60a6      	str	r6, [r4, #8]
 800c6ae:	2e00      	cmp	r6, #0
 800c6b0:	bfa2      	ittt	ge
 800c6b2:	6821      	ldrge	r1, [r4, #0]
 800c6b4:	f021 0104 	bicge.w	r1, r1, #4
 800c6b8:	6021      	strge	r1, [r4, #0]
 800c6ba:	b90d      	cbnz	r5, 800c6c0 <_printf_i+0x118>
 800c6bc:	2e00      	cmp	r6, #0
 800c6be:	d04d      	beq.n	800c75c <_printf_i+0x1b4>
 800c6c0:	4616      	mov	r6, r2
 800c6c2:	fbb5 f1f3 	udiv	r1, r5, r3
 800c6c6:	fb03 5711 	mls	r7, r3, r1, r5
 800c6ca:	5dc7      	ldrb	r7, [r0, r7]
 800c6cc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c6d0:	462f      	mov	r7, r5
 800c6d2:	42bb      	cmp	r3, r7
 800c6d4:	460d      	mov	r5, r1
 800c6d6:	d9f4      	bls.n	800c6c2 <_printf_i+0x11a>
 800c6d8:	2b08      	cmp	r3, #8
 800c6da:	d10b      	bne.n	800c6f4 <_printf_i+0x14c>
 800c6dc:	6823      	ldr	r3, [r4, #0]
 800c6de:	07df      	lsls	r7, r3, #31
 800c6e0:	d508      	bpl.n	800c6f4 <_printf_i+0x14c>
 800c6e2:	6923      	ldr	r3, [r4, #16]
 800c6e4:	6861      	ldr	r1, [r4, #4]
 800c6e6:	4299      	cmp	r1, r3
 800c6e8:	bfde      	ittt	le
 800c6ea:	2330      	movle	r3, #48	; 0x30
 800c6ec:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c6f0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c6f4:	1b92      	subs	r2, r2, r6
 800c6f6:	6122      	str	r2, [r4, #16]
 800c6f8:	f8cd a000 	str.w	sl, [sp]
 800c6fc:	464b      	mov	r3, r9
 800c6fe:	aa03      	add	r2, sp, #12
 800c700:	4621      	mov	r1, r4
 800c702:	4640      	mov	r0, r8
 800c704:	f7ff fee2 	bl	800c4cc <_printf_common>
 800c708:	3001      	adds	r0, #1
 800c70a:	d14c      	bne.n	800c7a6 <_printf_i+0x1fe>
 800c70c:	f04f 30ff 	mov.w	r0, #4294967295
 800c710:	b004      	add	sp, #16
 800c712:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c716:	4835      	ldr	r0, [pc, #212]	; (800c7ec <_printf_i+0x244>)
 800c718:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c71c:	6823      	ldr	r3, [r4, #0]
 800c71e:	680e      	ldr	r6, [r1, #0]
 800c720:	061f      	lsls	r7, r3, #24
 800c722:	f856 5b04 	ldr.w	r5, [r6], #4
 800c726:	600e      	str	r6, [r1, #0]
 800c728:	d514      	bpl.n	800c754 <_printf_i+0x1ac>
 800c72a:	07d9      	lsls	r1, r3, #31
 800c72c:	bf44      	itt	mi
 800c72e:	f043 0320 	orrmi.w	r3, r3, #32
 800c732:	6023      	strmi	r3, [r4, #0]
 800c734:	b91d      	cbnz	r5, 800c73e <_printf_i+0x196>
 800c736:	6823      	ldr	r3, [r4, #0]
 800c738:	f023 0320 	bic.w	r3, r3, #32
 800c73c:	6023      	str	r3, [r4, #0]
 800c73e:	2310      	movs	r3, #16
 800c740:	e7b0      	b.n	800c6a4 <_printf_i+0xfc>
 800c742:	6823      	ldr	r3, [r4, #0]
 800c744:	f043 0320 	orr.w	r3, r3, #32
 800c748:	6023      	str	r3, [r4, #0]
 800c74a:	2378      	movs	r3, #120	; 0x78
 800c74c:	4828      	ldr	r0, [pc, #160]	; (800c7f0 <_printf_i+0x248>)
 800c74e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c752:	e7e3      	b.n	800c71c <_printf_i+0x174>
 800c754:	065e      	lsls	r6, r3, #25
 800c756:	bf48      	it	mi
 800c758:	b2ad      	uxthmi	r5, r5
 800c75a:	e7e6      	b.n	800c72a <_printf_i+0x182>
 800c75c:	4616      	mov	r6, r2
 800c75e:	e7bb      	b.n	800c6d8 <_printf_i+0x130>
 800c760:	680b      	ldr	r3, [r1, #0]
 800c762:	6826      	ldr	r6, [r4, #0]
 800c764:	6960      	ldr	r0, [r4, #20]
 800c766:	1d1d      	adds	r5, r3, #4
 800c768:	600d      	str	r5, [r1, #0]
 800c76a:	0635      	lsls	r5, r6, #24
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	d501      	bpl.n	800c774 <_printf_i+0x1cc>
 800c770:	6018      	str	r0, [r3, #0]
 800c772:	e002      	b.n	800c77a <_printf_i+0x1d2>
 800c774:	0671      	lsls	r1, r6, #25
 800c776:	d5fb      	bpl.n	800c770 <_printf_i+0x1c8>
 800c778:	8018      	strh	r0, [r3, #0]
 800c77a:	2300      	movs	r3, #0
 800c77c:	6123      	str	r3, [r4, #16]
 800c77e:	4616      	mov	r6, r2
 800c780:	e7ba      	b.n	800c6f8 <_printf_i+0x150>
 800c782:	680b      	ldr	r3, [r1, #0]
 800c784:	1d1a      	adds	r2, r3, #4
 800c786:	600a      	str	r2, [r1, #0]
 800c788:	681e      	ldr	r6, [r3, #0]
 800c78a:	6862      	ldr	r2, [r4, #4]
 800c78c:	2100      	movs	r1, #0
 800c78e:	4630      	mov	r0, r6
 800c790:	f7f3 fd26 	bl	80001e0 <memchr>
 800c794:	b108      	cbz	r0, 800c79a <_printf_i+0x1f2>
 800c796:	1b80      	subs	r0, r0, r6
 800c798:	6060      	str	r0, [r4, #4]
 800c79a:	6863      	ldr	r3, [r4, #4]
 800c79c:	6123      	str	r3, [r4, #16]
 800c79e:	2300      	movs	r3, #0
 800c7a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c7a4:	e7a8      	b.n	800c6f8 <_printf_i+0x150>
 800c7a6:	6923      	ldr	r3, [r4, #16]
 800c7a8:	4632      	mov	r2, r6
 800c7aa:	4649      	mov	r1, r9
 800c7ac:	4640      	mov	r0, r8
 800c7ae:	47d0      	blx	sl
 800c7b0:	3001      	adds	r0, #1
 800c7b2:	d0ab      	beq.n	800c70c <_printf_i+0x164>
 800c7b4:	6823      	ldr	r3, [r4, #0]
 800c7b6:	079b      	lsls	r3, r3, #30
 800c7b8:	d413      	bmi.n	800c7e2 <_printf_i+0x23a>
 800c7ba:	68e0      	ldr	r0, [r4, #12]
 800c7bc:	9b03      	ldr	r3, [sp, #12]
 800c7be:	4298      	cmp	r0, r3
 800c7c0:	bfb8      	it	lt
 800c7c2:	4618      	movlt	r0, r3
 800c7c4:	e7a4      	b.n	800c710 <_printf_i+0x168>
 800c7c6:	2301      	movs	r3, #1
 800c7c8:	4632      	mov	r2, r6
 800c7ca:	4649      	mov	r1, r9
 800c7cc:	4640      	mov	r0, r8
 800c7ce:	47d0      	blx	sl
 800c7d0:	3001      	adds	r0, #1
 800c7d2:	d09b      	beq.n	800c70c <_printf_i+0x164>
 800c7d4:	3501      	adds	r5, #1
 800c7d6:	68e3      	ldr	r3, [r4, #12]
 800c7d8:	9903      	ldr	r1, [sp, #12]
 800c7da:	1a5b      	subs	r3, r3, r1
 800c7dc:	42ab      	cmp	r3, r5
 800c7de:	dcf2      	bgt.n	800c7c6 <_printf_i+0x21e>
 800c7e0:	e7eb      	b.n	800c7ba <_printf_i+0x212>
 800c7e2:	2500      	movs	r5, #0
 800c7e4:	f104 0619 	add.w	r6, r4, #25
 800c7e8:	e7f5      	b.n	800c7d6 <_printf_i+0x22e>
 800c7ea:	bf00      	nop
 800c7ec:	0800f23e 	.word	0x0800f23e
 800c7f0:	0800f24f 	.word	0x0800f24f

0800c7f4 <quorem>:
 800c7f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7f8:	6903      	ldr	r3, [r0, #16]
 800c7fa:	690c      	ldr	r4, [r1, #16]
 800c7fc:	42a3      	cmp	r3, r4
 800c7fe:	4607      	mov	r7, r0
 800c800:	f2c0 8081 	blt.w	800c906 <quorem+0x112>
 800c804:	3c01      	subs	r4, #1
 800c806:	f101 0814 	add.w	r8, r1, #20
 800c80a:	f100 0514 	add.w	r5, r0, #20
 800c80e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c812:	9301      	str	r3, [sp, #4]
 800c814:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c818:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c81c:	3301      	adds	r3, #1
 800c81e:	429a      	cmp	r2, r3
 800c820:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c824:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c828:	fbb2 f6f3 	udiv	r6, r2, r3
 800c82c:	d331      	bcc.n	800c892 <quorem+0x9e>
 800c82e:	f04f 0e00 	mov.w	lr, #0
 800c832:	4640      	mov	r0, r8
 800c834:	46ac      	mov	ip, r5
 800c836:	46f2      	mov	sl, lr
 800c838:	f850 2b04 	ldr.w	r2, [r0], #4
 800c83c:	b293      	uxth	r3, r2
 800c83e:	fb06 e303 	mla	r3, r6, r3, lr
 800c842:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c846:	b29b      	uxth	r3, r3
 800c848:	ebaa 0303 	sub.w	r3, sl, r3
 800c84c:	0c12      	lsrs	r2, r2, #16
 800c84e:	f8dc a000 	ldr.w	sl, [ip]
 800c852:	fb06 e202 	mla	r2, r6, r2, lr
 800c856:	fa13 f38a 	uxtah	r3, r3, sl
 800c85a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c85e:	fa1f fa82 	uxth.w	sl, r2
 800c862:	f8dc 2000 	ldr.w	r2, [ip]
 800c866:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800c86a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c86e:	b29b      	uxth	r3, r3
 800c870:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c874:	4581      	cmp	r9, r0
 800c876:	f84c 3b04 	str.w	r3, [ip], #4
 800c87a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c87e:	d2db      	bcs.n	800c838 <quorem+0x44>
 800c880:	f855 300b 	ldr.w	r3, [r5, fp]
 800c884:	b92b      	cbnz	r3, 800c892 <quorem+0x9e>
 800c886:	9b01      	ldr	r3, [sp, #4]
 800c888:	3b04      	subs	r3, #4
 800c88a:	429d      	cmp	r5, r3
 800c88c:	461a      	mov	r2, r3
 800c88e:	d32e      	bcc.n	800c8ee <quorem+0xfa>
 800c890:	613c      	str	r4, [r7, #16]
 800c892:	4638      	mov	r0, r7
 800c894:	f001 f8c0 	bl	800da18 <__mcmp>
 800c898:	2800      	cmp	r0, #0
 800c89a:	db24      	blt.n	800c8e6 <quorem+0xf2>
 800c89c:	3601      	adds	r6, #1
 800c89e:	4628      	mov	r0, r5
 800c8a0:	f04f 0c00 	mov.w	ip, #0
 800c8a4:	f858 2b04 	ldr.w	r2, [r8], #4
 800c8a8:	f8d0 e000 	ldr.w	lr, [r0]
 800c8ac:	b293      	uxth	r3, r2
 800c8ae:	ebac 0303 	sub.w	r3, ip, r3
 800c8b2:	0c12      	lsrs	r2, r2, #16
 800c8b4:	fa13 f38e 	uxtah	r3, r3, lr
 800c8b8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c8bc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c8c0:	b29b      	uxth	r3, r3
 800c8c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c8c6:	45c1      	cmp	r9, r8
 800c8c8:	f840 3b04 	str.w	r3, [r0], #4
 800c8cc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c8d0:	d2e8      	bcs.n	800c8a4 <quorem+0xb0>
 800c8d2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c8d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c8da:	b922      	cbnz	r2, 800c8e6 <quorem+0xf2>
 800c8dc:	3b04      	subs	r3, #4
 800c8de:	429d      	cmp	r5, r3
 800c8e0:	461a      	mov	r2, r3
 800c8e2:	d30a      	bcc.n	800c8fa <quorem+0x106>
 800c8e4:	613c      	str	r4, [r7, #16]
 800c8e6:	4630      	mov	r0, r6
 800c8e8:	b003      	add	sp, #12
 800c8ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8ee:	6812      	ldr	r2, [r2, #0]
 800c8f0:	3b04      	subs	r3, #4
 800c8f2:	2a00      	cmp	r2, #0
 800c8f4:	d1cc      	bne.n	800c890 <quorem+0x9c>
 800c8f6:	3c01      	subs	r4, #1
 800c8f8:	e7c7      	b.n	800c88a <quorem+0x96>
 800c8fa:	6812      	ldr	r2, [r2, #0]
 800c8fc:	3b04      	subs	r3, #4
 800c8fe:	2a00      	cmp	r2, #0
 800c900:	d1f0      	bne.n	800c8e4 <quorem+0xf0>
 800c902:	3c01      	subs	r4, #1
 800c904:	e7eb      	b.n	800c8de <quorem+0xea>
 800c906:	2000      	movs	r0, #0
 800c908:	e7ee      	b.n	800c8e8 <quorem+0xf4>
 800c90a:	0000      	movs	r0, r0
 800c90c:	0000      	movs	r0, r0
	...

0800c910 <_dtoa_r>:
 800c910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c914:	ed2d 8b02 	vpush	{d8}
 800c918:	ec57 6b10 	vmov	r6, r7, d0
 800c91c:	b095      	sub	sp, #84	; 0x54
 800c91e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c920:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c924:	9105      	str	r1, [sp, #20]
 800c926:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800c92a:	4604      	mov	r4, r0
 800c92c:	9209      	str	r2, [sp, #36]	; 0x24
 800c92e:	930f      	str	r3, [sp, #60]	; 0x3c
 800c930:	b975      	cbnz	r5, 800c950 <_dtoa_r+0x40>
 800c932:	2010      	movs	r0, #16
 800c934:	f000 fddc 	bl	800d4f0 <malloc>
 800c938:	4602      	mov	r2, r0
 800c93a:	6260      	str	r0, [r4, #36]	; 0x24
 800c93c:	b920      	cbnz	r0, 800c948 <_dtoa_r+0x38>
 800c93e:	4bb2      	ldr	r3, [pc, #712]	; (800cc08 <_dtoa_r+0x2f8>)
 800c940:	21ea      	movs	r1, #234	; 0xea
 800c942:	48b2      	ldr	r0, [pc, #712]	; (800cc0c <_dtoa_r+0x2fc>)
 800c944:	f001 fa32 	bl	800ddac <__assert_func>
 800c948:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c94c:	6005      	str	r5, [r0, #0]
 800c94e:	60c5      	str	r5, [r0, #12]
 800c950:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c952:	6819      	ldr	r1, [r3, #0]
 800c954:	b151      	cbz	r1, 800c96c <_dtoa_r+0x5c>
 800c956:	685a      	ldr	r2, [r3, #4]
 800c958:	604a      	str	r2, [r1, #4]
 800c95a:	2301      	movs	r3, #1
 800c95c:	4093      	lsls	r3, r2
 800c95e:	608b      	str	r3, [r1, #8]
 800c960:	4620      	mov	r0, r4
 800c962:	f000 fe1b 	bl	800d59c <_Bfree>
 800c966:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c968:	2200      	movs	r2, #0
 800c96a:	601a      	str	r2, [r3, #0]
 800c96c:	1e3b      	subs	r3, r7, #0
 800c96e:	bfb9      	ittee	lt
 800c970:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c974:	9303      	strlt	r3, [sp, #12]
 800c976:	2300      	movge	r3, #0
 800c978:	f8c8 3000 	strge.w	r3, [r8]
 800c97c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800c980:	4ba3      	ldr	r3, [pc, #652]	; (800cc10 <_dtoa_r+0x300>)
 800c982:	bfbc      	itt	lt
 800c984:	2201      	movlt	r2, #1
 800c986:	f8c8 2000 	strlt.w	r2, [r8]
 800c98a:	ea33 0309 	bics.w	r3, r3, r9
 800c98e:	d11b      	bne.n	800c9c8 <_dtoa_r+0xb8>
 800c990:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c992:	f242 730f 	movw	r3, #9999	; 0x270f
 800c996:	6013      	str	r3, [r2, #0]
 800c998:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c99c:	4333      	orrs	r3, r6
 800c99e:	f000 857a 	beq.w	800d496 <_dtoa_r+0xb86>
 800c9a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c9a4:	b963      	cbnz	r3, 800c9c0 <_dtoa_r+0xb0>
 800c9a6:	4b9b      	ldr	r3, [pc, #620]	; (800cc14 <_dtoa_r+0x304>)
 800c9a8:	e024      	b.n	800c9f4 <_dtoa_r+0xe4>
 800c9aa:	4b9b      	ldr	r3, [pc, #620]	; (800cc18 <_dtoa_r+0x308>)
 800c9ac:	9300      	str	r3, [sp, #0]
 800c9ae:	3308      	adds	r3, #8
 800c9b0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c9b2:	6013      	str	r3, [r2, #0]
 800c9b4:	9800      	ldr	r0, [sp, #0]
 800c9b6:	b015      	add	sp, #84	; 0x54
 800c9b8:	ecbd 8b02 	vpop	{d8}
 800c9bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9c0:	4b94      	ldr	r3, [pc, #592]	; (800cc14 <_dtoa_r+0x304>)
 800c9c2:	9300      	str	r3, [sp, #0]
 800c9c4:	3303      	adds	r3, #3
 800c9c6:	e7f3      	b.n	800c9b0 <_dtoa_r+0xa0>
 800c9c8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c9cc:	2200      	movs	r2, #0
 800c9ce:	ec51 0b17 	vmov	r0, r1, d7
 800c9d2:	2300      	movs	r3, #0
 800c9d4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800c9d8:	f7f4 f876 	bl	8000ac8 <__aeabi_dcmpeq>
 800c9dc:	4680      	mov	r8, r0
 800c9de:	b158      	cbz	r0, 800c9f8 <_dtoa_r+0xe8>
 800c9e0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c9e2:	2301      	movs	r3, #1
 800c9e4:	6013      	str	r3, [r2, #0]
 800c9e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	f000 8551 	beq.w	800d490 <_dtoa_r+0xb80>
 800c9ee:	488b      	ldr	r0, [pc, #556]	; (800cc1c <_dtoa_r+0x30c>)
 800c9f0:	6018      	str	r0, [r3, #0]
 800c9f2:	1e43      	subs	r3, r0, #1
 800c9f4:	9300      	str	r3, [sp, #0]
 800c9f6:	e7dd      	b.n	800c9b4 <_dtoa_r+0xa4>
 800c9f8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800c9fc:	aa12      	add	r2, sp, #72	; 0x48
 800c9fe:	a913      	add	r1, sp, #76	; 0x4c
 800ca00:	4620      	mov	r0, r4
 800ca02:	f001 f8ad 	bl	800db60 <__d2b>
 800ca06:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ca0a:	4683      	mov	fp, r0
 800ca0c:	2d00      	cmp	r5, #0
 800ca0e:	d07c      	beq.n	800cb0a <_dtoa_r+0x1fa>
 800ca10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ca12:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800ca16:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ca1a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800ca1e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800ca22:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800ca26:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ca2a:	4b7d      	ldr	r3, [pc, #500]	; (800cc20 <_dtoa_r+0x310>)
 800ca2c:	2200      	movs	r2, #0
 800ca2e:	4630      	mov	r0, r6
 800ca30:	4639      	mov	r1, r7
 800ca32:	f7f3 fc29 	bl	8000288 <__aeabi_dsub>
 800ca36:	a36e      	add	r3, pc, #440	; (adr r3, 800cbf0 <_dtoa_r+0x2e0>)
 800ca38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca3c:	f7f3 fddc 	bl	80005f8 <__aeabi_dmul>
 800ca40:	a36d      	add	r3, pc, #436	; (adr r3, 800cbf8 <_dtoa_r+0x2e8>)
 800ca42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca46:	f7f3 fc21 	bl	800028c <__adddf3>
 800ca4a:	4606      	mov	r6, r0
 800ca4c:	4628      	mov	r0, r5
 800ca4e:	460f      	mov	r7, r1
 800ca50:	f7f3 fd68 	bl	8000524 <__aeabi_i2d>
 800ca54:	a36a      	add	r3, pc, #424	; (adr r3, 800cc00 <_dtoa_r+0x2f0>)
 800ca56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca5a:	f7f3 fdcd 	bl	80005f8 <__aeabi_dmul>
 800ca5e:	4602      	mov	r2, r0
 800ca60:	460b      	mov	r3, r1
 800ca62:	4630      	mov	r0, r6
 800ca64:	4639      	mov	r1, r7
 800ca66:	f7f3 fc11 	bl	800028c <__adddf3>
 800ca6a:	4606      	mov	r6, r0
 800ca6c:	460f      	mov	r7, r1
 800ca6e:	f7f4 f873 	bl	8000b58 <__aeabi_d2iz>
 800ca72:	2200      	movs	r2, #0
 800ca74:	4682      	mov	sl, r0
 800ca76:	2300      	movs	r3, #0
 800ca78:	4630      	mov	r0, r6
 800ca7a:	4639      	mov	r1, r7
 800ca7c:	f7f4 f82e 	bl	8000adc <__aeabi_dcmplt>
 800ca80:	b148      	cbz	r0, 800ca96 <_dtoa_r+0x186>
 800ca82:	4650      	mov	r0, sl
 800ca84:	f7f3 fd4e 	bl	8000524 <__aeabi_i2d>
 800ca88:	4632      	mov	r2, r6
 800ca8a:	463b      	mov	r3, r7
 800ca8c:	f7f4 f81c 	bl	8000ac8 <__aeabi_dcmpeq>
 800ca90:	b908      	cbnz	r0, 800ca96 <_dtoa_r+0x186>
 800ca92:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ca96:	f1ba 0f16 	cmp.w	sl, #22
 800ca9a:	d854      	bhi.n	800cb46 <_dtoa_r+0x236>
 800ca9c:	4b61      	ldr	r3, [pc, #388]	; (800cc24 <_dtoa_r+0x314>)
 800ca9e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800caa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caa6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800caaa:	f7f4 f817 	bl	8000adc <__aeabi_dcmplt>
 800caae:	2800      	cmp	r0, #0
 800cab0:	d04b      	beq.n	800cb4a <_dtoa_r+0x23a>
 800cab2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cab6:	2300      	movs	r3, #0
 800cab8:	930e      	str	r3, [sp, #56]	; 0x38
 800caba:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800cabc:	1b5d      	subs	r5, r3, r5
 800cabe:	1e6b      	subs	r3, r5, #1
 800cac0:	9304      	str	r3, [sp, #16]
 800cac2:	bf43      	ittte	mi
 800cac4:	2300      	movmi	r3, #0
 800cac6:	f1c5 0801 	rsbmi	r8, r5, #1
 800caca:	9304      	strmi	r3, [sp, #16]
 800cacc:	f04f 0800 	movpl.w	r8, #0
 800cad0:	f1ba 0f00 	cmp.w	sl, #0
 800cad4:	db3b      	blt.n	800cb4e <_dtoa_r+0x23e>
 800cad6:	9b04      	ldr	r3, [sp, #16]
 800cad8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800cadc:	4453      	add	r3, sl
 800cade:	9304      	str	r3, [sp, #16]
 800cae0:	2300      	movs	r3, #0
 800cae2:	9306      	str	r3, [sp, #24]
 800cae4:	9b05      	ldr	r3, [sp, #20]
 800cae6:	2b09      	cmp	r3, #9
 800cae8:	d869      	bhi.n	800cbbe <_dtoa_r+0x2ae>
 800caea:	2b05      	cmp	r3, #5
 800caec:	bfc4      	itt	gt
 800caee:	3b04      	subgt	r3, #4
 800caf0:	9305      	strgt	r3, [sp, #20]
 800caf2:	9b05      	ldr	r3, [sp, #20]
 800caf4:	f1a3 0302 	sub.w	r3, r3, #2
 800caf8:	bfcc      	ite	gt
 800cafa:	2500      	movgt	r5, #0
 800cafc:	2501      	movle	r5, #1
 800cafe:	2b03      	cmp	r3, #3
 800cb00:	d869      	bhi.n	800cbd6 <_dtoa_r+0x2c6>
 800cb02:	e8df f003 	tbb	[pc, r3]
 800cb06:	4e2c      	.short	0x4e2c
 800cb08:	5a4c      	.short	0x5a4c
 800cb0a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800cb0e:	441d      	add	r5, r3
 800cb10:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800cb14:	2b20      	cmp	r3, #32
 800cb16:	bfc1      	itttt	gt
 800cb18:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800cb1c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800cb20:	fa09 f303 	lslgt.w	r3, r9, r3
 800cb24:	fa26 f000 	lsrgt.w	r0, r6, r0
 800cb28:	bfda      	itte	le
 800cb2a:	f1c3 0320 	rsble	r3, r3, #32
 800cb2e:	fa06 f003 	lslle.w	r0, r6, r3
 800cb32:	4318      	orrgt	r0, r3
 800cb34:	f7f3 fce6 	bl	8000504 <__aeabi_ui2d>
 800cb38:	2301      	movs	r3, #1
 800cb3a:	4606      	mov	r6, r0
 800cb3c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800cb40:	3d01      	subs	r5, #1
 800cb42:	9310      	str	r3, [sp, #64]	; 0x40
 800cb44:	e771      	b.n	800ca2a <_dtoa_r+0x11a>
 800cb46:	2301      	movs	r3, #1
 800cb48:	e7b6      	b.n	800cab8 <_dtoa_r+0x1a8>
 800cb4a:	900e      	str	r0, [sp, #56]	; 0x38
 800cb4c:	e7b5      	b.n	800caba <_dtoa_r+0x1aa>
 800cb4e:	f1ca 0300 	rsb	r3, sl, #0
 800cb52:	9306      	str	r3, [sp, #24]
 800cb54:	2300      	movs	r3, #0
 800cb56:	eba8 080a 	sub.w	r8, r8, sl
 800cb5a:	930d      	str	r3, [sp, #52]	; 0x34
 800cb5c:	e7c2      	b.n	800cae4 <_dtoa_r+0x1d4>
 800cb5e:	2300      	movs	r3, #0
 800cb60:	9308      	str	r3, [sp, #32]
 800cb62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	dc39      	bgt.n	800cbdc <_dtoa_r+0x2cc>
 800cb68:	f04f 0901 	mov.w	r9, #1
 800cb6c:	f8cd 9004 	str.w	r9, [sp, #4]
 800cb70:	464b      	mov	r3, r9
 800cb72:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800cb76:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800cb78:	2200      	movs	r2, #0
 800cb7a:	6042      	str	r2, [r0, #4]
 800cb7c:	2204      	movs	r2, #4
 800cb7e:	f102 0614 	add.w	r6, r2, #20
 800cb82:	429e      	cmp	r6, r3
 800cb84:	6841      	ldr	r1, [r0, #4]
 800cb86:	d92f      	bls.n	800cbe8 <_dtoa_r+0x2d8>
 800cb88:	4620      	mov	r0, r4
 800cb8a:	f000 fcc7 	bl	800d51c <_Balloc>
 800cb8e:	9000      	str	r0, [sp, #0]
 800cb90:	2800      	cmp	r0, #0
 800cb92:	d14b      	bne.n	800cc2c <_dtoa_r+0x31c>
 800cb94:	4b24      	ldr	r3, [pc, #144]	; (800cc28 <_dtoa_r+0x318>)
 800cb96:	4602      	mov	r2, r0
 800cb98:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800cb9c:	e6d1      	b.n	800c942 <_dtoa_r+0x32>
 800cb9e:	2301      	movs	r3, #1
 800cba0:	e7de      	b.n	800cb60 <_dtoa_r+0x250>
 800cba2:	2300      	movs	r3, #0
 800cba4:	9308      	str	r3, [sp, #32]
 800cba6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cba8:	eb0a 0903 	add.w	r9, sl, r3
 800cbac:	f109 0301 	add.w	r3, r9, #1
 800cbb0:	2b01      	cmp	r3, #1
 800cbb2:	9301      	str	r3, [sp, #4]
 800cbb4:	bfb8      	it	lt
 800cbb6:	2301      	movlt	r3, #1
 800cbb8:	e7dd      	b.n	800cb76 <_dtoa_r+0x266>
 800cbba:	2301      	movs	r3, #1
 800cbbc:	e7f2      	b.n	800cba4 <_dtoa_r+0x294>
 800cbbe:	2501      	movs	r5, #1
 800cbc0:	2300      	movs	r3, #0
 800cbc2:	9305      	str	r3, [sp, #20]
 800cbc4:	9508      	str	r5, [sp, #32]
 800cbc6:	f04f 39ff 	mov.w	r9, #4294967295
 800cbca:	2200      	movs	r2, #0
 800cbcc:	f8cd 9004 	str.w	r9, [sp, #4]
 800cbd0:	2312      	movs	r3, #18
 800cbd2:	9209      	str	r2, [sp, #36]	; 0x24
 800cbd4:	e7cf      	b.n	800cb76 <_dtoa_r+0x266>
 800cbd6:	2301      	movs	r3, #1
 800cbd8:	9308      	str	r3, [sp, #32]
 800cbda:	e7f4      	b.n	800cbc6 <_dtoa_r+0x2b6>
 800cbdc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800cbe0:	f8cd 9004 	str.w	r9, [sp, #4]
 800cbe4:	464b      	mov	r3, r9
 800cbe6:	e7c6      	b.n	800cb76 <_dtoa_r+0x266>
 800cbe8:	3101      	adds	r1, #1
 800cbea:	6041      	str	r1, [r0, #4]
 800cbec:	0052      	lsls	r2, r2, #1
 800cbee:	e7c6      	b.n	800cb7e <_dtoa_r+0x26e>
 800cbf0:	636f4361 	.word	0x636f4361
 800cbf4:	3fd287a7 	.word	0x3fd287a7
 800cbf8:	8b60c8b3 	.word	0x8b60c8b3
 800cbfc:	3fc68a28 	.word	0x3fc68a28
 800cc00:	509f79fb 	.word	0x509f79fb
 800cc04:	3fd34413 	.word	0x3fd34413
 800cc08:	0800f26d 	.word	0x0800f26d
 800cc0c:	0800f284 	.word	0x0800f284
 800cc10:	7ff00000 	.word	0x7ff00000
 800cc14:	0800f269 	.word	0x0800f269
 800cc18:	0800f260 	.word	0x0800f260
 800cc1c:	0800f23d 	.word	0x0800f23d
 800cc20:	3ff80000 	.word	0x3ff80000
 800cc24:	0800f380 	.word	0x0800f380
 800cc28:	0800f2e3 	.word	0x0800f2e3
 800cc2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cc2e:	9a00      	ldr	r2, [sp, #0]
 800cc30:	601a      	str	r2, [r3, #0]
 800cc32:	9b01      	ldr	r3, [sp, #4]
 800cc34:	2b0e      	cmp	r3, #14
 800cc36:	f200 80ad 	bhi.w	800cd94 <_dtoa_r+0x484>
 800cc3a:	2d00      	cmp	r5, #0
 800cc3c:	f000 80aa 	beq.w	800cd94 <_dtoa_r+0x484>
 800cc40:	f1ba 0f00 	cmp.w	sl, #0
 800cc44:	dd36      	ble.n	800ccb4 <_dtoa_r+0x3a4>
 800cc46:	4ac3      	ldr	r2, [pc, #780]	; (800cf54 <_dtoa_r+0x644>)
 800cc48:	f00a 030f 	and.w	r3, sl, #15
 800cc4c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800cc50:	ed93 7b00 	vldr	d7, [r3]
 800cc54:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800cc58:	ea4f 172a 	mov.w	r7, sl, asr #4
 800cc5c:	eeb0 8a47 	vmov.f32	s16, s14
 800cc60:	eef0 8a67 	vmov.f32	s17, s15
 800cc64:	d016      	beq.n	800cc94 <_dtoa_r+0x384>
 800cc66:	4bbc      	ldr	r3, [pc, #752]	; (800cf58 <_dtoa_r+0x648>)
 800cc68:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800cc6c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cc70:	f7f3 fdec 	bl	800084c <__aeabi_ddiv>
 800cc74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cc78:	f007 070f 	and.w	r7, r7, #15
 800cc7c:	2503      	movs	r5, #3
 800cc7e:	4eb6      	ldr	r6, [pc, #728]	; (800cf58 <_dtoa_r+0x648>)
 800cc80:	b957      	cbnz	r7, 800cc98 <_dtoa_r+0x388>
 800cc82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cc86:	ec53 2b18 	vmov	r2, r3, d8
 800cc8a:	f7f3 fddf 	bl	800084c <__aeabi_ddiv>
 800cc8e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cc92:	e029      	b.n	800cce8 <_dtoa_r+0x3d8>
 800cc94:	2502      	movs	r5, #2
 800cc96:	e7f2      	b.n	800cc7e <_dtoa_r+0x36e>
 800cc98:	07f9      	lsls	r1, r7, #31
 800cc9a:	d508      	bpl.n	800ccae <_dtoa_r+0x39e>
 800cc9c:	ec51 0b18 	vmov	r0, r1, d8
 800cca0:	e9d6 2300 	ldrd	r2, r3, [r6]
 800cca4:	f7f3 fca8 	bl	80005f8 <__aeabi_dmul>
 800cca8:	ec41 0b18 	vmov	d8, r0, r1
 800ccac:	3501      	adds	r5, #1
 800ccae:	107f      	asrs	r7, r7, #1
 800ccb0:	3608      	adds	r6, #8
 800ccb2:	e7e5      	b.n	800cc80 <_dtoa_r+0x370>
 800ccb4:	f000 80a6 	beq.w	800ce04 <_dtoa_r+0x4f4>
 800ccb8:	f1ca 0600 	rsb	r6, sl, #0
 800ccbc:	4ba5      	ldr	r3, [pc, #660]	; (800cf54 <_dtoa_r+0x644>)
 800ccbe:	4fa6      	ldr	r7, [pc, #664]	; (800cf58 <_dtoa_r+0x648>)
 800ccc0:	f006 020f 	and.w	r2, r6, #15
 800ccc4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ccc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cccc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ccd0:	f7f3 fc92 	bl	80005f8 <__aeabi_dmul>
 800ccd4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ccd8:	1136      	asrs	r6, r6, #4
 800ccda:	2300      	movs	r3, #0
 800ccdc:	2502      	movs	r5, #2
 800ccde:	2e00      	cmp	r6, #0
 800cce0:	f040 8085 	bne.w	800cdee <_dtoa_r+0x4de>
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d1d2      	bne.n	800cc8e <_dtoa_r+0x37e>
 800cce8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	f000 808c 	beq.w	800ce08 <_dtoa_r+0x4f8>
 800ccf0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ccf4:	4b99      	ldr	r3, [pc, #612]	; (800cf5c <_dtoa_r+0x64c>)
 800ccf6:	2200      	movs	r2, #0
 800ccf8:	4630      	mov	r0, r6
 800ccfa:	4639      	mov	r1, r7
 800ccfc:	f7f3 feee 	bl	8000adc <__aeabi_dcmplt>
 800cd00:	2800      	cmp	r0, #0
 800cd02:	f000 8081 	beq.w	800ce08 <_dtoa_r+0x4f8>
 800cd06:	9b01      	ldr	r3, [sp, #4]
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d07d      	beq.n	800ce08 <_dtoa_r+0x4f8>
 800cd0c:	f1b9 0f00 	cmp.w	r9, #0
 800cd10:	dd3c      	ble.n	800cd8c <_dtoa_r+0x47c>
 800cd12:	f10a 33ff 	add.w	r3, sl, #4294967295
 800cd16:	9307      	str	r3, [sp, #28]
 800cd18:	2200      	movs	r2, #0
 800cd1a:	4b91      	ldr	r3, [pc, #580]	; (800cf60 <_dtoa_r+0x650>)
 800cd1c:	4630      	mov	r0, r6
 800cd1e:	4639      	mov	r1, r7
 800cd20:	f7f3 fc6a 	bl	80005f8 <__aeabi_dmul>
 800cd24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cd28:	3501      	adds	r5, #1
 800cd2a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800cd2e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800cd32:	4628      	mov	r0, r5
 800cd34:	f7f3 fbf6 	bl	8000524 <__aeabi_i2d>
 800cd38:	4632      	mov	r2, r6
 800cd3a:	463b      	mov	r3, r7
 800cd3c:	f7f3 fc5c 	bl	80005f8 <__aeabi_dmul>
 800cd40:	4b88      	ldr	r3, [pc, #544]	; (800cf64 <_dtoa_r+0x654>)
 800cd42:	2200      	movs	r2, #0
 800cd44:	f7f3 faa2 	bl	800028c <__adddf3>
 800cd48:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800cd4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cd50:	9303      	str	r3, [sp, #12]
 800cd52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d15c      	bne.n	800ce12 <_dtoa_r+0x502>
 800cd58:	4b83      	ldr	r3, [pc, #524]	; (800cf68 <_dtoa_r+0x658>)
 800cd5a:	2200      	movs	r2, #0
 800cd5c:	4630      	mov	r0, r6
 800cd5e:	4639      	mov	r1, r7
 800cd60:	f7f3 fa92 	bl	8000288 <__aeabi_dsub>
 800cd64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cd68:	4606      	mov	r6, r0
 800cd6a:	460f      	mov	r7, r1
 800cd6c:	f7f3 fed4 	bl	8000b18 <__aeabi_dcmpgt>
 800cd70:	2800      	cmp	r0, #0
 800cd72:	f040 8296 	bne.w	800d2a2 <_dtoa_r+0x992>
 800cd76:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800cd7a:	4630      	mov	r0, r6
 800cd7c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cd80:	4639      	mov	r1, r7
 800cd82:	f7f3 feab 	bl	8000adc <__aeabi_dcmplt>
 800cd86:	2800      	cmp	r0, #0
 800cd88:	f040 8288 	bne.w	800d29c <_dtoa_r+0x98c>
 800cd8c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800cd90:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cd94:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	f2c0 8158 	blt.w	800d04c <_dtoa_r+0x73c>
 800cd9c:	f1ba 0f0e 	cmp.w	sl, #14
 800cda0:	f300 8154 	bgt.w	800d04c <_dtoa_r+0x73c>
 800cda4:	4b6b      	ldr	r3, [pc, #428]	; (800cf54 <_dtoa_r+0x644>)
 800cda6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800cdaa:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cdae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	f280 80e3 	bge.w	800cf7c <_dtoa_r+0x66c>
 800cdb6:	9b01      	ldr	r3, [sp, #4]
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	f300 80df 	bgt.w	800cf7c <_dtoa_r+0x66c>
 800cdbe:	f040 826d 	bne.w	800d29c <_dtoa_r+0x98c>
 800cdc2:	4b69      	ldr	r3, [pc, #420]	; (800cf68 <_dtoa_r+0x658>)
 800cdc4:	2200      	movs	r2, #0
 800cdc6:	4640      	mov	r0, r8
 800cdc8:	4649      	mov	r1, r9
 800cdca:	f7f3 fc15 	bl	80005f8 <__aeabi_dmul>
 800cdce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cdd2:	f7f3 fe97 	bl	8000b04 <__aeabi_dcmpge>
 800cdd6:	9e01      	ldr	r6, [sp, #4]
 800cdd8:	4637      	mov	r7, r6
 800cdda:	2800      	cmp	r0, #0
 800cddc:	f040 8243 	bne.w	800d266 <_dtoa_r+0x956>
 800cde0:	9d00      	ldr	r5, [sp, #0]
 800cde2:	2331      	movs	r3, #49	; 0x31
 800cde4:	f805 3b01 	strb.w	r3, [r5], #1
 800cde8:	f10a 0a01 	add.w	sl, sl, #1
 800cdec:	e23f      	b.n	800d26e <_dtoa_r+0x95e>
 800cdee:	07f2      	lsls	r2, r6, #31
 800cdf0:	d505      	bpl.n	800cdfe <_dtoa_r+0x4ee>
 800cdf2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cdf6:	f7f3 fbff 	bl	80005f8 <__aeabi_dmul>
 800cdfa:	3501      	adds	r5, #1
 800cdfc:	2301      	movs	r3, #1
 800cdfe:	1076      	asrs	r6, r6, #1
 800ce00:	3708      	adds	r7, #8
 800ce02:	e76c      	b.n	800ccde <_dtoa_r+0x3ce>
 800ce04:	2502      	movs	r5, #2
 800ce06:	e76f      	b.n	800cce8 <_dtoa_r+0x3d8>
 800ce08:	9b01      	ldr	r3, [sp, #4]
 800ce0a:	f8cd a01c 	str.w	sl, [sp, #28]
 800ce0e:	930c      	str	r3, [sp, #48]	; 0x30
 800ce10:	e78d      	b.n	800cd2e <_dtoa_r+0x41e>
 800ce12:	9900      	ldr	r1, [sp, #0]
 800ce14:	980c      	ldr	r0, [sp, #48]	; 0x30
 800ce16:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ce18:	4b4e      	ldr	r3, [pc, #312]	; (800cf54 <_dtoa_r+0x644>)
 800ce1a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ce1e:	4401      	add	r1, r0
 800ce20:	9102      	str	r1, [sp, #8]
 800ce22:	9908      	ldr	r1, [sp, #32]
 800ce24:	eeb0 8a47 	vmov.f32	s16, s14
 800ce28:	eef0 8a67 	vmov.f32	s17, s15
 800ce2c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ce30:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ce34:	2900      	cmp	r1, #0
 800ce36:	d045      	beq.n	800cec4 <_dtoa_r+0x5b4>
 800ce38:	494c      	ldr	r1, [pc, #304]	; (800cf6c <_dtoa_r+0x65c>)
 800ce3a:	2000      	movs	r0, #0
 800ce3c:	f7f3 fd06 	bl	800084c <__aeabi_ddiv>
 800ce40:	ec53 2b18 	vmov	r2, r3, d8
 800ce44:	f7f3 fa20 	bl	8000288 <__aeabi_dsub>
 800ce48:	9d00      	ldr	r5, [sp, #0]
 800ce4a:	ec41 0b18 	vmov	d8, r0, r1
 800ce4e:	4639      	mov	r1, r7
 800ce50:	4630      	mov	r0, r6
 800ce52:	f7f3 fe81 	bl	8000b58 <__aeabi_d2iz>
 800ce56:	900c      	str	r0, [sp, #48]	; 0x30
 800ce58:	f7f3 fb64 	bl	8000524 <__aeabi_i2d>
 800ce5c:	4602      	mov	r2, r0
 800ce5e:	460b      	mov	r3, r1
 800ce60:	4630      	mov	r0, r6
 800ce62:	4639      	mov	r1, r7
 800ce64:	f7f3 fa10 	bl	8000288 <__aeabi_dsub>
 800ce68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ce6a:	3330      	adds	r3, #48	; 0x30
 800ce6c:	f805 3b01 	strb.w	r3, [r5], #1
 800ce70:	ec53 2b18 	vmov	r2, r3, d8
 800ce74:	4606      	mov	r6, r0
 800ce76:	460f      	mov	r7, r1
 800ce78:	f7f3 fe30 	bl	8000adc <__aeabi_dcmplt>
 800ce7c:	2800      	cmp	r0, #0
 800ce7e:	d165      	bne.n	800cf4c <_dtoa_r+0x63c>
 800ce80:	4632      	mov	r2, r6
 800ce82:	463b      	mov	r3, r7
 800ce84:	4935      	ldr	r1, [pc, #212]	; (800cf5c <_dtoa_r+0x64c>)
 800ce86:	2000      	movs	r0, #0
 800ce88:	f7f3 f9fe 	bl	8000288 <__aeabi_dsub>
 800ce8c:	ec53 2b18 	vmov	r2, r3, d8
 800ce90:	f7f3 fe24 	bl	8000adc <__aeabi_dcmplt>
 800ce94:	2800      	cmp	r0, #0
 800ce96:	f040 80b9 	bne.w	800d00c <_dtoa_r+0x6fc>
 800ce9a:	9b02      	ldr	r3, [sp, #8]
 800ce9c:	429d      	cmp	r5, r3
 800ce9e:	f43f af75 	beq.w	800cd8c <_dtoa_r+0x47c>
 800cea2:	4b2f      	ldr	r3, [pc, #188]	; (800cf60 <_dtoa_r+0x650>)
 800cea4:	ec51 0b18 	vmov	r0, r1, d8
 800cea8:	2200      	movs	r2, #0
 800ceaa:	f7f3 fba5 	bl	80005f8 <__aeabi_dmul>
 800ceae:	4b2c      	ldr	r3, [pc, #176]	; (800cf60 <_dtoa_r+0x650>)
 800ceb0:	ec41 0b18 	vmov	d8, r0, r1
 800ceb4:	2200      	movs	r2, #0
 800ceb6:	4630      	mov	r0, r6
 800ceb8:	4639      	mov	r1, r7
 800ceba:	f7f3 fb9d 	bl	80005f8 <__aeabi_dmul>
 800cebe:	4606      	mov	r6, r0
 800cec0:	460f      	mov	r7, r1
 800cec2:	e7c4      	b.n	800ce4e <_dtoa_r+0x53e>
 800cec4:	ec51 0b17 	vmov	r0, r1, d7
 800cec8:	f7f3 fb96 	bl	80005f8 <__aeabi_dmul>
 800cecc:	9b02      	ldr	r3, [sp, #8]
 800cece:	9d00      	ldr	r5, [sp, #0]
 800ced0:	930c      	str	r3, [sp, #48]	; 0x30
 800ced2:	ec41 0b18 	vmov	d8, r0, r1
 800ced6:	4639      	mov	r1, r7
 800ced8:	4630      	mov	r0, r6
 800ceda:	f7f3 fe3d 	bl	8000b58 <__aeabi_d2iz>
 800cede:	9011      	str	r0, [sp, #68]	; 0x44
 800cee0:	f7f3 fb20 	bl	8000524 <__aeabi_i2d>
 800cee4:	4602      	mov	r2, r0
 800cee6:	460b      	mov	r3, r1
 800cee8:	4630      	mov	r0, r6
 800ceea:	4639      	mov	r1, r7
 800ceec:	f7f3 f9cc 	bl	8000288 <__aeabi_dsub>
 800cef0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cef2:	3330      	adds	r3, #48	; 0x30
 800cef4:	f805 3b01 	strb.w	r3, [r5], #1
 800cef8:	9b02      	ldr	r3, [sp, #8]
 800cefa:	429d      	cmp	r5, r3
 800cefc:	4606      	mov	r6, r0
 800cefe:	460f      	mov	r7, r1
 800cf00:	f04f 0200 	mov.w	r2, #0
 800cf04:	d134      	bne.n	800cf70 <_dtoa_r+0x660>
 800cf06:	4b19      	ldr	r3, [pc, #100]	; (800cf6c <_dtoa_r+0x65c>)
 800cf08:	ec51 0b18 	vmov	r0, r1, d8
 800cf0c:	f7f3 f9be 	bl	800028c <__adddf3>
 800cf10:	4602      	mov	r2, r0
 800cf12:	460b      	mov	r3, r1
 800cf14:	4630      	mov	r0, r6
 800cf16:	4639      	mov	r1, r7
 800cf18:	f7f3 fdfe 	bl	8000b18 <__aeabi_dcmpgt>
 800cf1c:	2800      	cmp	r0, #0
 800cf1e:	d175      	bne.n	800d00c <_dtoa_r+0x6fc>
 800cf20:	ec53 2b18 	vmov	r2, r3, d8
 800cf24:	4911      	ldr	r1, [pc, #68]	; (800cf6c <_dtoa_r+0x65c>)
 800cf26:	2000      	movs	r0, #0
 800cf28:	f7f3 f9ae 	bl	8000288 <__aeabi_dsub>
 800cf2c:	4602      	mov	r2, r0
 800cf2e:	460b      	mov	r3, r1
 800cf30:	4630      	mov	r0, r6
 800cf32:	4639      	mov	r1, r7
 800cf34:	f7f3 fdd2 	bl	8000adc <__aeabi_dcmplt>
 800cf38:	2800      	cmp	r0, #0
 800cf3a:	f43f af27 	beq.w	800cd8c <_dtoa_r+0x47c>
 800cf3e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cf40:	1e6b      	subs	r3, r5, #1
 800cf42:	930c      	str	r3, [sp, #48]	; 0x30
 800cf44:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800cf48:	2b30      	cmp	r3, #48	; 0x30
 800cf4a:	d0f8      	beq.n	800cf3e <_dtoa_r+0x62e>
 800cf4c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800cf50:	e04a      	b.n	800cfe8 <_dtoa_r+0x6d8>
 800cf52:	bf00      	nop
 800cf54:	0800f380 	.word	0x0800f380
 800cf58:	0800f358 	.word	0x0800f358
 800cf5c:	3ff00000 	.word	0x3ff00000
 800cf60:	40240000 	.word	0x40240000
 800cf64:	401c0000 	.word	0x401c0000
 800cf68:	40140000 	.word	0x40140000
 800cf6c:	3fe00000 	.word	0x3fe00000
 800cf70:	4baf      	ldr	r3, [pc, #700]	; (800d230 <_dtoa_r+0x920>)
 800cf72:	f7f3 fb41 	bl	80005f8 <__aeabi_dmul>
 800cf76:	4606      	mov	r6, r0
 800cf78:	460f      	mov	r7, r1
 800cf7a:	e7ac      	b.n	800ced6 <_dtoa_r+0x5c6>
 800cf7c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800cf80:	9d00      	ldr	r5, [sp, #0]
 800cf82:	4642      	mov	r2, r8
 800cf84:	464b      	mov	r3, r9
 800cf86:	4630      	mov	r0, r6
 800cf88:	4639      	mov	r1, r7
 800cf8a:	f7f3 fc5f 	bl	800084c <__aeabi_ddiv>
 800cf8e:	f7f3 fde3 	bl	8000b58 <__aeabi_d2iz>
 800cf92:	9002      	str	r0, [sp, #8]
 800cf94:	f7f3 fac6 	bl	8000524 <__aeabi_i2d>
 800cf98:	4642      	mov	r2, r8
 800cf9a:	464b      	mov	r3, r9
 800cf9c:	f7f3 fb2c 	bl	80005f8 <__aeabi_dmul>
 800cfa0:	4602      	mov	r2, r0
 800cfa2:	460b      	mov	r3, r1
 800cfa4:	4630      	mov	r0, r6
 800cfa6:	4639      	mov	r1, r7
 800cfa8:	f7f3 f96e 	bl	8000288 <__aeabi_dsub>
 800cfac:	9e02      	ldr	r6, [sp, #8]
 800cfae:	9f01      	ldr	r7, [sp, #4]
 800cfb0:	3630      	adds	r6, #48	; 0x30
 800cfb2:	f805 6b01 	strb.w	r6, [r5], #1
 800cfb6:	9e00      	ldr	r6, [sp, #0]
 800cfb8:	1bae      	subs	r6, r5, r6
 800cfba:	42b7      	cmp	r7, r6
 800cfbc:	4602      	mov	r2, r0
 800cfbe:	460b      	mov	r3, r1
 800cfc0:	d137      	bne.n	800d032 <_dtoa_r+0x722>
 800cfc2:	f7f3 f963 	bl	800028c <__adddf3>
 800cfc6:	4642      	mov	r2, r8
 800cfc8:	464b      	mov	r3, r9
 800cfca:	4606      	mov	r6, r0
 800cfcc:	460f      	mov	r7, r1
 800cfce:	f7f3 fda3 	bl	8000b18 <__aeabi_dcmpgt>
 800cfd2:	b9c8      	cbnz	r0, 800d008 <_dtoa_r+0x6f8>
 800cfd4:	4642      	mov	r2, r8
 800cfd6:	464b      	mov	r3, r9
 800cfd8:	4630      	mov	r0, r6
 800cfda:	4639      	mov	r1, r7
 800cfdc:	f7f3 fd74 	bl	8000ac8 <__aeabi_dcmpeq>
 800cfe0:	b110      	cbz	r0, 800cfe8 <_dtoa_r+0x6d8>
 800cfe2:	9b02      	ldr	r3, [sp, #8]
 800cfe4:	07d9      	lsls	r1, r3, #31
 800cfe6:	d40f      	bmi.n	800d008 <_dtoa_r+0x6f8>
 800cfe8:	4620      	mov	r0, r4
 800cfea:	4659      	mov	r1, fp
 800cfec:	f000 fad6 	bl	800d59c <_Bfree>
 800cff0:	2300      	movs	r3, #0
 800cff2:	702b      	strb	r3, [r5, #0]
 800cff4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cff6:	f10a 0001 	add.w	r0, sl, #1
 800cffa:	6018      	str	r0, [r3, #0]
 800cffc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cffe:	2b00      	cmp	r3, #0
 800d000:	f43f acd8 	beq.w	800c9b4 <_dtoa_r+0xa4>
 800d004:	601d      	str	r5, [r3, #0]
 800d006:	e4d5      	b.n	800c9b4 <_dtoa_r+0xa4>
 800d008:	f8cd a01c 	str.w	sl, [sp, #28]
 800d00c:	462b      	mov	r3, r5
 800d00e:	461d      	mov	r5, r3
 800d010:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d014:	2a39      	cmp	r2, #57	; 0x39
 800d016:	d108      	bne.n	800d02a <_dtoa_r+0x71a>
 800d018:	9a00      	ldr	r2, [sp, #0]
 800d01a:	429a      	cmp	r2, r3
 800d01c:	d1f7      	bne.n	800d00e <_dtoa_r+0x6fe>
 800d01e:	9a07      	ldr	r2, [sp, #28]
 800d020:	9900      	ldr	r1, [sp, #0]
 800d022:	3201      	adds	r2, #1
 800d024:	9207      	str	r2, [sp, #28]
 800d026:	2230      	movs	r2, #48	; 0x30
 800d028:	700a      	strb	r2, [r1, #0]
 800d02a:	781a      	ldrb	r2, [r3, #0]
 800d02c:	3201      	adds	r2, #1
 800d02e:	701a      	strb	r2, [r3, #0]
 800d030:	e78c      	b.n	800cf4c <_dtoa_r+0x63c>
 800d032:	4b7f      	ldr	r3, [pc, #508]	; (800d230 <_dtoa_r+0x920>)
 800d034:	2200      	movs	r2, #0
 800d036:	f7f3 fadf 	bl	80005f8 <__aeabi_dmul>
 800d03a:	2200      	movs	r2, #0
 800d03c:	2300      	movs	r3, #0
 800d03e:	4606      	mov	r6, r0
 800d040:	460f      	mov	r7, r1
 800d042:	f7f3 fd41 	bl	8000ac8 <__aeabi_dcmpeq>
 800d046:	2800      	cmp	r0, #0
 800d048:	d09b      	beq.n	800cf82 <_dtoa_r+0x672>
 800d04a:	e7cd      	b.n	800cfe8 <_dtoa_r+0x6d8>
 800d04c:	9a08      	ldr	r2, [sp, #32]
 800d04e:	2a00      	cmp	r2, #0
 800d050:	f000 80c4 	beq.w	800d1dc <_dtoa_r+0x8cc>
 800d054:	9a05      	ldr	r2, [sp, #20]
 800d056:	2a01      	cmp	r2, #1
 800d058:	f300 80a8 	bgt.w	800d1ac <_dtoa_r+0x89c>
 800d05c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d05e:	2a00      	cmp	r2, #0
 800d060:	f000 80a0 	beq.w	800d1a4 <_dtoa_r+0x894>
 800d064:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d068:	9e06      	ldr	r6, [sp, #24]
 800d06a:	4645      	mov	r5, r8
 800d06c:	9a04      	ldr	r2, [sp, #16]
 800d06e:	2101      	movs	r1, #1
 800d070:	441a      	add	r2, r3
 800d072:	4620      	mov	r0, r4
 800d074:	4498      	add	r8, r3
 800d076:	9204      	str	r2, [sp, #16]
 800d078:	f000 fb4c 	bl	800d714 <__i2b>
 800d07c:	4607      	mov	r7, r0
 800d07e:	2d00      	cmp	r5, #0
 800d080:	dd0b      	ble.n	800d09a <_dtoa_r+0x78a>
 800d082:	9b04      	ldr	r3, [sp, #16]
 800d084:	2b00      	cmp	r3, #0
 800d086:	dd08      	ble.n	800d09a <_dtoa_r+0x78a>
 800d088:	42ab      	cmp	r3, r5
 800d08a:	9a04      	ldr	r2, [sp, #16]
 800d08c:	bfa8      	it	ge
 800d08e:	462b      	movge	r3, r5
 800d090:	eba8 0803 	sub.w	r8, r8, r3
 800d094:	1aed      	subs	r5, r5, r3
 800d096:	1ad3      	subs	r3, r2, r3
 800d098:	9304      	str	r3, [sp, #16]
 800d09a:	9b06      	ldr	r3, [sp, #24]
 800d09c:	b1fb      	cbz	r3, 800d0de <_dtoa_r+0x7ce>
 800d09e:	9b08      	ldr	r3, [sp, #32]
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	f000 809f 	beq.w	800d1e4 <_dtoa_r+0x8d4>
 800d0a6:	2e00      	cmp	r6, #0
 800d0a8:	dd11      	ble.n	800d0ce <_dtoa_r+0x7be>
 800d0aa:	4639      	mov	r1, r7
 800d0ac:	4632      	mov	r2, r6
 800d0ae:	4620      	mov	r0, r4
 800d0b0:	f000 fbec 	bl	800d88c <__pow5mult>
 800d0b4:	465a      	mov	r2, fp
 800d0b6:	4601      	mov	r1, r0
 800d0b8:	4607      	mov	r7, r0
 800d0ba:	4620      	mov	r0, r4
 800d0bc:	f000 fb40 	bl	800d740 <__multiply>
 800d0c0:	4659      	mov	r1, fp
 800d0c2:	9007      	str	r0, [sp, #28]
 800d0c4:	4620      	mov	r0, r4
 800d0c6:	f000 fa69 	bl	800d59c <_Bfree>
 800d0ca:	9b07      	ldr	r3, [sp, #28]
 800d0cc:	469b      	mov	fp, r3
 800d0ce:	9b06      	ldr	r3, [sp, #24]
 800d0d0:	1b9a      	subs	r2, r3, r6
 800d0d2:	d004      	beq.n	800d0de <_dtoa_r+0x7ce>
 800d0d4:	4659      	mov	r1, fp
 800d0d6:	4620      	mov	r0, r4
 800d0d8:	f000 fbd8 	bl	800d88c <__pow5mult>
 800d0dc:	4683      	mov	fp, r0
 800d0de:	2101      	movs	r1, #1
 800d0e0:	4620      	mov	r0, r4
 800d0e2:	f000 fb17 	bl	800d714 <__i2b>
 800d0e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	4606      	mov	r6, r0
 800d0ec:	dd7c      	ble.n	800d1e8 <_dtoa_r+0x8d8>
 800d0ee:	461a      	mov	r2, r3
 800d0f0:	4601      	mov	r1, r0
 800d0f2:	4620      	mov	r0, r4
 800d0f4:	f000 fbca 	bl	800d88c <__pow5mult>
 800d0f8:	9b05      	ldr	r3, [sp, #20]
 800d0fa:	2b01      	cmp	r3, #1
 800d0fc:	4606      	mov	r6, r0
 800d0fe:	dd76      	ble.n	800d1ee <_dtoa_r+0x8de>
 800d100:	2300      	movs	r3, #0
 800d102:	9306      	str	r3, [sp, #24]
 800d104:	6933      	ldr	r3, [r6, #16]
 800d106:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800d10a:	6918      	ldr	r0, [r3, #16]
 800d10c:	f000 fab2 	bl	800d674 <__hi0bits>
 800d110:	f1c0 0020 	rsb	r0, r0, #32
 800d114:	9b04      	ldr	r3, [sp, #16]
 800d116:	4418      	add	r0, r3
 800d118:	f010 001f 	ands.w	r0, r0, #31
 800d11c:	f000 8086 	beq.w	800d22c <_dtoa_r+0x91c>
 800d120:	f1c0 0320 	rsb	r3, r0, #32
 800d124:	2b04      	cmp	r3, #4
 800d126:	dd7f      	ble.n	800d228 <_dtoa_r+0x918>
 800d128:	f1c0 001c 	rsb	r0, r0, #28
 800d12c:	9b04      	ldr	r3, [sp, #16]
 800d12e:	4403      	add	r3, r0
 800d130:	4480      	add	r8, r0
 800d132:	4405      	add	r5, r0
 800d134:	9304      	str	r3, [sp, #16]
 800d136:	f1b8 0f00 	cmp.w	r8, #0
 800d13a:	dd05      	ble.n	800d148 <_dtoa_r+0x838>
 800d13c:	4659      	mov	r1, fp
 800d13e:	4642      	mov	r2, r8
 800d140:	4620      	mov	r0, r4
 800d142:	f000 fbfd 	bl	800d940 <__lshift>
 800d146:	4683      	mov	fp, r0
 800d148:	9b04      	ldr	r3, [sp, #16]
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	dd05      	ble.n	800d15a <_dtoa_r+0x84a>
 800d14e:	4631      	mov	r1, r6
 800d150:	461a      	mov	r2, r3
 800d152:	4620      	mov	r0, r4
 800d154:	f000 fbf4 	bl	800d940 <__lshift>
 800d158:	4606      	mov	r6, r0
 800d15a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d069      	beq.n	800d234 <_dtoa_r+0x924>
 800d160:	4631      	mov	r1, r6
 800d162:	4658      	mov	r0, fp
 800d164:	f000 fc58 	bl	800da18 <__mcmp>
 800d168:	2800      	cmp	r0, #0
 800d16a:	da63      	bge.n	800d234 <_dtoa_r+0x924>
 800d16c:	2300      	movs	r3, #0
 800d16e:	4659      	mov	r1, fp
 800d170:	220a      	movs	r2, #10
 800d172:	4620      	mov	r0, r4
 800d174:	f000 fa34 	bl	800d5e0 <__multadd>
 800d178:	9b08      	ldr	r3, [sp, #32]
 800d17a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d17e:	4683      	mov	fp, r0
 800d180:	2b00      	cmp	r3, #0
 800d182:	f000 818f 	beq.w	800d4a4 <_dtoa_r+0xb94>
 800d186:	4639      	mov	r1, r7
 800d188:	2300      	movs	r3, #0
 800d18a:	220a      	movs	r2, #10
 800d18c:	4620      	mov	r0, r4
 800d18e:	f000 fa27 	bl	800d5e0 <__multadd>
 800d192:	f1b9 0f00 	cmp.w	r9, #0
 800d196:	4607      	mov	r7, r0
 800d198:	f300 808e 	bgt.w	800d2b8 <_dtoa_r+0x9a8>
 800d19c:	9b05      	ldr	r3, [sp, #20]
 800d19e:	2b02      	cmp	r3, #2
 800d1a0:	dc50      	bgt.n	800d244 <_dtoa_r+0x934>
 800d1a2:	e089      	b.n	800d2b8 <_dtoa_r+0x9a8>
 800d1a4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d1a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d1aa:	e75d      	b.n	800d068 <_dtoa_r+0x758>
 800d1ac:	9b01      	ldr	r3, [sp, #4]
 800d1ae:	1e5e      	subs	r6, r3, #1
 800d1b0:	9b06      	ldr	r3, [sp, #24]
 800d1b2:	42b3      	cmp	r3, r6
 800d1b4:	bfbf      	itttt	lt
 800d1b6:	9b06      	ldrlt	r3, [sp, #24]
 800d1b8:	9606      	strlt	r6, [sp, #24]
 800d1ba:	1af2      	sublt	r2, r6, r3
 800d1bc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800d1be:	bfb6      	itet	lt
 800d1c0:	189b      	addlt	r3, r3, r2
 800d1c2:	1b9e      	subge	r6, r3, r6
 800d1c4:	930d      	strlt	r3, [sp, #52]	; 0x34
 800d1c6:	9b01      	ldr	r3, [sp, #4]
 800d1c8:	bfb8      	it	lt
 800d1ca:	2600      	movlt	r6, #0
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	bfb5      	itete	lt
 800d1d0:	eba8 0503 	sublt.w	r5, r8, r3
 800d1d4:	9b01      	ldrge	r3, [sp, #4]
 800d1d6:	2300      	movlt	r3, #0
 800d1d8:	4645      	movge	r5, r8
 800d1da:	e747      	b.n	800d06c <_dtoa_r+0x75c>
 800d1dc:	9e06      	ldr	r6, [sp, #24]
 800d1de:	9f08      	ldr	r7, [sp, #32]
 800d1e0:	4645      	mov	r5, r8
 800d1e2:	e74c      	b.n	800d07e <_dtoa_r+0x76e>
 800d1e4:	9a06      	ldr	r2, [sp, #24]
 800d1e6:	e775      	b.n	800d0d4 <_dtoa_r+0x7c4>
 800d1e8:	9b05      	ldr	r3, [sp, #20]
 800d1ea:	2b01      	cmp	r3, #1
 800d1ec:	dc18      	bgt.n	800d220 <_dtoa_r+0x910>
 800d1ee:	9b02      	ldr	r3, [sp, #8]
 800d1f0:	b9b3      	cbnz	r3, 800d220 <_dtoa_r+0x910>
 800d1f2:	9b03      	ldr	r3, [sp, #12]
 800d1f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d1f8:	b9a3      	cbnz	r3, 800d224 <_dtoa_r+0x914>
 800d1fa:	9b03      	ldr	r3, [sp, #12]
 800d1fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d200:	0d1b      	lsrs	r3, r3, #20
 800d202:	051b      	lsls	r3, r3, #20
 800d204:	b12b      	cbz	r3, 800d212 <_dtoa_r+0x902>
 800d206:	9b04      	ldr	r3, [sp, #16]
 800d208:	3301      	adds	r3, #1
 800d20a:	9304      	str	r3, [sp, #16]
 800d20c:	f108 0801 	add.w	r8, r8, #1
 800d210:	2301      	movs	r3, #1
 800d212:	9306      	str	r3, [sp, #24]
 800d214:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d216:	2b00      	cmp	r3, #0
 800d218:	f47f af74 	bne.w	800d104 <_dtoa_r+0x7f4>
 800d21c:	2001      	movs	r0, #1
 800d21e:	e779      	b.n	800d114 <_dtoa_r+0x804>
 800d220:	2300      	movs	r3, #0
 800d222:	e7f6      	b.n	800d212 <_dtoa_r+0x902>
 800d224:	9b02      	ldr	r3, [sp, #8]
 800d226:	e7f4      	b.n	800d212 <_dtoa_r+0x902>
 800d228:	d085      	beq.n	800d136 <_dtoa_r+0x826>
 800d22a:	4618      	mov	r0, r3
 800d22c:	301c      	adds	r0, #28
 800d22e:	e77d      	b.n	800d12c <_dtoa_r+0x81c>
 800d230:	40240000 	.word	0x40240000
 800d234:	9b01      	ldr	r3, [sp, #4]
 800d236:	2b00      	cmp	r3, #0
 800d238:	dc38      	bgt.n	800d2ac <_dtoa_r+0x99c>
 800d23a:	9b05      	ldr	r3, [sp, #20]
 800d23c:	2b02      	cmp	r3, #2
 800d23e:	dd35      	ble.n	800d2ac <_dtoa_r+0x99c>
 800d240:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800d244:	f1b9 0f00 	cmp.w	r9, #0
 800d248:	d10d      	bne.n	800d266 <_dtoa_r+0x956>
 800d24a:	4631      	mov	r1, r6
 800d24c:	464b      	mov	r3, r9
 800d24e:	2205      	movs	r2, #5
 800d250:	4620      	mov	r0, r4
 800d252:	f000 f9c5 	bl	800d5e0 <__multadd>
 800d256:	4601      	mov	r1, r0
 800d258:	4606      	mov	r6, r0
 800d25a:	4658      	mov	r0, fp
 800d25c:	f000 fbdc 	bl	800da18 <__mcmp>
 800d260:	2800      	cmp	r0, #0
 800d262:	f73f adbd 	bgt.w	800cde0 <_dtoa_r+0x4d0>
 800d266:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d268:	9d00      	ldr	r5, [sp, #0]
 800d26a:	ea6f 0a03 	mvn.w	sl, r3
 800d26e:	f04f 0800 	mov.w	r8, #0
 800d272:	4631      	mov	r1, r6
 800d274:	4620      	mov	r0, r4
 800d276:	f000 f991 	bl	800d59c <_Bfree>
 800d27a:	2f00      	cmp	r7, #0
 800d27c:	f43f aeb4 	beq.w	800cfe8 <_dtoa_r+0x6d8>
 800d280:	f1b8 0f00 	cmp.w	r8, #0
 800d284:	d005      	beq.n	800d292 <_dtoa_r+0x982>
 800d286:	45b8      	cmp	r8, r7
 800d288:	d003      	beq.n	800d292 <_dtoa_r+0x982>
 800d28a:	4641      	mov	r1, r8
 800d28c:	4620      	mov	r0, r4
 800d28e:	f000 f985 	bl	800d59c <_Bfree>
 800d292:	4639      	mov	r1, r7
 800d294:	4620      	mov	r0, r4
 800d296:	f000 f981 	bl	800d59c <_Bfree>
 800d29a:	e6a5      	b.n	800cfe8 <_dtoa_r+0x6d8>
 800d29c:	2600      	movs	r6, #0
 800d29e:	4637      	mov	r7, r6
 800d2a0:	e7e1      	b.n	800d266 <_dtoa_r+0x956>
 800d2a2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800d2a4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800d2a8:	4637      	mov	r7, r6
 800d2aa:	e599      	b.n	800cde0 <_dtoa_r+0x4d0>
 800d2ac:	9b08      	ldr	r3, [sp, #32]
 800d2ae:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	f000 80fd 	beq.w	800d4b2 <_dtoa_r+0xba2>
 800d2b8:	2d00      	cmp	r5, #0
 800d2ba:	dd05      	ble.n	800d2c8 <_dtoa_r+0x9b8>
 800d2bc:	4639      	mov	r1, r7
 800d2be:	462a      	mov	r2, r5
 800d2c0:	4620      	mov	r0, r4
 800d2c2:	f000 fb3d 	bl	800d940 <__lshift>
 800d2c6:	4607      	mov	r7, r0
 800d2c8:	9b06      	ldr	r3, [sp, #24]
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d05c      	beq.n	800d388 <_dtoa_r+0xa78>
 800d2ce:	6879      	ldr	r1, [r7, #4]
 800d2d0:	4620      	mov	r0, r4
 800d2d2:	f000 f923 	bl	800d51c <_Balloc>
 800d2d6:	4605      	mov	r5, r0
 800d2d8:	b928      	cbnz	r0, 800d2e6 <_dtoa_r+0x9d6>
 800d2da:	4b80      	ldr	r3, [pc, #512]	; (800d4dc <_dtoa_r+0xbcc>)
 800d2dc:	4602      	mov	r2, r0
 800d2de:	f240 21ea 	movw	r1, #746	; 0x2ea
 800d2e2:	f7ff bb2e 	b.w	800c942 <_dtoa_r+0x32>
 800d2e6:	693a      	ldr	r2, [r7, #16]
 800d2e8:	3202      	adds	r2, #2
 800d2ea:	0092      	lsls	r2, r2, #2
 800d2ec:	f107 010c 	add.w	r1, r7, #12
 800d2f0:	300c      	adds	r0, #12
 800d2f2:	f000 f905 	bl	800d500 <memcpy>
 800d2f6:	2201      	movs	r2, #1
 800d2f8:	4629      	mov	r1, r5
 800d2fa:	4620      	mov	r0, r4
 800d2fc:	f000 fb20 	bl	800d940 <__lshift>
 800d300:	9b00      	ldr	r3, [sp, #0]
 800d302:	3301      	adds	r3, #1
 800d304:	9301      	str	r3, [sp, #4]
 800d306:	9b00      	ldr	r3, [sp, #0]
 800d308:	444b      	add	r3, r9
 800d30a:	9307      	str	r3, [sp, #28]
 800d30c:	9b02      	ldr	r3, [sp, #8]
 800d30e:	f003 0301 	and.w	r3, r3, #1
 800d312:	46b8      	mov	r8, r7
 800d314:	9306      	str	r3, [sp, #24]
 800d316:	4607      	mov	r7, r0
 800d318:	9b01      	ldr	r3, [sp, #4]
 800d31a:	4631      	mov	r1, r6
 800d31c:	3b01      	subs	r3, #1
 800d31e:	4658      	mov	r0, fp
 800d320:	9302      	str	r3, [sp, #8]
 800d322:	f7ff fa67 	bl	800c7f4 <quorem>
 800d326:	4603      	mov	r3, r0
 800d328:	3330      	adds	r3, #48	; 0x30
 800d32a:	9004      	str	r0, [sp, #16]
 800d32c:	4641      	mov	r1, r8
 800d32e:	4658      	mov	r0, fp
 800d330:	9308      	str	r3, [sp, #32]
 800d332:	f000 fb71 	bl	800da18 <__mcmp>
 800d336:	463a      	mov	r2, r7
 800d338:	4681      	mov	r9, r0
 800d33a:	4631      	mov	r1, r6
 800d33c:	4620      	mov	r0, r4
 800d33e:	f000 fb87 	bl	800da50 <__mdiff>
 800d342:	68c2      	ldr	r2, [r0, #12]
 800d344:	9b08      	ldr	r3, [sp, #32]
 800d346:	4605      	mov	r5, r0
 800d348:	bb02      	cbnz	r2, 800d38c <_dtoa_r+0xa7c>
 800d34a:	4601      	mov	r1, r0
 800d34c:	4658      	mov	r0, fp
 800d34e:	f000 fb63 	bl	800da18 <__mcmp>
 800d352:	9b08      	ldr	r3, [sp, #32]
 800d354:	4602      	mov	r2, r0
 800d356:	4629      	mov	r1, r5
 800d358:	4620      	mov	r0, r4
 800d35a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800d35e:	f000 f91d 	bl	800d59c <_Bfree>
 800d362:	9b05      	ldr	r3, [sp, #20]
 800d364:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d366:	9d01      	ldr	r5, [sp, #4]
 800d368:	ea43 0102 	orr.w	r1, r3, r2
 800d36c:	9b06      	ldr	r3, [sp, #24]
 800d36e:	430b      	orrs	r3, r1
 800d370:	9b08      	ldr	r3, [sp, #32]
 800d372:	d10d      	bne.n	800d390 <_dtoa_r+0xa80>
 800d374:	2b39      	cmp	r3, #57	; 0x39
 800d376:	d029      	beq.n	800d3cc <_dtoa_r+0xabc>
 800d378:	f1b9 0f00 	cmp.w	r9, #0
 800d37c:	dd01      	ble.n	800d382 <_dtoa_r+0xa72>
 800d37e:	9b04      	ldr	r3, [sp, #16]
 800d380:	3331      	adds	r3, #49	; 0x31
 800d382:	9a02      	ldr	r2, [sp, #8]
 800d384:	7013      	strb	r3, [r2, #0]
 800d386:	e774      	b.n	800d272 <_dtoa_r+0x962>
 800d388:	4638      	mov	r0, r7
 800d38a:	e7b9      	b.n	800d300 <_dtoa_r+0x9f0>
 800d38c:	2201      	movs	r2, #1
 800d38e:	e7e2      	b.n	800d356 <_dtoa_r+0xa46>
 800d390:	f1b9 0f00 	cmp.w	r9, #0
 800d394:	db06      	blt.n	800d3a4 <_dtoa_r+0xa94>
 800d396:	9905      	ldr	r1, [sp, #20]
 800d398:	ea41 0909 	orr.w	r9, r1, r9
 800d39c:	9906      	ldr	r1, [sp, #24]
 800d39e:	ea59 0101 	orrs.w	r1, r9, r1
 800d3a2:	d120      	bne.n	800d3e6 <_dtoa_r+0xad6>
 800d3a4:	2a00      	cmp	r2, #0
 800d3a6:	ddec      	ble.n	800d382 <_dtoa_r+0xa72>
 800d3a8:	4659      	mov	r1, fp
 800d3aa:	2201      	movs	r2, #1
 800d3ac:	4620      	mov	r0, r4
 800d3ae:	9301      	str	r3, [sp, #4]
 800d3b0:	f000 fac6 	bl	800d940 <__lshift>
 800d3b4:	4631      	mov	r1, r6
 800d3b6:	4683      	mov	fp, r0
 800d3b8:	f000 fb2e 	bl	800da18 <__mcmp>
 800d3bc:	2800      	cmp	r0, #0
 800d3be:	9b01      	ldr	r3, [sp, #4]
 800d3c0:	dc02      	bgt.n	800d3c8 <_dtoa_r+0xab8>
 800d3c2:	d1de      	bne.n	800d382 <_dtoa_r+0xa72>
 800d3c4:	07da      	lsls	r2, r3, #31
 800d3c6:	d5dc      	bpl.n	800d382 <_dtoa_r+0xa72>
 800d3c8:	2b39      	cmp	r3, #57	; 0x39
 800d3ca:	d1d8      	bne.n	800d37e <_dtoa_r+0xa6e>
 800d3cc:	9a02      	ldr	r2, [sp, #8]
 800d3ce:	2339      	movs	r3, #57	; 0x39
 800d3d0:	7013      	strb	r3, [r2, #0]
 800d3d2:	462b      	mov	r3, r5
 800d3d4:	461d      	mov	r5, r3
 800d3d6:	3b01      	subs	r3, #1
 800d3d8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d3dc:	2a39      	cmp	r2, #57	; 0x39
 800d3de:	d050      	beq.n	800d482 <_dtoa_r+0xb72>
 800d3e0:	3201      	adds	r2, #1
 800d3e2:	701a      	strb	r2, [r3, #0]
 800d3e4:	e745      	b.n	800d272 <_dtoa_r+0x962>
 800d3e6:	2a00      	cmp	r2, #0
 800d3e8:	dd03      	ble.n	800d3f2 <_dtoa_r+0xae2>
 800d3ea:	2b39      	cmp	r3, #57	; 0x39
 800d3ec:	d0ee      	beq.n	800d3cc <_dtoa_r+0xabc>
 800d3ee:	3301      	adds	r3, #1
 800d3f0:	e7c7      	b.n	800d382 <_dtoa_r+0xa72>
 800d3f2:	9a01      	ldr	r2, [sp, #4]
 800d3f4:	9907      	ldr	r1, [sp, #28]
 800d3f6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800d3fa:	428a      	cmp	r2, r1
 800d3fc:	d02a      	beq.n	800d454 <_dtoa_r+0xb44>
 800d3fe:	4659      	mov	r1, fp
 800d400:	2300      	movs	r3, #0
 800d402:	220a      	movs	r2, #10
 800d404:	4620      	mov	r0, r4
 800d406:	f000 f8eb 	bl	800d5e0 <__multadd>
 800d40a:	45b8      	cmp	r8, r7
 800d40c:	4683      	mov	fp, r0
 800d40e:	f04f 0300 	mov.w	r3, #0
 800d412:	f04f 020a 	mov.w	r2, #10
 800d416:	4641      	mov	r1, r8
 800d418:	4620      	mov	r0, r4
 800d41a:	d107      	bne.n	800d42c <_dtoa_r+0xb1c>
 800d41c:	f000 f8e0 	bl	800d5e0 <__multadd>
 800d420:	4680      	mov	r8, r0
 800d422:	4607      	mov	r7, r0
 800d424:	9b01      	ldr	r3, [sp, #4]
 800d426:	3301      	adds	r3, #1
 800d428:	9301      	str	r3, [sp, #4]
 800d42a:	e775      	b.n	800d318 <_dtoa_r+0xa08>
 800d42c:	f000 f8d8 	bl	800d5e0 <__multadd>
 800d430:	4639      	mov	r1, r7
 800d432:	4680      	mov	r8, r0
 800d434:	2300      	movs	r3, #0
 800d436:	220a      	movs	r2, #10
 800d438:	4620      	mov	r0, r4
 800d43a:	f000 f8d1 	bl	800d5e0 <__multadd>
 800d43e:	4607      	mov	r7, r0
 800d440:	e7f0      	b.n	800d424 <_dtoa_r+0xb14>
 800d442:	f1b9 0f00 	cmp.w	r9, #0
 800d446:	9a00      	ldr	r2, [sp, #0]
 800d448:	bfcc      	ite	gt
 800d44a:	464d      	movgt	r5, r9
 800d44c:	2501      	movle	r5, #1
 800d44e:	4415      	add	r5, r2
 800d450:	f04f 0800 	mov.w	r8, #0
 800d454:	4659      	mov	r1, fp
 800d456:	2201      	movs	r2, #1
 800d458:	4620      	mov	r0, r4
 800d45a:	9301      	str	r3, [sp, #4]
 800d45c:	f000 fa70 	bl	800d940 <__lshift>
 800d460:	4631      	mov	r1, r6
 800d462:	4683      	mov	fp, r0
 800d464:	f000 fad8 	bl	800da18 <__mcmp>
 800d468:	2800      	cmp	r0, #0
 800d46a:	dcb2      	bgt.n	800d3d2 <_dtoa_r+0xac2>
 800d46c:	d102      	bne.n	800d474 <_dtoa_r+0xb64>
 800d46e:	9b01      	ldr	r3, [sp, #4]
 800d470:	07db      	lsls	r3, r3, #31
 800d472:	d4ae      	bmi.n	800d3d2 <_dtoa_r+0xac2>
 800d474:	462b      	mov	r3, r5
 800d476:	461d      	mov	r5, r3
 800d478:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d47c:	2a30      	cmp	r2, #48	; 0x30
 800d47e:	d0fa      	beq.n	800d476 <_dtoa_r+0xb66>
 800d480:	e6f7      	b.n	800d272 <_dtoa_r+0x962>
 800d482:	9a00      	ldr	r2, [sp, #0]
 800d484:	429a      	cmp	r2, r3
 800d486:	d1a5      	bne.n	800d3d4 <_dtoa_r+0xac4>
 800d488:	f10a 0a01 	add.w	sl, sl, #1
 800d48c:	2331      	movs	r3, #49	; 0x31
 800d48e:	e779      	b.n	800d384 <_dtoa_r+0xa74>
 800d490:	4b13      	ldr	r3, [pc, #76]	; (800d4e0 <_dtoa_r+0xbd0>)
 800d492:	f7ff baaf 	b.w	800c9f4 <_dtoa_r+0xe4>
 800d496:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d498:	2b00      	cmp	r3, #0
 800d49a:	f47f aa86 	bne.w	800c9aa <_dtoa_r+0x9a>
 800d49e:	4b11      	ldr	r3, [pc, #68]	; (800d4e4 <_dtoa_r+0xbd4>)
 800d4a0:	f7ff baa8 	b.w	800c9f4 <_dtoa_r+0xe4>
 800d4a4:	f1b9 0f00 	cmp.w	r9, #0
 800d4a8:	dc03      	bgt.n	800d4b2 <_dtoa_r+0xba2>
 800d4aa:	9b05      	ldr	r3, [sp, #20]
 800d4ac:	2b02      	cmp	r3, #2
 800d4ae:	f73f aec9 	bgt.w	800d244 <_dtoa_r+0x934>
 800d4b2:	9d00      	ldr	r5, [sp, #0]
 800d4b4:	4631      	mov	r1, r6
 800d4b6:	4658      	mov	r0, fp
 800d4b8:	f7ff f99c 	bl	800c7f4 <quorem>
 800d4bc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800d4c0:	f805 3b01 	strb.w	r3, [r5], #1
 800d4c4:	9a00      	ldr	r2, [sp, #0]
 800d4c6:	1aaa      	subs	r2, r5, r2
 800d4c8:	4591      	cmp	r9, r2
 800d4ca:	ddba      	ble.n	800d442 <_dtoa_r+0xb32>
 800d4cc:	4659      	mov	r1, fp
 800d4ce:	2300      	movs	r3, #0
 800d4d0:	220a      	movs	r2, #10
 800d4d2:	4620      	mov	r0, r4
 800d4d4:	f000 f884 	bl	800d5e0 <__multadd>
 800d4d8:	4683      	mov	fp, r0
 800d4da:	e7eb      	b.n	800d4b4 <_dtoa_r+0xba4>
 800d4dc:	0800f2e3 	.word	0x0800f2e3
 800d4e0:	0800f23c 	.word	0x0800f23c
 800d4e4:	0800f260 	.word	0x0800f260

0800d4e8 <_localeconv_r>:
 800d4e8:	4800      	ldr	r0, [pc, #0]	; (800d4ec <_localeconv_r+0x4>)
 800d4ea:	4770      	bx	lr
 800d4ec:	200002dc 	.word	0x200002dc

0800d4f0 <malloc>:
 800d4f0:	4b02      	ldr	r3, [pc, #8]	; (800d4fc <malloc+0xc>)
 800d4f2:	4601      	mov	r1, r0
 800d4f4:	6818      	ldr	r0, [r3, #0]
 800d4f6:	f000 bbef 	b.w	800dcd8 <_malloc_r>
 800d4fa:	bf00      	nop
 800d4fc:	20000188 	.word	0x20000188

0800d500 <memcpy>:
 800d500:	440a      	add	r2, r1
 800d502:	4291      	cmp	r1, r2
 800d504:	f100 33ff 	add.w	r3, r0, #4294967295
 800d508:	d100      	bne.n	800d50c <memcpy+0xc>
 800d50a:	4770      	bx	lr
 800d50c:	b510      	push	{r4, lr}
 800d50e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d512:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d516:	4291      	cmp	r1, r2
 800d518:	d1f9      	bne.n	800d50e <memcpy+0xe>
 800d51a:	bd10      	pop	{r4, pc}

0800d51c <_Balloc>:
 800d51c:	b570      	push	{r4, r5, r6, lr}
 800d51e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d520:	4604      	mov	r4, r0
 800d522:	460d      	mov	r5, r1
 800d524:	b976      	cbnz	r6, 800d544 <_Balloc+0x28>
 800d526:	2010      	movs	r0, #16
 800d528:	f7ff ffe2 	bl	800d4f0 <malloc>
 800d52c:	4602      	mov	r2, r0
 800d52e:	6260      	str	r0, [r4, #36]	; 0x24
 800d530:	b920      	cbnz	r0, 800d53c <_Balloc+0x20>
 800d532:	4b18      	ldr	r3, [pc, #96]	; (800d594 <_Balloc+0x78>)
 800d534:	4818      	ldr	r0, [pc, #96]	; (800d598 <_Balloc+0x7c>)
 800d536:	2166      	movs	r1, #102	; 0x66
 800d538:	f000 fc38 	bl	800ddac <__assert_func>
 800d53c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d540:	6006      	str	r6, [r0, #0]
 800d542:	60c6      	str	r6, [r0, #12]
 800d544:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d546:	68f3      	ldr	r3, [r6, #12]
 800d548:	b183      	cbz	r3, 800d56c <_Balloc+0x50>
 800d54a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d54c:	68db      	ldr	r3, [r3, #12]
 800d54e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d552:	b9b8      	cbnz	r0, 800d584 <_Balloc+0x68>
 800d554:	2101      	movs	r1, #1
 800d556:	fa01 f605 	lsl.w	r6, r1, r5
 800d55a:	1d72      	adds	r2, r6, #5
 800d55c:	0092      	lsls	r2, r2, #2
 800d55e:	4620      	mov	r0, r4
 800d560:	f000 fb5a 	bl	800dc18 <_calloc_r>
 800d564:	b160      	cbz	r0, 800d580 <_Balloc+0x64>
 800d566:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d56a:	e00e      	b.n	800d58a <_Balloc+0x6e>
 800d56c:	2221      	movs	r2, #33	; 0x21
 800d56e:	2104      	movs	r1, #4
 800d570:	4620      	mov	r0, r4
 800d572:	f000 fb51 	bl	800dc18 <_calloc_r>
 800d576:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d578:	60f0      	str	r0, [r6, #12]
 800d57a:	68db      	ldr	r3, [r3, #12]
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d1e4      	bne.n	800d54a <_Balloc+0x2e>
 800d580:	2000      	movs	r0, #0
 800d582:	bd70      	pop	{r4, r5, r6, pc}
 800d584:	6802      	ldr	r2, [r0, #0]
 800d586:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d58a:	2300      	movs	r3, #0
 800d58c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d590:	e7f7      	b.n	800d582 <_Balloc+0x66>
 800d592:	bf00      	nop
 800d594:	0800f26d 	.word	0x0800f26d
 800d598:	0800f2f4 	.word	0x0800f2f4

0800d59c <_Bfree>:
 800d59c:	b570      	push	{r4, r5, r6, lr}
 800d59e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d5a0:	4605      	mov	r5, r0
 800d5a2:	460c      	mov	r4, r1
 800d5a4:	b976      	cbnz	r6, 800d5c4 <_Bfree+0x28>
 800d5a6:	2010      	movs	r0, #16
 800d5a8:	f7ff ffa2 	bl	800d4f0 <malloc>
 800d5ac:	4602      	mov	r2, r0
 800d5ae:	6268      	str	r0, [r5, #36]	; 0x24
 800d5b0:	b920      	cbnz	r0, 800d5bc <_Bfree+0x20>
 800d5b2:	4b09      	ldr	r3, [pc, #36]	; (800d5d8 <_Bfree+0x3c>)
 800d5b4:	4809      	ldr	r0, [pc, #36]	; (800d5dc <_Bfree+0x40>)
 800d5b6:	218a      	movs	r1, #138	; 0x8a
 800d5b8:	f000 fbf8 	bl	800ddac <__assert_func>
 800d5bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d5c0:	6006      	str	r6, [r0, #0]
 800d5c2:	60c6      	str	r6, [r0, #12]
 800d5c4:	b13c      	cbz	r4, 800d5d6 <_Bfree+0x3a>
 800d5c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d5c8:	6862      	ldr	r2, [r4, #4]
 800d5ca:	68db      	ldr	r3, [r3, #12]
 800d5cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d5d0:	6021      	str	r1, [r4, #0]
 800d5d2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d5d6:	bd70      	pop	{r4, r5, r6, pc}
 800d5d8:	0800f26d 	.word	0x0800f26d
 800d5dc:	0800f2f4 	.word	0x0800f2f4

0800d5e0 <__multadd>:
 800d5e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5e4:	690e      	ldr	r6, [r1, #16]
 800d5e6:	4607      	mov	r7, r0
 800d5e8:	4698      	mov	r8, r3
 800d5ea:	460c      	mov	r4, r1
 800d5ec:	f101 0014 	add.w	r0, r1, #20
 800d5f0:	2300      	movs	r3, #0
 800d5f2:	6805      	ldr	r5, [r0, #0]
 800d5f4:	b2a9      	uxth	r1, r5
 800d5f6:	fb02 8101 	mla	r1, r2, r1, r8
 800d5fa:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800d5fe:	0c2d      	lsrs	r5, r5, #16
 800d600:	fb02 c505 	mla	r5, r2, r5, ip
 800d604:	b289      	uxth	r1, r1
 800d606:	3301      	adds	r3, #1
 800d608:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800d60c:	429e      	cmp	r6, r3
 800d60e:	f840 1b04 	str.w	r1, [r0], #4
 800d612:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800d616:	dcec      	bgt.n	800d5f2 <__multadd+0x12>
 800d618:	f1b8 0f00 	cmp.w	r8, #0
 800d61c:	d022      	beq.n	800d664 <__multadd+0x84>
 800d61e:	68a3      	ldr	r3, [r4, #8]
 800d620:	42b3      	cmp	r3, r6
 800d622:	dc19      	bgt.n	800d658 <__multadd+0x78>
 800d624:	6861      	ldr	r1, [r4, #4]
 800d626:	4638      	mov	r0, r7
 800d628:	3101      	adds	r1, #1
 800d62a:	f7ff ff77 	bl	800d51c <_Balloc>
 800d62e:	4605      	mov	r5, r0
 800d630:	b928      	cbnz	r0, 800d63e <__multadd+0x5e>
 800d632:	4602      	mov	r2, r0
 800d634:	4b0d      	ldr	r3, [pc, #52]	; (800d66c <__multadd+0x8c>)
 800d636:	480e      	ldr	r0, [pc, #56]	; (800d670 <__multadd+0x90>)
 800d638:	21b5      	movs	r1, #181	; 0xb5
 800d63a:	f000 fbb7 	bl	800ddac <__assert_func>
 800d63e:	6922      	ldr	r2, [r4, #16]
 800d640:	3202      	adds	r2, #2
 800d642:	f104 010c 	add.w	r1, r4, #12
 800d646:	0092      	lsls	r2, r2, #2
 800d648:	300c      	adds	r0, #12
 800d64a:	f7ff ff59 	bl	800d500 <memcpy>
 800d64e:	4621      	mov	r1, r4
 800d650:	4638      	mov	r0, r7
 800d652:	f7ff ffa3 	bl	800d59c <_Bfree>
 800d656:	462c      	mov	r4, r5
 800d658:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800d65c:	3601      	adds	r6, #1
 800d65e:	f8c3 8014 	str.w	r8, [r3, #20]
 800d662:	6126      	str	r6, [r4, #16]
 800d664:	4620      	mov	r0, r4
 800d666:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d66a:	bf00      	nop
 800d66c:	0800f2e3 	.word	0x0800f2e3
 800d670:	0800f2f4 	.word	0x0800f2f4

0800d674 <__hi0bits>:
 800d674:	0c03      	lsrs	r3, r0, #16
 800d676:	041b      	lsls	r3, r3, #16
 800d678:	b9d3      	cbnz	r3, 800d6b0 <__hi0bits+0x3c>
 800d67a:	0400      	lsls	r0, r0, #16
 800d67c:	2310      	movs	r3, #16
 800d67e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d682:	bf04      	itt	eq
 800d684:	0200      	lsleq	r0, r0, #8
 800d686:	3308      	addeq	r3, #8
 800d688:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d68c:	bf04      	itt	eq
 800d68e:	0100      	lsleq	r0, r0, #4
 800d690:	3304      	addeq	r3, #4
 800d692:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d696:	bf04      	itt	eq
 800d698:	0080      	lsleq	r0, r0, #2
 800d69a:	3302      	addeq	r3, #2
 800d69c:	2800      	cmp	r0, #0
 800d69e:	db05      	blt.n	800d6ac <__hi0bits+0x38>
 800d6a0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d6a4:	f103 0301 	add.w	r3, r3, #1
 800d6a8:	bf08      	it	eq
 800d6aa:	2320      	moveq	r3, #32
 800d6ac:	4618      	mov	r0, r3
 800d6ae:	4770      	bx	lr
 800d6b0:	2300      	movs	r3, #0
 800d6b2:	e7e4      	b.n	800d67e <__hi0bits+0xa>

0800d6b4 <__lo0bits>:
 800d6b4:	6803      	ldr	r3, [r0, #0]
 800d6b6:	f013 0207 	ands.w	r2, r3, #7
 800d6ba:	4601      	mov	r1, r0
 800d6bc:	d00b      	beq.n	800d6d6 <__lo0bits+0x22>
 800d6be:	07da      	lsls	r2, r3, #31
 800d6c0:	d424      	bmi.n	800d70c <__lo0bits+0x58>
 800d6c2:	0798      	lsls	r0, r3, #30
 800d6c4:	bf49      	itett	mi
 800d6c6:	085b      	lsrmi	r3, r3, #1
 800d6c8:	089b      	lsrpl	r3, r3, #2
 800d6ca:	2001      	movmi	r0, #1
 800d6cc:	600b      	strmi	r3, [r1, #0]
 800d6ce:	bf5c      	itt	pl
 800d6d0:	600b      	strpl	r3, [r1, #0]
 800d6d2:	2002      	movpl	r0, #2
 800d6d4:	4770      	bx	lr
 800d6d6:	b298      	uxth	r0, r3
 800d6d8:	b9b0      	cbnz	r0, 800d708 <__lo0bits+0x54>
 800d6da:	0c1b      	lsrs	r3, r3, #16
 800d6dc:	2010      	movs	r0, #16
 800d6de:	f013 0fff 	tst.w	r3, #255	; 0xff
 800d6e2:	bf04      	itt	eq
 800d6e4:	0a1b      	lsreq	r3, r3, #8
 800d6e6:	3008      	addeq	r0, #8
 800d6e8:	071a      	lsls	r2, r3, #28
 800d6ea:	bf04      	itt	eq
 800d6ec:	091b      	lsreq	r3, r3, #4
 800d6ee:	3004      	addeq	r0, #4
 800d6f0:	079a      	lsls	r2, r3, #30
 800d6f2:	bf04      	itt	eq
 800d6f4:	089b      	lsreq	r3, r3, #2
 800d6f6:	3002      	addeq	r0, #2
 800d6f8:	07da      	lsls	r2, r3, #31
 800d6fa:	d403      	bmi.n	800d704 <__lo0bits+0x50>
 800d6fc:	085b      	lsrs	r3, r3, #1
 800d6fe:	f100 0001 	add.w	r0, r0, #1
 800d702:	d005      	beq.n	800d710 <__lo0bits+0x5c>
 800d704:	600b      	str	r3, [r1, #0]
 800d706:	4770      	bx	lr
 800d708:	4610      	mov	r0, r2
 800d70a:	e7e8      	b.n	800d6de <__lo0bits+0x2a>
 800d70c:	2000      	movs	r0, #0
 800d70e:	4770      	bx	lr
 800d710:	2020      	movs	r0, #32
 800d712:	4770      	bx	lr

0800d714 <__i2b>:
 800d714:	b510      	push	{r4, lr}
 800d716:	460c      	mov	r4, r1
 800d718:	2101      	movs	r1, #1
 800d71a:	f7ff feff 	bl	800d51c <_Balloc>
 800d71e:	4602      	mov	r2, r0
 800d720:	b928      	cbnz	r0, 800d72e <__i2b+0x1a>
 800d722:	4b05      	ldr	r3, [pc, #20]	; (800d738 <__i2b+0x24>)
 800d724:	4805      	ldr	r0, [pc, #20]	; (800d73c <__i2b+0x28>)
 800d726:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d72a:	f000 fb3f 	bl	800ddac <__assert_func>
 800d72e:	2301      	movs	r3, #1
 800d730:	6144      	str	r4, [r0, #20]
 800d732:	6103      	str	r3, [r0, #16]
 800d734:	bd10      	pop	{r4, pc}
 800d736:	bf00      	nop
 800d738:	0800f2e3 	.word	0x0800f2e3
 800d73c:	0800f2f4 	.word	0x0800f2f4

0800d740 <__multiply>:
 800d740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d744:	4614      	mov	r4, r2
 800d746:	690a      	ldr	r2, [r1, #16]
 800d748:	6923      	ldr	r3, [r4, #16]
 800d74a:	429a      	cmp	r2, r3
 800d74c:	bfb8      	it	lt
 800d74e:	460b      	movlt	r3, r1
 800d750:	460d      	mov	r5, r1
 800d752:	bfbc      	itt	lt
 800d754:	4625      	movlt	r5, r4
 800d756:	461c      	movlt	r4, r3
 800d758:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800d75c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800d760:	68ab      	ldr	r3, [r5, #8]
 800d762:	6869      	ldr	r1, [r5, #4]
 800d764:	eb0a 0709 	add.w	r7, sl, r9
 800d768:	42bb      	cmp	r3, r7
 800d76a:	b085      	sub	sp, #20
 800d76c:	bfb8      	it	lt
 800d76e:	3101      	addlt	r1, #1
 800d770:	f7ff fed4 	bl	800d51c <_Balloc>
 800d774:	b930      	cbnz	r0, 800d784 <__multiply+0x44>
 800d776:	4602      	mov	r2, r0
 800d778:	4b42      	ldr	r3, [pc, #264]	; (800d884 <__multiply+0x144>)
 800d77a:	4843      	ldr	r0, [pc, #268]	; (800d888 <__multiply+0x148>)
 800d77c:	f240 115d 	movw	r1, #349	; 0x15d
 800d780:	f000 fb14 	bl	800ddac <__assert_func>
 800d784:	f100 0614 	add.w	r6, r0, #20
 800d788:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800d78c:	4633      	mov	r3, r6
 800d78e:	2200      	movs	r2, #0
 800d790:	4543      	cmp	r3, r8
 800d792:	d31e      	bcc.n	800d7d2 <__multiply+0x92>
 800d794:	f105 0c14 	add.w	ip, r5, #20
 800d798:	f104 0314 	add.w	r3, r4, #20
 800d79c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800d7a0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800d7a4:	9202      	str	r2, [sp, #8]
 800d7a6:	ebac 0205 	sub.w	r2, ip, r5
 800d7aa:	3a15      	subs	r2, #21
 800d7ac:	f022 0203 	bic.w	r2, r2, #3
 800d7b0:	3204      	adds	r2, #4
 800d7b2:	f105 0115 	add.w	r1, r5, #21
 800d7b6:	458c      	cmp	ip, r1
 800d7b8:	bf38      	it	cc
 800d7ba:	2204      	movcc	r2, #4
 800d7bc:	9201      	str	r2, [sp, #4]
 800d7be:	9a02      	ldr	r2, [sp, #8]
 800d7c0:	9303      	str	r3, [sp, #12]
 800d7c2:	429a      	cmp	r2, r3
 800d7c4:	d808      	bhi.n	800d7d8 <__multiply+0x98>
 800d7c6:	2f00      	cmp	r7, #0
 800d7c8:	dc55      	bgt.n	800d876 <__multiply+0x136>
 800d7ca:	6107      	str	r7, [r0, #16]
 800d7cc:	b005      	add	sp, #20
 800d7ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7d2:	f843 2b04 	str.w	r2, [r3], #4
 800d7d6:	e7db      	b.n	800d790 <__multiply+0x50>
 800d7d8:	f8b3 a000 	ldrh.w	sl, [r3]
 800d7dc:	f1ba 0f00 	cmp.w	sl, #0
 800d7e0:	d020      	beq.n	800d824 <__multiply+0xe4>
 800d7e2:	f105 0e14 	add.w	lr, r5, #20
 800d7e6:	46b1      	mov	r9, r6
 800d7e8:	2200      	movs	r2, #0
 800d7ea:	f85e 4b04 	ldr.w	r4, [lr], #4
 800d7ee:	f8d9 b000 	ldr.w	fp, [r9]
 800d7f2:	b2a1      	uxth	r1, r4
 800d7f4:	fa1f fb8b 	uxth.w	fp, fp
 800d7f8:	fb0a b101 	mla	r1, sl, r1, fp
 800d7fc:	4411      	add	r1, r2
 800d7fe:	f8d9 2000 	ldr.w	r2, [r9]
 800d802:	0c24      	lsrs	r4, r4, #16
 800d804:	0c12      	lsrs	r2, r2, #16
 800d806:	fb0a 2404 	mla	r4, sl, r4, r2
 800d80a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800d80e:	b289      	uxth	r1, r1
 800d810:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800d814:	45f4      	cmp	ip, lr
 800d816:	f849 1b04 	str.w	r1, [r9], #4
 800d81a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800d81e:	d8e4      	bhi.n	800d7ea <__multiply+0xaa>
 800d820:	9901      	ldr	r1, [sp, #4]
 800d822:	5072      	str	r2, [r6, r1]
 800d824:	9a03      	ldr	r2, [sp, #12]
 800d826:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d82a:	3304      	adds	r3, #4
 800d82c:	f1b9 0f00 	cmp.w	r9, #0
 800d830:	d01f      	beq.n	800d872 <__multiply+0x132>
 800d832:	6834      	ldr	r4, [r6, #0]
 800d834:	f105 0114 	add.w	r1, r5, #20
 800d838:	46b6      	mov	lr, r6
 800d83a:	f04f 0a00 	mov.w	sl, #0
 800d83e:	880a      	ldrh	r2, [r1, #0]
 800d840:	f8be b002 	ldrh.w	fp, [lr, #2]
 800d844:	fb09 b202 	mla	r2, r9, r2, fp
 800d848:	4492      	add	sl, r2
 800d84a:	b2a4      	uxth	r4, r4
 800d84c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800d850:	f84e 4b04 	str.w	r4, [lr], #4
 800d854:	f851 4b04 	ldr.w	r4, [r1], #4
 800d858:	f8be 2000 	ldrh.w	r2, [lr]
 800d85c:	0c24      	lsrs	r4, r4, #16
 800d85e:	fb09 2404 	mla	r4, r9, r4, r2
 800d862:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800d866:	458c      	cmp	ip, r1
 800d868:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800d86c:	d8e7      	bhi.n	800d83e <__multiply+0xfe>
 800d86e:	9a01      	ldr	r2, [sp, #4]
 800d870:	50b4      	str	r4, [r6, r2]
 800d872:	3604      	adds	r6, #4
 800d874:	e7a3      	b.n	800d7be <__multiply+0x7e>
 800d876:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d1a5      	bne.n	800d7ca <__multiply+0x8a>
 800d87e:	3f01      	subs	r7, #1
 800d880:	e7a1      	b.n	800d7c6 <__multiply+0x86>
 800d882:	bf00      	nop
 800d884:	0800f2e3 	.word	0x0800f2e3
 800d888:	0800f2f4 	.word	0x0800f2f4

0800d88c <__pow5mult>:
 800d88c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d890:	4615      	mov	r5, r2
 800d892:	f012 0203 	ands.w	r2, r2, #3
 800d896:	4606      	mov	r6, r0
 800d898:	460f      	mov	r7, r1
 800d89a:	d007      	beq.n	800d8ac <__pow5mult+0x20>
 800d89c:	4c25      	ldr	r4, [pc, #148]	; (800d934 <__pow5mult+0xa8>)
 800d89e:	3a01      	subs	r2, #1
 800d8a0:	2300      	movs	r3, #0
 800d8a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d8a6:	f7ff fe9b 	bl	800d5e0 <__multadd>
 800d8aa:	4607      	mov	r7, r0
 800d8ac:	10ad      	asrs	r5, r5, #2
 800d8ae:	d03d      	beq.n	800d92c <__pow5mult+0xa0>
 800d8b0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d8b2:	b97c      	cbnz	r4, 800d8d4 <__pow5mult+0x48>
 800d8b4:	2010      	movs	r0, #16
 800d8b6:	f7ff fe1b 	bl	800d4f0 <malloc>
 800d8ba:	4602      	mov	r2, r0
 800d8bc:	6270      	str	r0, [r6, #36]	; 0x24
 800d8be:	b928      	cbnz	r0, 800d8cc <__pow5mult+0x40>
 800d8c0:	4b1d      	ldr	r3, [pc, #116]	; (800d938 <__pow5mult+0xac>)
 800d8c2:	481e      	ldr	r0, [pc, #120]	; (800d93c <__pow5mult+0xb0>)
 800d8c4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d8c8:	f000 fa70 	bl	800ddac <__assert_func>
 800d8cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d8d0:	6004      	str	r4, [r0, #0]
 800d8d2:	60c4      	str	r4, [r0, #12]
 800d8d4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d8d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d8dc:	b94c      	cbnz	r4, 800d8f2 <__pow5mult+0x66>
 800d8de:	f240 2171 	movw	r1, #625	; 0x271
 800d8e2:	4630      	mov	r0, r6
 800d8e4:	f7ff ff16 	bl	800d714 <__i2b>
 800d8e8:	2300      	movs	r3, #0
 800d8ea:	f8c8 0008 	str.w	r0, [r8, #8]
 800d8ee:	4604      	mov	r4, r0
 800d8f0:	6003      	str	r3, [r0, #0]
 800d8f2:	f04f 0900 	mov.w	r9, #0
 800d8f6:	07eb      	lsls	r3, r5, #31
 800d8f8:	d50a      	bpl.n	800d910 <__pow5mult+0x84>
 800d8fa:	4639      	mov	r1, r7
 800d8fc:	4622      	mov	r2, r4
 800d8fe:	4630      	mov	r0, r6
 800d900:	f7ff ff1e 	bl	800d740 <__multiply>
 800d904:	4639      	mov	r1, r7
 800d906:	4680      	mov	r8, r0
 800d908:	4630      	mov	r0, r6
 800d90a:	f7ff fe47 	bl	800d59c <_Bfree>
 800d90e:	4647      	mov	r7, r8
 800d910:	106d      	asrs	r5, r5, #1
 800d912:	d00b      	beq.n	800d92c <__pow5mult+0xa0>
 800d914:	6820      	ldr	r0, [r4, #0]
 800d916:	b938      	cbnz	r0, 800d928 <__pow5mult+0x9c>
 800d918:	4622      	mov	r2, r4
 800d91a:	4621      	mov	r1, r4
 800d91c:	4630      	mov	r0, r6
 800d91e:	f7ff ff0f 	bl	800d740 <__multiply>
 800d922:	6020      	str	r0, [r4, #0]
 800d924:	f8c0 9000 	str.w	r9, [r0]
 800d928:	4604      	mov	r4, r0
 800d92a:	e7e4      	b.n	800d8f6 <__pow5mult+0x6a>
 800d92c:	4638      	mov	r0, r7
 800d92e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d932:	bf00      	nop
 800d934:	0800f448 	.word	0x0800f448
 800d938:	0800f26d 	.word	0x0800f26d
 800d93c:	0800f2f4 	.word	0x0800f2f4

0800d940 <__lshift>:
 800d940:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d944:	460c      	mov	r4, r1
 800d946:	6849      	ldr	r1, [r1, #4]
 800d948:	6923      	ldr	r3, [r4, #16]
 800d94a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d94e:	68a3      	ldr	r3, [r4, #8]
 800d950:	4607      	mov	r7, r0
 800d952:	4691      	mov	r9, r2
 800d954:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d958:	f108 0601 	add.w	r6, r8, #1
 800d95c:	42b3      	cmp	r3, r6
 800d95e:	db0b      	blt.n	800d978 <__lshift+0x38>
 800d960:	4638      	mov	r0, r7
 800d962:	f7ff fddb 	bl	800d51c <_Balloc>
 800d966:	4605      	mov	r5, r0
 800d968:	b948      	cbnz	r0, 800d97e <__lshift+0x3e>
 800d96a:	4602      	mov	r2, r0
 800d96c:	4b28      	ldr	r3, [pc, #160]	; (800da10 <__lshift+0xd0>)
 800d96e:	4829      	ldr	r0, [pc, #164]	; (800da14 <__lshift+0xd4>)
 800d970:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d974:	f000 fa1a 	bl	800ddac <__assert_func>
 800d978:	3101      	adds	r1, #1
 800d97a:	005b      	lsls	r3, r3, #1
 800d97c:	e7ee      	b.n	800d95c <__lshift+0x1c>
 800d97e:	2300      	movs	r3, #0
 800d980:	f100 0114 	add.w	r1, r0, #20
 800d984:	f100 0210 	add.w	r2, r0, #16
 800d988:	4618      	mov	r0, r3
 800d98a:	4553      	cmp	r3, sl
 800d98c:	db33      	blt.n	800d9f6 <__lshift+0xb6>
 800d98e:	6920      	ldr	r0, [r4, #16]
 800d990:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d994:	f104 0314 	add.w	r3, r4, #20
 800d998:	f019 091f 	ands.w	r9, r9, #31
 800d99c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d9a0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d9a4:	d02b      	beq.n	800d9fe <__lshift+0xbe>
 800d9a6:	f1c9 0e20 	rsb	lr, r9, #32
 800d9aa:	468a      	mov	sl, r1
 800d9ac:	2200      	movs	r2, #0
 800d9ae:	6818      	ldr	r0, [r3, #0]
 800d9b0:	fa00 f009 	lsl.w	r0, r0, r9
 800d9b4:	4302      	orrs	r2, r0
 800d9b6:	f84a 2b04 	str.w	r2, [sl], #4
 800d9ba:	f853 2b04 	ldr.w	r2, [r3], #4
 800d9be:	459c      	cmp	ip, r3
 800d9c0:	fa22 f20e 	lsr.w	r2, r2, lr
 800d9c4:	d8f3      	bhi.n	800d9ae <__lshift+0x6e>
 800d9c6:	ebac 0304 	sub.w	r3, ip, r4
 800d9ca:	3b15      	subs	r3, #21
 800d9cc:	f023 0303 	bic.w	r3, r3, #3
 800d9d0:	3304      	adds	r3, #4
 800d9d2:	f104 0015 	add.w	r0, r4, #21
 800d9d6:	4584      	cmp	ip, r0
 800d9d8:	bf38      	it	cc
 800d9da:	2304      	movcc	r3, #4
 800d9dc:	50ca      	str	r2, [r1, r3]
 800d9de:	b10a      	cbz	r2, 800d9e4 <__lshift+0xa4>
 800d9e0:	f108 0602 	add.w	r6, r8, #2
 800d9e4:	3e01      	subs	r6, #1
 800d9e6:	4638      	mov	r0, r7
 800d9e8:	612e      	str	r6, [r5, #16]
 800d9ea:	4621      	mov	r1, r4
 800d9ec:	f7ff fdd6 	bl	800d59c <_Bfree>
 800d9f0:	4628      	mov	r0, r5
 800d9f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d9f6:	f842 0f04 	str.w	r0, [r2, #4]!
 800d9fa:	3301      	adds	r3, #1
 800d9fc:	e7c5      	b.n	800d98a <__lshift+0x4a>
 800d9fe:	3904      	subs	r1, #4
 800da00:	f853 2b04 	ldr.w	r2, [r3], #4
 800da04:	f841 2f04 	str.w	r2, [r1, #4]!
 800da08:	459c      	cmp	ip, r3
 800da0a:	d8f9      	bhi.n	800da00 <__lshift+0xc0>
 800da0c:	e7ea      	b.n	800d9e4 <__lshift+0xa4>
 800da0e:	bf00      	nop
 800da10:	0800f2e3 	.word	0x0800f2e3
 800da14:	0800f2f4 	.word	0x0800f2f4

0800da18 <__mcmp>:
 800da18:	b530      	push	{r4, r5, lr}
 800da1a:	6902      	ldr	r2, [r0, #16]
 800da1c:	690c      	ldr	r4, [r1, #16]
 800da1e:	1b12      	subs	r2, r2, r4
 800da20:	d10e      	bne.n	800da40 <__mcmp+0x28>
 800da22:	f100 0314 	add.w	r3, r0, #20
 800da26:	3114      	adds	r1, #20
 800da28:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800da2c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800da30:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800da34:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800da38:	42a5      	cmp	r5, r4
 800da3a:	d003      	beq.n	800da44 <__mcmp+0x2c>
 800da3c:	d305      	bcc.n	800da4a <__mcmp+0x32>
 800da3e:	2201      	movs	r2, #1
 800da40:	4610      	mov	r0, r2
 800da42:	bd30      	pop	{r4, r5, pc}
 800da44:	4283      	cmp	r3, r0
 800da46:	d3f3      	bcc.n	800da30 <__mcmp+0x18>
 800da48:	e7fa      	b.n	800da40 <__mcmp+0x28>
 800da4a:	f04f 32ff 	mov.w	r2, #4294967295
 800da4e:	e7f7      	b.n	800da40 <__mcmp+0x28>

0800da50 <__mdiff>:
 800da50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da54:	460c      	mov	r4, r1
 800da56:	4606      	mov	r6, r0
 800da58:	4611      	mov	r1, r2
 800da5a:	4620      	mov	r0, r4
 800da5c:	4617      	mov	r7, r2
 800da5e:	f7ff ffdb 	bl	800da18 <__mcmp>
 800da62:	1e05      	subs	r5, r0, #0
 800da64:	d110      	bne.n	800da88 <__mdiff+0x38>
 800da66:	4629      	mov	r1, r5
 800da68:	4630      	mov	r0, r6
 800da6a:	f7ff fd57 	bl	800d51c <_Balloc>
 800da6e:	b930      	cbnz	r0, 800da7e <__mdiff+0x2e>
 800da70:	4b39      	ldr	r3, [pc, #228]	; (800db58 <__mdiff+0x108>)
 800da72:	4602      	mov	r2, r0
 800da74:	f240 2132 	movw	r1, #562	; 0x232
 800da78:	4838      	ldr	r0, [pc, #224]	; (800db5c <__mdiff+0x10c>)
 800da7a:	f000 f997 	bl	800ddac <__assert_func>
 800da7e:	2301      	movs	r3, #1
 800da80:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800da84:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da88:	bfa4      	itt	ge
 800da8a:	463b      	movge	r3, r7
 800da8c:	4627      	movge	r7, r4
 800da8e:	4630      	mov	r0, r6
 800da90:	6879      	ldr	r1, [r7, #4]
 800da92:	bfa6      	itte	ge
 800da94:	461c      	movge	r4, r3
 800da96:	2500      	movge	r5, #0
 800da98:	2501      	movlt	r5, #1
 800da9a:	f7ff fd3f 	bl	800d51c <_Balloc>
 800da9e:	b920      	cbnz	r0, 800daaa <__mdiff+0x5a>
 800daa0:	4b2d      	ldr	r3, [pc, #180]	; (800db58 <__mdiff+0x108>)
 800daa2:	4602      	mov	r2, r0
 800daa4:	f44f 7110 	mov.w	r1, #576	; 0x240
 800daa8:	e7e6      	b.n	800da78 <__mdiff+0x28>
 800daaa:	693e      	ldr	r6, [r7, #16]
 800daac:	60c5      	str	r5, [r0, #12]
 800daae:	6925      	ldr	r5, [r4, #16]
 800dab0:	f107 0114 	add.w	r1, r7, #20
 800dab4:	f104 0914 	add.w	r9, r4, #20
 800dab8:	f100 0e14 	add.w	lr, r0, #20
 800dabc:	f107 0210 	add.w	r2, r7, #16
 800dac0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800dac4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800dac8:	46f2      	mov	sl, lr
 800daca:	2700      	movs	r7, #0
 800dacc:	f859 3b04 	ldr.w	r3, [r9], #4
 800dad0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800dad4:	fa1f f883 	uxth.w	r8, r3
 800dad8:	fa17 f78b 	uxtah	r7, r7, fp
 800dadc:	0c1b      	lsrs	r3, r3, #16
 800dade:	eba7 0808 	sub.w	r8, r7, r8
 800dae2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800dae6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800daea:	fa1f f888 	uxth.w	r8, r8
 800daee:	141f      	asrs	r7, r3, #16
 800daf0:	454d      	cmp	r5, r9
 800daf2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800daf6:	f84a 3b04 	str.w	r3, [sl], #4
 800dafa:	d8e7      	bhi.n	800dacc <__mdiff+0x7c>
 800dafc:	1b2b      	subs	r3, r5, r4
 800dafe:	3b15      	subs	r3, #21
 800db00:	f023 0303 	bic.w	r3, r3, #3
 800db04:	3304      	adds	r3, #4
 800db06:	3415      	adds	r4, #21
 800db08:	42a5      	cmp	r5, r4
 800db0a:	bf38      	it	cc
 800db0c:	2304      	movcc	r3, #4
 800db0e:	4419      	add	r1, r3
 800db10:	4473      	add	r3, lr
 800db12:	469e      	mov	lr, r3
 800db14:	460d      	mov	r5, r1
 800db16:	4565      	cmp	r5, ip
 800db18:	d30e      	bcc.n	800db38 <__mdiff+0xe8>
 800db1a:	f10c 0203 	add.w	r2, ip, #3
 800db1e:	1a52      	subs	r2, r2, r1
 800db20:	f022 0203 	bic.w	r2, r2, #3
 800db24:	3903      	subs	r1, #3
 800db26:	458c      	cmp	ip, r1
 800db28:	bf38      	it	cc
 800db2a:	2200      	movcc	r2, #0
 800db2c:	441a      	add	r2, r3
 800db2e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800db32:	b17b      	cbz	r3, 800db54 <__mdiff+0x104>
 800db34:	6106      	str	r6, [r0, #16]
 800db36:	e7a5      	b.n	800da84 <__mdiff+0x34>
 800db38:	f855 8b04 	ldr.w	r8, [r5], #4
 800db3c:	fa17 f488 	uxtah	r4, r7, r8
 800db40:	1422      	asrs	r2, r4, #16
 800db42:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800db46:	b2a4      	uxth	r4, r4
 800db48:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800db4c:	f84e 4b04 	str.w	r4, [lr], #4
 800db50:	1417      	asrs	r7, r2, #16
 800db52:	e7e0      	b.n	800db16 <__mdiff+0xc6>
 800db54:	3e01      	subs	r6, #1
 800db56:	e7ea      	b.n	800db2e <__mdiff+0xde>
 800db58:	0800f2e3 	.word	0x0800f2e3
 800db5c:	0800f2f4 	.word	0x0800f2f4

0800db60 <__d2b>:
 800db60:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800db64:	4689      	mov	r9, r1
 800db66:	2101      	movs	r1, #1
 800db68:	ec57 6b10 	vmov	r6, r7, d0
 800db6c:	4690      	mov	r8, r2
 800db6e:	f7ff fcd5 	bl	800d51c <_Balloc>
 800db72:	4604      	mov	r4, r0
 800db74:	b930      	cbnz	r0, 800db84 <__d2b+0x24>
 800db76:	4602      	mov	r2, r0
 800db78:	4b25      	ldr	r3, [pc, #148]	; (800dc10 <__d2b+0xb0>)
 800db7a:	4826      	ldr	r0, [pc, #152]	; (800dc14 <__d2b+0xb4>)
 800db7c:	f240 310a 	movw	r1, #778	; 0x30a
 800db80:	f000 f914 	bl	800ddac <__assert_func>
 800db84:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800db88:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800db8c:	bb35      	cbnz	r5, 800dbdc <__d2b+0x7c>
 800db8e:	2e00      	cmp	r6, #0
 800db90:	9301      	str	r3, [sp, #4]
 800db92:	d028      	beq.n	800dbe6 <__d2b+0x86>
 800db94:	4668      	mov	r0, sp
 800db96:	9600      	str	r6, [sp, #0]
 800db98:	f7ff fd8c 	bl	800d6b4 <__lo0bits>
 800db9c:	9900      	ldr	r1, [sp, #0]
 800db9e:	b300      	cbz	r0, 800dbe2 <__d2b+0x82>
 800dba0:	9a01      	ldr	r2, [sp, #4]
 800dba2:	f1c0 0320 	rsb	r3, r0, #32
 800dba6:	fa02 f303 	lsl.w	r3, r2, r3
 800dbaa:	430b      	orrs	r3, r1
 800dbac:	40c2      	lsrs	r2, r0
 800dbae:	6163      	str	r3, [r4, #20]
 800dbb0:	9201      	str	r2, [sp, #4]
 800dbb2:	9b01      	ldr	r3, [sp, #4]
 800dbb4:	61a3      	str	r3, [r4, #24]
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	bf14      	ite	ne
 800dbba:	2202      	movne	r2, #2
 800dbbc:	2201      	moveq	r2, #1
 800dbbe:	6122      	str	r2, [r4, #16]
 800dbc0:	b1d5      	cbz	r5, 800dbf8 <__d2b+0x98>
 800dbc2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800dbc6:	4405      	add	r5, r0
 800dbc8:	f8c9 5000 	str.w	r5, [r9]
 800dbcc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800dbd0:	f8c8 0000 	str.w	r0, [r8]
 800dbd4:	4620      	mov	r0, r4
 800dbd6:	b003      	add	sp, #12
 800dbd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dbdc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dbe0:	e7d5      	b.n	800db8e <__d2b+0x2e>
 800dbe2:	6161      	str	r1, [r4, #20]
 800dbe4:	e7e5      	b.n	800dbb2 <__d2b+0x52>
 800dbe6:	a801      	add	r0, sp, #4
 800dbe8:	f7ff fd64 	bl	800d6b4 <__lo0bits>
 800dbec:	9b01      	ldr	r3, [sp, #4]
 800dbee:	6163      	str	r3, [r4, #20]
 800dbf0:	2201      	movs	r2, #1
 800dbf2:	6122      	str	r2, [r4, #16]
 800dbf4:	3020      	adds	r0, #32
 800dbf6:	e7e3      	b.n	800dbc0 <__d2b+0x60>
 800dbf8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800dbfc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800dc00:	f8c9 0000 	str.w	r0, [r9]
 800dc04:	6918      	ldr	r0, [r3, #16]
 800dc06:	f7ff fd35 	bl	800d674 <__hi0bits>
 800dc0a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800dc0e:	e7df      	b.n	800dbd0 <__d2b+0x70>
 800dc10:	0800f2e3 	.word	0x0800f2e3
 800dc14:	0800f2f4 	.word	0x0800f2f4

0800dc18 <_calloc_r>:
 800dc18:	b513      	push	{r0, r1, r4, lr}
 800dc1a:	434a      	muls	r2, r1
 800dc1c:	4611      	mov	r1, r2
 800dc1e:	9201      	str	r2, [sp, #4]
 800dc20:	f000 f85a 	bl	800dcd8 <_malloc_r>
 800dc24:	4604      	mov	r4, r0
 800dc26:	b118      	cbz	r0, 800dc30 <_calloc_r+0x18>
 800dc28:	9a01      	ldr	r2, [sp, #4]
 800dc2a:	2100      	movs	r1, #0
 800dc2c:	f7fe f970 	bl	800bf10 <memset>
 800dc30:	4620      	mov	r0, r4
 800dc32:	b002      	add	sp, #8
 800dc34:	bd10      	pop	{r4, pc}
	...

0800dc38 <_free_r>:
 800dc38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dc3a:	2900      	cmp	r1, #0
 800dc3c:	d048      	beq.n	800dcd0 <_free_r+0x98>
 800dc3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dc42:	9001      	str	r0, [sp, #4]
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	f1a1 0404 	sub.w	r4, r1, #4
 800dc4a:	bfb8      	it	lt
 800dc4c:	18e4      	addlt	r4, r4, r3
 800dc4e:	f000 f8ef 	bl	800de30 <__malloc_lock>
 800dc52:	4a20      	ldr	r2, [pc, #128]	; (800dcd4 <_free_r+0x9c>)
 800dc54:	9801      	ldr	r0, [sp, #4]
 800dc56:	6813      	ldr	r3, [r2, #0]
 800dc58:	4615      	mov	r5, r2
 800dc5a:	b933      	cbnz	r3, 800dc6a <_free_r+0x32>
 800dc5c:	6063      	str	r3, [r4, #4]
 800dc5e:	6014      	str	r4, [r2, #0]
 800dc60:	b003      	add	sp, #12
 800dc62:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dc66:	f000 b8e9 	b.w	800de3c <__malloc_unlock>
 800dc6a:	42a3      	cmp	r3, r4
 800dc6c:	d90b      	bls.n	800dc86 <_free_r+0x4e>
 800dc6e:	6821      	ldr	r1, [r4, #0]
 800dc70:	1862      	adds	r2, r4, r1
 800dc72:	4293      	cmp	r3, r2
 800dc74:	bf04      	itt	eq
 800dc76:	681a      	ldreq	r2, [r3, #0]
 800dc78:	685b      	ldreq	r3, [r3, #4]
 800dc7a:	6063      	str	r3, [r4, #4]
 800dc7c:	bf04      	itt	eq
 800dc7e:	1852      	addeq	r2, r2, r1
 800dc80:	6022      	streq	r2, [r4, #0]
 800dc82:	602c      	str	r4, [r5, #0]
 800dc84:	e7ec      	b.n	800dc60 <_free_r+0x28>
 800dc86:	461a      	mov	r2, r3
 800dc88:	685b      	ldr	r3, [r3, #4]
 800dc8a:	b10b      	cbz	r3, 800dc90 <_free_r+0x58>
 800dc8c:	42a3      	cmp	r3, r4
 800dc8e:	d9fa      	bls.n	800dc86 <_free_r+0x4e>
 800dc90:	6811      	ldr	r1, [r2, #0]
 800dc92:	1855      	adds	r5, r2, r1
 800dc94:	42a5      	cmp	r5, r4
 800dc96:	d10b      	bne.n	800dcb0 <_free_r+0x78>
 800dc98:	6824      	ldr	r4, [r4, #0]
 800dc9a:	4421      	add	r1, r4
 800dc9c:	1854      	adds	r4, r2, r1
 800dc9e:	42a3      	cmp	r3, r4
 800dca0:	6011      	str	r1, [r2, #0]
 800dca2:	d1dd      	bne.n	800dc60 <_free_r+0x28>
 800dca4:	681c      	ldr	r4, [r3, #0]
 800dca6:	685b      	ldr	r3, [r3, #4]
 800dca8:	6053      	str	r3, [r2, #4]
 800dcaa:	4421      	add	r1, r4
 800dcac:	6011      	str	r1, [r2, #0]
 800dcae:	e7d7      	b.n	800dc60 <_free_r+0x28>
 800dcb0:	d902      	bls.n	800dcb8 <_free_r+0x80>
 800dcb2:	230c      	movs	r3, #12
 800dcb4:	6003      	str	r3, [r0, #0]
 800dcb6:	e7d3      	b.n	800dc60 <_free_r+0x28>
 800dcb8:	6825      	ldr	r5, [r4, #0]
 800dcba:	1961      	adds	r1, r4, r5
 800dcbc:	428b      	cmp	r3, r1
 800dcbe:	bf04      	itt	eq
 800dcc0:	6819      	ldreq	r1, [r3, #0]
 800dcc2:	685b      	ldreq	r3, [r3, #4]
 800dcc4:	6063      	str	r3, [r4, #4]
 800dcc6:	bf04      	itt	eq
 800dcc8:	1949      	addeq	r1, r1, r5
 800dcca:	6021      	streq	r1, [r4, #0]
 800dccc:	6054      	str	r4, [r2, #4]
 800dcce:	e7c7      	b.n	800dc60 <_free_r+0x28>
 800dcd0:	b003      	add	sp, #12
 800dcd2:	bd30      	pop	{r4, r5, pc}
 800dcd4:	200003b0 	.word	0x200003b0

0800dcd8 <_malloc_r>:
 800dcd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcda:	1ccd      	adds	r5, r1, #3
 800dcdc:	f025 0503 	bic.w	r5, r5, #3
 800dce0:	3508      	adds	r5, #8
 800dce2:	2d0c      	cmp	r5, #12
 800dce4:	bf38      	it	cc
 800dce6:	250c      	movcc	r5, #12
 800dce8:	2d00      	cmp	r5, #0
 800dcea:	4606      	mov	r6, r0
 800dcec:	db01      	blt.n	800dcf2 <_malloc_r+0x1a>
 800dcee:	42a9      	cmp	r1, r5
 800dcf0:	d903      	bls.n	800dcfa <_malloc_r+0x22>
 800dcf2:	230c      	movs	r3, #12
 800dcf4:	6033      	str	r3, [r6, #0]
 800dcf6:	2000      	movs	r0, #0
 800dcf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dcfa:	f000 f899 	bl	800de30 <__malloc_lock>
 800dcfe:	4921      	ldr	r1, [pc, #132]	; (800dd84 <_malloc_r+0xac>)
 800dd00:	680a      	ldr	r2, [r1, #0]
 800dd02:	4614      	mov	r4, r2
 800dd04:	b99c      	cbnz	r4, 800dd2e <_malloc_r+0x56>
 800dd06:	4f20      	ldr	r7, [pc, #128]	; (800dd88 <_malloc_r+0xb0>)
 800dd08:	683b      	ldr	r3, [r7, #0]
 800dd0a:	b923      	cbnz	r3, 800dd16 <_malloc_r+0x3e>
 800dd0c:	4621      	mov	r1, r4
 800dd0e:	4630      	mov	r0, r6
 800dd10:	f000 f83c 	bl	800dd8c <_sbrk_r>
 800dd14:	6038      	str	r0, [r7, #0]
 800dd16:	4629      	mov	r1, r5
 800dd18:	4630      	mov	r0, r6
 800dd1a:	f000 f837 	bl	800dd8c <_sbrk_r>
 800dd1e:	1c43      	adds	r3, r0, #1
 800dd20:	d123      	bne.n	800dd6a <_malloc_r+0x92>
 800dd22:	230c      	movs	r3, #12
 800dd24:	6033      	str	r3, [r6, #0]
 800dd26:	4630      	mov	r0, r6
 800dd28:	f000 f888 	bl	800de3c <__malloc_unlock>
 800dd2c:	e7e3      	b.n	800dcf6 <_malloc_r+0x1e>
 800dd2e:	6823      	ldr	r3, [r4, #0]
 800dd30:	1b5b      	subs	r3, r3, r5
 800dd32:	d417      	bmi.n	800dd64 <_malloc_r+0x8c>
 800dd34:	2b0b      	cmp	r3, #11
 800dd36:	d903      	bls.n	800dd40 <_malloc_r+0x68>
 800dd38:	6023      	str	r3, [r4, #0]
 800dd3a:	441c      	add	r4, r3
 800dd3c:	6025      	str	r5, [r4, #0]
 800dd3e:	e004      	b.n	800dd4a <_malloc_r+0x72>
 800dd40:	6863      	ldr	r3, [r4, #4]
 800dd42:	42a2      	cmp	r2, r4
 800dd44:	bf0c      	ite	eq
 800dd46:	600b      	streq	r3, [r1, #0]
 800dd48:	6053      	strne	r3, [r2, #4]
 800dd4a:	4630      	mov	r0, r6
 800dd4c:	f000 f876 	bl	800de3c <__malloc_unlock>
 800dd50:	f104 000b 	add.w	r0, r4, #11
 800dd54:	1d23      	adds	r3, r4, #4
 800dd56:	f020 0007 	bic.w	r0, r0, #7
 800dd5a:	1ac2      	subs	r2, r0, r3
 800dd5c:	d0cc      	beq.n	800dcf8 <_malloc_r+0x20>
 800dd5e:	1a1b      	subs	r3, r3, r0
 800dd60:	50a3      	str	r3, [r4, r2]
 800dd62:	e7c9      	b.n	800dcf8 <_malloc_r+0x20>
 800dd64:	4622      	mov	r2, r4
 800dd66:	6864      	ldr	r4, [r4, #4]
 800dd68:	e7cc      	b.n	800dd04 <_malloc_r+0x2c>
 800dd6a:	1cc4      	adds	r4, r0, #3
 800dd6c:	f024 0403 	bic.w	r4, r4, #3
 800dd70:	42a0      	cmp	r0, r4
 800dd72:	d0e3      	beq.n	800dd3c <_malloc_r+0x64>
 800dd74:	1a21      	subs	r1, r4, r0
 800dd76:	4630      	mov	r0, r6
 800dd78:	f000 f808 	bl	800dd8c <_sbrk_r>
 800dd7c:	3001      	adds	r0, #1
 800dd7e:	d1dd      	bne.n	800dd3c <_malloc_r+0x64>
 800dd80:	e7cf      	b.n	800dd22 <_malloc_r+0x4a>
 800dd82:	bf00      	nop
 800dd84:	200003b0 	.word	0x200003b0
 800dd88:	200003b4 	.word	0x200003b4

0800dd8c <_sbrk_r>:
 800dd8c:	b538      	push	{r3, r4, r5, lr}
 800dd8e:	4d06      	ldr	r5, [pc, #24]	; (800dda8 <_sbrk_r+0x1c>)
 800dd90:	2300      	movs	r3, #0
 800dd92:	4604      	mov	r4, r0
 800dd94:	4608      	mov	r0, r1
 800dd96:	602b      	str	r3, [r5, #0]
 800dd98:	f7f3 fea0 	bl	8001adc <_sbrk>
 800dd9c:	1c43      	adds	r3, r0, #1
 800dd9e:	d102      	bne.n	800dda6 <_sbrk_r+0x1a>
 800dda0:	682b      	ldr	r3, [r5, #0]
 800dda2:	b103      	cbz	r3, 800dda6 <_sbrk_r+0x1a>
 800dda4:	6023      	str	r3, [r4, #0]
 800dda6:	bd38      	pop	{r3, r4, r5, pc}
 800dda8:	200010cc 	.word	0x200010cc

0800ddac <__assert_func>:
 800ddac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ddae:	4614      	mov	r4, r2
 800ddb0:	461a      	mov	r2, r3
 800ddb2:	4b09      	ldr	r3, [pc, #36]	; (800ddd8 <__assert_func+0x2c>)
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	4605      	mov	r5, r0
 800ddb8:	68d8      	ldr	r0, [r3, #12]
 800ddba:	b14c      	cbz	r4, 800ddd0 <__assert_func+0x24>
 800ddbc:	4b07      	ldr	r3, [pc, #28]	; (800dddc <__assert_func+0x30>)
 800ddbe:	9100      	str	r1, [sp, #0]
 800ddc0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ddc4:	4906      	ldr	r1, [pc, #24]	; (800dde0 <__assert_func+0x34>)
 800ddc6:	462b      	mov	r3, r5
 800ddc8:	f000 f80e 	bl	800dde8 <fiprintf>
 800ddcc:	f000 fa64 	bl	800e298 <abort>
 800ddd0:	4b04      	ldr	r3, [pc, #16]	; (800dde4 <__assert_func+0x38>)
 800ddd2:	461c      	mov	r4, r3
 800ddd4:	e7f3      	b.n	800ddbe <__assert_func+0x12>
 800ddd6:	bf00      	nop
 800ddd8:	20000188 	.word	0x20000188
 800dddc:	0800f454 	.word	0x0800f454
 800dde0:	0800f461 	.word	0x0800f461
 800dde4:	0800f48f 	.word	0x0800f48f

0800dde8 <fiprintf>:
 800dde8:	b40e      	push	{r1, r2, r3}
 800ddea:	b503      	push	{r0, r1, lr}
 800ddec:	4601      	mov	r1, r0
 800ddee:	ab03      	add	r3, sp, #12
 800ddf0:	4805      	ldr	r0, [pc, #20]	; (800de08 <fiprintf+0x20>)
 800ddf2:	f853 2b04 	ldr.w	r2, [r3], #4
 800ddf6:	6800      	ldr	r0, [r0, #0]
 800ddf8:	9301      	str	r3, [sp, #4]
 800ddfa:	f000 f84f 	bl	800de9c <_vfiprintf_r>
 800ddfe:	b002      	add	sp, #8
 800de00:	f85d eb04 	ldr.w	lr, [sp], #4
 800de04:	b003      	add	sp, #12
 800de06:	4770      	bx	lr
 800de08:	20000188 	.word	0x20000188

0800de0c <__ascii_mbtowc>:
 800de0c:	b082      	sub	sp, #8
 800de0e:	b901      	cbnz	r1, 800de12 <__ascii_mbtowc+0x6>
 800de10:	a901      	add	r1, sp, #4
 800de12:	b142      	cbz	r2, 800de26 <__ascii_mbtowc+0x1a>
 800de14:	b14b      	cbz	r3, 800de2a <__ascii_mbtowc+0x1e>
 800de16:	7813      	ldrb	r3, [r2, #0]
 800de18:	600b      	str	r3, [r1, #0]
 800de1a:	7812      	ldrb	r2, [r2, #0]
 800de1c:	1e10      	subs	r0, r2, #0
 800de1e:	bf18      	it	ne
 800de20:	2001      	movne	r0, #1
 800de22:	b002      	add	sp, #8
 800de24:	4770      	bx	lr
 800de26:	4610      	mov	r0, r2
 800de28:	e7fb      	b.n	800de22 <__ascii_mbtowc+0x16>
 800de2a:	f06f 0001 	mvn.w	r0, #1
 800de2e:	e7f8      	b.n	800de22 <__ascii_mbtowc+0x16>

0800de30 <__malloc_lock>:
 800de30:	4801      	ldr	r0, [pc, #4]	; (800de38 <__malloc_lock+0x8>)
 800de32:	f000 bbf1 	b.w	800e618 <__retarget_lock_acquire_recursive>
 800de36:	bf00      	nop
 800de38:	200010d4 	.word	0x200010d4

0800de3c <__malloc_unlock>:
 800de3c:	4801      	ldr	r0, [pc, #4]	; (800de44 <__malloc_unlock+0x8>)
 800de3e:	f000 bbec 	b.w	800e61a <__retarget_lock_release_recursive>
 800de42:	bf00      	nop
 800de44:	200010d4 	.word	0x200010d4

0800de48 <__sfputc_r>:
 800de48:	6893      	ldr	r3, [r2, #8]
 800de4a:	3b01      	subs	r3, #1
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	b410      	push	{r4}
 800de50:	6093      	str	r3, [r2, #8]
 800de52:	da08      	bge.n	800de66 <__sfputc_r+0x1e>
 800de54:	6994      	ldr	r4, [r2, #24]
 800de56:	42a3      	cmp	r3, r4
 800de58:	db01      	blt.n	800de5e <__sfputc_r+0x16>
 800de5a:	290a      	cmp	r1, #10
 800de5c:	d103      	bne.n	800de66 <__sfputc_r+0x1e>
 800de5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800de62:	f000 b94b 	b.w	800e0fc <__swbuf_r>
 800de66:	6813      	ldr	r3, [r2, #0]
 800de68:	1c58      	adds	r0, r3, #1
 800de6a:	6010      	str	r0, [r2, #0]
 800de6c:	7019      	strb	r1, [r3, #0]
 800de6e:	4608      	mov	r0, r1
 800de70:	f85d 4b04 	ldr.w	r4, [sp], #4
 800de74:	4770      	bx	lr

0800de76 <__sfputs_r>:
 800de76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de78:	4606      	mov	r6, r0
 800de7a:	460f      	mov	r7, r1
 800de7c:	4614      	mov	r4, r2
 800de7e:	18d5      	adds	r5, r2, r3
 800de80:	42ac      	cmp	r4, r5
 800de82:	d101      	bne.n	800de88 <__sfputs_r+0x12>
 800de84:	2000      	movs	r0, #0
 800de86:	e007      	b.n	800de98 <__sfputs_r+0x22>
 800de88:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de8c:	463a      	mov	r2, r7
 800de8e:	4630      	mov	r0, r6
 800de90:	f7ff ffda 	bl	800de48 <__sfputc_r>
 800de94:	1c43      	adds	r3, r0, #1
 800de96:	d1f3      	bne.n	800de80 <__sfputs_r+0xa>
 800de98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800de9c <_vfiprintf_r>:
 800de9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dea0:	460d      	mov	r5, r1
 800dea2:	b09d      	sub	sp, #116	; 0x74
 800dea4:	4614      	mov	r4, r2
 800dea6:	4698      	mov	r8, r3
 800dea8:	4606      	mov	r6, r0
 800deaa:	b118      	cbz	r0, 800deb4 <_vfiprintf_r+0x18>
 800deac:	6983      	ldr	r3, [r0, #24]
 800deae:	b90b      	cbnz	r3, 800deb4 <_vfiprintf_r+0x18>
 800deb0:	f000 fb14 	bl	800e4dc <__sinit>
 800deb4:	4b89      	ldr	r3, [pc, #548]	; (800e0dc <_vfiprintf_r+0x240>)
 800deb6:	429d      	cmp	r5, r3
 800deb8:	d11b      	bne.n	800def2 <_vfiprintf_r+0x56>
 800deba:	6875      	ldr	r5, [r6, #4]
 800debc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800debe:	07d9      	lsls	r1, r3, #31
 800dec0:	d405      	bmi.n	800dece <_vfiprintf_r+0x32>
 800dec2:	89ab      	ldrh	r3, [r5, #12]
 800dec4:	059a      	lsls	r2, r3, #22
 800dec6:	d402      	bmi.n	800dece <_vfiprintf_r+0x32>
 800dec8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800deca:	f000 fba5 	bl	800e618 <__retarget_lock_acquire_recursive>
 800dece:	89ab      	ldrh	r3, [r5, #12]
 800ded0:	071b      	lsls	r3, r3, #28
 800ded2:	d501      	bpl.n	800ded8 <_vfiprintf_r+0x3c>
 800ded4:	692b      	ldr	r3, [r5, #16]
 800ded6:	b9eb      	cbnz	r3, 800df14 <_vfiprintf_r+0x78>
 800ded8:	4629      	mov	r1, r5
 800deda:	4630      	mov	r0, r6
 800dedc:	f000 f96e 	bl	800e1bc <__swsetup_r>
 800dee0:	b1c0      	cbz	r0, 800df14 <_vfiprintf_r+0x78>
 800dee2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dee4:	07dc      	lsls	r4, r3, #31
 800dee6:	d50e      	bpl.n	800df06 <_vfiprintf_r+0x6a>
 800dee8:	f04f 30ff 	mov.w	r0, #4294967295
 800deec:	b01d      	add	sp, #116	; 0x74
 800deee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800def2:	4b7b      	ldr	r3, [pc, #492]	; (800e0e0 <_vfiprintf_r+0x244>)
 800def4:	429d      	cmp	r5, r3
 800def6:	d101      	bne.n	800defc <_vfiprintf_r+0x60>
 800def8:	68b5      	ldr	r5, [r6, #8]
 800defa:	e7df      	b.n	800debc <_vfiprintf_r+0x20>
 800defc:	4b79      	ldr	r3, [pc, #484]	; (800e0e4 <_vfiprintf_r+0x248>)
 800defe:	429d      	cmp	r5, r3
 800df00:	bf08      	it	eq
 800df02:	68f5      	ldreq	r5, [r6, #12]
 800df04:	e7da      	b.n	800debc <_vfiprintf_r+0x20>
 800df06:	89ab      	ldrh	r3, [r5, #12]
 800df08:	0598      	lsls	r0, r3, #22
 800df0a:	d4ed      	bmi.n	800dee8 <_vfiprintf_r+0x4c>
 800df0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800df0e:	f000 fb84 	bl	800e61a <__retarget_lock_release_recursive>
 800df12:	e7e9      	b.n	800dee8 <_vfiprintf_r+0x4c>
 800df14:	2300      	movs	r3, #0
 800df16:	9309      	str	r3, [sp, #36]	; 0x24
 800df18:	2320      	movs	r3, #32
 800df1a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800df1e:	f8cd 800c 	str.w	r8, [sp, #12]
 800df22:	2330      	movs	r3, #48	; 0x30
 800df24:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e0e8 <_vfiprintf_r+0x24c>
 800df28:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800df2c:	f04f 0901 	mov.w	r9, #1
 800df30:	4623      	mov	r3, r4
 800df32:	469a      	mov	sl, r3
 800df34:	f813 2b01 	ldrb.w	r2, [r3], #1
 800df38:	b10a      	cbz	r2, 800df3e <_vfiprintf_r+0xa2>
 800df3a:	2a25      	cmp	r2, #37	; 0x25
 800df3c:	d1f9      	bne.n	800df32 <_vfiprintf_r+0x96>
 800df3e:	ebba 0b04 	subs.w	fp, sl, r4
 800df42:	d00b      	beq.n	800df5c <_vfiprintf_r+0xc0>
 800df44:	465b      	mov	r3, fp
 800df46:	4622      	mov	r2, r4
 800df48:	4629      	mov	r1, r5
 800df4a:	4630      	mov	r0, r6
 800df4c:	f7ff ff93 	bl	800de76 <__sfputs_r>
 800df50:	3001      	adds	r0, #1
 800df52:	f000 80aa 	beq.w	800e0aa <_vfiprintf_r+0x20e>
 800df56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800df58:	445a      	add	r2, fp
 800df5a:	9209      	str	r2, [sp, #36]	; 0x24
 800df5c:	f89a 3000 	ldrb.w	r3, [sl]
 800df60:	2b00      	cmp	r3, #0
 800df62:	f000 80a2 	beq.w	800e0aa <_vfiprintf_r+0x20e>
 800df66:	2300      	movs	r3, #0
 800df68:	f04f 32ff 	mov.w	r2, #4294967295
 800df6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800df70:	f10a 0a01 	add.w	sl, sl, #1
 800df74:	9304      	str	r3, [sp, #16]
 800df76:	9307      	str	r3, [sp, #28]
 800df78:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800df7c:	931a      	str	r3, [sp, #104]	; 0x68
 800df7e:	4654      	mov	r4, sl
 800df80:	2205      	movs	r2, #5
 800df82:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df86:	4858      	ldr	r0, [pc, #352]	; (800e0e8 <_vfiprintf_r+0x24c>)
 800df88:	f7f2 f92a 	bl	80001e0 <memchr>
 800df8c:	9a04      	ldr	r2, [sp, #16]
 800df8e:	b9d8      	cbnz	r0, 800dfc8 <_vfiprintf_r+0x12c>
 800df90:	06d1      	lsls	r1, r2, #27
 800df92:	bf44      	itt	mi
 800df94:	2320      	movmi	r3, #32
 800df96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800df9a:	0713      	lsls	r3, r2, #28
 800df9c:	bf44      	itt	mi
 800df9e:	232b      	movmi	r3, #43	; 0x2b
 800dfa0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dfa4:	f89a 3000 	ldrb.w	r3, [sl]
 800dfa8:	2b2a      	cmp	r3, #42	; 0x2a
 800dfaa:	d015      	beq.n	800dfd8 <_vfiprintf_r+0x13c>
 800dfac:	9a07      	ldr	r2, [sp, #28]
 800dfae:	4654      	mov	r4, sl
 800dfb0:	2000      	movs	r0, #0
 800dfb2:	f04f 0c0a 	mov.w	ip, #10
 800dfb6:	4621      	mov	r1, r4
 800dfb8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dfbc:	3b30      	subs	r3, #48	; 0x30
 800dfbe:	2b09      	cmp	r3, #9
 800dfc0:	d94e      	bls.n	800e060 <_vfiprintf_r+0x1c4>
 800dfc2:	b1b0      	cbz	r0, 800dff2 <_vfiprintf_r+0x156>
 800dfc4:	9207      	str	r2, [sp, #28]
 800dfc6:	e014      	b.n	800dff2 <_vfiprintf_r+0x156>
 800dfc8:	eba0 0308 	sub.w	r3, r0, r8
 800dfcc:	fa09 f303 	lsl.w	r3, r9, r3
 800dfd0:	4313      	orrs	r3, r2
 800dfd2:	9304      	str	r3, [sp, #16]
 800dfd4:	46a2      	mov	sl, r4
 800dfd6:	e7d2      	b.n	800df7e <_vfiprintf_r+0xe2>
 800dfd8:	9b03      	ldr	r3, [sp, #12]
 800dfda:	1d19      	adds	r1, r3, #4
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	9103      	str	r1, [sp, #12]
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	bfbb      	ittet	lt
 800dfe4:	425b      	neglt	r3, r3
 800dfe6:	f042 0202 	orrlt.w	r2, r2, #2
 800dfea:	9307      	strge	r3, [sp, #28]
 800dfec:	9307      	strlt	r3, [sp, #28]
 800dfee:	bfb8      	it	lt
 800dff0:	9204      	strlt	r2, [sp, #16]
 800dff2:	7823      	ldrb	r3, [r4, #0]
 800dff4:	2b2e      	cmp	r3, #46	; 0x2e
 800dff6:	d10c      	bne.n	800e012 <_vfiprintf_r+0x176>
 800dff8:	7863      	ldrb	r3, [r4, #1]
 800dffa:	2b2a      	cmp	r3, #42	; 0x2a
 800dffc:	d135      	bne.n	800e06a <_vfiprintf_r+0x1ce>
 800dffe:	9b03      	ldr	r3, [sp, #12]
 800e000:	1d1a      	adds	r2, r3, #4
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	9203      	str	r2, [sp, #12]
 800e006:	2b00      	cmp	r3, #0
 800e008:	bfb8      	it	lt
 800e00a:	f04f 33ff 	movlt.w	r3, #4294967295
 800e00e:	3402      	adds	r4, #2
 800e010:	9305      	str	r3, [sp, #20]
 800e012:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e0f8 <_vfiprintf_r+0x25c>
 800e016:	7821      	ldrb	r1, [r4, #0]
 800e018:	2203      	movs	r2, #3
 800e01a:	4650      	mov	r0, sl
 800e01c:	f7f2 f8e0 	bl	80001e0 <memchr>
 800e020:	b140      	cbz	r0, 800e034 <_vfiprintf_r+0x198>
 800e022:	2340      	movs	r3, #64	; 0x40
 800e024:	eba0 000a 	sub.w	r0, r0, sl
 800e028:	fa03 f000 	lsl.w	r0, r3, r0
 800e02c:	9b04      	ldr	r3, [sp, #16]
 800e02e:	4303      	orrs	r3, r0
 800e030:	3401      	adds	r4, #1
 800e032:	9304      	str	r3, [sp, #16]
 800e034:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e038:	482c      	ldr	r0, [pc, #176]	; (800e0ec <_vfiprintf_r+0x250>)
 800e03a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e03e:	2206      	movs	r2, #6
 800e040:	f7f2 f8ce 	bl	80001e0 <memchr>
 800e044:	2800      	cmp	r0, #0
 800e046:	d03f      	beq.n	800e0c8 <_vfiprintf_r+0x22c>
 800e048:	4b29      	ldr	r3, [pc, #164]	; (800e0f0 <_vfiprintf_r+0x254>)
 800e04a:	bb1b      	cbnz	r3, 800e094 <_vfiprintf_r+0x1f8>
 800e04c:	9b03      	ldr	r3, [sp, #12]
 800e04e:	3307      	adds	r3, #7
 800e050:	f023 0307 	bic.w	r3, r3, #7
 800e054:	3308      	adds	r3, #8
 800e056:	9303      	str	r3, [sp, #12]
 800e058:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e05a:	443b      	add	r3, r7
 800e05c:	9309      	str	r3, [sp, #36]	; 0x24
 800e05e:	e767      	b.n	800df30 <_vfiprintf_r+0x94>
 800e060:	fb0c 3202 	mla	r2, ip, r2, r3
 800e064:	460c      	mov	r4, r1
 800e066:	2001      	movs	r0, #1
 800e068:	e7a5      	b.n	800dfb6 <_vfiprintf_r+0x11a>
 800e06a:	2300      	movs	r3, #0
 800e06c:	3401      	adds	r4, #1
 800e06e:	9305      	str	r3, [sp, #20]
 800e070:	4619      	mov	r1, r3
 800e072:	f04f 0c0a 	mov.w	ip, #10
 800e076:	4620      	mov	r0, r4
 800e078:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e07c:	3a30      	subs	r2, #48	; 0x30
 800e07e:	2a09      	cmp	r2, #9
 800e080:	d903      	bls.n	800e08a <_vfiprintf_r+0x1ee>
 800e082:	2b00      	cmp	r3, #0
 800e084:	d0c5      	beq.n	800e012 <_vfiprintf_r+0x176>
 800e086:	9105      	str	r1, [sp, #20]
 800e088:	e7c3      	b.n	800e012 <_vfiprintf_r+0x176>
 800e08a:	fb0c 2101 	mla	r1, ip, r1, r2
 800e08e:	4604      	mov	r4, r0
 800e090:	2301      	movs	r3, #1
 800e092:	e7f0      	b.n	800e076 <_vfiprintf_r+0x1da>
 800e094:	ab03      	add	r3, sp, #12
 800e096:	9300      	str	r3, [sp, #0]
 800e098:	462a      	mov	r2, r5
 800e09a:	4b16      	ldr	r3, [pc, #88]	; (800e0f4 <_vfiprintf_r+0x258>)
 800e09c:	a904      	add	r1, sp, #16
 800e09e:	4630      	mov	r0, r6
 800e0a0:	f7fd ffde 	bl	800c060 <_printf_float>
 800e0a4:	4607      	mov	r7, r0
 800e0a6:	1c78      	adds	r0, r7, #1
 800e0a8:	d1d6      	bne.n	800e058 <_vfiprintf_r+0x1bc>
 800e0aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e0ac:	07d9      	lsls	r1, r3, #31
 800e0ae:	d405      	bmi.n	800e0bc <_vfiprintf_r+0x220>
 800e0b0:	89ab      	ldrh	r3, [r5, #12]
 800e0b2:	059a      	lsls	r2, r3, #22
 800e0b4:	d402      	bmi.n	800e0bc <_vfiprintf_r+0x220>
 800e0b6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e0b8:	f000 faaf 	bl	800e61a <__retarget_lock_release_recursive>
 800e0bc:	89ab      	ldrh	r3, [r5, #12]
 800e0be:	065b      	lsls	r3, r3, #25
 800e0c0:	f53f af12 	bmi.w	800dee8 <_vfiprintf_r+0x4c>
 800e0c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e0c6:	e711      	b.n	800deec <_vfiprintf_r+0x50>
 800e0c8:	ab03      	add	r3, sp, #12
 800e0ca:	9300      	str	r3, [sp, #0]
 800e0cc:	462a      	mov	r2, r5
 800e0ce:	4b09      	ldr	r3, [pc, #36]	; (800e0f4 <_vfiprintf_r+0x258>)
 800e0d0:	a904      	add	r1, sp, #16
 800e0d2:	4630      	mov	r0, r6
 800e0d4:	f7fe fa68 	bl	800c5a8 <_printf_i>
 800e0d8:	e7e4      	b.n	800e0a4 <_vfiprintf_r+0x208>
 800e0da:	bf00      	nop
 800e0dc:	0800f5cc 	.word	0x0800f5cc
 800e0e0:	0800f5ec 	.word	0x0800f5ec
 800e0e4:	0800f5ac 	.word	0x0800f5ac
 800e0e8:	0800f49a 	.word	0x0800f49a
 800e0ec:	0800f4a4 	.word	0x0800f4a4
 800e0f0:	0800c061 	.word	0x0800c061
 800e0f4:	0800de77 	.word	0x0800de77
 800e0f8:	0800f4a0 	.word	0x0800f4a0

0800e0fc <__swbuf_r>:
 800e0fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0fe:	460e      	mov	r6, r1
 800e100:	4614      	mov	r4, r2
 800e102:	4605      	mov	r5, r0
 800e104:	b118      	cbz	r0, 800e10e <__swbuf_r+0x12>
 800e106:	6983      	ldr	r3, [r0, #24]
 800e108:	b90b      	cbnz	r3, 800e10e <__swbuf_r+0x12>
 800e10a:	f000 f9e7 	bl	800e4dc <__sinit>
 800e10e:	4b21      	ldr	r3, [pc, #132]	; (800e194 <__swbuf_r+0x98>)
 800e110:	429c      	cmp	r4, r3
 800e112:	d12b      	bne.n	800e16c <__swbuf_r+0x70>
 800e114:	686c      	ldr	r4, [r5, #4]
 800e116:	69a3      	ldr	r3, [r4, #24]
 800e118:	60a3      	str	r3, [r4, #8]
 800e11a:	89a3      	ldrh	r3, [r4, #12]
 800e11c:	071a      	lsls	r2, r3, #28
 800e11e:	d52f      	bpl.n	800e180 <__swbuf_r+0x84>
 800e120:	6923      	ldr	r3, [r4, #16]
 800e122:	b36b      	cbz	r3, 800e180 <__swbuf_r+0x84>
 800e124:	6923      	ldr	r3, [r4, #16]
 800e126:	6820      	ldr	r0, [r4, #0]
 800e128:	1ac0      	subs	r0, r0, r3
 800e12a:	6963      	ldr	r3, [r4, #20]
 800e12c:	b2f6      	uxtb	r6, r6
 800e12e:	4283      	cmp	r3, r0
 800e130:	4637      	mov	r7, r6
 800e132:	dc04      	bgt.n	800e13e <__swbuf_r+0x42>
 800e134:	4621      	mov	r1, r4
 800e136:	4628      	mov	r0, r5
 800e138:	f000 f93c 	bl	800e3b4 <_fflush_r>
 800e13c:	bb30      	cbnz	r0, 800e18c <__swbuf_r+0x90>
 800e13e:	68a3      	ldr	r3, [r4, #8]
 800e140:	3b01      	subs	r3, #1
 800e142:	60a3      	str	r3, [r4, #8]
 800e144:	6823      	ldr	r3, [r4, #0]
 800e146:	1c5a      	adds	r2, r3, #1
 800e148:	6022      	str	r2, [r4, #0]
 800e14a:	701e      	strb	r6, [r3, #0]
 800e14c:	6963      	ldr	r3, [r4, #20]
 800e14e:	3001      	adds	r0, #1
 800e150:	4283      	cmp	r3, r0
 800e152:	d004      	beq.n	800e15e <__swbuf_r+0x62>
 800e154:	89a3      	ldrh	r3, [r4, #12]
 800e156:	07db      	lsls	r3, r3, #31
 800e158:	d506      	bpl.n	800e168 <__swbuf_r+0x6c>
 800e15a:	2e0a      	cmp	r6, #10
 800e15c:	d104      	bne.n	800e168 <__swbuf_r+0x6c>
 800e15e:	4621      	mov	r1, r4
 800e160:	4628      	mov	r0, r5
 800e162:	f000 f927 	bl	800e3b4 <_fflush_r>
 800e166:	b988      	cbnz	r0, 800e18c <__swbuf_r+0x90>
 800e168:	4638      	mov	r0, r7
 800e16a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e16c:	4b0a      	ldr	r3, [pc, #40]	; (800e198 <__swbuf_r+0x9c>)
 800e16e:	429c      	cmp	r4, r3
 800e170:	d101      	bne.n	800e176 <__swbuf_r+0x7a>
 800e172:	68ac      	ldr	r4, [r5, #8]
 800e174:	e7cf      	b.n	800e116 <__swbuf_r+0x1a>
 800e176:	4b09      	ldr	r3, [pc, #36]	; (800e19c <__swbuf_r+0xa0>)
 800e178:	429c      	cmp	r4, r3
 800e17a:	bf08      	it	eq
 800e17c:	68ec      	ldreq	r4, [r5, #12]
 800e17e:	e7ca      	b.n	800e116 <__swbuf_r+0x1a>
 800e180:	4621      	mov	r1, r4
 800e182:	4628      	mov	r0, r5
 800e184:	f000 f81a 	bl	800e1bc <__swsetup_r>
 800e188:	2800      	cmp	r0, #0
 800e18a:	d0cb      	beq.n	800e124 <__swbuf_r+0x28>
 800e18c:	f04f 37ff 	mov.w	r7, #4294967295
 800e190:	e7ea      	b.n	800e168 <__swbuf_r+0x6c>
 800e192:	bf00      	nop
 800e194:	0800f5cc 	.word	0x0800f5cc
 800e198:	0800f5ec 	.word	0x0800f5ec
 800e19c:	0800f5ac 	.word	0x0800f5ac

0800e1a0 <__ascii_wctomb>:
 800e1a0:	b149      	cbz	r1, 800e1b6 <__ascii_wctomb+0x16>
 800e1a2:	2aff      	cmp	r2, #255	; 0xff
 800e1a4:	bf85      	ittet	hi
 800e1a6:	238a      	movhi	r3, #138	; 0x8a
 800e1a8:	6003      	strhi	r3, [r0, #0]
 800e1aa:	700a      	strbls	r2, [r1, #0]
 800e1ac:	f04f 30ff 	movhi.w	r0, #4294967295
 800e1b0:	bf98      	it	ls
 800e1b2:	2001      	movls	r0, #1
 800e1b4:	4770      	bx	lr
 800e1b6:	4608      	mov	r0, r1
 800e1b8:	4770      	bx	lr
	...

0800e1bc <__swsetup_r>:
 800e1bc:	4b32      	ldr	r3, [pc, #200]	; (800e288 <__swsetup_r+0xcc>)
 800e1be:	b570      	push	{r4, r5, r6, lr}
 800e1c0:	681d      	ldr	r5, [r3, #0]
 800e1c2:	4606      	mov	r6, r0
 800e1c4:	460c      	mov	r4, r1
 800e1c6:	b125      	cbz	r5, 800e1d2 <__swsetup_r+0x16>
 800e1c8:	69ab      	ldr	r3, [r5, #24]
 800e1ca:	b913      	cbnz	r3, 800e1d2 <__swsetup_r+0x16>
 800e1cc:	4628      	mov	r0, r5
 800e1ce:	f000 f985 	bl	800e4dc <__sinit>
 800e1d2:	4b2e      	ldr	r3, [pc, #184]	; (800e28c <__swsetup_r+0xd0>)
 800e1d4:	429c      	cmp	r4, r3
 800e1d6:	d10f      	bne.n	800e1f8 <__swsetup_r+0x3c>
 800e1d8:	686c      	ldr	r4, [r5, #4]
 800e1da:	89a3      	ldrh	r3, [r4, #12]
 800e1dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e1e0:	0719      	lsls	r1, r3, #28
 800e1e2:	d42c      	bmi.n	800e23e <__swsetup_r+0x82>
 800e1e4:	06dd      	lsls	r5, r3, #27
 800e1e6:	d411      	bmi.n	800e20c <__swsetup_r+0x50>
 800e1e8:	2309      	movs	r3, #9
 800e1ea:	6033      	str	r3, [r6, #0]
 800e1ec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e1f0:	81a3      	strh	r3, [r4, #12]
 800e1f2:	f04f 30ff 	mov.w	r0, #4294967295
 800e1f6:	e03e      	b.n	800e276 <__swsetup_r+0xba>
 800e1f8:	4b25      	ldr	r3, [pc, #148]	; (800e290 <__swsetup_r+0xd4>)
 800e1fa:	429c      	cmp	r4, r3
 800e1fc:	d101      	bne.n	800e202 <__swsetup_r+0x46>
 800e1fe:	68ac      	ldr	r4, [r5, #8]
 800e200:	e7eb      	b.n	800e1da <__swsetup_r+0x1e>
 800e202:	4b24      	ldr	r3, [pc, #144]	; (800e294 <__swsetup_r+0xd8>)
 800e204:	429c      	cmp	r4, r3
 800e206:	bf08      	it	eq
 800e208:	68ec      	ldreq	r4, [r5, #12]
 800e20a:	e7e6      	b.n	800e1da <__swsetup_r+0x1e>
 800e20c:	0758      	lsls	r0, r3, #29
 800e20e:	d512      	bpl.n	800e236 <__swsetup_r+0x7a>
 800e210:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e212:	b141      	cbz	r1, 800e226 <__swsetup_r+0x6a>
 800e214:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e218:	4299      	cmp	r1, r3
 800e21a:	d002      	beq.n	800e222 <__swsetup_r+0x66>
 800e21c:	4630      	mov	r0, r6
 800e21e:	f7ff fd0b 	bl	800dc38 <_free_r>
 800e222:	2300      	movs	r3, #0
 800e224:	6363      	str	r3, [r4, #52]	; 0x34
 800e226:	89a3      	ldrh	r3, [r4, #12]
 800e228:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e22c:	81a3      	strh	r3, [r4, #12]
 800e22e:	2300      	movs	r3, #0
 800e230:	6063      	str	r3, [r4, #4]
 800e232:	6923      	ldr	r3, [r4, #16]
 800e234:	6023      	str	r3, [r4, #0]
 800e236:	89a3      	ldrh	r3, [r4, #12]
 800e238:	f043 0308 	orr.w	r3, r3, #8
 800e23c:	81a3      	strh	r3, [r4, #12]
 800e23e:	6923      	ldr	r3, [r4, #16]
 800e240:	b94b      	cbnz	r3, 800e256 <__swsetup_r+0x9a>
 800e242:	89a3      	ldrh	r3, [r4, #12]
 800e244:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e248:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e24c:	d003      	beq.n	800e256 <__swsetup_r+0x9a>
 800e24e:	4621      	mov	r1, r4
 800e250:	4630      	mov	r0, r6
 800e252:	f000 fa07 	bl	800e664 <__smakebuf_r>
 800e256:	89a0      	ldrh	r0, [r4, #12]
 800e258:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e25c:	f010 0301 	ands.w	r3, r0, #1
 800e260:	d00a      	beq.n	800e278 <__swsetup_r+0xbc>
 800e262:	2300      	movs	r3, #0
 800e264:	60a3      	str	r3, [r4, #8]
 800e266:	6963      	ldr	r3, [r4, #20]
 800e268:	425b      	negs	r3, r3
 800e26a:	61a3      	str	r3, [r4, #24]
 800e26c:	6923      	ldr	r3, [r4, #16]
 800e26e:	b943      	cbnz	r3, 800e282 <__swsetup_r+0xc6>
 800e270:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e274:	d1ba      	bne.n	800e1ec <__swsetup_r+0x30>
 800e276:	bd70      	pop	{r4, r5, r6, pc}
 800e278:	0781      	lsls	r1, r0, #30
 800e27a:	bf58      	it	pl
 800e27c:	6963      	ldrpl	r3, [r4, #20]
 800e27e:	60a3      	str	r3, [r4, #8]
 800e280:	e7f4      	b.n	800e26c <__swsetup_r+0xb0>
 800e282:	2000      	movs	r0, #0
 800e284:	e7f7      	b.n	800e276 <__swsetup_r+0xba>
 800e286:	bf00      	nop
 800e288:	20000188 	.word	0x20000188
 800e28c:	0800f5cc 	.word	0x0800f5cc
 800e290:	0800f5ec 	.word	0x0800f5ec
 800e294:	0800f5ac 	.word	0x0800f5ac

0800e298 <abort>:
 800e298:	b508      	push	{r3, lr}
 800e29a:	2006      	movs	r0, #6
 800e29c:	f000 fa4a 	bl	800e734 <raise>
 800e2a0:	2001      	movs	r0, #1
 800e2a2:	f7f3 fba3 	bl	80019ec <_exit>
	...

0800e2a8 <__sflush_r>:
 800e2a8:	898a      	ldrh	r2, [r1, #12]
 800e2aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e2ae:	4605      	mov	r5, r0
 800e2b0:	0710      	lsls	r0, r2, #28
 800e2b2:	460c      	mov	r4, r1
 800e2b4:	d458      	bmi.n	800e368 <__sflush_r+0xc0>
 800e2b6:	684b      	ldr	r3, [r1, #4]
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	dc05      	bgt.n	800e2c8 <__sflush_r+0x20>
 800e2bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	dc02      	bgt.n	800e2c8 <__sflush_r+0x20>
 800e2c2:	2000      	movs	r0, #0
 800e2c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e2ca:	2e00      	cmp	r6, #0
 800e2cc:	d0f9      	beq.n	800e2c2 <__sflush_r+0x1a>
 800e2ce:	2300      	movs	r3, #0
 800e2d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e2d4:	682f      	ldr	r7, [r5, #0]
 800e2d6:	602b      	str	r3, [r5, #0]
 800e2d8:	d032      	beq.n	800e340 <__sflush_r+0x98>
 800e2da:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e2dc:	89a3      	ldrh	r3, [r4, #12]
 800e2de:	075a      	lsls	r2, r3, #29
 800e2e0:	d505      	bpl.n	800e2ee <__sflush_r+0x46>
 800e2e2:	6863      	ldr	r3, [r4, #4]
 800e2e4:	1ac0      	subs	r0, r0, r3
 800e2e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e2e8:	b10b      	cbz	r3, 800e2ee <__sflush_r+0x46>
 800e2ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e2ec:	1ac0      	subs	r0, r0, r3
 800e2ee:	2300      	movs	r3, #0
 800e2f0:	4602      	mov	r2, r0
 800e2f2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e2f4:	6a21      	ldr	r1, [r4, #32]
 800e2f6:	4628      	mov	r0, r5
 800e2f8:	47b0      	blx	r6
 800e2fa:	1c43      	adds	r3, r0, #1
 800e2fc:	89a3      	ldrh	r3, [r4, #12]
 800e2fe:	d106      	bne.n	800e30e <__sflush_r+0x66>
 800e300:	6829      	ldr	r1, [r5, #0]
 800e302:	291d      	cmp	r1, #29
 800e304:	d82c      	bhi.n	800e360 <__sflush_r+0xb8>
 800e306:	4a2a      	ldr	r2, [pc, #168]	; (800e3b0 <__sflush_r+0x108>)
 800e308:	40ca      	lsrs	r2, r1
 800e30a:	07d6      	lsls	r6, r2, #31
 800e30c:	d528      	bpl.n	800e360 <__sflush_r+0xb8>
 800e30e:	2200      	movs	r2, #0
 800e310:	6062      	str	r2, [r4, #4]
 800e312:	04d9      	lsls	r1, r3, #19
 800e314:	6922      	ldr	r2, [r4, #16]
 800e316:	6022      	str	r2, [r4, #0]
 800e318:	d504      	bpl.n	800e324 <__sflush_r+0x7c>
 800e31a:	1c42      	adds	r2, r0, #1
 800e31c:	d101      	bne.n	800e322 <__sflush_r+0x7a>
 800e31e:	682b      	ldr	r3, [r5, #0]
 800e320:	b903      	cbnz	r3, 800e324 <__sflush_r+0x7c>
 800e322:	6560      	str	r0, [r4, #84]	; 0x54
 800e324:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e326:	602f      	str	r7, [r5, #0]
 800e328:	2900      	cmp	r1, #0
 800e32a:	d0ca      	beq.n	800e2c2 <__sflush_r+0x1a>
 800e32c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e330:	4299      	cmp	r1, r3
 800e332:	d002      	beq.n	800e33a <__sflush_r+0x92>
 800e334:	4628      	mov	r0, r5
 800e336:	f7ff fc7f 	bl	800dc38 <_free_r>
 800e33a:	2000      	movs	r0, #0
 800e33c:	6360      	str	r0, [r4, #52]	; 0x34
 800e33e:	e7c1      	b.n	800e2c4 <__sflush_r+0x1c>
 800e340:	6a21      	ldr	r1, [r4, #32]
 800e342:	2301      	movs	r3, #1
 800e344:	4628      	mov	r0, r5
 800e346:	47b0      	blx	r6
 800e348:	1c41      	adds	r1, r0, #1
 800e34a:	d1c7      	bne.n	800e2dc <__sflush_r+0x34>
 800e34c:	682b      	ldr	r3, [r5, #0]
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d0c4      	beq.n	800e2dc <__sflush_r+0x34>
 800e352:	2b1d      	cmp	r3, #29
 800e354:	d001      	beq.n	800e35a <__sflush_r+0xb2>
 800e356:	2b16      	cmp	r3, #22
 800e358:	d101      	bne.n	800e35e <__sflush_r+0xb6>
 800e35a:	602f      	str	r7, [r5, #0]
 800e35c:	e7b1      	b.n	800e2c2 <__sflush_r+0x1a>
 800e35e:	89a3      	ldrh	r3, [r4, #12]
 800e360:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e364:	81a3      	strh	r3, [r4, #12]
 800e366:	e7ad      	b.n	800e2c4 <__sflush_r+0x1c>
 800e368:	690f      	ldr	r7, [r1, #16]
 800e36a:	2f00      	cmp	r7, #0
 800e36c:	d0a9      	beq.n	800e2c2 <__sflush_r+0x1a>
 800e36e:	0793      	lsls	r3, r2, #30
 800e370:	680e      	ldr	r6, [r1, #0]
 800e372:	bf08      	it	eq
 800e374:	694b      	ldreq	r3, [r1, #20]
 800e376:	600f      	str	r7, [r1, #0]
 800e378:	bf18      	it	ne
 800e37a:	2300      	movne	r3, #0
 800e37c:	eba6 0807 	sub.w	r8, r6, r7
 800e380:	608b      	str	r3, [r1, #8]
 800e382:	f1b8 0f00 	cmp.w	r8, #0
 800e386:	dd9c      	ble.n	800e2c2 <__sflush_r+0x1a>
 800e388:	6a21      	ldr	r1, [r4, #32]
 800e38a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e38c:	4643      	mov	r3, r8
 800e38e:	463a      	mov	r2, r7
 800e390:	4628      	mov	r0, r5
 800e392:	47b0      	blx	r6
 800e394:	2800      	cmp	r0, #0
 800e396:	dc06      	bgt.n	800e3a6 <__sflush_r+0xfe>
 800e398:	89a3      	ldrh	r3, [r4, #12]
 800e39a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e39e:	81a3      	strh	r3, [r4, #12]
 800e3a0:	f04f 30ff 	mov.w	r0, #4294967295
 800e3a4:	e78e      	b.n	800e2c4 <__sflush_r+0x1c>
 800e3a6:	4407      	add	r7, r0
 800e3a8:	eba8 0800 	sub.w	r8, r8, r0
 800e3ac:	e7e9      	b.n	800e382 <__sflush_r+0xda>
 800e3ae:	bf00      	nop
 800e3b0:	20400001 	.word	0x20400001

0800e3b4 <_fflush_r>:
 800e3b4:	b538      	push	{r3, r4, r5, lr}
 800e3b6:	690b      	ldr	r3, [r1, #16]
 800e3b8:	4605      	mov	r5, r0
 800e3ba:	460c      	mov	r4, r1
 800e3bc:	b913      	cbnz	r3, 800e3c4 <_fflush_r+0x10>
 800e3be:	2500      	movs	r5, #0
 800e3c0:	4628      	mov	r0, r5
 800e3c2:	bd38      	pop	{r3, r4, r5, pc}
 800e3c4:	b118      	cbz	r0, 800e3ce <_fflush_r+0x1a>
 800e3c6:	6983      	ldr	r3, [r0, #24]
 800e3c8:	b90b      	cbnz	r3, 800e3ce <_fflush_r+0x1a>
 800e3ca:	f000 f887 	bl	800e4dc <__sinit>
 800e3ce:	4b14      	ldr	r3, [pc, #80]	; (800e420 <_fflush_r+0x6c>)
 800e3d0:	429c      	cmp	r4, r3
 800e3d2:	d11b      	bne.n	800e40c <_fflush_r+0x58>
 800e3d4:	686c      	ldr	r4, [r5, #4]
 800e3d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d0ef      	beq.n	800e3be <_fflush_r+0xa>
 800e3de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e3e0:	07d0      	lsls	r0, r2, #31
 800e3e2:	d404      	bmi.n	800e3ee <_fflush_r+0x3a>
 800e3e4:	0599      	lsls	r1, r3, #22
 800e3e6:	d402      	bmi.n	800e3ee <_fflush_r+0x3a>
 800e3e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e3ea:	f000 f915 	bl	800e618 <__retarget_lock_acquire_recursive>
 800e3ee:	4628      	mov	r0, r5
 800e3f0:	4621      	mov	r1, r4
 800e3f2:	f7ff ff59 	bl	800e2a8 <__sflush_r>
 800e3f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e3f8:	07da      	lsls	r2, r3, #31
 800e3fa:	4605      	mov	r5, r0
 800e3fc:	d4e0      	bmi.n	800e3c0 <_fflush_r+0xc>
 800e3fe:	89a3      	ldrh	r3, [r4, #12]
 800e400:	059b      	lsls	r3, r3, #22
 800e402:	d4dd      	bmi.n	800e3c0 <_fflush_r+0xc>
 800e404:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e406:	f000 f908 	bl	800e61a <__retarget_lock_release_recursive>
 800e40a:	e7d9      	b.n	800e3c0 <_fflush_r+0xc>
 800e40c:	4b05      	ldr	r3, [pc, #20]	; (800e424 <_fflush_r+0x70>)
 800e40e:	429c      	cmp	r4, r3
 800e410:	d101      	bne.n	800e416 <_fflush_r+0x62>
 800e412:	68ac      	ldr	r4, [r5, #8]
 800e414:	e7df      	b.n	800e3d6 <_fflush_r+0x22>
 800e416:	4b04      	ldr	r3, [pc, #16]	; (800e428 <_fflush_r+0x74>)
 800e418:	429c      	cmp	r4, r3
 800e41a:	bf08      	it	eq
 800e41c:	68ec      	ldreq	r4, [r5, #12]
 800e41e:	e7da      	b.n	800e3d6 <_fflush_r+0x22>
 800e420:	0800f5cc 	.word	0x0800f5cc
 800e424:	0800f5ec 	.word	0x0800f5ec
 800e428:	0800f5ac 	.word	0x0800f5ac

0800e42c <std>:
 800e42c:	2300      	movs	r3, #0
 800e42e:	b510      	push	{r4, lr}
 800e430:	4604      	mov	r4, r0
 800e432:	e9c0 3300 	strd	r3, r3, [r0]
 800e436:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e43a:	6083      	str	r3, [r0, #8]
 800e43c:	8181      	strh	r1, [r0, #12]
 800e43e:	6643      	str	r3, [r0, #100]	; 0x64
 800e440:	81c2      	strh	r2, [r0, #14]
 800e442:	6183      	str	r3, [r0, #24]
 800e444:	4619      	mov	r1, r3
 800e446:	2208      	movs	r2, #8
 800e448:	305c      	adds	r0, #92	; 0x5c
 800e44a:	f7fd fd61 	bl	800bf10 <memset>
 800e44e:	4b05      	ldr	r3, [pc, #20]	; (800e464 <std+0x38>)
 800e450:	6263      	str	r3, [r4, #36]	; 0x24
 800e452:	4b05      	ldr	r3, [pc, #20]	; (800e468 <std+0x3c>)
 800e454:	62a3      	str	r3, [r4, #40]	; 0x28
 800e456:	4b05      	ldr	r3, [pc, #20]	; (800e46c <std+0x40>)
 800e458:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e45a:	4b05      	ldr	r3, [pc, #20]	; (800e470 <std+0x44>)
 800e45c:	6224      	str	r4, [r4, #32]
 800e45e:	6323      	str	r3, [r4, #48]	; 0x30
 800e460:	bd10      	pop	{r4, pc}
 800e462:	bf00      	nop
 800e464:	0800e76d 	.word	0x0800e76d
 800e468:	0800e78f 	.word	0x0800e78f
 800e46c:	0800e7c7 	.word	0x0800e7c7
 800e470:	0800e7eb 	.word	0x0800e7eb

0800e474 <_cleanup_r>:
 800e474:	4901      	ldr	r1, [pc, #4]	; (800e47c <_cleanup_r+0x8>)
 800e476:	f000 b8af 	b.w	800e5d8 <_fwalk_reent>
 800e47a:	bf00      	nop
 800e47c:	0800e3b5 	.word	0x0800e3b5

0800e480 <__sfmoreglue>:
 800e480:	b570      	push	{r4, r5, r6, lr}
 800e482:	1e4a      	subs	r2, r1, #1
 800e484:	2568      	movs	r5, #104	; 0x68
 800e486:	4355      	muls	r5, r2
 800e488:	460e      	mov	r6, r1
 800e48a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e48e:	f7ff fc23 	bl	800dcd8 <_malloc_r>
 800e492:	4604      	mov	r4, r0
 800e494:	b140      	cbz	r0, 800e4a8 <__sfmoreglue+0x28>
 800e496:	2100      	movs	r1, #0
 800e498:	e9c0 1600 	strd	r1, r6, [r0]
 800e49c:	300c      	adds	r0, #12
 800e49e:	60a0      	str	r0, [r4, #8]
 800e4a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e4a4:	f7fd fd34 	bl	800bf10 <memset>
 800e4a8:	4620      	mov	r0, r4
 800e4aa:	bd70      	pop	{r4, r5, r6, pc}

0800e4ac <__sfp_lock_acquire>:
 800e4ac:	4801      	ldr	r0, [pc, #4]	; (800e4b4 <__sfp_lock_acquire+0x8>)
 800e4ae:	f000 b8b3 	b.w	800e618 <__retarget_lock_acquire_recursive>
 800e4b2:	bf00      	nop
 800e4b4:	200010d8 	.word	0x200010d8

0800e4b8 <__sfp_lock_release>:
 800e4b8:	4801      	ldr	r0, [pc, #4]	; (800e4c0 <__sfp_lock_release+0x8>)
 800e4ba:	f000 b8ae 	b.w	800e61a <__retarget_lock_release_recursive>
 800e4be:	bf00      	nop
 800e4c0:	200010d8 	.word	0x200010d8

0800e4c4 <__sinit_lock_acquire>:
 800e4c4:	4801      	ldr	r0, [pc, #4]	; (800e4cc <__sinit_lock_acquire+0x8>)
 800e4c6:	f000 b8a7 	b.w	800e618 <__retarget_lock_acquire_recursive>
 800e4ca:	bf00      	nop
 800e4cc:	200010d3 	.word	0x200010d3

0800e4d0 <__sinit_lock_release>:
 800e4d0:	4801      	ldr	r0, [pc, #4]	; (800e4d8 <__sinit_lock_release+0x8>)
 800e4d2:	f000 b8a2 	b.w	800e61a <__retarget_lock_release_recursive>
 800e4d6:	bf00      	nop
 800e4d8:	200010d3 	.word	0x200010d3

0800e4dc <__sinit>:
 800e4dc:	b510      	push	{r4, lr}
 800e4de:	4604      	mov	r4, r0
 800e4e0:	f7ff fff0 	bl	800e4c4 <__sinit_lock_acquire>
 800e4e4:	69a3      	ldr	r3, [r4, #24]
 800e4e6:	b11b      	cbz	r3, 800e4f0 <__sinit+0x14>
 800e4e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e4ec:	f7ff bff0 	b.w	800e4d0 <__sinit_lock_release>
 800e4f0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e4f4:	6523      	str	r3, [r4, #80]	; 0x50
 800e4f6:	4b13      	ldr	r3, [pc, #76]	; (800e544 <__sinit+0x68>)
 800e4f8:	4a13      	ldr	r2, [pc, #76]	; (800e548 <__sinit+0x6c>)
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	62a2      	str	r2, [r4, #40]	; 0x28
 800e4fe:	42a3      	cmp	r3, r4
 800e500:	bf04      	itt	eq
 800e502:	2301      	moveq	r3, #1
 800e504:	61a3      	streq	r3, [r4, #24]
 800e506:	4620      	mov	r0, r4
 800e508:	f000 f820 	bl	800e54c <__sfp>
 800e50c:	6060      	str	r0, [r4, #4]
 800e50e:	4620      	mov	r0, r4
 800e510:	f000 f81c 	bl	800e54c <__sfp>
 800e514:	60a0      	str	r0, [r4, #8]
 800e516:	4620      	mov	r0, r4
 800e518:	f000 f818 	bl	800e54c <__sfp>
 800e51c:	2200      	movs	r2, #0
 800e51e:	60e0      	str	r0, [r4, #12]
 800e520:	2104      	movs	r1, #4
 800e522:	6860      	ldr	r0, [r4, #4]
 800e524:	f7ff ff82 	bl	800e42c <std>
 800e528:	68a0      	ldr	r0, [r4, #8]
 800e52a:	2201      	movs	r2, #1
 800e52c:	2109      	movs	r1, #9
 800e52e:	f7ff ff7d 	bl	800e42c <std>
 800e532:	68e0      	ldr	r0, [r4, #12]
 800e534:	2202      	movs	r2, #2
 800e536:	2112      	movs	r1, #18
 800e538:	f7ff ff78 	bl	800e42c <std>
 800e53c:	2301      	movs	r3, #1
 800e53e:	61a3      	str	r3, [r4, #24]
 800e540:	e7d2      	b.n	800e4e8 <__sinit+0xc>
 800e542:	bf00      	nop
 800e544:	0800f228 	.word	0x0800f228
 800e548:	0800e475 	.word	0x0800e475

0800e54c <__sfp>:
 800e54c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e54e:	4607      	mov	r7, r0
 800e550:	f7ff ffac 	bl	800e4ac <__sfp_lock_acquire>
 800e554:	4b1e      	ldr	r3, [pc, #120]	; (800e5d0 <__sfp+0x84>)
 800e556:	681e      	ldr	r6, [r3, #0]
 800e558:	69b3      	ldr	r3, [r6, #24]
 800e55a:	b913      	cbnz	r3, 800e562 <__sfp+0x16>
 800e55c:	4630      	mov	r0, r6
 800e55e:	f7ff ffbd 	bl	800e4dc <__sinit>
 800e562:	3648      	adds	r6, #72	; 0x48
 800e564:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e568:	3b01      	subs	r3, #1
 800e56a:	d503      	bpl.n	800e574 <__sfp+0x28>
 800e56c:	6833      	ldr	r3, [r6, #0]
 800e56e:	b30b      	cbz	r3, 800e5b4 <__sfp+0x68>
 800e570:	6836      	ldr	r6, [r6, #0]
 800e572:	e7f7      	b.n	800e564 <__sfp+0x18>
 800e574:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e578:	b9d5      	cbnz	r5, 800e5b0 <__sfp+0x64>
 800e57a:	4b16      	ldr	r3, [pc, #88]	; (800e5d4 <__sfp+0x88>)
 800e57c:	60e3      	str	r3, [r4, #12]
 800e57e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e582:	6665      	str	r5, [r4, #100]	; 0x64
 800e584:	f000 f847 	bl	800e616 <__retarget_lock_init_recursive>
 800e588:	f7ff ff96 	bl	800e4b8 <__sfp_lock_release>
 800e58c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e590:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e594:	6025      	str	r5, [r4, #0]
 800e596:	61a5      	str	r5, [r4, #24]
 800e598:	2208      	movs	r2, #8
 800e59a:	4629      	mov	r1, r5
 800e59c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e5a0:	f7fd fcb6 	bl	800bf10 <memset>
 800e5a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e5a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e5ac:	4620      	mov	r0, r4
 800e5ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e5b0:	3468      	adds	r4, #104	; 0x68
 800e5b2:	e7d9      	b.n	800e568 <__sfp+0x1c>
 800e5b4:	2104      	movs	r1, #4
 800e5b6:	4638      	mov	r0, r7
 800e5b8:	f7ff ff62 	bl	800e480 <__sfmoreglue>
 800e5bc:	4604      	mov	r4, r0
 800e5be:	6030      	str	r0, [r6, #0]
 800e5c0:	2800      	cmp	r0, #0
 800e5c2:	d1d5      	bne.n	800e570 <__sfp+0x24>
 800e5c4:	f7ff ff78 	bl	800e4b8 <__sfp_lock_release>
 800e5c8:	230c      	movs	r3, #12
 800e5ca:	603b      	str	r3, [r7, #0]
 800e5cc:	e7ee      	b.n	800e5ac <__sfp+0x60>
 800e5ce:	bf00      	nop
 800e5d0:	0800f228 	.word	0x0800f228
 800e5d4:	ffff0001 	.word	0xffff0001

0800e5d8 <_fwalk_reent>:
 800e5d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e5dc:	4606      	mov	r6, r0
 800e5de:	4688      	mov	r8, r1
 800e5e0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e5e4:	2700      	movs	r7, #0
 800e5e6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e5ea:	f1b9 0901 	subs.w	r9, r9, #1
 800e5ee:	d505      	bpl.n	800e5fc <_fwalk_reent+0x24>
 800e5f0:	6824      	ldr	r4, [r4, #0]
 800e5f2:	2c00      	cmp	r4, #0
 800e5f4:	d1f7      	bne.n	800e5e6 <_fwalk_reent+0xe>
 800e5f6:	4638      	mov	r0, r7
 800e5f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e5fc:	89ab      	ldrh	r3, [r5, #12]
 800e5fe:	2b01      	cmp	r3, #1
 800e600:	d907      	bls.n	800e612 <_fwalk_reent+0x3a>
 800e602:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e606:	3301      	adds	r3, #1
 800e608:	d003      	beq.n	800e612 <_fwalk_reent+0x3a>
 800e60a:	4629      	mov	r1, r5
 800e60c:	4630      	mov	r0, r6
 800e60e:	47c0      	blx	r8
 800e610:	4307      	orrs	r7, r0
 800e612:	3568      	adds	r5, #104	; 0x68
 800e614:	e7e9      	b.n	800e5ea <_fwalk_reent+0x12>

0800e616 <__retarget_lock_init_recursive>:
 800e616:	4770      	bx	lr

0800e618 <__retarget_lock_acquire_recursive>:
 800e618:	4770      	bx	lr

0800e61a <__retarget_lock_release_recursive>:
 800e61a:	4770      	bx	lr

0800e61c <__swhatbuf_r>:
 800e61c:	b570      	push	{r4, r5, r6, lr}
 800e61e:	460e      	mov	r6, r1
 800e620:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e624:	2900      	cmp	r1, #0
 800e626:	b096      	sub	sp, #88	; 0x58
 800e628:	4614      	mov	r4, r2
 800e62a:	461d      	mov	r5, r3
 800e62c:	da07      	bge.n	800e63e <__swhatbuf_r+0x22>
 800e62e:	2300      	movs	r3, #0
 800e630:	602b      	str	r3, [r5, #0]
 800e632:	89b3      	ldrh	r3, [r6, #12]
 800e634:	061a      	lsls	r2, r3, #24
 800e636:	d410      	bmi.n	800e65a <__swhatbuf_r+0x3e>
 800e638:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e63c:	e00e      	b.n	800e65c <__swhatbuf_r+0x40>
 800e63e:	466a      	mov	r2, sp
 800e640:	f000 f8fa 	bl	800e838 <_fstat_r>
 800e644:	2800      	cmp	r0, #0
 800e646:	dbf2      	blt.n	800e62e <__swhatbuf_r+0x12>
 800e648:	9a01      	ldr	r2, [sp, #4]
 800e64a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e64e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e652:	425a      	negs	r2, r3
 800e654:	415a      	adcs	r2, r3
 800e656:	602a      	str	r2, [r5, #0]
 800e658:	e7ee      	b.n	800e638 <__swhatbuf_r+0x1c>
 800e65a:	2340      	movs	r3, #64	; 0x40
 800e65c:	2000      	movs	r0, #0
 800e65e:	6023      	str	r3, [r4, #0]
 800e660:	b016      	add	sp, #88	; 0x58
 800e662:	bd70      	pop	{r4, r5, r6, pc}

0800e664 <__smakebuf_r>:
 800e664:	898b      	ldrh	r3, [r1, #12]
 800e666:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e668:	079d      	lsls	r5, r3, #30
 800e66a:	4606      	mov	r6, r0
 800e66c:	460c      	mov	r4, r1
 800e66e:	d507      	bpl.n	800e680 <__smakebuf_r+0x1c>
 800e670:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e674:	6023      	str	r3, [r4, #0]
 800e676:	6123      	str	r3, [r4, #16]
 800e678:	2301      	movs	r3, #1
 800e67a:	6163      	str	r3, [r4, #20]
 800e67c:	b002      	add	sp, #8
 800e67e:	bd70      	pop	{r4, r5, r6, pc}
 800e680:	ab01      	add	r3, sp, #4
 800e682:	466a      	mov	r2, sp
 800e684:	f7ff ffca 	bl	800e61c <__swhatbuf_r>
 800e688:	9900      	ldr	r1, [sp, #0]
 800e68a:	4605      	mov	r5, r0
 800e68c:	4630      	mov	r0, r6
 800e68e:	f7ff fb23 	bl	800dcd8 <_malloc_r>
 800e692:	b948      	cbnz	r0, 800e6a8 <__smakebuf_r+0x44>
 800e694:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e698:	059a      	lsls	r2, r3, #22
 800e69a:	d4ef      	bmi.n	800e67c <__smakebuf_r+0x18>
 800e69c:	f023 0303 	bic.w	r3, r3, #3
 800e6a0:	f043 0302 	orr.w	r3, r3, #2
 800e6a4:	81a3      	strh	r3, [r4, #12]
 800e6a6:	e7e3      	b.n	800e670 <__smakebuf_r+0xc>
 800e6a8:	4b0d      	ldr	r3, [pc, #52]	; (800e6e0 <__smakebuf_r+0x7c>)
 800e6aa:	62b3      	str	r3, [r6, #40]	; 0x28
 800e6ac:	89a3      	ldrh	r3, [r4, #12]
 800e6ae:	6020      	str	r0, [r4, #0]
 800e6b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e6b4:	81a3      	strh	r3, [r4, #12]
 800e6b6:	9b00      	ldr	r3, [sp, #0]
 800e6b8:	6163      	str	r3, [r4, #20]
 800e6ba:	9b01      	ldr	r3, [sp, #4]
 800e6bc:	6120      	str	r0, [r4, #16]
 800e6be:	b15b      	cbz	r3, 800e6d8 <__smakebuf_r+0x74>
 800e6c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e6c4:	4630      	mov	r0, r6
 800e6c6:	f000 f8c9 	bl	800e85c <_isatty_r>
 800e6ca:	b128      	cbz	r0, 800e6d8 <__smakebuf_r+0x74>
 800e6cc:	89a3      	ldrh	r3, [r4, #12]
 800e6ce:	f023 0303 	bic.w	r3, r3, #3
 800e6d2:	f043 0301 	orr.w	r3, r3, #1
 800e6d6:	81a3      	strh	r3, [r4, #12]
 800e6d8:	89a0      	ldrh	r0, [r4, #12]
 800e6da:	4305      	orrs	r5, r0
 800e6dc:	81a5      	strh	r5, [r4, #12]
 800e6de:	e7cd      	b.n	800e67c <__smakebuf_r+0x18>
 800e6e0:	0800e475 	.word	0x0800e475

0800e6e4 <_raise_r>:
 800e6e4:	291f      	cmp	r1, #31
 800e6e6:	b538      	push	{r3, r4, r5, lr}
 800e6e8:	4604      	mov	r4, r0
 800e6ea:	460d      	mov	r5, r1
 800e6ec:	d904      	bls.n	800e6f8 <_raise_r+0x14>
 800e6ee:	2316      	movs	r3, #22
 800e6f0:	6003      	str	r3, [r0, #0]
 800e6f2:	f04f 30ff 	mov.w	r0, #4294967295
 800e6f6:	bd38      	pop	{r3, r4, r5, pc}
 800e6f8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e6fa:	b112      	cbz	r2, 800e702 <_raise_r+0x1e>
 800e6fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e700:	b94b      	cbnz	r3, 800e716 <_raise_r+0x32>
 800e702:	4620      	mov	r0, r4
 800e704:	f000 f830 	bl	800e768 <_getpid_r>
 800e708:	462a      	mov	r2, r5
 800e70a:	4601      	mov	r1, r0
 800e70c:	4620      	mov	r0, r4
 800e70e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e712:	f000 b817 	b.w	800e744 <_kill_r>
 800e716:	2b01      	cmp	r3, #1
 800e718:	d00a      	beq.n	800e730 <_raise_r+0x4c>
 800e71a:	1c59      	adds	r1, r3, #1
 800e71c:	d103      	bne.n	800e726 <_raise_r+0x42>
 800e71e:	2316      	movs	r3, #22
 800e720:	6003      	str	r3, [r0, #0]
 800e722:	2001      	movs	r0, #1
 800e724:	e7e7      	b.n	800e6f6 <_raise_r+0x12>
 800e726:	2400      	movs	r4, #0
 800e728:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e72c:	4628      	mov	r0, r5
 800e72e:	4798      	blx	r3
 800e730:	2000      	movs	r0, #0
 800e732:	e7e0      	b.n	800e6f6 <_raise_r+0x12>

0800e734 <raise>:
 800e734:	4b02      	ldr	r3, [pc, #8]	; (800e740 <raise+0xc>)
 800e736:	4601      	mov	r1, r0
 800e738:	6818      	ldr	r0, [r3, #0]
 800e73a:	f7ff bfd3 	b.w	800e6e4 <_raise_r>
 800e73e:	bf00      	nop
 800e740:	20000188 	.word	0x20000188

0800e744 <_kill_r>:
 800e744:	b538      	push	{r3, r4, r5, lr}
 800e746:	4d07      	ldr	r5, [pc, #28]	; (800e764 <_kill_r+0x20>)
 800e748:	2300      	movs	r3, #0
 800e74a:	4604      	mov	r4, r0
 800e74c:	4608      	mov	r0, r1
 800e74e:	4611      	mov	r1, r2
 800e750:	602b      	str	r3, [r5, #0]
 800e752:	f7f3 f93b 	bl	80019cc <_kill>
 800e756:	1c43      	adds	r3, r0, #1
 800e758:	d102      	bne.n	800e760 <_kill_r+0x1c>
 800e75a:	682b      	ldr	r3, [r5, #0]
 800e75c:	b103      	cbz	r3, 800e760 <_kill_r+0x1c>
 800e75e:	6023      	str	r3, [r4, #0]
 800e760:	bd38      	pop	{r3, r4, r5, pc}
 800e762:	bf00      	nop
 800e764:	200010cc 	.word	0x200010cc

0800e768 <_getpid_r>:
 800e768:	f7f3 b928 	b.w	80019bc <_getpid>

0800e76c <__sread>:
 800e76c:	b510      	push	{r4, lr}
 800e76e:	460c      	mov	r4, r1
 800e770:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e774:	f000 f894 	bl	800e8a0 <_read_r>
 800e778:	2800      	cmp	r0, #0
 800e77a:	bfab      	itete	ge
 800e77c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e77e:	89a3      	ldrhlt	r3, [r4, #12]
 800e780:	181b      	addge	r3, r3, r0
 800e782:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e786:	bfac      	ite	ge
 800e788:	6563      	strge	r3, [r4, #84]	; 0x54
 800e78a:	81a3      	strhlt	r3, [r4, #12]
 800e78c:	bd10      	pop	{r4, pc}

0800e78e <__swrite>:
 800e78e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e792:	461f      	mov	r7, r3
 800e794:	898b      	ldrh	r3, [r1, #12]
 800e796:	05db      	lsls	r3, r3, #23
 800e798:	4605      	mov	r5, r0
 800e79a:	460c      	mov	r4, r1
 800e79c:	4616      	mov	r6, r2
 800e79e:	d505      	bpl.n	800e7ac <__swrite+0x1e>
 800e7a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e7a4:	2302      	movs	r3, #2
 800e7a6:	2200      	movs	r2, #0
 800e7a8:	f000 f868 	bl	800e87c <_lseek_r>
 800e7ac:	89a3      	ldrh	r3, [r4, #12]
 800e7ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e7b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e7b6:	81a3      	strh	r3, [r4, #12]
 800e7b8:	4632      	mov	r2, r6
 800e7ba:	463b      	mov	r3, r7
 800e7bc:	4628      	mov	r0, r5
 800e7be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e7c2:	f000 b817 	b.w	800e7f4 <_write_r>

0800e7c6 <__sseek>:
 800e7c6:	b510      	push	{r4, lr}
 800e7c8:	460c      	mov	r4, r1
 800e7ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e7ce:	f000 f855 	bl	800e87c <_lseek_r>
 800e7d2:	1c43      	adds	r3, r0, #1
 800e7d4:	89a3      	ldrh	r3, [r4, #12]
 800e7d6:	bf15      	itete	ne
 800e7d8:	6560      	strne	r0, [r4, #84]	; 0x54
 800e7da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e7de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e7e2:	81a3      	strheq	r3, [r4, #12]
 800e7e4:	bf18      	it	ne
 800e7e6:	81a3      	strhne	r3, [r4, #12]
 800e7e8:	bd10      	pop	{r4, pc}

0800e7ea <__sclose>:
 800e7ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e7ee:	f000 b813 	b.w	800e818 <_close_r>
	...

0800e7f4 <_write_r>:
 800e7f4:	b538      	push	{r3, r4, r5, lr}
 800e7f6:	4d07      	ldr	r5, [pc, #28]	; (800e814 <_write_r+0x20>)
 800e7f8:	4604      	mov	r4, r0
 800e7fa:	4608      	mov	r0, r1
 800e7fc:	4611      	mov	r1, r2
 800e7fe:	2200      	movs	r2, #0
 800e800:	602a      	str	r2, [r5, #0]
 800e802:	461a      	mov	r2, r3
 800e804:	f7f3 f919 	bl	8001a3a <_write>
 800e808:	1c43      	adds	r3, r0, #1
 800e80a:	d102      	bne.n	800e812 <_write_r+0x1e>
 800e80c:	682b      	ldr	r3, [r5, #0]
 800e80e:	b103      	cbz	r3, 800e812 <_write_r+0x1e>
 800e810:	6023      	str	r3, [r4, #0]
 800e812:	bd38      	pop	{r3, r4, r5, pc}
 800e814:	200010cc 	.word	0x200010cc

0800e818 <_close_r>:
 800e818:	b538      	push	{r3, r4, r5, lr}
 800e81a:	4d06      	ldr	r5, [pc, #24]	; (800e834 <_close_r+0x1c>)
 800e81c:	2300      	movs	r3, #0
 800e81e:	4604      	mov	r4, r0
 800e820:	4608      	mov	r0, r1
 800e822:	602b      	str	r3, [r5, #0]
 800e824:	f7f3 f925 	bl	8001a72 <_close>
 800e828:	1c43      	adds	r3, r0, #1
 800e82a:	d102      	bne.n	800e832 <_close_r+0x1a>
 800e82c:	682b      	ldr	r3, [r5, #0]
 800e82e:	b103      	cbz	r3, 800e832 <_close_r+0x1a>
 800e830:	6023      	str	r3, [r4, #0]
 800e832:	bd38      	pop	{r3, r4, r5, pc}
 800e834:	200010cc 	.word	0x200010cc

0800e838 <_fstat_r>:
 800e838:	b538      	push	{r3, r4, r5, lr}
 800e83a:	4d07      	ldr	r5, [pc, #28]	; (800e858 <_fstat_r+0x20>)
 800e83c:	2300      	movs	r3, #0
 800e83e:	4604      	mov	r4, r0
 800e840:	4608      	mov	r0, r1
 800e842:	4611      	mov	r1, r2
 800e844:	602b      	str	r3, [r5, #0]
 800e846:	f7f3 f920 	bl	8001a8a <_fstat>
 800e84a:	1c43      	adds	r3, r0, #1
 800e84c:	d102      	bne.n	800e854 <_fstat_r+0x1c>
 800e84e:	682b      	ldr	r3, [r5, #0]
 800e850:	b103      	cbz	r3, 800e854 <_fstat_r+0x1c>
 800e852:	6023      	str	r3, [r4, #0]
 800e854:	bd38      	pop	{r3, r4, r5, pc}
 800e856:	bf00      	nop
 800e858:	200010cc 	.word	0x200010cc

0800e85c <_isatty_r>:
 800e85c:	b538      	push	{r3, r4, r5, lr}
 800e85e:	4d06      	ldr	r5, [pc, #24]	; (800e878 <_isatty_r+0x1c>)
 800e860:	2300      	movs	r3, #0
 800e862:	4604      	mov	r4, r0
 800e864:	4608      	mov	r0, r1
 800e866:	602b      	str	r3, [r5, #0]
 800e868:	f7f3 f91f 	bl	8001aaa <_isatty>
 800e86c:	1c43      	adds	r3, r0, #1
 800e86e:	d102      	bne.n	800e876 <_isatty_r+0x1a>
 800e870:	682b      	ldr	r3, [r5, #0]
 800e872:	b103      	cbz	r3, 800e876 <_isatty_r+0x1a>
 800e874:	6023      	str	r3, [r4, #0]
 800e876:	bd38      	pop	{r3, r4, r5, pc}
 800e878:	200010cc 	.word	0x200010cc

0800e87c <_lseek_r>:
 800e87c:	b538      	push	{r3, r4, r5, lr}
 800e87e:	4d07      	ldr	r5, [pc, #28]	; (800e89c <_lseek_r+0x20>)
 800e880:	4604      	mov	r4, r0
 800e882:	4608      	mov	r0, r1
 800e884:	4611      	mov	r1, r2
 800e886:	2200      	movs	r2, #0
 800e888:	602a      	str	r2, [r5, #0]
 800e88a:	461a      	mov	r2, r3
 800e88c:	f7f3 f918 	bl	8001ac0 <_lseek>
 800e890:	1c43      	adds	r3, r0, #1
 800e892:	d102      	bne.n	800e89a <_lseek_r+0x1e>
 800e894:	682b      	ldr	r3, [r5, #0]
 800e896:	b103      	cbz	r3, 800e89a <_lseek_r+0x1e>
 800e898:	6023      	str	r3, [r4, #0]
 800e89a:	bd38      	pop	{r3, r4, r5, pc}
 800e89c:	200010cc 	.word	0x200010cc

0800e8a0 <_read_r>:
 800e8a0:	b538      	push	{r3, r4, r5, lr}
 800e8a2:	4d07      	ldr	r5, [pc, #28]	; (800e8c0 <_read_r+0x20>)
 800e8a4:	4604      	mov	r4, r0
 800e8a6:	4608      	mov	r0, r1
 800e8a8:	4611      	mov	r1, r2
 800e8aa:	2200      	movs	r2, #0
 800e8ac:	602a      	str	r2, [r5, #0]
 800e8ae:	461a      	mov	r2, r3
 800e8b0:	f7f3 f8a6 	bl	8001a00 <_read>
 800e8b4:	1c43      	adds	r3, r0, #1
 800e8b6:	d102      	bne.n	800e8be <_read_r+0x1e>
 800e8b8:	682b      	ldr	r3, [r5, #0]
 800e8ba:	b103      	cbz	r3, 800e8be <_read_r+0x1e>
 800e8bc:	6023      	str	r3, [r4, #0]
 800e8be:	bd38      	pop	{r3, r4, r5, pc}
 800e8c0:	200010cc 	.word	0x200010cc

0800e8c4 <powf>:
 800e8c4:	b508      	push	{r3, lr}
 800e8c6:	ed2d 8b04 	vpush	{d8-d9}
 800e8ca:	eeb0 9a40 	vmov.f32	s18, s0
 800e8ce:	eef0 8a60 	vmov.f32	s17, s1
 800e8d2:	f000 f8b5 	bl	800ea40 <__ieee754_powf>
 800e8d6:	4b43      	ldr	r3, [pc, #268]	; (800e9e4 <powf+0x120>)
 800e8d8:	f993 3000 	ldrsb.w	r3, [r3]
 800e8dc:	3301      	adds	r3, #1
 800e8de:	eeb0 8a40 	vmov.f32	s16, s0
 800e8e2:	d012      	beq.n	800e90a <powf+0x46>
 800e8e4:	eef4 8a68 	vcmp.f32	s17, s17
 800e8e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8ec:	d60d      	bvs.n	800e90a <powf+0x46>
 800e8ee:	eeb4 9a49 	vcmp.f32	s18, s18
 800e8f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8f6:	d70d      	bvc.n	800e914 <powf+0x50>
 800e8f8:	eef5 8a40 	vcmp.f32	s17, #0.0
 800e8fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e900:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800e904:	bf08      	it	eq
 800e906:	eeb0 8a67 	vmoveq.f32	s16, s15
 800e90a:	eeb0 0a48 	vmov.f32	s0, s16
 800e90e:	ecbd 8b04 	vpop	{d8-d9}
 800e912:	bd08      	pop	{r3, pc}
 800e914:	eddf 9a34 	vldr	s19, [pc, #208]	; 800e9e8 <powf+0x124>
 800e918:	eeb4 9a69 	vcmp.f32	s18, s19
 800e91c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e920:	d116      	bne.n	800e950 <powf+0x8c>
 800e922:	eef4 8a69 	vcmp.f32	s17, s19
 800e926:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e92a:	d057      	beq.n	800e9dc <powf+0x118>
 800e92c:	eeb0 0a68 	vmov.f32	s0, s17
 800e930:	f000 fb50 	bl	800efd4 <finitef>
 800e934:	2800      	cmp	r0, #0
 800e936:	d0e8      	beq.n	800e90a <powf+0x46>
 800e938:	eef4 8ae9 	vcmpe.f32	s17, s19
 800e93c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e940:	d5e3      	bpl.n	800e90a <powf+0x46>
 800e942:	f7fd fabb 	bl	800bebc <__errno>
 800e946:	2321      	movs	r3, #33	; 0x21
 800e948:	6003      	str	r3, [r0, #0]
 800e94a:	ed9f 8a28 	vldr	s16, [pc, #160]	; 800e9ec <powf+0x128>
 800e94e:	e7dc      	b.n	800e90a <powf+0x46>
 800e950:	f000 fb40 	bl	800efd4 <finitef>
 800e954:	bb50      	cbnz	r0, 800e9ac <powf+0xe8>
 800e956:	eeb0 0a49 	vmov.f32	s0, s18
 800e95a:	f000 fb3b 	bl	800efd4 <finitef>
 800e95e:	b328      	cbz	r0, 800e9ac <powf+0xe8>
 800e960:	eeb0 0a68 	vmov.f32	s0, s17
 800e964:	f000 fb36 	bl	800efd4 <finitef>
 800e968:	b300      	cbz	r0, 800e9ac <powf+0xe8>
 800e96a:	eeb4 8a48 	vcmp.f32	s16, s16
 800e96e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e972:	d706      	bvc.n	800e982 <powf+0xbe>
 800e974:	f7fd faa2 	bl	800bebc <__errno>
 800e978:	2321      	movs	r3, #33	; 0x21
 800e97a:	ee89 8aa9 	vdiv.f32	s16, s19, s19
 800e97e:	6003      	str	r3, [r0, #0]
 800e980:	e7c3      	b.n	800e90a <powf+0x46>
 800e982:	f7fd fa9b 	bl	800bebc <__errno>
 800e986:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 800e98a:	2322      	movs	r3, #34	; 0x22
 800e98c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e990:	6003      	str	r3, [r0, #0]
 800e992:	d508      	bpl.n	800e9a6 <powf+0xe2>
 800e994:	eeb0 0a68 	vmov.f32	s0, s17
 800e998:	f000 fb30 	bl	800effc <rintf>
 800e99c:	eeb4 0a68 	vcmp.f32	s0, s17
 800e9a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9a4:	d1d1      	bne.n	800e94a <powf+0x86>
 800e9a6:	ed9f 8a12 	vldr	s16, [pc, #72]	; 800e9f0 <powf+0x12c>
 800e9aa:	e7ae      	b.n	800e90a <powf+0x46>
 800e9ac:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800e9b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9b4:	d1a9      	bne.n	800e90a <powf+0x46>
 800e9b6:	eeb0 0a49 	vmov.f32	s0, s18
 800e9ba:	f000 fb0b 	bl	800efd4 <finitef>
 800e9be:	2800      	cmp	r0, #0
 800e9c0:	d0a3      	beq.n	800e90a <powf+0x46>
 800e9c2:	eeb0 0a68 	vmov.f32	s0, s17
 800e9c6:	f000 fb05 	bl	800efd4 <finitef>
 800e9ca:	2800      	cmp	r0, #0
 800e9cc:	d09d      	beq.n	800e90a <powf+0x46>
 800e9ce:	f7fd fa75 	bl	800bebc <__errno>
 800e9d2:	2322      	movs	r3, #34	; 0x22
 800e9d4:	ed9f 8a04 	vldr	s16, [pc, #16]	; 800e9e8 <powf+0x124>
 800e9d8:	6003      	str	r3, [r0, #0]
 800e9da:	e796      	b.n	800e90a <powf+0x46>
 800e9dc:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800e9e0:	e793      	b.n	800e90a <powf+0x46>
 800e9e2:	bf00      	nop
 800e9e4:	20000358 	.word	0x20000358
 800e9e8:	00000000 	.word	0x00000000
 800e9ec:	ff800000 	.word	0xff800000
 800e9f0:	7f800000 	.word	0x7f800000

0800e9f4 <sqrtf>:
 800e9f4:	b508      	push	{r3, lr}
 800e9f6:	ed2d 8b02 	vpush	{d8}
 800e9fa:	eeb0 8a40 	vmov.f32	s16, s0
 800e9fe:	f000 fadf 	bl	800efc0 <__ieee754_sqrtf>
 800ea02:	4b0d      	ldr	r3, [pc, #52]	; (800ea38 <sqrtf+0x44>)
 800ea04:	f993 3000 	ldrsb.w	r3, [r3]
 800ea08:	3301      	adds	r3, #1
 800ea0a:	d011      	beq.n	800ea30 <sqrtf+0x3c>
 800ea0c:	eeb4 8a48 	vcmp.f32	s16, s16
 800ea10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea14:	d60c      	bvs.n	800ea30 <sqrtf+0x3c>
 800ea16:	eddf 8a09 	vldr	s17, [pc, #36]	; 800ea3c <sqrtf+0x48>
 800ea1a:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800ea1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea22:	d505      	bpl.n	800ea30 <sqrtf+0x3c>
 800ea24:	f7fd fa4a 	bl	800bebc <__errno>
 800ea28:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800ea2c:	2321      	movs	r3, #33	; 0x21
 800ea2e:	6003      	str	r3, [r0, #0]
 800ea30:	ecbd 8b02 	vpop	{d8}
 800ea34:	bd08      	pop	{r3, pc}
 800ea36:	bf00      	nop
 800ea38:	20000358 	.word	0x20000358
 800ea3c:	00000000 	.word	0x00000000

0800ea40 <__ieee754_powf>:
 800ea40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea44:	ee10 5a90 	vmov	r5, s1
 800ea48:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 800ea4c:	ed2d 8b02 	vpush	{d8}
 800ea50:	eeb0 8a40 	vmov.f32	s16, s0
 800ea54:	eef0 8a60 	vmov.f32	s17, s1
 800ea58:	f000 8291 	beq.w	800ef7e <__ieee754_powf+0x53e>
 800ea5c:	ee10 8a10 	vmov	r8, s0
 800ea60:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 800ea64:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800ea68:	dc06      	bgt.n	800ea78 <__ieee754_powf+0x38>
 800ea6a:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800ea6e:	dd0a      	ble.n	800ea86 <__ieee754_powf+0x46>
 800ea70:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800ea74:	f000 8283 	beq.w	800ef7e <__ieee754_powf+0x53e>
 800ea78:	ecbd 8b02 	vpop	{d8}
 800ea7c:	48d8      	ldr	r0, [pc, #864]	; (800ede0 <__ieee754_powf+0x3a0>)
 800ea7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ea82:	f000 bab5 	b.w	800eff0 <nanf>
 800ea86:	f1b8 0f00 	cmp.w	r8, #0
 800ea8a:	da1f      	bge.n	800eacc <__ieee754_powf+0x8c>
 800ea8c:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 800ea90:	da2e      	bge.n	800eaf0 <__ieee754_powf+0xb0>
 800ea92:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800ea96:	f2c0 827b 	blt.w	800ef90 <__ieee754_powf+0x550>
 800ea9a:	15fb      	asrs	r3, r7, #23
 800ea9c:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800eaa0:	fa47 f603 	asr.w	r6, r7, r3
 800eaa4:	fa06 f303 	lsl.w	r3, r6, r3
 800eaa8:	42bb      	cmp	r3, r7
 800eaaa:	f040 8271 	bne.w	800ef90 <__ieee754_powf+0x550>
 800eaae:	f006 0601 	and.w	r6, r6, #1
 800eab2:	f1c6 0602 	rsb	r6, r6, #2
 800eab6:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800eaba:	d120      	bne.n	800eafe <__ieee754_powf+0xbe>
 800eabc:	2d00      	cmp	r5, #0
 800eabe:	f280 8264 	bge.w	800ef8a <__ieee754_powf+0x54a>
 800eac2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800eac6:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800eaca:	e00d      	b.n	800eae8 <__ieee754_powf+0xa8>
 800eacc:	2600      	movs	r6, #0
 800eace:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800ead2:	d1f0      	bne.n	800eab6 <__ieee754_powf+0x76>
 800ead4:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800ead8:	f000 8251 	beq.w	800ef7e <__ieee754_powf+0x53e>
 800eadc:	dd0a      	ble.n	800eaf4 <__ieee754_powf+0xb4>
 800eade:	2d00      	cmp	r5, #0
 800eae0:	f280 8250 	bge.w	800ef84 <__ieee754_powf+0x544>
 800eae4:	ed9f 0abf 	vldr	s0, [pc, #764]	; 800ede4 <__ieee754_powf+0x3a4>
 800eae8:	ecbd 8b02 	vpop	{d8}
 800eaec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eaf0:	2602      	movs	r6, #2
 800eaf2:	e7ec      	b.n	800eace <__ieee754_powf+0x8e>
 800eaf4:	2d00      	cmp	r5, #0
 800eaf6:	daf5      	bge.n	800eae4 <__ieee754_powf+0xa4>
 800eaf8:	eeb1 0a68 	vneg.f32	s0, s17
 800eafc:	e7f4      	b.n	800eae8 <__ieee754_powf+0xa8>
 800eafe:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 800eb02:	d102      	bne.n	800eb0a <__ieee754_powf+0xca>
 800eb04:	ee28 0a08 	vmul.f32	s0, s16, s16
 800eb08:	e7ee      	b.n	800eae8 <__ieee754_powf+0xa8>
 800eb0a:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 800eb0e:	eeb0 0a48 	vmov.f32	s0, s16
 800eb12:	d108      	bne.n	800eb26 <__ieee754_powf+0xe6>
 800eb14:	f1b8 0f00 	cmp.w	r8, #0
 800eb18:	db05      	blt.n	800eb26 <__ieee754_powf+0xe6>
 800eb1a:	ecbd 8b02 	vpop	{d8}
 800eb1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eb22:	f000 ba4d 	b.w	800efc0 <__ieee754_sqrtf>
 800eb26:	f000 fa4e 	bl	800efc6 <fabsf>
 800eb2a:	b124      	cbz	r4, 800eb36 <__ieee754_powf+0xf6>
 800eb2c:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 800eb30:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800eb34:	d117      	bne.n	800eb66 <__ieee754_powf+0x126>
 800eb36:	2d00      	cmp	r5, #0
 800eb38:	bfbc      	itt	lt
 800eb3a:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800eb3e:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800eb42:	f1b8 0f00 	cmp.w	r8, #0
 800eb46:	dacf      	bge.n	800eae8 <__ieee754_powf+0xa8>
 800eb48:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 800eb4c:	ea54 0306 	orrs.w	r3, r4, r6
 800eb50:	d104      	bne.n	800eb5c <__ieee754_powf+0x11c>
 800eb52:	ee70 7a40 	vsub.f32	s15, s0, s0
 800eb56:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800eb5a:	e7c5      	b.n	800eae8 <__ieee754_powf+0xa8>
 800eb5c:	2e01      	cmp	r6, #1
 800eb5e:	d1c3      	bne.n	800eae8 <__ieee754_powf+0xa8>
 800eb60:	eeb1 0a40 	vneg.f32	s0, s0
 800eb64:	e7c0      	b.n	800eae8 <__ieee754_powf+0xa8>
 800eb66:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 800eb6a:	3801      	subs	r0, #1
 800eb6c:	ea56 0300 	orrs.w	r3, r6, r0
 800eb70:	d104      	bne.n	800eb7c <__ieee754_powf+0x13c>
 800eb72:	ee38 8a48 	vsub.f32	s16, s16, s16
 800eb76:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800eb7a:	e7b5      	b.n	800eae8 <__ieee754_powf+0xa8>
 800eb7c:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 800eb80:	dd6b      	ble.n	800ec5a <__ieee754_powf+0x21a>
 800eb82:	4b99      	ldr	r3, [pc, #612]	; (800ede8 <__ieee754_powf+0x3a8>)
 800eb84:	429c      	cmp	r4, r3
 800eb86:	dc06      	bgt.n	800eb96 <__ieee754_powf+0x156>
 800eb88:	2d00      	cmp	r5, #0
 800eb8a:	daab      	bge.n	800eae4 <__ieee754_powf+0xa4>
 800eb8c:	ed9f 0a97 	vldr	s0, [pc, #604]	; 800edec <__ieee754_powf+0x3ac>
 800eb90:	ee20 0a00 	vmul.f32	s0, s0, s0
 800eb94:	e7a8      	b.n	800eae8 <__ieee754_powf+0xa8>
 800eb96:	4b96      	ldr	r3, [pc, #600]	; (800edf0 <__ieee754_powf+0x3b0>)
 800eb98:	429c      	cmp	r4, r3
 800eb9a:	dd02      	ble.n	800eba2 <__ieee754_powf+0x162>
 800eb9c:	2d00      	cmp	r5, #0
 800eb9e:	dcf5      	bgt.n	800eb8c <__ieee754_powf+0x14c>
 800eba0:	e7a0      	b.n	800eae4 <__ieee754_powf+0xa4>
 800eba2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800eba6:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ebaa:	eddf 6a92 	vldr	s13, [pc, #584]	; 800edf4 <__ieee754_powf+0x3b4>
 800ebae:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800ebb2:	eee0 6a67 	vfms.f32	s13, s0, s15
 800ebb6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800ebba:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800ebbe:	ee20 7a00 	vmul.f32	s14, s0, s0
 800ebc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ebc6:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 800edf8 <__ieee754_powf+0x3b8>
 800ebca:	ee67 7a67 	vnmul.f32	s15, s14, s15
 800ebce:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 800edfc <__ieee754_powf+0x3bc>
 800ebd2:	eee0 7a07 	vfma.f32	s15, s0, s14
 800ebd6:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800ee00 <__ieee754_powf+0x3c0>
 800ebda:	eef0 6a67 	vmov.f32	s13, s15
 800ebde:	eee0 6a07 	vfma.f32	s13, s0, s14
 800ebe2:	ee16 3a90 	vmov	r3, s13
 800ebe6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800ebea:	f023 030f 	bic.w	r3, r3, #15
 800ebee:	ee00 3a90 	vmov	s1, r3
 800ebf2:	eee0 0a47 	vfms.f32	s1, s0, s14
 800ebf6:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800ebfa:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 800ebfe:	f025 050f 	bic.w	r5, r5, #15
 800ec02:	ee07 5a10 	vmov	s14, r5
 800ec06:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800ec0a:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800ec0e:	ee07 3a90 	vmov	s15, r3
 800ec12:	eee7 0a27 	vfma.f32	s1, s14, s15
 800ec16:	3e01      	subs	r6, #1
 800ec18:	ea56 0200 	orrs.w	r2, r6, r0
 800ec1c:	ee07 5a10 	vmov	s14, r5
 800ec20:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ec24:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800ec28:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800ec2c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800ec30:	ee17 4a10 	vmov	r4, s14
 800ec34:	bf08      	it	eq
 800ec36:	eeb0 8a40 	vmoveq.f32	s16, s0
 800ec3a:	2c00      	cmp	r4, #0
 800ec3c:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800ec40:	f340 8184 	ble.w	800ef4c <__ieee754_powf+0x50c>
 800ec44:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 800ec48:	f340 80fc 	ble.w	800ee44 <__ieee754_powf+0x404>
 800ec4c:	eddf 7a67 	vldr	s15, [pc, #412]	; 800edec <__ieee754_powf+0x3ac>
 800ec50:	ee28 0a27 	vmul.f32	s0, s16, s15
 800ec54:	ee20 0a27 	vmul.f32	s0, s0, s15
 800ec58:	e746      	b.n	800eae8 <__ieee754_powf+0xa8>
 800ec5a:	f018 4fff 	tst.w	r8, #2139095040	; 0x7f800000
 800ec5e:	bf01      	itttt	eq
 800ec60:	eddf 7a68 	vldreq	s15, [pc, #416]	; 800ee04 <__ieee754_powf+0x3c4>
 800ec64:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800ec68:	f06f 0217 	mvneq.w	r2, #23
 800ec6c:	ee17 4a90 	vmoveq	r4, s15
 800ec70:	ea4f 53e4 	mov.w	r3, r4, asr #23
 800ec74:	bf18      	it	ne
 800ec76:	2200      	movne	r2, #0
 800ec78:	3b7f      	subs	r3, #127	; 0x7f
 800ec7a:	4413      	add	r3, r2
 800ec7c:	4a62      	ldr	r2, [pc, #392]	; (800ee08 <__ieee754_powf+0x3c8>)
 800ec7e:	f3c4 0416 	ubfx	r4, r4, #0, #23
 800ec82:	4294      	cmp	r4, r2
 800ec84:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 800ec88:	dd06      	ble.n	800ec98 <__ieee754_powf+0x258>
 800ec8a:	4a60      	ldr	r2, [pc, #384]	; (800ee0c <__ieee754_powf+0x3cc>)
 800ec8c:	4294      	cmp	r4, r2
 800ec8e:	f340 80a4 	ble.w	800edda <__ieee754_powf+0x39a>
 800ec92:	3301      	adds	r3, #1
 800ec94:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800ec98:	2400      	movs	r4, #0
 800ec9a:	4a5d      	ldr	r2, [pc, #372]	; (800ee10 <__ieee754_powf+0x3d0>)
 800ec9c:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800eca0:	ee07 1a90 	vmov	s15, r1
 800eca4:	ed92 7a00 	vldr	s14, [r2]
 800eca8:	4a5a      	ldr	r2, [pc, #360]	; (800ee14 <__ieee754_powf+0x3d4>)
 800ecaa:	ee37 6a27 	vadd.f32	s12, s14, s15
 800ecae:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800ecb2:	eec5 6a86 	vdiv.f32	s13, s11, s12
 800ecb6:	1049      	asrs	r1, r1, #1
 800ecb8:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800ecbc:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800ecc0:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 800ecc4:	ee37 5ac7 	vsub.f32	s10, s15, s14
 800ecc8:	ee06 1a10 	vmov	s12, r1
 800eccc:	ee65 4a26 	vmul.f32	s9, s10, s13
 800ecd0:	ee36 7a47 	vsub.f32	s14, s12, s14
 800ecd4:	ee14 7a90 	vmov	r7, s9
 800ecd8:	4017      	ands	r7, r2
 800ecda:	ee05 7a90 	vmov	s11, r7
 800ecde:	eea5 5ac6 	vfms.f32	s10, s11, s12
 800ece2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ece6:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 800ee18 <__ieee754_powf+0x3d8>
 800ecea:	eea5 5ae7 	vfms.f32	s10, s11, s15
 800ecee:	ee64 7aa4 	vmul.f32	s15, s9, s9
 800ecf2:	ee25 6a26 	vmul.f32	s12, s10, s13
 800ecf6:	eddf 6a49 	vldr	s13, [pc, #292]	; 800ee1c <__ieee754_powf+0x3dc>
 800ecfa:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800ecfe:	eddf 6a48 	vldr	s13, [pc, #288]	; 800ee20 <__ieee754_powf+0x3e0>
 800ed02:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ed06:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 800edf4 <__ieee754_powf+0x3b4>
 800ed0a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800ed0e:	eddf 6a45 	vldr	s13, [pc, #276]	; 800ee24 <__ieee754_powf+0x3e4>
 800ed12:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ed16:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800ee28 <__ieee754_powf+0x3e8>
 800ed1a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800ed1e:	ee74 6aa5 	vadd.f32	s13, s9, s11
 800ed22:	ee27 5aa7 	vmul.f32	s10, s15, s15
 800ed26:	ee66 6a86 	vmul.f32	s13, s13, s12
 800ed2a:	eee5 6a07 	vfma.f32	s13, s10, s14
 800ed2e:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 800ed32:	eef0 7a45 	vmov.f32	s15, s10
 800ed36:	eee5 7aa5 	vfma.f32	s15, s11, s11
 800ed3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ed3e:	ee17 1a90 	vmov	r1, s15
 800ed42:	4011      	ands	r1, r2
 800ed44:	ee07 1a90 	vmov	s15, r1
 800ed48:	ee37 7ac5 	vsub.f32	s14, s15, s10
 800ed4c:	eea5 7ae5 	vfms.f32	s14, s11, s11
 800ed50:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800ed54:	ee27 7a24 	vmul.f32	s14, s14, s9
 800ed58:	eea6 7a27 	vfma.f32	s14, s12, s15
 800ed5c:	eeb0 6a47 	vmov.f32	s12, s14
 800ed60:	eea5 6aa7 	vfma.f32	s12, s11, s15
 800ed64:	ee16 1a10 	vmov	r1, s12
 800ed68:	4011      	ands	r1, r2
 800ed6a:	ee06 1a90 	vmov	s13, r1
 800ed6e:	eee5 6ae7 	vfms.f32	s13, s11, s15
 800ed72:	eddf 7a2e 	vldr	s15, [pc, #184]	; 800ee2c <__ieee754_powf+0x3ec>
 800ed76:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800ee30 <__ieee754_powf+0x3f0>
 800ed7a:	ee37 7a66 	vsub.f32	s14, s14, s13
 800ed7e:	ee06 1a10 	vmov	s12, r1
 800ed82:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ed86:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800ee34 <__ieee754_powf+0x3f4>
 800ed8a:	492b      	ldr	r1, [pc, #172]	; (800ee38 <__ieee754_powf+0x3f8>)
 800ed8c:	eea6 7a27 	vfma.f32	s14, s12, s15
 800ed90:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ed94:	edd1 7a00 	vldr	s15, [r1]
 800ed98:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ed9c:	ee07 3a90 	vmov	s15, r3
 800eda0:	4b26      	ldr	r3, [pc, #152]	; (800ee3c <__ieee754_powf+0x3fc>)
 800eda2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800eda6:	eef0 7a47 	vmov.f32	s15, s14
 800edaa:	eee6 7a25 	vfma.f32	s15, s12, s11
 800edae:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800edb2:	edd4 0a00 	vldr	s1, [r4]
 800edb6:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800edba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800edbe:	ee17 3a90 	vmov	r3, s15
 800edc2:	4013      	ands	r3, r2
 800edc4:	ee07 3a90 	vmov	s15, r3
 800edc8:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800edcc:	ee76 6ae0 	vsub.f32	s13, s13, s1
 800edd0:	eee6 6a65 	vfms.f32	s13, s12, s11
 800edd4:	ee77 7a66 	vsub.f32	s15, s14, s13
 800edd8:	e70f      	b.n	800ebfa <__ieee754_powf+0x1ba>
 800edda:	2401      	movs	r4, #1
 800eddc:	e75d      	b.n	800ec9a <__ieee754_powf+0x25a>
 800edde:	bf00      	nop
 800ede0:	0800f48f 	.word	0x0800f48f
 800ede4:	00000000 	.word	0x00000000
 800ede8:	3f7ffff7 	.word	0x3f7ffff7
 800edec:	7149f2ca 	.word	0x7149f2ca
 800edf0:	3f800007 	.word	0x3f800007
 800edf4:	3eaaaaab 	.word	0x3eaaaaab
 800edf8:	3fb8aa3b 	.word	0x3fb8aa3b
 800edfc:	36eca570 	.word	0x36eca570
 800ee00:	3fb8aa00 	.word	0x3fb8aa00
 800ee04:	4b800000 	.word	0x4b800000
 800ee08:	001cc471 	.word	0x001cc471
 800ee0c:	005db3d6 	.word	0x005db3d6
 800ee10:	0800f60c 	.word	0x0800f60c
 800ee14:	fffff000 	.word	0xfffff000
 800ee18:	3e6c3255 	.word	0x3e6c3255
 800ee1c:	3e53f142 	.word	0x3e53f142
 800ee20:	3e8ba305 	.word	0x3e8ba305
 800ee24:	3edb6db7 	.word	0x3edb6db7
 800ee28:	3f19999a 	.word	0x3f19999a
 800ee2c:	3f76384f 	.word	0x3f76384f
 800ee30:	3f763800 	.word	0x3f763800
 800ee34:	369dc3a0 	.word	0x369dc3a0
 800ee38:	0800f61c 	.word	0x0800f61c
 800ee3c:	0800f614 	.word	0x0800f614
 800ee40:	3338aa3c 	.word	0x3338aa3c
 800ee44:	f040 8092 	bne.w	800ef6c <__ieee754_powf+0x52c>
 800ee48:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 800ee40 <__ieee754_powf+0x400>
 800ee4c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ee50:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800ee54:	eef4 6ac7 	vcmpe.f32	s13, s14
 800ee58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee5c:	f73f aef6 	bgt.w	800ec4c <__ieee754_powf+0x20c>
 800ee60:	15db      	asrs	r3, r3, #23
 800ee62:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 800ee66:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800ee6a:	4103      	asrs	r3, r0
 800ee6c:	4423      	add	r3, r4
 800ee6e:	4949      	ldr	r1, [pc, #292]	; (800ef94 <__ieee754_powf+0x554>)
 800ee70:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800ee74:	3a7f      	subs	r2, #127	; 0x7f
 800ee76:	4111      	asrs	r1, r2
 800ee78:	ea23 0101 	bic.w	r1, r3, r1
 800ee7c:	ee07 1a10 	vmov	s14, r1
 800ee80:	f3c3 0016 	ubfx	r0, r3, #0, #23
 800ee84:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800ee88:	f1c2 0217 	rsb	r2, r2, #23
 800ee8c:	4110      	asrs	r0, r2
 800ee8e:	2c00      	cmp	r4, #0
 800ee90:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ee94:	bfb8      	it	lt
 800ee96:	4240      	neglt	r0, r0
 800ee98:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800ee9c:	eddf 6a3e 	vldr	s13, [pc, #248]	; 800ef98 <__ieee754_powf+0x558>
 800eea0:	ee17 3a10 	vmov	r3, s14
 800eea4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800eea8:	f023 030f 	bic.w	r3, r3, #15
 800eeac:	ee07 3a10 	vmov	s14, r3
 800eeb0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800eeb4:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800eeb8:	eddf 7a38 	vldr	s15, [pc, #224]	; 800ef9c <__ieee754_powf+0x55c>
 800eebc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eec0:	eee0 7aa6 	vfma.f32	s15, s1, s13
 800eec4:	eddf 6a36 	vldr	s13, [pc, #216]	; 800efa0 <__ieee754_powf+0x560>
 800eec8:	eeb0 0a67 	vmov.f32	s0, s15
 800eecc:	eea7 0a26 	vfma.f32	s0, s14, s13
 800eed0:	eeb0 6a40 	vmov.f32	s12, s0
 800eed4:	eea7 6a66 	vfms.f32	s12, s14, s13
 800eed8:	ee20 7a00 	vmul.f32	s14, s0, s0
 800eedc:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800eee0:	eddf 6a30 	vldr	s13, [pc, #192]	; 800efa4 <__ieee754_powf+0x564>
 800eee4:	ed9f 6a30 	vldr	s12, [pc, #192]	; 800efa8 <__ieee754_powf+0x568>
 800eee8:	eea7 6a26 	vfma.f32	s12, s14, s13
 800eeec:	eddf 6a2f 	vldr	s13, [pc, #188]	; 800efac <__ieee754_powf+0x56c>
 800eef0:	eee6 6a07 	vfma.f32	s13, s12, s14
 800eef4:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 800efb0 <__ieee754_powf+0x570>
 800eef8:	eea6 6a87 	vfma.f32	s12, s13, s14
 800eefc:	eddf 6a2d 	vldr	s13, [pc, #180]	; 800efb4 <__ieee754_powf+0x574>
 800ef00:	eee6 6a07 	vfma.f32	s13, s12, s14
 800ef04:	eeb0 6a40 	vmov.f32	s12, s0
 800ef08:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800ef0c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800ef10:	eeb0 7a46 	vmov.f32	s14, s12
 800ef14:	ee77 6a66 	vsub.f32	s13, s14, s13
 800ef18:	ee20 6a06 	vmul.f32	s12, s0, s12
 800ef1c:	eee0 7a27 	vfma.f32	s15, s0, s15
 800ef20:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800ef24:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ef28:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800ef2c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ef30:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800ef34:	ee10 3a10 	vmov	r3, s0
 800ef38:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800ef3c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ef40:	da1a      	bge.n	800ef78 <__ieee754_powf+0x538>
 800ef42:	f000 f8b7 	bl	800f0b4 <scalbnf>
 800ef46:	ee20 0a08 	vmul.f32	s0, s0, s16
 800ef4a:	e5cd      	b.n	800eae8 <__ieee754_powf+0xa8>
 800ef4c:	4a1a      	ldr	r2, [pc, #104]	; (800efb8 <__ieee754_powf+0x578>)
 800ef4e:	4293      	cmp	r3, r2
 800ef50:	dd02      	ble.n	800ef58 <__ieee754_powf+0x518>
 800ef52:	eddf 7a1a 	vldr	s15, [pc, #104]	; 800efbc <__ieee754_powf+0x57c>
 800ef56:	e67b      	b.n	800ec50 <__ieee754_powf+0x210>
 800ef58:	d108      	bne.n	800ef6c <__ieee754_powf+0x52c>
 800ef5a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ef5e:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800ef62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef66:	f6ff af7b 	blt.w	800ee60 <__ieee754_powf+0x420>
 800ef6a:	e7f2      	b.n	800ef52 <__ieee754_powf+0x512>
 800ef6c:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800ef70:	f73f af76 	bgt.w	800ee60 <__ieee754_powf+0x420>
 800ef74:	2000      	movs	r0, #0
 800ef76:	e78f      	b.n	800ee98 <__ieee754_powf+0x458>
 800ef78:	ee00 3a10 	vmov	s0, r3
 800ef7c:	e7e3      	b.n	800ef46 <__ieee754_powf+0x506>
 800ef7e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800ef82:	e5b1      	b.n	800eae8 <__ieee754_powf+0xa8>
 800ef84:	eeb0 0a68 	vmov.f32	s0, s17
 800ef88:	e5ae      	b.n	800eae8 <__ieee754_powf+0xa8>
 800ef8a:	eeb0 0a48 	vmov.f32	s0, s16
 800ef8e:	e5ab      	b.n	800eae8 <__ieee754_powf+0xa8>
 800ef90:	2600      	movs	r6, #0
 800ef92:	e590      	b.n	800eab6 <__ieee754_powf+0x76>
 800ef94:	007fffff 	.word	0x007fffff
 800ef98:	3f317218 	.word	0x3f317218
 800ef9c:	35bfbe8c 	.word	0x35bfbe8c
 800efa0:	3f317200 	.word	0x3f317200
 800efa4:	3331bb4c 	.word	0x3331bb4c
 800efa8:	b5ddea0e 	.word	0xb5ddea0e
 800efac:	388ab355 	.word	0x388ab355
 800efb0:	bb360b61 	.word	0xbb360b61
 800efb4:	3e2aaaab 	.word	0x3e2aaaab
 800efb8:	43160000 	.word	0x43160000
 800efbc:	0da24260 	.word	0x0da24260

0800efc0 <__ieee754_sqrtf>:
 800efc0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800efc4:	4770      	bx	lr

0800efc6 <fabsf>:
 800efc6:	ee10 3a10 	vmov	r3, s0
 800efca:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800efce:	ee00 3a10 	vmov	s0, r3
 800efd2:	4770      	bx	lr

0800efd4 <finitef>:
 800efd4:	b082      	sub	sp, #8
 800efd6:	ed8d 0a01 	vstr	s0, [sp, #4]
 800efda:	9801      	ldr	r0, [sp, #4]
 800efdc:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800efe0:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800efe4:	bfac      	ite	ge
 800efe6:	2000      	movge	r0, #0
 800efe8:	2001      	movlt	r0, #1
 800efea:	b002      	add	sp, #8
 800efec:	4770      	bx	lr
	...

0800eff0 <nanf>:
 800eff0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800eff8 <nanf+0x8>
 800eff4:	4770      	bx	lr
 800eff6:	bf00      	nop
 800eff8:	7fc00000 	.word	0x7fc00000

0800effc <rintf>:
 800effc:	ee10 2a10 	vmov	r2, s0
 800f000:	b513      	push	{r0, r1, r4, lr}
 800f002:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800f006:	397f      	subs	r1, #127	; 0x7f
 800f008:	2916      	cmp	r1, #22
 800f00a:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800f00e:	dc47      	bgt.n	800f0a0 <rintf+0xa4>
 800f010:	b32b      	cbz	r3, 800f05e <rintf+0x62>
 800f012:	2900      	cmp	r1, #0
 800f014:	ee10 3a10 	vmov	r3, s0
 800f018:	ea4f 70d2 	mov.w	r0, r2, lsr #31
 800f01c:	da21      	bge.n	800f062 <rintf+0x66>
 800f01e:	f3c2 0316 	ubfx	r3, r2, #0, #23
 800f022:	425b      	negs	r3, r3
 800f024:	4921      	ldr	r1, [pc, #132]	; (800f0ac <rintf+0xb0>)
 800f026:	0a5b      	lsrs	r3, r3, #9
 800f028:	0d12      	lsrs	r2, r2, #20
 800f02a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f02e:	0512      	lsls	r2, r2, #20
 800f030:	4313      	orrs	r3, r2
 800f032:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800f036:	ee07 3a90 	vmov	s15, r3
 800f03a:	edd1 6a00 	vldr	s13, [r1]
 800f03e:	ee36 7aa7 	vadd.f32	s14, s13, s15
 800f042:	ed8d 7a01 	vstr	s14, [sp, #4]
 800f046:	eddd 7a01 	vldr	s15, [sp, #4]
 800f04a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f04e:	ee17 3a90 	vmov	r3, s15
 800f052:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f056:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 800f05a:	ee00 3a10 	vmov	s0, r3
 800f05e:	b002      	add	sp, #8
 800f060:	bd10      	pop	{r4, pc}
 800f062:	4a13      	ldr	r2, [pc, #76]	; (800f0b0 <rintf+0xb4>)
 800f064:	410a      	asrs	r2, r1
 800f066:	4213      	tst	r3, r2
 800f068:	d0f9      	beq.n	800f05e <rintf+0x62>
 800f06a:	0854      	lsrs	r4, r2, #1
 800f06c:	ea13 0252 	ands.w	r2, r3, r2, lsr #1
 800f070:	d006      	beq.n	800f080 <rintf+0x84>
 800f072:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800f076:	ea23 0304 	bic.w	r3, r3, r4
 800f07a:	fa42 f101 	asr.w	r1, r2, r1
 800f07e:	430b      	orrs	r3, r1
 800f080:	4a0a      	ldr	r2, [pc, #40]	; (800f0ac <rintf+0xb0>)
 800f082:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800f086:	ed90 7a00 	vldr	s14, [r0]
 800f08a:	ee07 3a90 	vmov	s15, r3
 800f08e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f092:	edcd 7a01 	vstr	s15, [sp, #4]
 800f096:	ed9d 0a01 	vldr	s0, [sp, #4]
 800f09a:	ee30 0a47 	vsub.f32	s0, s0, s14
 800f09e:	e7de      	b.n	800f05e <rintf+0x62>
 800f0a0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800f0a4:	d3db      	bcc.n	800f05e <rintf+0x62>
 800f0a6:	ee30 0a00 	vadd.f32	s0, s0, s0
 800f0aa:	e7d8      	b.n	800f05e <rintf+0x62>
 800f0ac:	0800f624 	.word	0x0800f624
 800f0b0:	007fffff 	.word	0x007fffff

0800f0b4 <scalbnf>:
 800f0b4:	ee10 3a10 	vmov	r3, s0
 800f0b8:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800f0bc:	d025      	beq.n	800f10a <scalbnf+0x56>
 800f0be:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800f0c2:	d302      	bcc.n	800f0ca <scalbnf+0x16>
 800f0c4:	ee30 0a00 	vadd.f32	s0, s0, s0
 800f0c8:	4770      	bx	lr
 800f0ca:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800f0ce:	d122      	bne.n	800f116 <scalbnf+0x62>
 800f0d0:	4b2a      	ldr	r3, [pc, #168]	; (800f17c <scalbnf+0xc8>)
 800f0d2:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800f180 <scalbnf+0xcc>
 800f0d6:	4298      	cmp	r0, r3
 800f0d8:	ee20 0a27 	vmul.f32	s0, s0, s15
 800f0dc:	db16      	blt.n	800f10c <scalbnf+0x58>
 800f0de:	ee10 3a10 	vmov	r3, s0
 800f0e2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800f0e6:	3a19      	subs	r2, #25
 800f0e8:	4402      	add	r2, r0
 800f0ea:	2afe      	cmp	r2, #254	; 0xfe
 800f0ec:	dd15      	ble.n	800f11a <scalbnf+0x66>
 800f0ee:	ee10 3a10 	vmov	r3, s0
 800f0f2:	eddf 7a24 	vldr	s15, [pc, #144]	; 800f184 <scalbnf+0xd0>
 800f0f6:	eddf 6a24 	vldr	s13, [pc, #144]	; 800f188 <scalbnf+0xd4>
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	eeb0 7a67 	vmov.f32	s14, s15
 800f100:	bfb8      	it	lt
 800f102:	eef0 7a66 	vmovlt.f32	s15, s13
 800f106:	ee27 0a27 	vmul.f32	s0, s14, s15
 800f10a:	4770      	bx	lr
 800f10c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800f18c <scalbnf+0xd8>
 800f110:	ee20 0a27 	vmul.f32	s0, s0, s15
 800f114:	4770      	bx	lr
 800f116:	0dd2      	lsrs	r2, r2, #23
 800f118:	e7e6      	b.n	800f0e8 <scalbnf+0x34>
 800f11a:	2a00      	cmp	r2, #0
 800f11c:	dd06      	ble.n	800f12c <scalbnf+0x78>
 800f11e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f122:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800f126:	ee00 3a10 	vmov	s0, r3
 800f12a:	4770      	bx	lr
 800f12c:	f112 0f16 	cmn.w	r2, #22
 800f130:	da1a      	bge.n	800f168 <scalbnf+0xb4>
 800f132:	f24c 3350 	movw	r3, #50000	; 0xc350
 800f136:	4298      	cmp	r0, r3
 800f138:	ee10 3a10 	vmov	r3, s0
 800f13c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f140:	dd0a      	ble.n	800f158 <scalbnf+0xa4>
 800f142:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800f184 <scalbnf+0xd0>
 800f146:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800f188 <scalbnf+0xd4>
 800f14a:	eef0 7a40 	vmov.f32	s15, s0
 800f14e:	2b00      	cmp	r3, #0
 800f150:	bf18      	it	ne
 800f152:	eeb0 0a47 	vmovne.f32	s0, s14
 800f156:	e7db      	b.n	800f110 <scalbnf+0x5c>
 800f158:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800f18c <scalbnf+0xd8>
 800f15c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800f190 <scalbnf+0xdc>
 800f160:	eef0 7a40 	vmov.f32	s15, s0
 800f164:	2b00      	cmp	r3, #0
 800f166:	e7f3      	b.n	800f150 <scalbnf+0x9c>
 800f168:	3219      	adds	r2, #25
 800f16a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f16e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800f172:	eddf 7a08 	vldr	s15, [pc, #32]	; 800f194 <scalbnf+0xe0>
 800f176:	ee07 3a10 	vmov	s14, r3
 800f17a:	e7c4      	b.n	800f106 <scalbnf+0x52>
 800f17c:	ffff3cb0 	.word	0xffff3cb0
 800f180:	4c000000 	.word	0x4c000000
 800f184:	7149f2ca 	.word	0x7149f2ca
 800f188:	f149f2ca 	.word	0xf149f2ca
 800f18c:	0da24260 	.word	0x0da24260
 800f190:	8da24260 	.word	0x8da24260
 800f194:	33000000 	.word	0x33000000

0800f198 <_init>:
 800f198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f19a:	bf00      	nop
 800f19c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f19e:	bc08      	pop	{r3}
 800f1a0:	469e      	mov	lr, r3
 800f1a2:	4770      	bx	lr

0800f1a4 <_fini>:
 800f1a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1a6:	bf00      	nop
 800f1a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f1aa:	bc08      	pop	{r3}
 800f1ac:	469e      	mov	lr, r3
 800f1ae:	4770      	bx	lr
